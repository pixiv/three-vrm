/*!
 * @pixiv/three-vrm v2.0.1
 * VRM file loader for three.js.
 *
 * Copyright (c) 2019-2023 pixiv Inc.
 * @pixiv/three-vrm is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */
import * as THREE from 'three';
import { BufferAttribute } from 'three';

/*!
 * @pixiv/three-vrm-core v2.0.1
 * The implementation of core features of VRM, for @pixiv/three-vrm
 *
 * Copyright (c) 2020-2023 pixiv Inc.
 * @pixiv/three-vrm-core is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */

// animationMixer の監視対象は、Scene の中に入っている必要がある。
// そのため、表示オブジェクトではないけれど、Object3D を継承して Scene に投入できるようにする。
class VRMExpression extends THREE.Object3D {
    /**
     * A value represents how much it should override blink expressions.
     * `0.0` == no override at all, `1.0` == completely block the expressions.
     */
    get overrideBlinkAmount() {
        if (this.overrideBlink === 'block') {
            return 0.0 < this.weight ? 1.0 : 0.0;
        }
        else if (this.overrideBlink === 'blend') {
            return this.weight;
        }
        else {
            return 0.0;
        }
    }
    /**
     * A value represents how much it should override lookAt expressions.
     * `0.0` == no override at all, `1.0` == completely block the expressions.
     */
    get overrideLookAtAmount() {
        if (this.overrideLookAt === 'block') {
            return 0.0 < this.weight ? 1.0 : 0.0;
        }
        else if (this.overrideLookAt === 'blend') {
            return this.weight;
        }
        else {
            return 0.0;
        }
    }
    /**
     * A value represents how much it should override mouth expressions.
     * `0.0` == no override at all, `1.0` == completely block the expressions.
     */
    get overrideMouthAmount() {
        if (this.overrideMouth === 'block') {
            return 0.0 < this.weight ? 1.0 : 0.0;
        }
        else if (this.overrideMouth === 'blend') {
            return this.weight;
        }
        else {
            return 0.0;
        }
    }
    constructor(expressionName) {
        super();
        /**
         * The current weight of the expression.
         */
        this.weight = 0.0;
        /**
         * Interpret values greater than 0.5 as 1.0, ortherwise 0.0.
         */
        this.isBinary = false;
        /**
         * Specify how the expression overrides blink expressions.
         */
        this.overrideBlink = 'none';
        /**
         * Specify how the expression overrides lookAt expressions.
         */
        this.overrideLookAt = 'none';
        /**
         * Specify how the expression overrides mouth expressions.
         */
        this.overrideMouth = 'none';
        this._binds = [];
        this.name = `VRMExpression_${expressionName}`;
        this.expressionName = expressionName;
        // traverse 時の救済手段として Object3D ではないことを明示しておく
        this.type = 'VRMExpression';
        // 表示目的のオブジェクトではないので、負荷軽減のために visible を false にしておく。
        // これにより、このインスタンスに対する毎フレームの matrix 自動計算を省略できる。
        this.visible = false;
    }
    addBind(bind) {
        this._binds.push(bind);
    }
    /**
     * Apply weight to every assigned blend shapes.
     * Should be called every frame.
     */
    applyWeight(options) {
        var _a;
        let actualWeight = this.isBinary ? (this.weight <= 0.5 ? 0.0 : 1.0) : this.weight;
        actualWeight *= (_a = options === null || options === void 0 ? void 0 : options.multiplier) !== null && _a !== void 0 ? _a : 1.0;
        this._binds.forEach((bind) => bind.applyWeight(actualWeight));
    }
    /**
     * Clear previously assigned blend shapes.
     */
    clearAppliedWeight() {
        this._binds.forEach((bind) => bind.clearAppliedWeight());
    }
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter$6(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function extractPrimitivesInternal(gltf, nodeIndex, node) {
    var _a, _b;
    const json = gltf.parser.json;
    /**
     * Let's list up every possible patterns that parsed gltf nodes with a mesh can have,,,
     *
     * "*" indicates that those meshes should be listed up using this function
     *
     * ### A node with a (mesh, a signle primitive)
     *
     * - `THREE.Mesh`: The only primitive of the mesh *
     *
     * ### A node with a (mesh, multiple primitives)
     *
     * - `THREE.Group`: The root of the mesh
     *   - `THREE.Mesh`: A primitive of the mesh *
     *   - `THREE.Mesh`: A primitive of the mesh (2) *
     *
     * ### A node with a (mesh, multiple primitives) AND (a child with a mesh, a single primitive)
     *
     * - `THREE.Group`: The root of the mesh
     *   - `THREE.Mesh`: A primitive of the mesh *
     *   - `THREE.Mesh`: A primitive of the mesh (2) *
     *   - `THREE.Mesh`: A primitive of a MESH OF THE CHILD
     *
     * ### A node with a (mesh, multiple primitives) AND (a child with a mesh, multiple primitives)
     *
     * - `THREE.Group`: The root of the mesh
     *   - `THREE.Mesh`: A primitive of the mesh *
     *   - `THREE.Mesh`: A primitive of the mesh (2) *
     *   - `THREE.Group`: The root of a MESH OF THE CHILD
     *     - `THREE.Mesh`: A primitive of the mesh of the child
     *     - `THREE.Mesh`: A primitive of the mesh of the child (2)
     *
     * ### A node with a (mesh, multiple primitives) BUT the node is a bone
     *
     * - `THREE.Bone`: The root of the node, as a bone
     *   - `THREE.Group`: The root of the mesh
     *     - `THREE.Mesh`: A primitive of the mesh *
     *     - `THREE.Mesh`: A primitive of the mesh (2) *
     *
     * ### A node with a (mesh, multiple primitives) AND (a child with a mesh, multiple primitives) BUT the node is a bone
     *
     * - `THREE.Bone`: The root of the node, as a bone
     *   - `THREE.Group`: The root of the mesh
     *     - `THREE.Mesh`: A primitive of the mesh *
     *     - `THREE.Mesh`: A primitive of the mesh (2) *
     *   - `THREE.Group`: The root of a MESH OF THE CHILD
     *     - `THREE.Mesh`: A primitive of the mesh of the child
     *     - `THREE.Mesh`: A primitive of the mesh of the child (2)
     *
     * ...I will take a strategy that traverses the root of the node and take first (primitiveCount) meshes.
     */
    // Make sure that the node has a mesh
    const schemaNode = (_a = json.nodes) === null || _a === void 0 ? void 0 : _a[nodeIndex];
    if (schemaNode == null) {
        console.warn(`extractPrimitivesInternal: Attempt to use nodes[${nodeIndex}] of glTF but the node doesn't exist`);
        return null;
    }
    const meshIndex = schemaNode.mesh;
    if (meshIndex == null) {
        return null;
    }
    // How many primitives the mesh has?
    const schemaMesh = (_b = json.meshes) === null || _b === void 0 ? void 0 : _b[meshIndex];
    if (schemaMesh == null) {
        console.warn(`extractPrimitivesInternal: Attempt to use meshes[${meshIndex}] of glTF but the mesh doesn't exist`);
        return null;
    }
    const primitiveCount = schemaMesh.primitives.length;
    // Traverse the node and take first (primitiveCount) meshes
    const primitives = [];
    node.traverse((object) => {
        if (primitives.length < primitiveCount) {
            if (object.isMesh) {
                primitives.push(object);
            }
        }
    });
    return primitives;
}
/**
 * Extract primitives ( `THREE.Mesh[]` ) of a node from a loaded GLTF.
 * The main purpose of this function is to distinguish primitives and children from a node that has both meshes and children.
 *
 * It utilizes the behavior that GLTFLoader adds mesh primitives to the node object ( `THREE.Group` ) first then adds its children.
 *
 * @param gltf A GLTF object taken from GLTFLoader
 * @param nodeIndex The index of the node
 */
function gltfExtractPrimitivesFromNode(gltf, nodeIndex) {
    return __awaiter$6(this, void 0, void 0, function* () {
        const node = yield gltf.parser.getDependency('node', nodeIndex);
        return extractPrimitivesInternal(gltf, nodeIndex, node);
    });
}
/**
 * Extract primitives ( `THREE.Mesh[]` ) of nodes from a loaded GLTF.
 * See {@link gltfExtractPrimitivesFromNode} for more details.
 *
 * It returns a map from node index to extraction result.
 * If a node does not have a mesh, the entry for the node will not be put in the returning map.
 *
 * @param gltf A GLTF object taken from GLTFLoader
 */
function gltfExtractPrimitivesFromNodes(gltf) {
    return __awaiter$6(this, void 0, void 0, function* () {
        const nodes = yield gltf.parser.getDependencies('node');
        const map = new Map();
        nodes.forEach((node, index) => {
            const result = extractPrimitivesInternal(gltf, index, node);
            if (result != null) {
                map.set(index, result);
            }
        });
        return map;
    });
}

/**
 * Get a material definition index of glTF from associated material.
 * It's basically a comat code between Three.js r133 or above and previous versions.
 * @param parser GLTFParser
 * @param material A material of gltf
 * @returns Material definition index of glTF
 */
function gltfGetAssociatedMaterialIndex(parser, material) {
    var _a, _b;
    const threeRevision = parseInt(THREE.REVISION, 10);
    let index = null;
    if (threeRevision >= 133) {
        index = (_b = (_a = parser.associations.get(material)) === null || _a === void 0 ? void 0 : _a.materials) !== null && _b !== void 0 ? _b : null;
    }
    else {
        const associations = parser.associations;
        const reference = associations.get(material);
        if ((reference === null || reference === void 0 ? void 0 : reference.type) === 'materials') {
            index = reference.index;
        }
    }
    return index;
}

/* eslint-disable @typescript-eslint/naming-convention */
const VRMExpressionPresetName = {
    Aa: 'aa',
    Ih: 'ih',
    Ou: 'ou',
    Ee: 'ee',
    Oh: 'oh',
    Blink: 'blink',
    Happy: 'happy',
    Angry: 'angry',
    Sad: 'sad',
    Relaxed: 'relaxed',
    LookUp: 'lookUp',
    Surprised: 'surprised',
    LookDown: 'lookDown',
    LookLeft: 'lookLeft',
    LookRight: 'lookRight',
    BlinkLeft: 'blinkLeft',
    BlinkRight: 'blinkRight',
    Neutral: 'neutral',
};

/**
 * Clamp the input value within [0.0 - 1.0].
 *
 * @param value The input value
 */
function saturate(value) {
    return Math.max(Math.min(value, 1.0), 0.0);
}

class VRMExpressionManager {
    get expressions() {
        return this._expressions.concat();
    }
    get expressionMap() {
        return Object.assign({}, this._expressionMap);
    }
    /**
     * A map from name to expression, but excluding custom expressions.
     */
    get presetExpressionMap() {
        const result = {};
        const presetNameSet = new Set(Object.values(VRMExpressionPresetName));
        Object.entries(this._expressionMap).forEach(([name, expression]) => {
            if (presetNameSet.has(name)) {
                result[name] = expression;
            }
        });
        return result;
    }
    /**
     * A map from name to expression, but excluding preset expressions.
     */
    get customExpressionMap() {
        const result = {};
        const presetNameSet = new Set(Object.values(VRMExpressionPresetName));
        Object.entries(this._expressionMap).forEach(([name, expression]) => {
            if (!presetNameSet.has(name)) {
                result[name] = expression;
            }
        });
        return result;
    }
    /**
     * Create a new {@link VRMExpressionManager}.
     */
    constructor() {
        /**
         * A set of name or preset name of expressions that will be overridden by {@link VRMExpression.overrideBlink}.
         */
        this.blinkExpressionNames = ['blink', 'blinkLeft', 'blinkRight'];
        /**
         * A set of name or preset name of expressions that will be overridden by {@link VRMExpression.overrideLookAt}.
         */
        this.lookAtExpressionNames = ['lookLeft', 'lookRight', 'lookUp', 'lookDown'];
        /**
         * A set of name or preset name of expressions that will be overridden by {@link VRMExpression.overrideMouth}.
         */
        this.mouthExpressionNames = ['aa', 'ee', 'ih', 'oh', 'ou'];
        /**
         * A set of {@link VRMExpression}.
         * When you want to register expressions, use {@link registerExpression}
         */
        this._expressions = [];
        /**
         * A map from name to expression.
         */
        this._expressionMap = {};
        // do nothing
    }
    /**
     * Copy the given {@link VRMExpressionManager} into this one.
     * @param source The {@link VRMExpressionManager} you want to copy
     * @returns this
     */
    copy(source) {
        // first unregister all the expression it has
        const expressions = this._expressions.concat();
        expressions.forEach((expression) => {
            this.unregisterExpression(expression);
        });
        // then register all the expression of the source
        source._expressions.forEach((expression) => {
            this.registerExpression(expression);
        });
        // copy remaining members
        this.blinkExpressionNames = source.blinkExpressionNames.concat();
        this.lookAtExpressionNames = source.lookAtExpressionNames.concat();
        this.mouthExpressionNames = source.mouthExpressionNames.concat();
        return this;
    }
    /**
     * Returns a clone of this {@link VRMExpressionManager}.
     * @returns Copied {@link VRMExpressionManager}
     */
    clone() {
        return new VRMExpressionManager().copy(this);
    }
    /**
     * Return a registered expression.
     * If it cannot find an expression, it will return `null` instead.
     *
     * @param name Name or preset name of the expression
     */
    getExpression(name) {
        var _a;
        return (_a = this._expressionMap[name]) !== null && _a !== void 0 ? _a : null;
    }
    /**
     * Register an expression.
     *
     * @param expression {@link VRMExpression} that describes the expression
     */
    registerExpression(expression) {
        this._expressions.push(expression);
        this._expressionMap[expression.expressionName] = expression;
    }
    /**
     * Unregister an expression.
     *
     * @param expression The expression you want to unregister
     */
    unregisterExpression(expression) {
        const index = this._expressions.indexOf(expression);
        if (index === -1) {
            console.warn('VRMExpressionManager: The specified expressions is not registered');
        }
        this._expressions.splice(index, 1);
        delete this._expressionMap[expression.expressionName];
    }
    /**
     * Get the current weight of the specified expression.
     * If it doesn't have an expression of given name, it will return `null` instead.
     *
     * @param name Name of the expression
     */
    getValue(name) {
        var _a;
        const expression = this.getExpression(name);
        return (_a = expression === null || expression === void 0 ? void 0 : expression.weight) !== null && _a !== void 0 ? _a : null;
    }
    /**
     * Set a weight to the specified expression.
     *
     * @param name Name of the expression
     * @param weight Weight
     */
    setValue(name, weight) {
        const expression = this.getExpression(name);
        if (expression) {
            expression.weight = saturate(weight);
        }
    }
    /**
     * Get a track name of specified expression.
     * This track name is needed to manipulate its expression via keyframe animations.
     *
     * @example Manipulate an expression using keyframe animation
     * ```js
     * const trackName = vrm.expressionManager.getExpressionTrackName( 'blink' );
     * const track = new THREE.NumberKeyframeTrack(
     *   name,
     *   [ 0.0, 0.5, 1.0 ], // times
     *   [ 0.0, 1.0, 0.0 ] // values
     * );
     *
     * const clip = new THREE.AnimationClip(
     *   'blink', // name
     *   1.0, // duration
     *   [ track ] // tracks
     * );
     *
     * const mixer = new THREE.AnimationMixer( vrm.scene );
     * const action = mixer.clipAction( clip );
     * action.play();
     * ```
     *
     * @param name Name of the expression
     */
    getExpressionTrackName(name) {
        const expression = this.getExpression(name);
        return expression ? `${expression.name}.weight` : null;
    }
    /**
     * Update every expressions.
     */
    update() {
        // see how much we should override certain expressions
        const weightMultipliers = this._calculateWeightMultipliers();
        // reset expression binds first
        this._expressions.forEach((expression) => {
            expression.clearAppliedWeight();
        });
        // then apply binds
        this._expressions.forEach((expression) => {
            let multiplier = 1.0;
            const name = expression.expressionName;
            if (this.blinkExpressionNames.indexOf(name) !== -1) {
                multiplier *= weightMultipliers.blink;
            }
            if (this.lookAtExpressionNames.indexOf(name) !== -1) {
                multiplier *= weightMultipliers.lookAt;
            }
            if (this.mouthExpressionNames.indexOf(name) !== -1) {
                multiplier *= weightMultipliers.mouth;
            }
            expression.applyWeight({ multiplier });
        });
    }
    /**
     * Calculate sum of override amounts to see how much we should multiply weights of certain expressions.
     */
    _calculateWeightMultipliers() {
        let blink = 1.0;
        let lookAt = 1.0;
        let mouth = 1.0;
        this._expressions.forEach((expression) => {
            blink -= expression.overrideBlinkAmount;
            lookAt -= expression.overrideLookAtAmount;
            mouth -= expression.overrideMouthAmount;
        });
        blink = Math.max(0.0, blink);
        lookAt = Math.max(0.0, lookAt);
        mouth = Math.max(0.0, mouth);
        return { blink, lookAt, mouth };
    }
}

/* eslint-disable @typescript-eslint/naming-convention */
const VRMExpressionMaterialColorType = {
    Color: 'color',
    EmissionColor: 'emissionColor',
    ShadeColor: 'shadeColor',
    MatcapColor: 'matcapColor',
    RimColor: 'rimColor',
    OutlineColor: 'outlineColor',
};
const v0ExpressionMaterialColorMap = {
    _Color: VRMExpressionMaterialColorType.Color,
    _EmissionColor: VRMExpressionMaterialColorType.EmissionColor,
    _ShadeColor: VRMExpressionMaterialColorType.ShadeColor,
    _RimColor: VRMExpressionMaterialColorType.RimColor,
    _OutlineColor: VRMExpressionMaterialColorType.OutlineColor,
};

const _color = new THREE.Color();
/**
 * A bind of expression influences to a material color.
 */
class VRMExpressionMaterialColorBind {
    constructor({ material, type, targetValue, }) {
        var _a, _b, _c;
        this.material = material;
        this.type = type;
        this.targetValue = targetValue;
        // init property name
        const propertyNameMap = (_a = Object.entries(VRMExpressionMaterialColorBind._propertyNameMapMap).find(([distinguisher]) => {
            return material[distinguisher] === true;
        })) === null || _a === void 0 ? void 0 : _a[1];
        const propertyName = (_b = propertyNameMap === null || propertyNameMap === void 0 ? void 0 : propertyNameMap[type]) !== null && _b !== void 0 ? _b : null;
        if (propertyName == null) {
            console.warn(`Tried to add a material color bind to the material ${(_c = material.name) !== null && _c !== void 0 ? _c : '(no name)'}, the type ${type} but the material or the type is not supported.`);
            this._state = null;
        }
        else {
            const target = material[propertyName];
            const initialValue = target.clone();
            // 負の値を保持するためにColor.subを使わずに差分を計算する
            const deltaValue = new THREE.Color(targetValue.r - initialValue.r, targetValue.g - initialValue.g, targetValue.b - initialValue.b);
            this._state = {
                propertyName,
                initialValue,
                deltaValue,
            };
        }
    }
    applyWeight(weight) {
        if (this._state == null) {
            // warning is already emitted in constructor
            return;
        }
        const { propertyName, deltaValue } = this._state;
        const target = this.material[propertyName];
        if (target === undefined) {
            return;
        } // TODO: we should kick this at `addMaterialValue`
        target.add(_color.copy(deltaValue).multiplyScalar(weight));
        if (typeof this.material.shouldApplyUniforms === 'boolean') {
            this.material.shouldApplyUniforms = true;
        }
    }
    clearAppliedWeight() {
        if (this._state == null) {
            // warning is already emitted in constructor
            return;
        }
        const { propertyName, initialValue } = this._state;
        const target = this.material[propertyName];
        if (target === undefined) {
            return;
        } // TODO: we should kick this at `addMaterialValue`
        target.copy(initialValue);
        if (typeof this.material.shouldApplyUniforms === 'boolean') {
            this.material.shouldApplyUniforms = true;
        }
    }
}
/**
 * Mapping of property names from VRMC/materialColorBinds.type to three.js/Material.
 */
VRMExpressionMaterialColorBind._propertyNameMapMap = {
    isMeshStandardMaterial: {
        color: 'color',
        emissionColor: 'emissive',
    },
    isMeshBasicMaterial: {
        color: 'color',
    },
    isMToonMaterial: {
        color: 'color',
        emissionColor: 'emissive',
        outlineColor: 'outlineColorFactor',
        matcapColor: 'matcapFactor',
        rimColor: 'parametricRimColorFactor',
        shadeColor: 'shadeColorFactor',
    },
};

/**
 * A bind of {@link VRMExpression} influences to morph targets.
 */
class VRMExpressionMorphTargetBind {
    constructor({ primitives, index, weight, }) {
        this.primitives = primitives;
        this.index = index;
        this.weight = weight;
    }
    applyWeight(weight) {
        this.primitives.forEach((mesh) => {
            var _a;
            if (((_a = mesh.morphTargetInfluences) === null || _a === void 0 ? void 0 : _a[this.index]) != null) {
                mesh.morphTargetInfluences[this.index] += this.weight * weight;
            }
        });
    }
    clearAppliedWeight() {
        this.primitives.forEach((mesh) => {
            var _a;
            if (((_a = mesh.morphTargetInfluences) === null || _a === void 0 ? void 0 : _a[this.index]) != null) {
                mesh.morphTargetInfluences[this.index] = 0.0;
            }
        });
    }
}

const _v2 = new THREE.Vector2();
/**
 * A bind of expression influences to texture transforms.
 */
class VRMExpressionTextureTransformBind {
    constructor({ material, scale, offset, }) {
        var _a, _b;
        this.material = material;
        this.scale = scale;
        this.offset = offset;
        const propertyNames = (_a = Object.entries(VRMExpressionTextureTransformBind._propertyNamesMap).find(([distinguisher]) => {
            return material[distinguisher] === true;
        })) === null || _a === void 0 ? void 0 : _a[1];
        if (propertyNames == null) {
            console.warn(`Tried to add a texture transform bind to the material ${(_b = material.name) !== null && _b !== void 0 ? _b : '(no name)'} but the material is not supported.`);
            this._properties = [];
        }
        else {
            this._properties = [];
            propertyNames.forEach((propertyName) => {
                var _a;
                const texture = (_a = material[propertyName]) === null || _a === void 0 ? void 0 : _a.clone();
                if (!texture) {
                    return null;
                }
                material[propertyName] = texture; // because the texture is cloned
                const initialOffset = texture.offset.clone();
                const initialScale = texture.repeat.clone();
                const deltaOffset = offset.clone().sub(initialOffset);
                const deltaScale = scale.clone().sub(initialScale);
                this._properties.push({
                    name: propertyName,
                    initialOffset,
                    deltaOffset,
                    initialScale,
                    deltaScale,
                });
            });
        }
    }
    applyWeight(weight) {
        this._properties.forEach((property) => {
            const target = this.material[property.name];
            if (target === undefined) {
                return;
            } // TODO: we should kick this at `addMaterialValue`
            target.offset.add(_v2.copy(property.deltaOffset).multiplyScalar(weight));
            target.repeat.add(_v2.copy(property.deltaScale).multiplyScalar(weight));
            target.needsUpdate = true;
        });
    }
    clearAppliedWeight() {
        this._properties.forEach((property) => {
            const target = this.material[property.name];
            if (target === undefined) {
                return;
            } // TODO: we should kick this at `addMaterialValue`
            target.offset.copy(property.initialOffset);
            target.repeat.copy(property.initialScale);
            target.needsUpdate = true;
        });
    }
}
VRMExpressionTextureTransformBind._propertyNamesMap = {
    isMeshStandardMaterial: [
        'map',
        'emissiveMap',
        'bumpMap',
        'normalMap',
        'displacementMap',
        'roughnessMap',
        'metalnessMap',
        'alphaMap',
    ],
    isMeshBasicMaterial: ['map', 'specularMap', 'alphaMap'],
    isMToonMaterial: [
        'map',
        'normalMap',
        'emissiveMap',
        'shadeMultiplyTexture',
        'rimMultiplyTexture',
        'outlineWidthMultiplyTexture',
        'uvAnimationMaskTexture',
    ],
};

/**
 * Possible spec versions it recognizes.
 */
const POSSIBLE_SPEC_VERSIONS$4 = new Set(['1.0', '1.0-beta']);
/**
 * A plugin of GLTFLoader that imports a {@link VRMExpressionManager} from a VRM extension of a GLTF.
 */
class VRMExpressionLoaderPlugin {
    get name() {
        // We should use the extension name instead but we have multiple plugins for an extension...
        return 'VRMExpressionLoaderPlugin';
    }
    constructor(parser) {
        this.parser = parser;
    }
    afterRoot(gltf) {
        return __awaiter$6(this, void 0, void 0, function* () {
            gltf.userData.vrmExpressionManager = yield this._import(gltf);
        });
    }
    /**
     * Import a {@link VRMExpressionManager} from a VRM.
     *
     * @param gltf A parsed result of GLTF taken from GLTFLoader
     */
    _import(gltf) {
        return __awaiter$6(this, void 0, void 0, function* () {
            const v1Result = yield this._v1Import(gltf);
            if (v1Result) {
                return v1Result;
            }
            const v0Result = yield this._v0Import(gltf);
            if (v0Result) {
                return v0Result;
            }
            return null;
        });
    }
    _v1Import(gltf) {
        var _a, _b;
        return __awaiter$6(this, void 0, void 0, function* () {
            const json = this.parser.json;
            // early abort if it doesn't use vrm
            const isVRMUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf('VRMC_vrm')) !== -1;
            if (!isVRMUsed) {
                return null;
            }
            const extension = (_b = json.extensions) === null || _b === void 0 ? void 0 : _b['VRMC_vrm'];
            if (!extension) {
                return null;
            }
            const specVersion = extension.specVersion;
            if (!POSSIBLE_SPEC_VERSIONS$4.has(specVersion)) {
                console.warn(`VRMExpressionLoaderPlugin: Unknown VRMC_vrm specVersion "${specVersion}"`);
                return null;
            }
            const schemaExpressions = extension.expressions;
            if (!schemaExpressions) {
                return null;
            }
            // list expressions
            const presetNameSet = new Set(Object.values(VRMExpressionPresetName));
            const nameSchemaExpressionMap = new Map();
            if (schemaExpressions.preset != null) {
                Object.entries(schemaExpressions.preset).forEach(([name, schemaExpression]) => {
                    if (schemaExpression == null) {
                        return;
                    } // typescript
                    if (!presetNameSet.has(name)) {
                        console.warn(`VRMExpressionLoaderPlugin: Unknown preset name "${name}" detected. Ignoring the expression`);
                        return;
                    }
                    nameSchemaExpressionMap.set(name, schemaExpression);
                });
            }
            if (schemaExpressions.custom != null) {
                Object.entries(schemaExpressions.custom).forEach(([name, schemaExpression]) => {
                    if (presetNameSet.has(name)) {
                        console.warn(`VRMExpressionLoaderPlugin: Custom expression cannot have preset name "${name}". Ignoring the expression`);
                        return;
                    }
                    nameSchemaExpressionMap.set(name, schemaExpression);
                });
            }
            // prepare manager
            const manager = new VRMExpressionManager();
            // load expressions
            yield Promise.all(Array.from(nameSchemaExpressionMap.entries()).map(([name, schemaExpression]) => __awaiter$6(this, void 0, void 0, function* () {
                var _c, _d, _e, _f, _g, _h, _j;
                const expression = new VRMExpression(name);
                gltf.scene.add(expression);
                expression.isBinary = (_c = schemaExpression.isBinary) !== null && _c !== void 0 ? _c : false;
                expression.overrideBlink = (_d = schemaExpression.overrideBlink) !== null && _d !== void 0 ? _d : 'none';
                expression.overrideLookAt = (_e = schemaExpression.overrideLookAt) !== null && _e !== void 0 ? _e : 'none';
                expression.overrideMouth = (_f = schemaExpression.overrideMouth) !== null && _f !== void 0 ? _f : 'none';
                (_g = schemaExpression.morphTargetBinds) === null || _g === void 0 ? void 0 : _g.forEach((bind) => __awaiter$6(this, void 0, void 0, function* () {
                    var _k;
                    if (bind.node === undefined || bind.index === undefined) {
                        return;
                    }
                    const primitives = (yield gltfExtractPrimitivesFromNode(gltf, bind.node));
                    const morphTargetIndex = bind.index;
                    // check if the mesh has the target morph target
                    if (!primitives.every((primitive) => Array.isArray(primitive.morphTargetInfluences) &&
                        morphTargetIndex < primitive.morphTargetInfluences.length)) {
                        console.warn(`VRMExpressionLoaderPlugin: ${schemaExpression.name} attempts to index morph #${morphTargetIndex} but not found.`);
                        return;
                    }
                    expression.addBind(new VRMExpressionMorphTargetBind({
                        primitives,
                        index: morphTargetIndex,
                        weight: (_k = bind.weight) !== null && _k !== void 0 ? _k : 1.0,
                    }));
                }));
                if (schemaExpression.materialColorBinds || schemaExpression.textureTransformBinds) {
                    // list up every material in `gltf.scene`
                    const gltfMaterials = [];
                    gltf.scene.traverse((object) => {
                        const material = object.material;
                        if (material) {
                            gltfMaterials.push(material);
                        }
                    });
                    (_h = schemaExpression.materialColorBinds) === null || _h === void 0 ? void 0 : _h.forEach((bind) => __awaiter$6(this, void 0, void 0, function* () {
                        const materials = gltfMaterials.filter((material) => {
                            const materialIndex = gltfGetAssociatedMaterialIndex(this.parser, material);
                            return bind.material === materialIndex;
                        });
                        materials.forEach((material) => {
                            expression.addBind(new VRMExpressionMaterialColorBind({
                                material,
                                type: bind.type,
                                targetValue: new THREE.Color().fromArray(bind.targetValue),
                            }));
                        });
                    }));
                    (_j = schemaExpression.textureTransformBinds) === null || _j === void 0 ? void 0 : _j.forEach((bind) => __awaiter$6(this, void 0, void 0, function* () {
                        const materials = gltfMaterials.filter((material) => {
                            const materialIndex = gltfGetAssociatedMaterialIndex(this.parser, material);
                            return bind.material === materialIndex;
                        });
                        materials.forEach((material) => {
                            var _a, _b;
                            expression.addBind(new VRMExpressionTextureTransformBind({
                                material,
                                offset: new THREE.Vector2().fromArray((_a = bind.offset) !== null && _a !== void 0 ? _a : [0.0, 0.0]),
                                scale: new THREE.Vector2().fromArray((_b = bind.scale) !== null && _b !== void 0 ? _b : [1.0, 1.0]),
                            }));
                        });
                    }));
                }
                manager.registerExpression(expression);
            })));
            return manager;
        });
    }
    _v0Import(gltf) {
        var _a;
        return __awaiter$6(this, void 0, void 0, function* () {
            const json = this.parser.json;
            // early abort if it doesn't use vrm
            const vrmExt = (_a = json.extensions) === null || _a === void 0 ? void 0 : _a.VRM;
            if (!vrmExt) {
                return null;
            }
            const schemaBlendShape = vrmExt.blendShapeMaster;
            if (!schemaBlendShape) {
                return null;
            }
            const manager = new VRMExpressionManager();
            const schemaBlendShapeGroups = schemaBlendShape.blendShapeGroups;
            if (!schemaBlendShapeGroups) {
                return manager;
            }
            const blendShapeNameSet = new Set();
            yield Promise.all(schemaBlendShapeGroups.map((schemaGroup) => __awaiter$6(this, void 0, void 0, function* () {
                var _b;
                const v0PresetName = schemaGroup.presetName;
                const v1PresetName = (v0PresetName != null && VRMExpressionLoaderPlugin.v0v1PresetNameMap[v0PresetName]) || null;
                const name = v1PresetName !== null && v1PresetName !== void 0 ? v1PresetName : schemaGroup.name;
                if (name == null) {
                    console.warn('VRMExpressionLoaderPlugin: One of custom expressions has no name. Ignoring the expression');
                    return;
                }
                // duplication check
                if (blendShapeNameSet.has(name)) {
                    console.warn(`VRMExpressionLoaderPlugin: An expression preset ${v0PresetName} has duplicated entries. Ignoring the expression`);
                    return;
                }
                blendShapeNameSet.add(name);
                const expression = new VRMExpression(name);
                gltf.scene.add(expression);
                expression.isBinary = (_b = schemaGroup.isBinary) !== null && _b !== void 0 ? _b : false;
                // v0 doesn't have ignore properties
                // Bind morphTarget
                if (schemaGroup.binds) {
                    schemaGroup.binds.forEach((bind) => __awaiter$6(this, void 0, void 0, function* () {
                        var _c;
                        if (bind.mesh === undefined || bind.index === undefined) {
                            return;
                        }
                        const nodesUsingMesh = [];
                        (_c = json.nodes) === null || _c === void 0 ? void 0 : _c.forEach((node, i) => {
                            if (node.mesh === bind.mesh) {
                                nodesUsingMesh.push(i);
                            }
                        });
                        const morphTargetIndex = bind.index;
                        yield Promise.all(nodesUsingMesh.map((nodeIndex) => __awaiter$6(this, void 0, void 0, function* () {
                            var _d;
                            const primitives = (yield gltfExtractPrimitivesFromNode(gltf, nodeIndex));
                            // check if the mesh has the target morph target
                            if (!primitives.every((primitive) => Array.isArray(primitive.morphTargetInfluences) &&
                                morphTargetIndex < primitive.morphTargetInfluences.length)) {
                                console.warn(`VRMExpressionLoaderPlugin: ${schemaGroup.name} attempts to index ${morphTargetIndex}th morph but not found.`);
                                return;
                            }
                            expression.addBind(new VRMExpressionMorphTargetBind({
                                primitives,
                                index: morphTargetIndex,
                                weight: 0.01 * ((_d = bind.weight) !== null && _d !== void 0 ? _d : 100), // narrowing the range from [ 0.0 - 100.0 ] to [ 0.0 - 1.0 ]
                            }));
                        })));
                    }));
                }
                // Bind MaterialColor and TextureTransform
                const materialValues = schemaGroup.materialValues;
                if (materialValues && materialValues.length !== 0) {
                    materialValues.forEach((materialValue) => {
                        if (materialValue.materialName === undefined ||
                            materialValue.propertyName === undefined ||
                            materialValue.targetValue === undefined) {
                            return;
                        }
                        /**
                         * アバターのオブジェクトに設定されているマテリアルの内から
                         * materialValueで指定されているマテリアルを集める。
                         *
                         * 特定には名前を使用する。
                         * アウトライン描画用のマテリアルも同時に集める。
                         */
                        const materials = [];
                        gltf.scene.traverse((object) => {
                            if (object.material) {
                                const material = object.material;
                                if (Array.isArray(material)) {
                                    materials.push(...material.filter((mtl) => (mtl.name === materialValue.materialName ||
                                        mtl.name === materialValue.materialName + ' (Outline)') &&
                                        materials.indexOf(mtl) === -1));
                                }
                                else if (material.name === materialValue.materialName && materials.indexOf(material) === -1) {
                                    materials.push(material);
                                }
                            }
                        });
                        const materialPropertyName = materialValue.propertyName;
                        materials.forEach((material) => {
                            // TextureTransformBind
                            if (materialPropertyName === '_MainTex_ST') {
                                const scale = new THREE.Vector2(materialValue.targetValue[0], materialValue.targetValue[1]);
                                const offset = new THREE.Vector2(materialValue.targetValue[2], materialValue.targetValue[3]);
                                expression.addBind(new VRMExpressionTextureTransformBind({
                                    material,
                                    scale,
                                    offset,
                                }));
                                return;
                            }
                            // MaterialColorBind
                            const materialColorType = v0ExpressionMaterialColorMap[materialPropertyName];
                            if (materialColorType) {
                                expression.addBind(new VRMExpressionMaterialColorBind({
                                    material,
                                    type: materialColorType,
                                    targetValue: new THREE.Color(...materialValue.targetValue.slice(0, 3)),
                                }));
                                return;
                            }
                            console.warn(materialPropertyName + ' is not supported');
                        });
                    });
                }
                manager.registerExpression(expression);
            })));
            return manager;
        });
    }
}
VRMExpressionLoaderPlugin.v0v1PresetNameMap = {
    a: 'aa',
    e: 'ee',
    i: 'ih',
    o: 'oh',
    u: 'ou',
    blink: 'blink',
    joy: 'happy',
    angry: 'angry',
    sorrow: 'sad',
    fun: 'relaxed',
    lookup: 'lookUp',
    lookdown: 'lookDown',
    lookleft: 'lookLeft',
    lookright: 'lookRight',
    // eslint-disable-next-line @typescript-eslint/naming-convention
    blink_l: 'blinkLeft',
    // eslint-disable-next-line @typescript-eslint/naming-convention
    blink_r: 'blinkRight',
    neutral: 'neutral',
};

/* eslint-disable @typescript-eslint/naming-convention */
const VRMExpressionOverrideType = {
    None: 'none',
    Block: 'block',
    Blend: 'blend',
};

class VRMFirstPerson {
    /**
     * Create a new VRMFirstPerson object.
     *
     * @param humanoid A {@link VRMHumanoid}
     * @param meshAnnotations A renderer settings. See the description of [[RendererFirstPersonFlags]] for more info
     */
    constructor(humanoid, meshAnnotations) {
        this._firstPersonOnlyLayer = VRMFirstPerson.DEFAULT_FIRSTPERSON_ONLY_LAYER;
        this._thirdPersonOnlyLayer = VRMFirstPerson.DEFAULT_THIRDPERSON_ONLY_LAYER;
        this._initializedLayers = false;
        this.humanoid = humanoid;
        this.meshAnnotations = meshAnnotations;
    }
    /**
     * Copy the given {@link VRMFirstPerson} into this one.
     * {@link humanoid} must be same as the source one.
     * @param source The {@link VRMFirstPerson} you want to copy
     * @returns this
     */
    copy(source) {
        if (this.humanoid !== source.humanoid) {
            throw new Error('VRMFirstPerson: humanoid must be same in order to copy');
        }
        this.meshAnnotations = source.meshAnnotations.map((annotation) => ({
            meshes: annotation.meshes.concat(),
            type: annotation.type,
        }));
        return this;
    }
    /**
     * Returns a clone of this {@link VRMFirstPerson}.
     * @returns Copied {@link VRMFirstPerson}
     */
    clone() {
        return new VRMFirstPerson(this.humanoid, this.meshAnnotations).copy(this);
    }
    /**
     * A camera layer represents `FirstPersonOnly` layer.
     * Note that **you must call {@link setup} first before you use the layer feature** or it does not work properly.
     *
     * The value is {@link DEFAULT_FIRSTPERSON_ONLY_LAYER} by default but you can change the layer by specifying via {@link setup} if you prefer.
     *
     * @see https://vrm.dev/en/univrm/api/univrm_use_firstperson/
     * @see https://threejs.org/docs/#api/en/core/Layers
     */
    get firstPersonOnlyLayer() {
        return this._firstPersonOnlyLayer;
    }
    /**
     * A camera layer represents `ThirdPersonOnly` layer.
     * Note that **you must call {@link setup} first before you use the layer feature** or it does not work properly.
     *
     * The value is {@link DEFAULT_THIRDPERSON_ONLY_LAYER} by default but you can change the layer by specifying via {@link setup} if you prefer.
     *
     * @see https://vrm.dev/en/univrm/api/univrm_use_firstperson/
     * @see https://threejs.org/docs/#api/en/core/Layers
     */
    get thirdPersonOnlyLayer() {
        return this._thirdPersonOnlyLayer;
    }
    /**
     * In this method, it assigns layers for every meshes based on mesh annotations.
     * You must call this method first before you use the layer feature.
     *
     * This is an equivalent of [VRMFirstPerson.Setup](https://github.com/vrm-c/UniVRM/blob/73a5bd8fcddaa2a7a8735099a97e63c9db3e5ea0/Assets/VRM/Runtime/FirstPerson/VRMFirstPerson.cs#L295-L299) of the UniVRM.
     *
     * The `cameraLayer` parameter specifies which layer will be assigned for `FirstPersonOnly` / `ThirdPersonOnly`.
     * In UniVRM, we specified those by naming each desired layer as `FIRSTPERSON_ONLY_LAYER` / `THIRDPERSON_ONLY_LAYER`
     * but we are going to specify these layers at here since we are unable to name layers in Three.js.
     *
     * @param cameraLayer Specify which layer will be for `FirstPersonOnly` / `ThirdPersonOnly`.
     */
    setup({ firstPersonOnlyLayer = VRMFirstPerson.DEFAULT_FIRSTPERSON_ONLY_LAYER, thirdPersonOnlyLayer = VRMFirstPerson.DEFAULT_THIRDPERSON_ONLY_LAYER, } = {}) {
        if (this._initializedLayers) {
            return;
        }
        this._firstPersonOnlyLayer = firstPersonOnlyLayer;
        this._thirdPersonOnlyLayer = thirdPersonOnlyLayer;
        this.meshAnnotations.forEach((item) => {
            item.meshes.forEach((mesh) => {
                if (item.type === 'firstPersonOnly') {
                    mesh.layers.set(this._firstPersonOnlyLayer);
                    mesh.traverse((child) => child.layers.set(this._firstPersonOnlyLayer));
                }
                else if (item.type === 'thirdPersonOnly') {
                    mesh.layers.set(this._thirdPersonOnlyLayer);
                    mesh.traverse((child) => child.layers.set(this._thirdPersonOnlyLayer));
                }
                else if (item.type === 'auto') {
                    this._createHeadlessModel(mesh);
                }
            });
        });
        this._initializedLayers = true;
    }
    _excludeTriangles(triangles, bws, skinIndex, exclude) {
        let count = 0;
        if (bws != null && bws.length > 0) {
            for (let i = 0; i < triangles.length; i += 3) {
                const a = triangles[i];
                const b = triangles[i + 1];
                const c = triangles[i + 2];
                const bw0 = bws[a];
                const skin0 = skinIndex[a];
                if (bw0[0] > 0 && exclude.includes(skin0[0]))
                    continue;
                if (bw0[1] > 0 && exclude.includes(skin0[1]))
                    continue;
                if (bw0[2] > 0 && exclude.includes(skin0[2]))
                    continue;
                if (bw0[3] > 0 && exclude.includes(skin0[3]))
                    continue;
                const bw1 = bws[b];
                const skin1 = skinIndex[b];
                if (bw1[0] > 0 && exclude.includes(skin1[0]))
                    continue;
                if (bw1[1] > 0 && exclude.includes(skin1[1]))
                    continue;
                if (bw1[2] > 0 && exclude.includes(skin1[2]))
                    continue;
                if (bw1[3] > 0 && exclude.includes(skin1[3]))
                    continue;
                const bw2 = bws[c];
                const skin2 = skinIndex[c];
                if (bw2[0] > 0 && exclude.includes(skin2[0]))
                    continue;
                if (bw2[1] > 0 && exclude.includes(skin2[1]))
                    continue;
                if (bw2[2] > 0 && exclude.includes(skin2[2]))
                    continue;
                if (bw2[3] > 0 && exclude.includes(skin2[3]))
                    continue;
                triangles[count++] = a;
                triangles[count++] = b;
                triangles[count++] = c;
            }
        }
        return count;
    }
    _createErasedMesh(src, erasingBonesIndex) {
        const dst = new THREE.SkinnedMesh(src.geometry.clone(), src.material);
        dst.name = `${src.name}(erase)`;
        dst.frustumCulled = src.frustumCulled;
        dst.layers.set(this._firstPersonOnlyLayer);
        const geometry = dst.geometry;
        const skinIndexAttr = geometry.getAttribute('skinIndex');
        const skinIndexAttrArray = skinIndexAttr instanceof THREE.GLBufferAttribute ? [] : skinIndexAttr.array;
        const skinIndex = [];
        for (let i = 0; i < skinIndexAttrArray.length; i += 4) {
            skinIndex.push([
                skinIndexAttrArray[i],
                skinIndexAttrArray[i + 1],
                skinIndexAttrArray[i + 2],
                skinIndexAttrArray[i + 3],
            ]);
        }
        const skinWeightAttr = geometry.getAttribute('skinWeight');
        const skinWeightAttrArray = skinWeightAttr instanceof THREE.GLBufferAttribute ? [] : skinWeightAttr.array;
        const skinWeight = [];
        for (let i = 0; i < skinWeightAttrArray.length; i += 4) {
            skinWeight.push([
                skinWeightAttrArray[i],
                skinWeightAttrArray[i + 1],
                skinWeightAttrArray[i + 2],
                skinWeightAttrArray[i + 3],
            ]);
        }
        const index = geometry.getIndex();
        if (!index) {
            throw new Error("The geometry doesn't have an index buffer");
        }
        const oldTriangles = Array.from(index.array);
        const count = this._excludeTriangles(oldTriangles, skinWeight, skinIndex, erasingBonesIndex);
        const newTriangle = [];
        for (let i = 0; i < count; i++) {
            newTriangle[i] = oldTriangles[i];
        }
        geometry.setIndex(newTriangle);
        // mtoon material includes onBeforeRender. this is unsupported at SkinnedMesh#clone
        if (src.onBeforeRender) {
            dst.onBeforeRender = src.onBeforeRender;
        }
        dst.bind(new THREE.Skeleton(src.skeleton.bones, src.skeleton.boneInverses), new THREE.Matrix4());
        return dst;
    }
    _createHeadlessModelForSkinnedMesh(parent, mesh) {
        const eraseBoneIndexes = [];
        mesh.skeleton.bones.forEach((bone, index) => {
            if (this._isEraseTarget(bone))
                eraseBoneIndexes.push(index);
        });
        // Unlike UniVRM we don't copy mesh if no invisible bone was found
        if (!eraseBoneIndexes.length) {
            mesh.layers.enable(this._thirdPersonOnlyLayer);
            mesh.layers.enable(this._firstPersonOnlyLayer);
            return;
        }
        mesh.layers.set(this._thirdPersonOnlyLayer);
        const newMesh = this._createErasedMesh(mesh, eraseBoneIndexes);
        parent.add(newMesh);
    }
    _createHeadlessModel(node) {
        if (node.type === 'Group') {
            node.layers.set(this._thirdPersonOnlyLayer);
            if (this._isEraseTarget(node)) {
                node.traverse((child) => child.layers.set(this._thirdPersonOnlyLayer));
            }
            else {
                const parent = new THREE.Group();
                parent.name = `_headless_${node.name}`;
                parent.layers.set(this._firstPersonOnlyLayer);
                node.parent.add(parent);
                node.children
                    .filter((child) => child.type === 'SkinnedMesh')
                    .forEach((child) => {
                    const skinnedMesh = child;
                    this._createHeadlessModelForSkinnedMesh(parent, skinnedMesh);
                });
            }
        }
        else if (node.type === 'SkinnedMesh') {
            const skinnedMesh = node;
            this._createHeadlessModelForSkinnedMesh(node.parent, skinnedMesh);
        }
        else {
            if (this._isEraseTarget(node)) {
                node.layers.set(this._thirdPersonOnlyLayer);
                node.traverse((child) => child.layers.set(this._thirdPersonOnlyLayer));
            }
        }
    }
    _isEraseTarget(bone) {
        if (bone === this.humanoid.getRawBoneNode('head')) {
            return true;
        }
        else if (!bone.parent) {
            return false;
        }
        else {
            return this._isEraseTarget(bone.parent);
        }
    }
}
/**
 * A default camera layer for `FirstPersonOnly` layer.
 *
 * @see [[getFirstPersonOnlyLayer]]
 */
VRMFirstPerson.DEFAULT_FIRSTPERSON_ONLY_LAYER = 9;
/**
 * A default camera layer for `ThirdPersonOnly` layer.
 *
 * @see [[getThirdPersonOnlyLayer]]
 */
VRMFirstPerson.DEFAULT_THIRDPERSON_ONLY_LAYER = 10;

/**
 * Possible spec versions it recognizes.
 */
const POSSIBLE_SPEC_VERSIONS$3 = new Set(['1.0', '1.0-beta']);
/**
 * A plugin of GLTFLoader that imports a {@link VRMFirstPerson} from a VRM extension of a GLTF.
 */
class VRMFirstPersonLoaderPlugin {
    get name() {
        // We should use the extension name instead but we have multiple plugins for an extension...
        return 'VRMFirstPersonLoaderPlugin';
    }
    constructor(parser) {
        this.parser = parser;
    }
    afterRoot(gltf) {
        return __awaiter$6(this, void 0, void 0, function* () {
            const vrmHumanoid = gltf.userData.vrmHumanoid;
            // explicitly distinguish null and undefined
            // since vrmHumanoid might be null as a result
            if (vrmHumanoid === null) {
                return;
            }
            else if (vrmHumanoid === undefined) {
                throw new Error('VRMFirstPersonLoaderPlugin: vrmHumanoid is undefined. VRMHumanoidLoaderPlugin have to be used first');
            }
            gltf.userData.vrmFirstPerson = yield this._import(gltf, vrmHumanoid);
        });
    }
    /**
     * Import a {@link VRMFirstPerson} from a VRM.
     *
     * @param gltf A parsed result of GLTF taken from GLTFLoader
     * @param humanoid A {@link VRMHumanoid} instance that represents the VRM
     */
    _import(gltf, humanoid) {
        return __awaiter$6(this, void 0, void 0, function* () {
            if (humanoid == null) {
                return null;
            }
            const v1Result = yield this._v1Import(gltf, humanoid);
            if (v1Result) {
                return v1Result;
            }
            const v0Result = yield this._v0Import(gltf, humanoid);
            if (v0Result) {
                return v0Result;
            }
            return null;
        });
    }
    _v1Import(gltf, humanoid) {
        var _a, _b;
        return __awaiter$6(this, void 0, void 0, function* () {
            const json = this.parser.json;
            // early abort if it doesn't use vrm
            const isVRMUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf('VRMC_vrm')) !== -1;
            if (!isVRMUsed) {
                return null;
            }
            const extension = (_b = json.extensions) === null || _b === void 0 ? void 0 : _b['VRMC_vrm'];
            if (!extension) {
                return null;
            }
            const specVersion = extension.specVersion;
            if (!POSSIBLE_SPEC_VERSIONS$3.has(specVersion)) {
                console.warn(`VRMFirstPersonLoaderPlugin: Unknown VRMC_vrm specVersion "${specVersion}"`);
                return null;
            }
            const schemaFirstPerson = extension.firstPerson;
            if (!schemaFirstPerson) {
                return null;
            }
            const meshAnnotations = [];
            const nodePrimitivesMap = yield gltfExtractPrimitivesFromNodes(gltf);
            Array.from(nodePrimitivesMap.entries()).forEach(([nodeIndex, primitives]) => {
                var _a;
                const annotation = schemaFirstPerson.meshAnnotations
                    ? schemaFirstPerson.meshAnnotations.find((a) => a.node === nodeIndex)
                    : undefined;
                meshAnnotations.push({
                    meshes: primitives,
                    type: (_a = annotation === null || annotation === void 0 ? void 0 : annotation.type) !== null && _a !== void 0 ? _a : 'both',
                });
            });
            return new VRMFirstPerson(humanoid, meshAnnotations);
        });
    }
    _v0Import(gltf, humanoid) {
        var _a;
        return __awaiter$6(this, void 0, void 0, function* () {
            const json = this.parser.json;
            const vrmExt = (_a = json.extensions) === null || _a === void 0 ? void 0 : _a.VRM;
            if (!vrmExt) {
                return null;
            }
            const schemaFirstPerson = vrmExt.firstPerson;
            if (!schemaFirstPerson) {
                return null;
            }
            const meshAnnotations = [];
            const nodePrimitivesMap = yield gltfExtractPrimitivesFromNodes(gltf);
            Array.from(nodePrimitivesMap.entries()).forEach(([nodeIndex, primitives]) => {
                const schemaNode = json.nodes[nodeIndex];
                const flag = schemaFirstPerson.meshAnnotations
                    ? schemaFirstPerson.meshAnnotations.find((a) => a.mesh === schemaNode.mesh)
                    : undefined;
                meshAnnotations.push({
                    meshes: primitives,
                    type: this._convertV0FlagToV1Type(flag === null || flag === void 0 ? void 0 : flag.firstPersonFlag),
                });
            });
            return new VRMFirstPerson(humanoid, meshAnnotations);
        });
    }
    _convertV0FlagToV1Type(flag) {
        if (flag === 'FirstPersonOnly') {
            return 'firstPersonOnly';
        }
        else if (flag === 'ThirdPersonOnly') {
            return 'thirdPersonOnly';
        }
        else if (flag === 'Auto') {
            return 'auto';
        }
        else {
            return 'both';
        }
    }
}

/* eslint-disable @typescript-eslint/naming-convention */
const VRMFirstPersonMeshAnnotationType = {
    Auto: 'auto',
    Both: 'both',
    ThirdPersonOnly: 'thirdPersonOnly',
    FirstPersonOnly: 'firstPersonOnly',
};

const _v3A$4$1 = new THREE.Vector3();
const _v3B$2$1 = new THREE.Vector3();
const _quatA$5 = new THREE.Quaternion();
class VRMHumanoidHelper extends THREE.Group {
    constructor(humanoid) {
        super();
        this.vrmHumanoid = humanoid;
        this._boneAxesMap = new Map();
        Object.values(humanoid.humanBones).forEach((bone) => {
            const helper = new THREE.AxesHelper(1.0);
            helper.matrixAutoUpdate = false;
            helper.material.depthTest = false;
            helper.material.depthWrite = false;
            this.add(helper);
            this._boneAxesMap.set(bone, helper);
        });
    }
    dispose() {
        Array.from(this._boneAxesMap.values()).forEach((axes) => {
            axes.geometry.dispose();
            axes.material.dispose();
        });
    }
    updateMatrixWorld(force) {
        Array.from(this._boneAxesMap.entries()).forEach(([bone, axes]) => {
            bone.node.updateWorldMatrix(true, false);
            bone.node.matrixWorld.decompose(_v3A$4$1, _quatA$5, _v3B$2$1);
            const scale = _v3A$4$1.set(0.1, 0.1, 0.1).divide(_v3B$2$1);
            axes.matrix.copy(bone.node.matrixWorld).scale(scale);
        });
        super.updateMatrixWorld(force);
    }
}

/* eslint-disable @typescript-eslint/naming-convention */
/**
 * The list of {@link VRMHumanBoneName}. Dependency aware.
 */
const VRMHumanBoneList = [
    'hips',
    'spine',
    'chest',
    'upperChest',
    'neck',
    'head',
    'leftEye',
    'rightEye',
    'jaw',
    'leftUpperLeg',
    'leftLowerLeg',
    'leftFoot',
    'leftToes',
    'rightUpperLeg',
    'rightLowerLeg',
    'rightFoot',
    'rightToes',
    'leftShoulder',
    'leftUpperArm',
    'leftLowerArm',
    'leftHand',
    'rightShoulder',
    'rightUpperArm',
    'rightLowerArm',
    'rightHand',
    'leftThumbMetacarpal',
    'leftThumbProximal',
    'leftThumbDistal',
    'leftIndexProximal',
    'leftIndexIntermediate',
    'leftIndexDistal',
    'leftMiddleProximal',
    'leftMiddleIntermediate',
    'leftMiddleDistal',
    'leftRingProximal',
    'leftRingIntermediate',
    'leftRingDistal',
    'leftLittleProximal',
    'leftLittleIntermediate',
    'leftLittleDistal',
    'rightThumbMetacarpal',
    'rightThumbProximal',
    'rightThumbDistal',
    'rightIndexProximal',
    'rightIndexIntermediate',
    'rightIndexDistal',
    'rightMiddleProximal',
    'rightMiddleIntermediate',
    'rightMiddleDistal',
    'rightRingProximal',
    'rightRingIntermediate',
    'rightRingDistal',
    'rightLittleProximal',
    'rightLittleIntermediate',
    'rightLittleDistal',
];

/* eslint-disable @typescript-eslint/naming-convention */
/**
 * The names of {@link VRMHumanoid} bone names.
 *
 * Ref: https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0/humanoid.md
 */
const VRMHumanBoneName = {
    Hips: 'hips',
    Spine: 'spine',
    Chest: 'chest',
    UpperChest: 'upperChest',
    Neck: 'neck',
    Head: 'head',
    LeftEye: 'leftEye',
    RightEye: 'rightEye',
    Jaw: 'jaw',
    LeftUpperLeg: 'leftUpperLeg',
    LeftLowerLeg: 'leftLowerLeg',
    LeftFoot: 'leftFoot',
    LeftToes: 'leftToes',
    RightUpperLeg: 'rightUpperLeg',
    RightLowerLeg: 'rightLowerLeg',
    RightFoot: 'rightFoot',
    RightToes: 'rightToes',
    LeftShoulder: 'leftShoulder',
    LeftUpperArm: 'leftUpperArm',
    LeftLowerArm: 'leftLowerArm',
    LeftHand: 'leftHand',
    RightShoulder: 'rightShoulder',
    RightUpperArm: 'rightUpperArm',
    RightLowerArm: 'rightLowerArm',
    RightHand: 'rightHand',
    LeftThumbMetacarpal: 'leftThumbMetacarpal',
    LeftThumbProximal: 'leftThumbProximal',
    LeftThumbDistal: 'leftThumbDistal',
    LeftIndexProximal: 'leftIndexProximal',
    LeftIndexIntermediate: 'leftIndexIntermediate',
    LeftIndexDistal: 'leftIndexDistal',
    LeftMiddleProximal: 'leftMiddleProximal',
    LeftMiddleIntermediate: 'leftMiddleIntermediate',
    LeftMiddleDistal: 'leftMiddleDistal',
    LeftRingProximal: 'leftRingProximal',
    LeftRingIntermediate: 'leftRingIntermediate',
    LeftRingDistal: 'leftRingDistal',
    LeftLittleProximal: 'leftLittleProximal',
    LeftLittleIntermediate: 'leftLittleIntermediate',
    LeftLittleDistal: 'leftLittleDistal',
    RightThumbMetacarpal: 'rightThumbMetacarpal',
    RightThumbProximal: 'rightThumbProximal',
    RightThumbDistal: 'rightThumbDistal',
    RightIndexProximal: 'rightIndexProximal',
    RightIndexIntermediate: 'rightIndexIntermediate',
    RightIndexDistal: 'rightIndexDistal',
    RightMiddleProximal: 'rightMiddleProximal',
    RightMiddleIntermediate: 'rightMiddleIntermediate',
    RightMiddleDistal: 'rightMiddleDistal',
    RightRingProximal: 'rightRingProximal',
    RightRingIntermediate: 'rightRingIntermediate',
    RightRingDistal: 'rightRingDistal',
    RightLittleProximal: 'rightLittleProximal',
    RightLittleIntermediate: 'rightLittleIntermediate',
    RightLittleDistal: 'rightLittleDistal',
};

/* eslint-disable @typescript-eslint/naming-convention */
/**
 * An object that maps from {@link VRMHumanBoneName} to its parent {@link VRMHumanBoneName}.
 *
 * Ref: https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0/humanoid.md
 */
const VRMHumanBoneParentMap = {
    hips: null,
    spine: 'hips',
    chest: 'spine',
    upperChest: 'chest',
    neck: 'upperChest',
    head: 'neck',
    leftEye: 'head',
    rightEye: 'head',
    jaw: 'head',
    leftUpperLeg: 'hips',
    leftLowerLeg: 'leftUpperLeg',
    leftFoot: 'leftLowerLeg',
    leftToes: 'leftFoot',
    rightUpperLeg: 'hips',
    rightLowerLeg: 'rightUpperLeg',
    rightFoot: 'rightLowerLeg',
    rightToes: 'rightFoot',
    leftShoulder: 'upperChest',
    leftUpperArm: 'leftShoulder',
    leftLowerArm: 'leftUpperArm',
    leftHand: 'leftLowerArm',
    rightShoulder: 'upperChest',
    rightUpperArm: 'rightShoulder',
    rightLowerArm: 'rightUpperArm',
    rightHand: 'rightLowerArm',
    leftThumbMetacarpal: 'leftHand',
    leftThumbProximal: 'leftThumbMetacarpal',
    leftThumbDistal: 'leftThumbProximal',
    leftIndexProximal: 'leftHand',
    leftIndexIntermediate: 'leftIndexProximal',
    leftIndexDistal: 'leftIndexIntermediate',
    leftMiddleProximal: 'leftHand',
    leftMiddleIntermediate: 'leftMiddleProximal',
    leftMiddleDistal: 'leftMiddleIntermediate',
    leftRingProximal: 'leftHand',
    leftRingIntermediate: 'leftRingProximal',
    leftRingDistal: 'leftRingIntermediate',
    leftLittleProximal: 'leftHand',
    leftLittleIntermediate: 'leftLittleProximal',
    leftLittleDistal: 'leftLittleIntermediate',
    rightThumbMetacarpal: 'rightHand',
    rightThumbProximal: 'rightThumbMetacarpal',
    rightThumbDistal: 'rightThumbProximal',
    rightIndexProximal: 'rightHand',
    rightIndexIntermediate: 'rightIndexProximal',
    rightIndexDistal: 'rightIndexIntermediate',
    rightMiddleProximal: 'rightHand',
    rightMiddleIntermediate: 'rightMiddleProximal',
    rightMiddleDistal: 'rightMiddleIntermediate',
    rightRingProximal: 'rightHand',
    rightRingIntermediate: 'rightRingProximal',
    rightRingDistal: 'rightRingIntermediate',
    rightLittleProximal: 'rightHand',
    rightLittleIntermediate: 'rightLittleProximal',
    rightLittleDistal: 'rightLittleIntermediate',
};

/**
 * A compat function for `Quaternion.invert()` / `Quaternion.inverse()`.
 * `Quaternion.invert()` is introduced in r123 and `Quaternion.inverse()` emits a warning.
 * We are going to use this compat for a while.
 * @param target A target quaternion
 */
function quatInvertCompat$1(target) {
    if (target.invert) {
        target.invert();
    }
    else {
        target.inverse();
    }
    return target;
}

const _v3A$3$2 = new THREE.Vector3();
const _quatA$4 = new THREE.Quaternion();
/**
 * A class represents the Rig of a VRM.
 */
class VRMRig {
    /**
     * Create a new {@link VRMHumanoid}.
     * @param humanBones A {@link VRMHumanBones} contains all the bones of the new humanoid
     */
    constructor(humanBones) {
        this.humanBones = humanBones;
        this.restPose = this.getAbsolutePose();
    }
    /**
     * Return the current absolute pose of this humanoid as a {@link VRMPose}.
     * Note that the output result will contain initial state of the VRM and not compatible between different models.
     * You might want to use {@link getPose} instead.
     */
    getAbsolutePose() {
        const pose = {};
        Object.keys(this.humanBones).forEach((vrmBoneNameString) => {
            const vrmBoneName = vrmBoneNameString;
            const node = this.getBoneNode(vrmBoneName);
            // Ignore when there are no bone on the VRMHumanoid
            if (!node) {
                return;
            }
            // Get the position / rotation from the node
            _v3A$3$2.copy(node.position);
            _quatA$4.copy(node.quaternion);
            // Convert to raw arrays
            pose[vrmBoneName] = {
                position: _v3A$3$2.toArray(),
                rotation: _quatA$4.toArray(),
            };
        });
        return pose;
    }
    /**
     * Return the current pose of this humanoid as a {@link VRMPose}.
     *
     * Each transform is a local transform relative from rest pose (T-pose).
     */
    getPose() {
        const pose = {};
        Object.keys(this.humanBones).forEach((boneNameString) => {
            const boneName = boneNameString;
            const node = this.getBoneNode(boneName);
            // Ignore when there are no bone on the VRMHumanoid
            if (!node) {
                return;
            }
            // Take a diff from restPose
            _v3A$3$2.set(0, 0, 0);
            _quatA$4.identity();
            const restState = this.restPose[boneName];
            if (restState === null || restState === void 0 ? void 0 : restState.position) {
                _v3A$3$2.fromArray(restState.position).negate();
            }
            if (restState === null || restState === void 0 ? void 0 : restState.rotation) {
                quatInvertCompat$1(_quatA$4.fromArray(restState.rotation));
            }
            // Get the position / rotation from the node
            _v3A$3$2.add(node.position);
            _quatA$4.premultiply(node.quaternion);
            // Convert to raw arrays
            pose[boneName] = {
                position: _v3A$3$2.toArray(),
                rotation: _quatA$4.toArray(),
            };
        });
        return pose;
    }
    /**
     * Let the humanoid do a specified pose.
     *
     * Each transform have to be a local transform relative from rest pose (T-pose).
     * You can pass what you got from {@link getPose}.
     *
     * @param poseObject A [[VRMPose]] that represents a single pose
     */
    setPose(poseObject) {
        Object.entries(poseObject).forEach(([boneNameString, state]) => {
            const boneName = boneNameString;
            const node = this.getBoneNode(boneName);
            // Ignore when there are no bone that is defined in the pose on the VRMHumanoid
            if (!node) {
                return;
            }
            const restState = this.restPose[boneName];
            if (!restState) {
                // It's very unlikely. Possibly a bug
                return;
            }
            // Apply the state to the actual bone
            if (state === null || state === void 0 ? void 0 : state.position) {
                node.position.fromArray(state.position);
                if (restState.position) {
                    node.position.add(_v3A$3$2.fromArray(restState.position));
                }
            }
            if (state === null || state === void 0 ? void 0 : state.rotation) {
                node.quaternion.fromArray(state.rotation);
                if (restState.rotation) {
                    node.quaternion.multiply(_quatA$4.fromArray(restState.rotation));
                }
            }
        });
    }
    /**
     * Reset the humanoid to its rest pose.
     */
    resetPose() {
        Object.entries(this.restPose).forEach(([boneName, rest]) => {
            const node = this.getBoneNode(boneName);
            if (!node) {
                return;
            }
            if (rest === null || rest === void 0 ? void 0 : rest.position) {
                node.position.fromArray(rest.position);
            }
            if (rest === null || rest === void 0 ? void 0 : rest.rotation) {
                node.quaternion.fromArray(rest.rotation);
            }
        });
    }
    /**
     * Return a bone bound to a specified {@link VRMHumanBoneName}, as a {@link VRMHumanBone}.
     *
     * @param name Name of the bone you want
     */
    getBone(name) {
        var _a;
        return (_a = this.humanBones[name]) !== null && _a !== void 0 ? _a : undefined;
    }
    /**
     * Return a bone bound to a specified {@link VRMHumanBoneName}, as a `THREE.Object3D`.
     *
     * @param name Name of the bone you want
     */
    getBoneNode(name) {
        var _a, _b;
        return (_b = (_a = this.humanBones[name]) === null || _a === void 0 ? void 0 : _a.node) !== null && _b !== void 0 ? _b : null;
    }
}

const _v3A$2$2 = new THREE.Vector3();
const _quatA$3$1 = new THREE.Quaternion();
const _boneWorldPos = new THREE.Vector3();
/**
 * A class represents the normalized Rig of a VRM.
 */
class VRMHumanoidRig extends VRMRig {
    static _setupTransforms(modelRig) {
        const root = new THREE.Object3D();
        root.name = 'VRMHumanoidRig';
        // store boneWorldPositions and boneWorldRotations
        const boneWorldPositions = {};
        const boneWorldRotations = {};
        const boneRotations = {};
        VRMHumanBoneList.forEach((boneName) => {
            const boneNode = modelRig.getBoneNode(boneName);
            if (boneNode) {
                const boneWorldPosition = new THREE.Vector3();
                const boneWorldRotation = new THREE.Quaternion();
                boneNode.updateWorldMatrix(true, false);
                boneNode.matrixWorld.decompose(boneWorldPosition, boneWorldRotation, _v3A$2$2);
                boneWorldPositions[boneName] = boneWorldPosition;
                boneWorldRotations[boneName] = boneWorldRotation;
                boneRotations[boneName] = boneNode.quaternion.clone();
            }
        });
        // build rig hierarchy + store parentWorldRotations
        const parentWorldRotations = {};
        const rigBones = {};
        VRMHumanBoneList.forEach((boneName) => {
            var _a;
            const boneNode = modelRig.getBoneNode(boneName);
            if (boneNode) {
                const boneWorldPosition = boneWorldPositions[boneName];
                // see the nearest parent position
                let currentBoneName = boneName;
                let parentWorldPosition;
                let parentWorldRotation;
                while (parentWorldPosition == null) {
                    currentBoneName = VRMHumanBoneParentMap[currentBoneName];
                    if (currentBoneName == null) {
                        break;
                    }
                    parentWorldPosition = boneWorldPositions[currentBoneName];
                    parentWorldRotation = boneWorldRotations[currentBoneName];
                }
                // add to hierarchy
                const rigBoneNode = new THREE.Object3D();
                rigBoneNode.name = 'Normalized_' + boneNode.name;
                const parentRigBoneNode = (currentBoneName ? (_a = rigBones[currentBoneName]) === null || _a === void 0 ? void 0 : _a.node : root);
                parentRigBoneNode.add(rigBoneNode);
                rigBoneNode.position.copy(boneWorldPosition);
                if (parentWorldPosition) {
                    rigBoneNode.position.sub(parentWorldPosition);
                }
                rigBones[boneName] = { node: rigBoneNode };
                // store parentWorldRotation
                parentWorldRotations[boneName] = parentWorldRotation !== null && parentWorldRotation !== void 0 ? parentWorldRotation : new THREE.Quaternion();
            }
        });
        return {
            rigBones: rigBones,
            root,
            parentWorldRotations,
            boneRotations,
        };
    }
    constructor(humanoid) {
        const { rigBones, root, parentWorldRotations, boneRotations } = VRMHumanoidRig._setupTransforms(humanoid);
        super(rigBones);
        this.original = humanoid;
        this.root = root;
        this._parentWorldRotations = parentWorldRotations;
        this._boneRotations = boneRotations;
    }
    /**
     * Update this humanoid rig.
     */
    update() {
        VRMHumanBoneList.forEach((boneName) => {
            const boneNode = this.original.getBoneNode(boneName);
            if (boneNode != null) {
                const rigBoneNode = this.getBoneNode(boneName);
                const parentWorldRotation = this._parentWorldRotations[boneName];
                const invParentWorldRotation = _quatA$3$1.copy(parentWorldRotation).invert();
                const boneRotation = this._boneRotations[boneName];
                boneNode.quaternion
                    .copy(rigBoneNode.quaternion)
                    .multiply(parentWorldRotation)
                    .premultiply(invParentWorldRotation)
                    .multiply(boneRotation);
                // Move the mass center of the VRM
                if (boneName === 'hips') {
                    const boneWorldPosition = rigBoneNode.getWorldPosition(_boneWorldPos);
                    boneNode.parent.updateWorldMatrix(true, false);
                    const parentWorldMatrix = boneNode.parent.matrixWorld;
                    const localPosition = boneWorldPosition.applyMatrix4(parentWorldMatrix.invert());
                    boneNode.position.copy(localPosition);
                }
            }
        });
    }
}

/**
 * A class represents a humanoid of a VRM.
 */
class VRMHumanoid {
    /**
     * @deprecated Deprecated. Use either {@link rawRestPose} or {@link normalizedRestPose} instead.
     */
    get restPose() {
        console.warn('VRMHumanoid: restPose is deprecated. Use either rawRestPose or normalizedRestPose instead.');
        return this.rawRestPose;
    }
    /**
     * A {@link VRMPose} of its raw human bones that is its default state.
     * Note that it's not compatible with {@link setRawPose} and {@link getRawPose}, since it contains non-relative values of each local transforms.
     */
    get rawRestPose() {
        return this._rawHumanBones.restPose;
    }
    /**
     * A {@link VRMPose} of its normalized human bones that is its default state.
     * Note that it's not compatible with {@link setNormalizedPose} and {@link getNormalizedPose}, since it contains non-relative values of each local transforms.
     */
    get normalizedRestPose() {
        return this._normalizedHumanBones.restPose;
    }
    /**
     * A map from {@link VRMHumanBoneName} to raw {@link VRMHumanBone}s.
     */
    get humanBones() {
        // an alias of `rawHumanBones`
        return this._rawHumanBones.humanBones;
    }
    /**
     * A map from {@link VRMHumanBoneName} to raw {@link VRMHumanBone}s.
     */
    get rawHumanBones() {
        return this._rawHumanBones.humanBones;
    }
    /**
     * A map from {@link VRMHumanBoneName} to normalized {@link VRMHumanBone}s.
     */
    get normalizedHumanBones() {
        return this._normalizedHumanBones.humanBones;
    }
    /**
     * The root of normalized {@link VRMHumanBone}s.
     */
    get normalizedHumanBonesRoot() {
        return this._normalizedHumanBones.root;
    }
    /**
     * Create a new {@link VRMHumanoid}.
     * @param humanBones A {@link VRMHumanBones} contains all the bones of the new humanoid
     * @param autoUpdateHumanBones Whether it copies pose from normalizedHumanBones to rawHumanBones on {@link update}. `true` by default.
     */
    constructor(humanBones, options) {
        var _a;
        this.autoUpdateHumanBones = (_a = options === null || options === void 0 ? void 0 : options.autoUpdateHumanBones) !== null && _a !== void 0 ? _a : true;
        this._rawHumanBones = new VRMRig(humanBones);
        this._normalizedHumanBones = new VRMHumanoidRig(this._rawHumanBones);
    }
    /**
     * Copy the given {@link VRMHumanoid} into this one.
     * @param source The {@link VRMHumanoid} you want to copy
     * @returns this
     */
    copy(source) {
        this.autoUpdateHumanBones = source.autoUpdateHumanBones;
        this._rawHumanBones = new VRMRig(source.humanBones);
        this._normalizedHumanBones = new VRMHumanoidRig(this._rawHumanBones);
        return this;
    }
    /**
     * Returns a clone of this {@link VRMHumanoid}.
     * @returns Copied {@link VRMHumanoid}
     */
    clone() {
        return new VRMHumanoid(this.humanBones, { autoUpdateHumanBones: this.autoUpdateHumanBones }).copy(this);
    }
    /**
     * @deprecated Deprecated. Use either {@link getRawAbsolutePose} or {@link getNormalizedAbsolutePose} instead.
     */
    getAbsolutePose() {
        console.warn('VRMHumanoid: getAbsolutePose() is deprecated. Use either getRawAbsolutePose() or getNormalizedAbsolutePose() instead.');
        return this.getRawAbsolutePose();
    }
    /**
     * Return the current absolute pose of this raw human bones as a {@link VRMPose}.
     * Note that the output result will contain initial state of the VRM and not compatible between different models.
     * You might want to use {@link getRawPose} instead.
     */
    getRawAbsolutePose() {
        return this._rawHumanBones.getAbsolutePose();
    }
    /**
     * Return the current absolute pose of this normalized human bones as a {@link VRMPose}.
     * Note that the output result will contain initial state of the VRM and not compatible between different models.
     * You might want to use {@link getNormalizedPose} instead.
     */
    getNormalizedAbsolutePose() {
        return this._normalizedHumanBones.getAbsolutePose();
    }
    /**
     * @deprecated Deprecated. Use either {@link getRawPose} or {@link getNormalizedPose} instead.
     */
    getPose() {
        console.warn('VRMHumanoid: getPose() is deprecated. Use either getRawPose() or getNormalizedPose() instead.');
        return this.getRawPose();
    }
    /**
     * Return the current pose of raw human bones as a {@link VRMPose}.
     *
     * Each transform is a local transform relative from rest pose (T-pose).
     */
    getRawPose() {
        return this._rawHumanBones.getPose();
    }
    /**
     * Return the current pose of normalized human bones as a {@link VRMPose}.
     *
     * Each transform is a local transform relative from rest pose (T-pose).
     */
    getNormalizedPose() {
        return this._normalizedHumanBones.getPose();
    }
    /**
     * @deprecated Deprecated. Use either {@link setRawPose} or {@link setNormalizedPose} instead.
     */
    setPose(poseObject) {
        console.warn('VRMHumanoid: setPose() is deprecated. Use either setRawPose() or setNormalizedPose() instead.');
        return this.setRawPose(poseObject);
    }
    /**
     * Let the raw human bones do a specified pose.
     *
     * Each transform have to be a local transform relative from rest pose (T-pose).
     * You can pass what you got from {@link getRawPose}.
     *
     * If you are using {@link autoUpdateHumanBones}, you might want to use {@link setNormalizedPose} instead.
     *
     * @param poseObject A {@link VRMPose} that represents a single pose
     */
    setRawPose(poseObject) {
        return this._rawHumanBones.setPose(poseObject);
    }
    /**
     * Let the normalized human bones do a specified pose.
     *
     * Each transform have to be a local transform relative from rest pose (T-pose).
     * You can pass what you got from {@link getNormalizedPose}.
     *
     * @param poseObject A {@link VRMPose} that represents a single pose
     */
    setNormalizedPose(poseObject) {
        return this._normalizedHumanBones.setPose(poseObject);
    }
    /**
     * @deprecated Deprecated. Use either {@link resetRawPose} or {@link resetNormalizedPose} instead.
     */
    resetPose() {
        console.warn('VRMHumanoid: resetPose() is deprecated. Use either resetRawPose() or resetNormalizedPose() instead.');
        return this.resetRawPose();
    }
    /**
     * Reset the raw humanoid to its rest pose.
     *
     * If you are using {@link autoUpdateHumanBones}, you might want to use {@link resetNormalizedPose} instead.
     */
    resetRawPose() {
        return this._rawHumanBones.resetPose();
    }
    /**
     * Reset the normalized humanoid to its rest pose.
     */
    resetNormalizedPose() {
        return this._normalizedHumanBones.resetPose();
    }
    /**
     * @deprecated Deprecated. Use either {@link getRawBone} or {@link getNormalizedBone} instead.
     */
    getBone(name) {
        console.warn('VRMHumanoid: getBone() is deprecated. Use either getRawBone() or getNormalizedBone() instead.');
        return this.getRawBone(name);
    }
    /**
     * Return a raw {@link VRMHumanBone} bound to a specified {@link VRMHumanBoneName}.
     *
     * @param name Name of the bone you want
     */
    getRawBone(name) {
        return this._rawHumanBones.getBone(name);
    }
    /**
     * Return a normalized {@link VRMHumanBone} bound to a specified {@link VRMHumanBoneName}.
     *
     * @param name Name of the bone you want
     */
    getNormalizedBone(name) {
        return this._normalizedHumanBones.getBone(name);
    }
    /**
     * @deprecated Deprecated. Use either {@link getRawBoneNode} or {@link getNormalizedBoneNode} instead.
     */
    getBoneNode(name) {
        console.warn('VRMHumanoid: getBoneNode() is deprecated. Use either getRawBoneNode() or getNormalizedBoneNode() instead.');
        return this.getRawBoneNode(name);
    }
    /**
     * Return a raw bone as a `THREE.Object3D` bound to a specified {@link VRMHumanBoneName}.
     *
     * @param name Name of the bone you want
     */
    getRawBoneNode(name) {
        return this._rawHumanBones.getBoneNode(name);
    }
    /**
     * Return a normalized bone as a `THREE.Object3D` bound to a specified {@link VRMHumanBoneName}.
     *
     * @param name Name of the bone you want
     */
    getNormalizedBoneNode(name) {
        return this._normalizedHumanBones.getBoneNode(name);
    }
    /**
     * Update the humanoid component.
     *
     * If {@link autoUpdateHumanBones} is `true`, it transfers the pose of normalized human bones to raw human bones.
     */
    update() {
        if (this.autoUpdateHumanBones) {
            this._normalizedHumanBones.update();
        }
    }
}

/* eslint-disable @typescript-eslint/naming-convention */
const VRMRequiredHumanBoneName = {
    Hips: 'hips',
    Spine: 'spine',
    Head: 'head',
    LeftUpperLeg: 'leftUpperLeg',
    LeftLowerLeg: 'leftLowerLeg',
    LeftFoot: 'leftFoot',
    RightUpperLeg: 'rightUpperLeg',
    RightLowerLeg: 'rightLowerLeg',
    RightFoot: 'rightFoot',
    LeftUpperArm: 'leftUpperArm',
    LeftLowerArm: 'leftLowerArm',
    LeftHand: 'leftHand',
    RightUpperArm: 'rightUpperArm',
    RightLowerArm: 'rightLowerArm',
    RightHand: 'rightHand',
};

/**
 * Possible spec versions it recognizes.
 */
const POSSIBLE_SPEC_VERSIONS$2$1 = new Set(['1.0', '1.0-beta']);
/**
 * A map from old thumb bone names to new thumb bone names
 */
const thumbBoneNameMap = {
    leftThumbProximal: 'leftThumbMetacarpal',
    leftThumbIntermediate: 'leftThumbProximal',
    rightThumbProximal: 'rightThumbMetacarpal',
    rightThumbIntermediate: 'rightThumbProximal',
};
/**
 * A plugin of GLTFLoader that imports a {@link VRMHumanoid} from a VRM extension of a GLTF.
 */
class VRMHumanoidLoaderPlugin {
    get name() {
        // We should use the extension name instead but we have multiple plugins for an extension...
        return 'VRMHumanoidLoaderPlugin';
    }
    constructor(parser, options) {
        this.parser = parser;
        this.helperRoot = options === null || options === void 0 ? void 0 : options.helperRoot;
        this.autoUpdateHumanBones = options === null || options === void 0 ? void 0 : options.autoUpdateHumanBones;
    }
    afterRoot(gltf) {
        return __awaiter$6(this, void 0, void 0, function* () {
            gltf.userData.vrmHumanoid = yield this._import(gltf);
        });
    }
    /**
     * Import a {@link VRMHumanoid} from a VRM.
     *
     * @param gltf A parsed result of GLTF taken from GLTFLoader
     */
    _import(gltf) {
        return __awaiter$6(this, void 0, void 0, function* () {
            const v1Result = yield this._v1Import(gltf);
            if (v1Result) {
                return v1Result;
            }
            const v0Result = yield this._v0Import(gltf);
            if (v0Result) {
                return v0Result;
            }
            return null;
        });
    }
    _v1Import(gltf) {
        var _a, _b;
        return __awaiter$6(this, void 0, void 0, function* () {
            const json = this.parser.json;
            // early abort if it doesn't use vrm
            const isVRMUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf('VRMC_vrm')) !== -1;
            if (!isVRMUsed) {
                return null;
            }
            const extension = (_b = json.extensions) === null || _b === void 0 ? void 0 : _b['VRMC_vrm'];
            if (!extension) {
                return null;
            }
            const specVersion = extension.specVersion;
            if (!POSSIBLE_SPEC_VERSIONS$2$1.has(specVersion)) {
                console.warn(`VRMHumanoidLoaderPlugin: Unknown VRMC_vrm specVersion "${specVersion}"`);
                return null;
            }
            const schemaHumanoid = extension.humanoid;
            if (!schemaHumanoid) {
                return null;
            }
            /**
             * compat: 1.0-beta thumb bone names
             *
             * `true` if `leftThumbIntermediate` or `rightThumbIntermediate` exists
             */
            const existsPreviousThumbName = schemaHumanoid.humanBones.leftThumbIntermediate != null ||
                schemaHumanoid.humanBones.rightThumbIntermediate != null;
            const humanBones = {};
            if (schemaHumanoid.humanBones != null) {
                yield Promise.all(Object.entries(schemaHumanoid.humanBones).map(([boneNameString, schemaHumanBone]) => __awaiter$6(this, void 0, void 0, function* () {
                    let boneName = boneNameString;
                    const index = schemaHumanBone.node;
                    // compat: 1.0-beta previous thumb bone names
                    if (existsPreviousThumbName) {
                        const thumbBoneName = thumbBoneNameMap[boneName];
                        if (thumbBoneName != null) {
                            boneName = thumbBoneName;
                        }
                    }
                    const node = yield this.parser.getDependency('node', index);
                    // if the specified node does not exist, emit a warning
                    if (node == null) {
                        console.warn(`A glTF node bound to the humanoid bone ${boneName} (index = ${index}) does not exist`);
                        return;
                    }
                    // set to the `humanBones`
                    humanBones[boneName] = { node };
                })));
            }
            const humanoid = new VRMHumanoid(this._ensureRequiredBonesExist(humanBones), {
                autoUpdateHumanBones: this.autoUpdateHumanBones,
            });
            gltf.scene.add(humanoid.normalizedHumanBonesRoot);
            if (this.helperRoot) {
                const helper = new VRMHumanoidHelper(humanoid);
                this.helperRoot.add(helper);
                helper.renderOrder = this.helperRoot.renderOrder;
            }
            return humanoid;
        });
    }
    _v0Import(gltf) {
        var _a;
        return __awaiter$6(this, void 0, void 0, function* () {
            const json = this.parser.json;
            const vrmExt = (_a = json.extensions) === null || _a === void 0 ? void 0 : _a.VRM;
            if (!vrmExt) {
                return null;
            }
            const schemaHumanoid = vrmExt.humanoid;
            if (!schemaHumanoid) {
                return null;
            }
            const humanBones = {};
            if (schemaHumanoid.humanBones != null) {
                yield Promise.all(schemaHumanoid.humanBones.map((bone) => __awaiter$6(this, void 0, void 0, function* () {
                    const boneName = bone.bone;
                    const index = bone.node;
                    if (boneName == null || index == null) {
                        return;
                    }
                    const node = yield this.parser.getDependency('node', index);
                    // if the specified node does not exist, emit a warning
                    if (node == null) {
                        console.warn(`A glTF node bound to the humanoid bone ${boneName} (index = ${index}) does not exist`);
                        return;
                    }
                    // map to new bone name
                    const thumbBoneName = thumbBoneNameMap[boneName];
                    const newBoneName = (thumbBoneName !== null && thumbBoneName !== void 0 ? thumbBoneName : boneName);
                    // v0 VRMs might have a multiple nodes attached to a single bone...
                    // so if there already is an entry in the `humanBones`, show a warning and ignore it
                    if (humanBones[newBoneName] != null) {
                        console.warn(`Multiple bone entries for ${newBoneName} detected (index = ${index}), ignoring duplicated entries.`);
                        return;
                    }
                    // set to the `humanBones`
                    humanBones[newBoneName] = { node };
                })));
            }
            const humanoid = new VRMHumanoid(this._ensureRequiredBonesExist(humanBones), {
                autoUpdateHumanBones: this.autoUpdateHumanBones,
            });
            gltf.scene.add(humanoid.normalizedHumanBonesRoot);
            if (this.helperRoot) {
                const helper = new VRMHumanoidHelper(humanoid);
                this.helperRoot.add(helper);
                helper.renderOrder = this.helperRoot.renderOrder;
            }
            return humanoid;
        });
    }
    /**
     * Ensure required bones exist in given human bones.
     * @param humanBones Human bones
     * @returns Human bones, no longer partial!
     */
    _ensureRequiredBonesExist(humanBones) {
        // ensure required bones exist
        const missingRequiredBones = Object.values(VRMRequiredHumanBoneName).filter((requiredBoneName) => humanBones[requiredBoneName] == null);
        // throw an error if there are missing bones
        if (missingRequiredBones.length > 0) {
            throw new Error(`VRMHumanoidLoaderPlugin: These humanoid bones are required but not exist: ${missingRequiredBones.join(', ')}`);
        }
        return humanBones;
    }
}

class FanBufferGeometry extends THREE.BufferGeometry {
    constructor() {
        super();
        this._currentTheta = 0;
        this._currentRadius = 0;
        this.theta = 0.0;
        this.radius = 0.0;
        this._currentTheta = 0.0;
        this._currentRadius = 0.0;
        this._attrPos = new THREE.BufferAttribute(new Float32Array(65 * 3), 3);
        this.setAttribute('position', this._attrPos);
        this._attrIndex = new THREE.BufferAttribute(new Uint16Array(3 * 63), 1);
        this.setIndex(this._attrIndex);
        this._buildIndex();
        this.update();
    }
    update() {
        let shouldUpdateGeometry = false;
        if (this._currentTheta !== this.theta) {
            this._currentTheta = this.theta;
            shouldUpdateGeometry = true;
        }
        if (this._currentRadius !== this.radius) {
            this._currentRadius = this.radius;
            shouldUpdateGeometry = true;
        }
        if (shouldUpdateGeometry) {
            this._buildPosition();
        }
    }
    _buildPosition() {
        this._attrPos.setXYZ(0, 0.0, 0.0, 0.0);
        for (let i = 0; i < 64; i++) {
            const t = (i / 63.0) * this._currentTheta;
            this._attrPos.setXYZ(i + 1, this._currentRadius * Math.sin(t), 0.0, this._currentRadius * Math.cos(t));
        }
        this._attrPos.needsUpdate = true;
    }
    _buildIndex() {
        for (let i = 0; i < 63; i++) {
            this._attrIndex.setXYZ(i * 3, 0, i + 1, i + 2);
        }
        this._attrIndex.needsUpdate = true;
    }
}

class LineAndSphereBufferGeometry extends THREE.BufferGeometry {
    constructor() {
        super();
        this.radius = 0.0;
        this._currentRadius = 0.0;
        this.tail = new THREE.Vector3();
        this._currentTail = new THREE.Vector3();
        this._attrPos = new THREE.BufferAttribute(new Float32Array(294), 3);
        this.setAttribute('position', this._attrPos);
        this._attrIndex = new THREE.BufferAttribute(new Uint16Array(194), 1);
        this.setIndex(this._attrIndex);
        this._buildIndex();
        this.update();
    }
    update() {
        let shouldUpdateGeometry = false;
        if (this._currentRadius !== this.radius) {
            this._currentRadius = this.radius;
            shouldUpdateGeometry = true;
        }
        if (!this._currentTail.equals(this.tail)) {
            this._currentTail.copy(this.tail);
            shouldUpdateGeometry = true;
        }
        if (shouldUpdateGeometry) {
            this._buildPosition();
        }
    }
    _buildPosition() {
        for (let i = 0; i < 32; i++) {
            const t = (i / 16.0) * Math.PI;
            this._attrPos.setXYZ(i, Math.cos(t), Math.sin(t), 0.0);
            this._attrPos.setXYZ(32 + i, 0.0, Math.cos(t), Math.sin(t));
            this._attrPos.setXYZ(64 + i, Math.sin(t), 0.0, Math.cos(t));
        }
        this.scale(this._currentRadius, this._currentRadius, this._currentRadius);
        this.translate(this._currentTail.x, this._currentTail.y, this._currentTail.z);
        this._attrPos.setXYZ(96, 0, 0, 0);
        this._attrPos.setXYZ(97, this._currentTail.x, this._currentTail.y, this._currentTail.z);
        this._attrPos.needsUpdate = true;
    }
    _buildIndex() {
        for (let i = 0; i < 32; i++) {
            const i1 = (i + 1) % 32;
            this._attrIndex.setXY(i * 2, i, i1);
            this._attrIndex.setXY(64 + i * 2, 32 + i, 32 + i1);
            this._attrIndex.setXY(128 + i * 2, 64 + i, 64 + i1);
        }
        this._attrIndex.setXY(192, 96, 97);
        this._attrIndex.needsUpdate = true;
    }
}

const _quatA$2$1 = new THREE.Quaternion();
const _quatB$2$1 = new THREE.Quaternion();
const _v3A$1$2 = new THREE.Vector3();
const _v3B$1$2 = new THREE.Vector3();
const SQRT_2_OVER_2 = Math.sqrt(2.0) / 2.0;
const QUAT_XY_CW90 = new THREE.Quaternion(0, 0, -SQRT_2_OVER_2, SQRT_2_OVER_2);
const VEC3_POSITIVE_Y = new THREE.Vector3(0.0, 1.0, 0.0);
class VRMLookAtHelper extends THREE.Group {
    constructor(lookAt) {
        super();
        this.matrixAutoUpdate = false;
        this.vrmLookAt = lookAt;
        {
            const geometry = new FanBufferGeometry();
            geometry.radius = 0.5;
            const material = new THREE.MeshBasicMaterial({
                color: 0x00ff00,
                transparent: true,
                opacity: 0.5,
                side: THREE.DoubleSide,
                depthTest: false,
                depthWrite: false,
            });
            this._meshPitch = new THREE.Mesh(geometry, material);
            this.add(this._meshPitch);
        }
        {
            const geometry = new FanBufferGeometry();
            geometry.radius = 0.5;
            const material = new THREE.MeshBasicMaterial({
                color: 0xff0000,
                transparent: true,
                opacity: 0.5,
                side: THREE.DoubleSide,
                depthTest: false,
                depthWrite: false,
            });
            this._meshYaw = new THREE.Mesh(geometry, material);
            this.add(this._meshYaw);
        }
        {
            const geometry = new LineAndSphereBufferGeometry();
            geometry.radius = 0.1;
            const material = new THREE.LineBasicMaterial({
                color: 0xffffff,
                depthTest: false,
                depthWrite: false,
            });
            this._lineTarget = new THREE.LineSegments(geometry, material);
            this._lineTarget.frustumCulled = false;
            this.add(this._lineTarget);
        }
    }
    dispose() {
        this._meshYaw.geometry.dispose();
        this._meshYaw.material.dispose();
        this._meshPitch.geometry.dispose();
        this._meshPitch.material.dispose();
        this._lineTarget.geometry.dispose();
        this._lineTarget.material.dispose();
    }
    updateMatrixWorld(force) {
        // update geometries
        const yaw = THREE.MathUtils.DEG2RAD * this.vrmLookAt.yaw;
        this._meshYaw.geometry.theta = yaw;
        this._meshYaw.geometry.update();
        const pitch = THREE.MathUtils.DEG2RAD * this.vrmLookAt.pitch;
        this._meshPitch.geometry.theta = pitch;
        this._meshPitch.geometry.update();
        // get world position and quaternion
        this.vrmLookAt.getLookAtWorldPosition(_v3A$1$2);
        this.vrmLookAt.getLookAtWorldQuaternion(_quatA$2$1);
        // calculate rotation using faceFront
        _quatA$2$1.multiply(this.vrmLookAt.getFaceFrontQuaternion(_quatB$2$1));
        // set transform to meshes
        this._meshYaw.position.copy(_v3A$1$2);
        this._meshYaw.quaternion.copy(_quatA$2$1);
        this._meshPitch.position.copy(_v3A$1$2);
        this._meshPitch.quaternion.copy(_quatA$2$1);
        this._meshPitch.quaternion.multiply(_quatB$2$1.setFromAxisAngle(VEC3_POSITIVE_Y, yaw));
        this._meshPitch.quaternion.multiply(QUAT_XY_CW90);
        // update target line and sphere
        const { target, autoUpdate } = this.vrmLookAt;
        if (target != null && autoUpdate) {
            target.getWorldPosition(_v3B$1$2).sub(_v3A$1$2);
            this._lineTarget.geometry.tail.copy(_v3B$1$2);
            this._lineTarget.geometry.update();
            this._lineTarget.position.copy(_v3A$1$2);
        }
        // apply transform to meshes
        super.updateMatrixWorld(force);
    }
}

const _position = new THREE.Vector3();
const _scale = new THREE.Vector3();
/**
 * A replacement of `Object3D.getWorldQuaternion`.
 * Extract the world quaternion of an object from its world space matrix, without calling `Object3D.updateWorldMatrix`.
 * Use this when you're sure that the world matrix is up-to-date.
 *
 * @param object The object
 * @param out A target quaternion
 */
function getWorldQuaternionLite(object, out) {
    object.matrixWorld.decompose(_position, out, _scale);
    return out;
}

/**
 * Calculate azimuth / altitude angles from a vector.
 *
 * This returns a difference of angles from (1, 0, 0).
 * Azimuth represents an angle around Y axis.
 * Altitude represents an angle around Z axis.
 * It is rotated in intrinsic Y-Z order.
 *
 * @param vector The vector
 * @returns A tuple contains two angles, `[ azimuth, altitude ]`
 */
function calcAzimuthAltitude(vector) {
    return [Math.atan2(-vector.z, vector.x), Math.atan2(vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z))];
}

/**
 * Make sure the angle is within -PI to PI.
 *
 * @example
 * ```js
 * sanitizeAngle(1.5 * Math.PI) // -0.5 * PI
 * ```
 *
 * @param angle An input angle
 */
function sanitizeAngle(angle) {
    const roundTurn = Math.round(angle / 2.0 / Math.PI);
    return angle - 2.0 * Math.PI * roundTurn;
}

const VEC3_POSITIVE_Z$1 = new THREE.Vector3(0.0, 0.0, 1.0);
const _v3A$6 = new THREE.Vector3();
const _v3B$3 = new THREE.Vector3();
const _v3C$2 = new THREE.Vector3();
const _quatA$1$1 = new THREE.Quaternion();
const _quatB$1$1 = new THREE.Quaternion();
const _quatC$1 = new THREE.Quaternion();
const _quatD = new THREE.Quaternion();
const _eulerA$1 = new THREE.Euler();
/**
 * A class controls eye gaze movements of a VRM.
 */
class VRMLookAt {
    /**
     * Its current angle around Y axis, in degree.
     */
    get yaw() {
        return this._yaw;
    }
    /**
     * Its current angle around Y axis, in degree.
     */
    set yaw(value) {
        this._yaw = value;
        this._needsUpdate = true;
    }
    /**
     * Its current angle around X axis, in degree.
     */
    get pitch() {
        return this._pitch;
    }
    /**
     * Its current angle around X axis, in degree.
     */
    set pitch(value) {
        this._pitch = value;
        this._needsUpdate = true;
    }
    /**
     * @deprecated Use {@link getEuler} instead.
     */
    get euler() {
        console.warn('VRMLookAt: euler is deprecated. use getEuler() instead.');
        return this.getEuler(new THREE.Euler());
    }
    /**
     * Create a new {@link VRMLookAt}.
     *
     * @param humanoid A {@link VRMHumanoid}
     * @param applier A {@link VRMLookAtApplier}
     */
    constructor(humanoid, applier) {
        /**
         * The origin of LookAt. Position offset from the head bone.
         */
        this.offsetFromHeadBone = new THREE.Vector3();
        /**
         * If this is true, the LookAt will be updated automatically by calling {@link update}, towarding the direction to the {@link target}.
         * `true` by default.
         *
         * See also: {@link target}
         */
        this.autoUpdate = true;
        /**
         * The front direction of the face.
         * Intended to be used for VRM 0.0 compat (VRM 0.0 models are facing Z- instead of Z+).
         * You usually don't want to touch this.
         */
        this.faceFront = new THREE.Vector3(0.0, 0.0, 1.0);
        this.humanoid = humanoid;
        this.applier = applier;
        this._yaw = 0.0;
        this._pitch = 0.0;
        this._needsUpdate = true;
        this._restHeadWorldQuaternion = this.getLookAtWorldQuaternion(new THREE.Quaternion());
    }
    /**
     * Get its yaw-pitch angles as an `Euler`.
     * Does NOT consider {@link faceFront}; it returns `Euler(0, 0, 0; "YXZ")` by default regardless of the faceFront value.
     *
     * @param target The target euler
     */
    getEuler(target) {
        return target.set(THREE.MathUtils.DEG2RAD * this._pitch, THREE.MathUtils.DEG2RAD * this._yaw, 0.0, 'YXZ');
    }
    /**
     * Copy the given {@link VRMLookAt} into this one.
     * {@link humanoid} must be same as the source one.
     * {@link applier} will reference the same instance as the source one.
     * @param source The {@link VRMLookAt} you want to copy
     * @returns this
     */
    copy(source) {
        if (this.humanoid !== source.humanoid) {
            throw new Error('VRMLookAt: humanoid must be same in order to copy');
        }
        this.offsetFromHeadBone.copy(source.offsetFromHeadBone);
        this.applier = source.applier;
        this.autoUpdate = source.autoUpdate;
        this.target = source.target;
        this.faceFront.copy(source.faceFront);
        return this;
    }
    /**
     * Returns a clone of this {@link VRMLookAt}.
     * Note that {@link humanoid} and {@link applier} will reference the same instance as this one.
     * @returns Copied {@link VRMLookAt}
     */
    clone() {
        return new VRMLookAt(this.humanoid, this.applier).copy(this);
    }
    /**
     * Reset the lookAt direction (yaw and pitch) to the initial direction.
     */
    reset() {
        this._yaw = 0.0;
        this._pitch = 0.0;
        this._needsUpdate = true;
    }
    /**
     * Get its lookAt position in world coordinate.
     *
     * @param target A target `THREE.Vector3`
     */
    getLookAtWorldPosition(target) {
        const head = this.humanoid.getRawBoneNode('head');
        return target.copy(this.offsetFromHeadBone).applyMatrix4(head.matrixWorld);
    }
    /**
     * Get its lookAt rotation in world coordinate.
     * Does NOT consider {@link faceFront}.
     *
     * @param target A target `THREE.Quaternion`
     */
    getLookAtWorldQuaternion(target) {
        const head = this.humanoid.getRawBoneNode('head');
        return getWorldQuaternionLite(head, target);
    }
    /**
     * Get a quaternion that rotates the +Z unit vector of the humanoid Head to the {@link faceFront} direction.
     *
     * @param target A target `THREE.Quaternion`
     */
    getFaceFrontQuaternion(target) {
        if (this.faceFront.distanceToSquared(VEC3_POSITIVE_Z$1) < 0.01) {
            return target.copy(this._restHeadWorldQuaternion).invert();
        }
        const [faceFrontAzimuth, faceFrontAltitude] = calcAzimuthAltitude(this.faceFront);
        _eulerA$1.set(0.0, 0.5 * Math.PI + faceFrontAzimuth, faceFrontAltitude, 'YZX');
        return target.setFromEuler(_eulerA$1).premultiply(_quatD.copy(this._restHeadWorldQuaternion).invert());
    }
    /**
     * Get its LookAt direction in world coordinate.
     *
     * @param target A target `THREE.Vector3`
     */
    getLookAtWorldDirection(target) {
        this.getLookAtWorldQuaternion(_quatB$1$1);
        this.getFaceFrontQuaternion(_quatC$1);
        return target
            .copy(VEC3_POSITIVE_Z$1)
            .applyQuaternion(_quatB$1$1)
            .applyQuaternion(_quatC$1)
            .applyEuler(this.getEuler(_eulerA$1));
    }
    /**
     * Set its lookAt target position.
     *
     * Note that its result will be instantly overwritten if {@link VRMLookAtHead.autoUpdate} is enabled.
     *
     * If you want to track an object continuously, you might want to use {@link target} instead.
     *
     * @param position A target position, in world space
     */
    lookAt(position) {
        // Look at direction in local coordinate
        const headRotDiffInv = _quatA$1$1
            .copy(this._restHeadWorldQuaternion)
            .multiply(quatInvertCompat$1(this.getLookAtWorldQuaternion(_quatB$1$1)));
        const headPos = this.getLookAtWorldPosition(_v3B$3);
        const lookAtDir = _v3C$2.copy(position).sub(headPos).applyQuaternion(headRotDiffInv).normalize();
        // calculate angles
        const [azimuthFrom, altitudeFrom] = calcAzimuthAltitude(this.faceFront);
        const [azimuthTo, altitudeTo] = calcAzimuthAltitude(lookAtDir);
        const yaw = sanitizeAngle(azimuthTo - azimuthFrom);
        const pitch = sanitizeAngle(altitudeFrom - altitudeTo); // spinning (1, 0, 0) CCW around Z axis makes the vector look up, while spinning (0, 0, 1) CCW around X axis makes the vector look down
        // apply angles
        this._yaw = THREE.MathUtils.RAD2DEG * yaw;
        this._pitch = THREE.MathUtils.RAD2DEG * pitch;
        this._needsUpdate = true;
    }
    /**
     * Update the VRMLookAtHead.
     * If {@link autoUpdate} is enabled, this will make it look at the {@link target}.
     *
     * @param delta deltaTime, it isn't used though. You can use the parameter if you want to use this in your own extended {@link VRMLookAt}.
     */
    update(delta) {
        if (this.target != null && this.autoUpdate) {
            this.lookAt(this.target.getWorldPosition(_v3A$6));
        }
        if (this._needsUpdate) {
            this._needsUpdate = false;
            this.applier.applyYawPitch(this._yaw, this._pitch);
        }
    }
}
VRMLookAt.EULER_ORDER = 'YXZ'; // yaw-pitch-roll

const VEC3_POSITIVE_Z = new THREE.Vector3(0.0, 0.0, 1.0);
const _quatA$6 = new THREE.Quaternion();
const _quatB$3 = new THREE.Quaternion();
const _eulerA = new THREE.Euler(0.0, 0.0, 0.0, 'YXZ');
/**
 * A class that applies eye gaze directions to a VRM.
 * It will be used by {@link VRMLookAt}.
 */
class VRMLookAtBoneApplier {
    /**
     * Create a new {@link VRMLookAtBoneApplier}.
     *
     * @param humanoid A {@link VRMHumanoid}
     * @param rangeMapHorizontalInner A {@link VRMLookAtRangeMap} used for inner transverse direction
     * @param rangeMapHorizontalOuter A {@link VRMLookAtRangeMap} used for outer transverse direction
     * @param rangeMapVerticalDown A {@link VRMLookAtRangeMap} used for down direction
     * @param rangeMapVerticalUp A {@link VRMLookAtRangeMap} used for up direction
     */
    constructor(humanoid, rangeMapHorizontalInner, rangeMapHorizontalOuter, rangeMapVerticalDown, rangeMapVerticalUp) {
        this.humanoid = humanoid;
        this.rangeMapHorizontalInner = rangeMapHorizontalInner;
        this.rangeMapHorizontalOuter = rangeMapHorizontalOuter;
        this.rangeMapVerticalDown = rangeMapVerticalDown;
        this.rangeMapVerticalUp = rangeMapVerticalUp;
        this.faceFront = new THREE.Vector3(0.0, 0.0, 1.0);
        // set rest quaternions
        this._restQuatLeftEye = new THREE.Quaternion();
        this._restQuatRightEye = new THREE.Quaternion();
        this._restLeftEyeParentWorldQuat = new THREE.Quaternion();
        this._restRightEyeParentWorldQuat = new THREE.Quaternion();
        const leftEye = this.humanoid.getRawBoneNode('leftEye');
        const rightEye = this.humanoid.getRawBoneNode('rightEye');
        if (leftEye) {
            this._restQuatLeftEye.copy(leftEye.quaternion);
            getWorldQuaternionLite(leftEye.parent, this._restLeftEyeParentWorldQuat);
        }
        if (rightEye) {
            this._restQuatRightEye.copy(rightEye.quaternion);
            getWorldQuaternionLite(rightEye.parent, this._restRightEyeParentWorldQuat);
        }
    }
    /**
     * Apply the input angle to its associated VRM model.
     *
     * @param yaw Rotation around Y axis, in degree
     * @param pitch Rotation around X axis, in degree
     */
    applyYawPitch(yaw, pitch) {
        const leftEye = this.humanoid.getRawBoneNode('leftEye');
        const rightEye = this.humanoid.getRawBoneNode('rightEye');
        const leftEyeNormalized = this.humanoid.getNormalizedBoneNode('leftEye');
        const rightEyeNormalized = this.humanoid.getNormalizedBoneNode('rightEye');
        // left
        if (leftEye) {
            if (pitch < 0.0) {
                _eulerA.x = -THREE.MathUtils.DEG2RAD * this.rangeMapVerticalDown.map(-pitch);
            }
            else {
                _eulerA.x = THREE.MathUtils.DEG2RAD * this.rangeMapVerticalUp.map(pitch);
            }
            if (yaw < 0.0) {
                _eulerA.y = -THREE.MathUtils.DEG2RAD * this.rangeMapHorizontalInner.map(-yaw);
            }
            else {
                _eulerA.y = THREE.MathUtils.DEG2RAD * this.rangeMapHorizontalOuter.map(yaw);
            }
            _quatA$6.setFromEuler(_eulerA);
            this._getWorldFaceFrontQuat(_quatB$3);
            // _quatB * _quatA * _quatB^-1
            // where _quatA is LookAt rotation
            // and _quatB is worldFaceFrontQuat
            leftEyeNormalized.quaternion.copy(_quatB$3).multiply(_quatA$6).multiply(_quatB$3.invert());
            _quatA$6.copy(this._restLeftEyeParentWorldQuat);
            // _quatA^-1 * leftEyeNormalized.quaternion * _quatA * restQuatLeftEye
            // where _quatA is restLeftEyeParentWorldQuat
            leftEye.quaternion
                .copy(leftEyeNormalized.quaternion)
                .multiply(_quatA$6)
                .premultiply(_quatA$6.invert())
                .multiply(this._restQuatLeftEye);
        }
        // right
        if (rightEye) {
            if (pitch < 0.0) {
                _eulerA.x = -THREE.MathUtils.DEG2RAD * this.rangeMapVerticalDown.map(-pitch);
            }
            else {
                _eulerA.x = THREE.MathUtils.DEG2RAD * this.rangeMapVerticalUp.map(pitch);
            }
            if (yaw < 0.0) {
                _eulerA.y = -THREE.MathUtils.DEG2RAD * this.rangeMapHorizontalOuter.map(-yaw);
            }
            else {
                _eulerA.y = THREE.MathUtils.DEG2RAD * this.rangeMapHorizontalInner.map(yaw);
            }
            _quatA$6.setFromEuler(_eulerA);
            this._getWorldFaceFrontQuat(_quatB$3);
            // _quatB * _quatA * _quatB^-1
            // where _quatA is LookAt rotation
            // and _quatB is worldFaceFrontQuat
            rightEyeNormalized.quaternion.copy(_quatB$3).multiply(_quatA$6).multiply(_quatB$3.invert());
            _quatA$6.copy(this._restRightEyeParentWorldQuat);
            // _quatA^-1 * rightEyeNormalized.quaternion * _quatA * restQuatRightEye
            // where _quatA is restRightEyeParentWorldQuat
            rightEye.quaternion
                .copy(rightEyeNormalized.quaternion)
                .multiply(_quatA$6)
                .premultiply(_quatA$6.invert())
                .multiply(this._restQuatRightEye);
        }
    }
    /**
     * @deprecated Use {@link applyYawPitch} instead.
     */
    lookAt(euler) {
        console.warn('VRMLookAtBoneApplier: lookAt() is deprecated. use apply() instead.');
        const yaw = THREE.MathUtils.RAD2DEG * euler.y;
        const pitch = THREE.MathUtils.RAD2DEG * euler.x;
        this.applyYawPitch(yaw, pitch);
    }
    /**
     * Get a quaternion that rotates the world-space +Z unit vector to the {@link faceFront} direction.
     *
     * @param target A target `THREE.Quaternion`
     */
    _getWorldFaceFrontQuat(target) {
        if (this.faceFront.distanceToSquared(VEC3_POSITIVE_Z) < 0.01) {
            return target.identity();
        }
        const [faceFrontAzimuth, faceFrontAltitude] = calcAzimuthAltitude(this.faceFront);
        _eulerA.set(0.0, 0.5 * Math.PI + faceFrontAzimuth, faceFrontAltitude, 'YZX');
        return target.setFromEuler(_eulerA);
    }
}
/**
 * Represent its type of applier.
 */
VRMLookAtBoneApplier.type = 'bone';

/**
 * A class that applies eye gaze directions to a VRM.
 * It will be used by {@link VRMLookAt}.
 */
class VRMLookAtExpressionApplier {
    /**
     * Create a new {@link VRMLookAtExpressionApplier}.
     *
     * @param expressions A {@link VRMExpressionManager}
     * @param rangeMapHorizontalInner A {@link VRMLookAtRangeMap} used for inner transverse direction
     * @param rangeMapHorizontalOuter A {@link VRMLookAtRangeMap} used for outer transverse direction
     * @param rangeMapVerticalDown A {@link VRMLookAtRangeMap} used for down direction
     * @param rangeMapVerticalUp A {@link VRMLookAtRangeMap} used for up direction
     */
    constructor(expressions, rangeMapHorizontalInner, rangeMapHorizontalOuter, rangeMapVerticalDown, rangeMapVerticalUp) {
        this.expressions = expressions;
        this.rangeMapHorizontalInner = rangeMapHorizontalInner;
        this.rangeMapHorizontalOuter = rangeMapHorizontalOuter;
        this.rangeMapVerticalDown = rangeMapVerticalDown;
        this.rangeMapVerticalUp = rangeMapVerticalUp;
    }
    /**
     * Apply the input angle to its associated VRM model.
     *
     * @param yaw Rotation around Y axis, in degree
     * @param pitch Rotation around X axis, in degree
     */
    applyYawPitch(yaw, pitch) {
        if (pitch < 0.0) {
            this.expressions.setValue('lookDown', 0.0);
            this.expressions.setValue('lookUp', this.rangeMapVerticalUp.map(-pitch));
        }
        else {
            this.expressions.setValue('lookUp', 0.0);
            this.expressions.setValue('lookDown', this.rangeMapVerticalDown.map(pitch));
        }
        if (yaw < 0.0) {
            this.expressions.setValue('lookLeft', 0.0);
            this.expressions.setValue('lookRight', this.rangeMapHorizontalOuter.map(-yaw));
        }
        else {
            this.expressions.setValue('lookRight', 0.0);
            this.expressions.setValue('lookLeft', this.rangeMapHorizontalOuter.map(yaw));
        }
    }
    /**
     * @deprecated Use {@link applyYawPitch} instead.
     */
    lookAt(euler) {
        console.warn('VRMLookAtBoneApplier: lookAt() is deprecated. use apply() instead.');
        const yaw = THREE.MathUtils.RAD2DEG * euler.y;
        const pitch = THREE.MathUtils.RAD2DEG * euler.x;
        this.applyYawPitch(yaw, pitch);
    }
}
/**
 * Represent its type of applier.
 */
VRMLookAtExpressionApplier.type = 'expression';

class VRMLookAtRangeMap {
    /**
     * Create a new {@link VRMLookAtRangeMap}.
     *
     * @param inputMaxValue The {@link inputMaxValue} of the map
     * @param outputScale The {@link outputScale} of the map
     */
    constructor(inputMaxValue, outputScale) {
        this.inputMaxValue = inputMaxValue;
        this.outputScale = outputScale;
    }
    /**
     * Evaluate an input value and output a mapped value.
     * @param src The input value
     */
    map(src) {
        return this.outputScale * saturate(src / this.inputMaxValue);
    }
}

/**
 * Possible spec versions it recognizes.
 */
const POSSIBLE_SPEC_VERSIONS$1$1 = new Set(['1.0', '1.0-beta']);
/**
 * The minimum permitted value for {@link V1VRMSchema.LookAtRangeMap.inputMaxValue}.
 * If the given value is smaller than this, the loader shows a warning and clamps up the value.
 */
const INPUT_MAX_VALUE_MINIMUM = 0.01;
/**
 * A plugin of GLTFLoader that imports a {@link VRMLookAt} from a VRM extension of a GLTF.
 */
class VRMLookAtLoaderPlugin {
    get name() {
        // We should use the extension name instead but we have multiple plugins for an extension...
        return 'VRMLookAtLoaderPlugin';
    }
    constructor(parser, options) {
        this.parser = parser;
        this.helperRoot = options === null || options === void 0 ? void 0 : options.helperRoot;
    }
    afterRoot(gltf) {
        return __awaiter$6(this, void 0, void 0, function* () {
            const vrmHumanoid = gltf.userData.vrmHumanoid;
            // explicitly distinguish null and undefined
            // since vrmHumanoid might be null as a result
            if (vrmHumanoid === null) {
                return;
            }
            else if (vrmHumanoid === undefined) {
                throw new Error('VRMLookAtLoaderPlugin: vrmHumanoid is undefined. VRMHumanoidLoaderPlugin have to be used first');
            }
            const vrmExpressionManager = gltf.userData.vrmExpressionManager;
            if (vrmExpressionManager === null) {
                return;
            }
            else if (vrmExpressionManager === undefined) {
                throw new Error('VRMLookAtLoaderPlugin: vrmExpressionManager is undefined. VRMExpressionLoaderPlugin have to be used first');
            }
            gltf.userData.vrmLookAt = yield this._import(gltf, vrmHumanoid, vrmExpressionManager);
        });
    }
    /**
     * Import a {@link VRMLookAt} from a VRM.
     *
     * @param gltf A parsed result of GLTF taken from GLTFLoader
     * @param humanoid A {@link VRMHumanoid} instance that represents the VRM
     * @param expressions A {@link VRMExpressionManager} instance that represents the VRM
     */
    _import(gltf, humanoid, expressions) {
        return __awaiter$6(this, void 0, void 0, function* () {
            if (humanoid == null || expressions == null) {
                return null;
            }
            const v1Result = yield this._v1Import(gltf, humanoid, expressions);
            if (v1Result) {
                return v1Result;
            }
            const v0Result = yield this._v0Import(gltf, humanoid, expressions);
            if (v0Result) {
                return v0Result;
            }
            return null;
        });
    }
    _v1Import(gltf, humanoid, expressions) {
        var _a, _b, _c;
        return __awaiter$6(this, void 0, void 0, function* () {
            const json = this.parser.json;
            // early abort if it doesn't use vrm
            const isVRMUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf('VRMC_vrm')) !== -1;
            if (!isVRMUsed) {
                return null;
            }
            const extension = (_b = json.extensions) === null || _b === void 0 ? void 0 : _b['VRMC_vrm'];
            if (!extension) {
                return null;
            }
            const specVersion = extension.specVersion;
            if (!POSSIBLE_SPEC_VERSIONS$1$1.has(specVersion)) {
                console.warn(`VRMLookAtLoaderPlugin: Unknown VRMC_vrm specVersion "${specVersion}"`);
                return null;
            }
            const schemaLookAt = extension.lookAt;
            if (!schemaLookAt) {
                return null;
            }
            const defaultOutputScale = schemaLookAt.type === 'expression' ? 1.0 : 10.0;
            const mapHI = this._v1ImportRangeMap(schemaLookAt.rangeMapHorizontalInner, defaultOutputScale);
            const mapHO = this._v1ImportRangeMap(schemaLookAt.rangeMapHorizontalOuter, defaultOutputScale);
            const mapVD = this._v1ImportRangeMap(schemaLookAt.rangeMapVerticalDown, defaultOutputScale);
            const mapVU = this._v1ImportRangeMap(schemaLookAt.rangeMapVerticalUp, defaultOutputScale);
            let applier;
            if (schemaLookAt.type === 'expression') {
                applier = new VRMLookAtExpressionApplier(expressions, mapHI, mapHO, mapVD, mapVU);
            }
            else {
                applier = new VRMLookAtBoneApplier(humanoid, mapHI, mapHO, mapVD, mapVU);
            }
            const lookAt = this._importLookAt(humanoid, applier);
            lookAt.offsetFromHeadBone.fromArray((_c = schemaLookAt.offsetFromHeadBone) !== null && _c !== void 0 ? _c : [0.0, 0.06, 0.0]);
            return lookAt;
        });
    }
    _v1ImportRangeMap(schemaRangeMap, defaultOutputScale) {
        var _a, _b;
        let inputMaxValue = (_a = schemaRangeMap === null || schemaRangeMap === void 0 ? void 0 : schemaRangeMap.inputMaxValue) !== null && _a !== void 0 ? _a : 90.0;
        const outputScale = (_b = schemaRangeMap === null || schemaRangeMap === void 0 ? void 0 : schemaRangeMap.outputScale) !== null && _b !== void 0 ? _b : defaultOutputScale;
        // It might cause NaN when `inputMaxValue` is too small
        // which makes the mesh of the head disappear
        // See: https://github.com/pixiv/three-vrm/issues/1201
        if (inputMaxValue < INPUT_MAX_VALUE_MINIMUM) {
            console.warn('VRMLookAtLoaderPlugin: inputMaxValue of a range map is too small. Consider reviewing the range map!');
            inputMaxValue = INPUT_MAX_VALUE_MINIMUM;
        }
        return new VRMLookAtRangeMap(inputMaxValue, outputScale);
    }
    _v0Import(gltf, humanoid, expressions) {
        var _a, _b, _c, _d;
        return __awaiter$6(this, void 0, void 0, function* () {
            const json = this.parser.json;
            // early abort if it doesn't use vrm
            const vrmExt = (_a = json.extensions) === null || _a === void 0 ? void 0 : _a.VRM;
            if (!vrmExt) {
                return null;
            }
            const schemaFirstPerson = vrmExt.firstPerson;
            if (!schemaFirstPerson) {
                return null;
            }
            const defaultOutputScale = schemaFirstPerson.lookAtTypeName === 'BlendShape' ? 1.0 : 10.0;
            const mapHI = this._v0ImportDegreeMap(schemaFirstPerson.lookAtHorizontalInner, defaultOutputScale);
            const mapHO = this._v0ImportDegreeMap(schemaFirstPerson.lookAtHorizontalOuter, defaultOutputScale);
            const mapVD = this._v0ImportDegreeMap(schemaFirstPerson.lookAtVerticalDown, defaultOutputScale);
            const mapVU = this._v0ImportDegreeMap(schemaFirstPerson.lookAtVerticalUp, defaultOutputScale);
            let applier;
            if (schemaFirstPerson.lookAtTypeName === 'BlendShape') {
                applier = new VRMLookAtExpressionApplier(expressions, mapHI, mapHO, mapVD, mapVU);
            }
            else {
                applier = new VRMLookAtBoneApplier(humanoid, mapHI, mapHO, mapVD, mapVU);
            }
            const lookAt = this._importLookAt(humanoid, applier);
            if (schemaFirstPerson.firstPersonBoneOffset) {
                lookAt.offsetFromHeadBone.set((_b = schemaFirstPerson.firstPersonBoneOffset.x) !== null && _b !== void 0 ? _b : 0.0, (_c = schemaFirstPerson.firstPersonBoneOffset.y) !== null && _c !== void 0 ? _c : 0.06, -((_d = schemaFirstPerson.firstPersonBoneOffset.z) !== null && _d !== void 0 ? _d : 0.0));
            }
            else {
                lookAt.offsetFromHeadBone.set(0.0, 0.06, 0.0);
            }
            // VRM 0.0 are facing Z- instead of Z+
            lookAt.faceFront.set(0.0, 0.0, -1.0);
            if (applier instanceof VRMLookAtBoneApplier) {
                applier.faceFront.set(0.0, 0.0, -1.0);
            }
            return lookAt;
        });
    }
    _v0ImportDegreeMap(schemaDegreeMap, defaultOutputScale) {
        var _a, _b;
        const curve = schemaDegreeMap === null || schemaDegreeMap === void 0 ? void 0 : schemaDegreeMap.curve;
        if (JSON.stringify(curve) !== '[0,0,0,1,1,1,1,0]') {
            console.warn('Curves of LookAtDegreeMap defined in VRM 0.0 are not supported');
        }
        let xRange = (_a = schemaDegreeMap === null || schemaDegreeMap === void 0 ? void 0 : schemaDegreeMap.xRange) !== null && _a !== void 0 ? _a : 90.0;
        const yRange = (_b = schemaDegreeMap === null || schemaDegreeMap === void 0 ? void 0 : schemaDegreeMap.yRange) !== null && _b !== void 0 ? _b : defaultOutputScale;
        // It might cause NaN when `xRange` is too small
        // which makes the mesh of the head disappear
        // See: https://github.com/pixiv/three-vrm/issues/1201
        if (xRange < INPUT_MAX_VALUE_MINIMUM) {
            console.warn('VRMLookAtLoaderPlugin: xRange of a degree map is too small. Consider reviewing the degree map!');
            xRange = INPUT_MAX_VALUE_MINIMUM;
        }
        return new VRMLookAtRangeMap(xRange, yRange);
    }
    _importLookAt(humanoid, applier) {
        const lookAt = new VRMLookAt(humanoid, applier);
        if (this.helperRoot) {
            const helper = new VRMLookAtHelper(lookAt);
            this.helperRoot.add(helper);
            helper.renderOrder = this.helperRoot.renderOrder;
        }
        return lookAt;
    }
}

/* eslint-disable @typescript-eslint/naming-convention */
/**
 * Represents a type of applier.
 */
const VRMLookAtTypeName = {
    Bone: 'bone',
    Expression: 'expression',
};

/**
 * Yoinked from https://github.com/mrdoob/three.js/blob/master/examples/jsm/loaders/GLTFLoader.js
 */
function resolveURL(url, path) {
    // Invalid URL
    if (typeof url !== 'string' || url === '')
        return '';
    // Host Relative URL
    if (/^https?:\/\//i.test(path) && /^\//.test(url)) {
        path = path.replace(/(^https?:\/\/[^/]+).*/i, '$1');
    }
    // Absolute URL http://,https://,//
    if (/^(https?:)?\/\//i.test(url))
        return url;
    // Data URI
    if (/^data:.*,.*$/i.test(url))
        return url;
    // Blob URL
    if (/^blob:.*$/i.test(url))
        return url;
    // Relative URL
    return path + url;
}

/**
 * Possible spec versions it recognizes.
 */
const POSSIBLE_SPEC_VERSIONS$5 = new Set(['1.0', '1.0-beta']);
/**
 * A plugin of GLTFLoader that imports a {@link VRM1Meta} from a VRM extension of a GLTF.
 */
class VRMMetaLoaderPlugin {
    get name() {
        // We should use the extension name instead but we have multiple plugins for an extension...
        return 'VRMMetaLoaderPlugin';
    }
    constructor(parser, options) {
        var _a, _b, _c;
        this.parser = parser;
        this.needThumbnailImage = (_a = options === null || options === void 0 ? void 0 : options.needThumbnailImage) !== null && _a !== void 0 ? _a : true;
        this.acceptLicenseUrls = (_b = options === null || options === void 0 ? void 0 : options.acceptLicenseUrls) !== null && _b !== void 0 ? _b : ['https://vrm.dev/licenses/1.0/'];
        this.acceptV0Meta = (_c = options === null || options === void 0 ? void 0 : options.acceptV0Meta) !== null && _c !== void 0 ? _c : true;
    }
    afterRoot(gltf) {
        return __awaiter$6(this, void 0, void 0, function* () {
            gltf.userData.vrmMeta = yield this._import(gltf);
        });
    }
    _import(gltf) {
        return __awaiter$6(this, void 0, void 0, function* () {
            const v1Result = yield this._v1Import(gltf);
            if (v1Result != null) {
                return v1Result;
            }
            const v0Result = yield this._v0Import(gltf);
            if (v0Result != null) {
                return v0Result;
            }
            return null;
        });
    }
    _v1Import(gltf) {
        var _a, _b, _c;
        return __awaiter$6(this, void 0, void 0, function* () {
            const json = this.parser.json;
            // early abort if it doesn't use vrm
            const isVRMUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf('VRMC_vrm')) !== -1;
            if (!isVRMUsed) {
                return null;
            }
            const extension = (_b = json.extensions) === null || _b === void 0 ? void 0 : _b['VRMC_vrm'];
            if (extension == null) {
                return null;
            }
            const specVersion = extension.specVersion;
            if (!POSSIBLE_SPEC_VERSIONS$5.has(specVersion)) {
                console.warn(`VRMMetaLoaderPlugin: Unknown VRMC_vrm specVersion "${specVersion}"`);
                return null;
            }
            const schemaMeta = extension.meta;
            if (!schemaMeta) {
                return null;
            }
            // throw an error if acceptV0Meta is false
            const licenseUrl = schemaMeta.licenseUrl;
            const acceptLicenseUrlsSet = new Set(this.acceptLicenseUrls);
            if (!acceptLicenseUrlsSet.has(licenseUrl)) {
                throw new Error(`VRMMetaLoaderPlugin: The license url "${licenseUrl}" is not accepted`);
            }
            let thumbnailImage = undefined;
            if (this.needThumbnailImage && schemaMeta.thumbnailImage != null) {
                thumbnailImage = (_c = (yield this._extractGLTFImage(schemaMeta.thumbnailImage))) !== null && _c !== void 0 ? _c : undefined;
            }
            return {
                metaVersion: '1',
                name: schemaMeta.name,
                version: schemaMeta.version,
                authors: schemaMeta.authors,
                copyrightInformation: schemaMeta.copyrightInformation,
                contactInformation: schemaMeta.contactInformation,
                references: schemaMeta.references,
                thirdPartyLicenses: schemaMeta.thirdPartyLicenses,
                thumbnailImage,
                licenseUrl: schemaMeta.licenseUrl,
                avatarPermission: schemaMeta.avatarPermission,
                allowExcessivelyViolentUsage: schemaMeta.allowExcessivelyViolentUsage,
                allowExcessivelySexualUsage: schemaMeta.allowExcessivelySexualUsage,
                commercialUsage: schemaMeta.commercialUsage,
                allowPoliticalOrReligiousUsage: schemaMeta.allowPoliticalOrReligiousUsage,
                allowAntisocialOrHateUsage: schemaMeta.allowAntisocialOrHateUsage,
                creditNotation: schemaMeta.creditNotation,
                allowRedistribution: schemaMeta.allowRedistribution,
                modification: schemaMeta.modification,
                otherLicenseUrl: schemaMeta.otherLicenseUrl,
            };
        });
    }
    _v0Import(gltf) {
        var _a;
        return __awaiter$6(this, void 0, void 0, function* () {
            const json = this.parser.json;
            // early abort if it doesn't use vrm
            const vrmExt = (_a = json.extensions) === null || _a === void 0 ? void 0 : _a.VRM;
            if (!vrmExt) {
                return null;
            }
            const schemaMeta = vrmExt.meta;
            if (!schemaMeta) {
                return null;
            }
            // throw an error if acceptV0Meta is false
            if (!this.acceptV0Meta) {
                throw new Error('VRMMetaLoaderPlugin: Attempted to load VRM0.0 meta but acceptV0Meta is false');
            }
            // load thumbnail texture
            let texture;
            if (this.needThumbnailImage && schemaMeta.texture != null && schemaMeta.texture !== -1) {
                texture = yield this.parser.getDependency('texture', schemaMeta.texture);
            }
            return {
                metaVersion: '0',
                allowedUserName: schemaMeta.allowedUserName,
                author: schemaMeta.author,
                commercialUssageName: schemaMeta.commercialUssageName,
                contactInformation: schemaMeta.contactInformation,
                licenseName: schemaMeta.licenseName,
                otherLicenseUrl: schemaMeta.otherLicenseUrl,
                otherPermissionUrl: schemaMeta.otherPermissionUrl,
                reference: schemaMeta.reference,
                sexualUssageName: schemaMeta.sexualUssageName,
                texture: texture !== null && texture !== void 0 ? texture : undefined,
                title: schemaMeta.title,
                version: schemaMeta.version,
                violentUssageName: schemaMeta.violentUssageName,
            };
        });
    }
    _extractGLTFImage(index) {
        var _a;
        return __awaiter$6(this, void 0, void 0, function* () {
            const json = this.parser.json;
            const source = (_a = json.images) === null || _a === void 0 ? void 0 : _a[index];
            if (source == null) {
                console.warn(`VRMMetaLoaderPlugin: Attempt to use images[${index}] of glTF as a thumbnail but the image doesn't exist`);
                return null;
            }
            // Ref: https://github.com/mrdoob/three.js/blob/r124/examples/jsm/loaders/GLTFLoader.js#L2467
            // `source.uri` might be a reference to a file
            let sourceURI = source.uri;
            // Load the binary as a blob
            if (source.bufferView != null) {
                const bufferView = yield this.parser.getDependency('bufferView', source.bufferView);
                const blob = new Blob([bufferView], { type: source.mimeType });
                sourceURI = URL.createObjectURL(blob);
            }
            if (sourceURI == null) {
                console.warn(`VRMMetaLoaderPlugin: Attempt to use images[${index}] of glTF as a thumbnail but the image couldn't load properly`);
                return null;
            }
            const loader = new THREE.ImageLoader();
            return yield loader.loadAsync(resolveURL(sourceURI, this.parser.options.path)).catch((error) => {
                console.error(error);
                console.warn('VRMMetaLoaderPlugin: Failed to load a thumbnail image');
                return null;
            });
        });
    }
}

/**
 * A class that represents a single VRM model.
 * This class only includes core spec of the VRM (`VRMC_vrm`).
 */
class VRMCore {
    /**
     * Create a new VRM instance.
     *
     * @param params [[VRMParameters]] that represents components of the VRM
     */
    constructor(params) {
        this.scene = params.scene;
        this.meta = params.meta;
        this.humanoid = params.humanoid;
        this.expressionManager = params.expressionManager;
        this.firstPerson = params.firstPerson;
        this.lookAt = params.lookAt;
    }
    /**
     * **You need to call this on your update loop.**
     *
     * This function updates every VRM components.
     *
     * @param delta deltaTime
     */
    update(delta) {
        this.humanoid.update();
        if (this.lookAt) {
            this.lookAt.update(delta);
        }
        if (this.expressionManager) {
            this.expressionManager.update();
        }
    }
}

class VRMCoreLoaderPlugin {
    get name() {
        // We should use the extension name instead but we have multiple plugins for an extension...
        return 'VRMC_vrm';
    }
    constructor(parser, options) {
        var _a, _b, _c, _d, _e;
        this.parser = parser;
        const helperRoot = options === null || options === void 0 ? void 0 : options.helperRoot;
        const autoUpdateHumanBones = options === null || options === void 0 ? void 0 : options.autoUpdateHumanBones;
        this.expressionPlugin = (_a = options === null || options === void 0 ? void 0 : options.expressionPlugin) !== null && _a !== void 0 ? _a : new VRMExpressionLoaderPlugin(parser);
        this.firstPersonPlugin = (_b = options === null || options === void 0 ? void 0 : options.firstPersonPlugin) !== null && _b !== void 0 ? _b : new VRMFirstPersonLoaderPlugin(parser);
        this.humanoidPlugin =
            (_c = options === null || options === void 0 ? void 0 : options.humanoidPlugin) !== null && _c !== void 0 ? _c : new VRMHumanoidLoaderPlugin(parser, { helperRoot, autoUpdateHumanBones });
        this.lookAtPlugin = (_d = options === null || options === void 0 ? void 0 : options.lookAtPlugin) !== null && _d !== void 0 ? _d : new VRMLookAtLoaderPlugin(parser, { helperRoot });
        this.metaPlugin = (_e = options === null || options === void 0 ? void 0 : options.metaPlugin) !== null && _e !== void 0 ? _e : new VRMMetaLoaderPlugin(parser);
    }
    afterRoot(gltf) {
        return __awaiter$6(this, void 0, void 0, function* () {
            yield this.metaPlugin.afterRoot(gltf);
            yield this.humanoidPlugin.afterRoot(gltf);
            yield this.expressionPlugin.afterRoot(gltf);
            yield this.lookAtPlugin.afterRoot(gltf);
            yield this.firstPersonPlugin.afterRoot(gltf);
            const meta = gltf.userData.vrmMeta;
            const humanoid = gltf.userData.vrmHumanoid;
            // meta and humanoid are required to be a VRM.
            // Don't create VRM if they are null
            if (meta && humanoid) {
                const vrmCore = new VRMCore({
                    scene: gltf.scene,
                    expressionManager: gltf.userData.vrmExpressionManager,
                    firstPerson: gltf.userData.vrmFirstPerson,
                    humanoid,
                    lookAt: gltf.userData.vrmLookAt,
                    meta,
                });
                gltf.userData.vrmCore = vrmCore;
            }
        });
    }
}

/**
 * A class that represents a single VRM model.
 */
class VRM extends VRMCore {
    /**
     * Create a new VRM instance.
     *
     * @param params [[VRMParameters]] that represents components of the VRM
     */
    constructor(params) {
        super(params);
        this.materials = params.materials;
        this.springBoneManager = params.springBoneManager;
        this.nodeConstraintManager = params.nodeConstraintManager;
    }
    /**
     * **You need to call this on your update loop.**
     *
     * This function updates every VRM components.
     *
     * @param delta deltaTime
     */
    update(delta) {
        super.update(delta);
        if (this.nodeConstraintManager) {
            this.nodeConstraintManager.update();
        }
        if (this.springBoneManager) {
            this.springBoneManager.update(delta);
        }
        if (this.materials) {
            this.materials.forEach((material) => {
                if (material.update) {
                    material.update(delta);
                }
            });
        }
    }
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter$5(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

/*!
 * @pixiv/three-vrm-materials-mtoon v2.0.1
 * MToon (toon material) module for @pixiv/three-vrm
 *
 * Copyright (c) 2020-2023 pixiv Inc.
 * @pixiv/three-vrm-materials-mtoon is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter$4(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var vertexShader = "// #define PHONG\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n  varying vec3 vNormal;\n#endif\n\n#include <common>\n\n// #include <uv_pars_vertex>\n#ifdef MTOON_USE_UV\n  varying vec2 vUv;\n\n  // COMPAT: pre-r151 uses a common uvTransform\n  #if THREE_VRM_THREE_REVISION < 151\n    uniform mat3 uvTransform;\n  #endif\n#endif\n\n// #include <uv2_pars_vertex>\n// COMAPT: pre-r151 uses uv2 for lightMap and aoMap\n#if THREE_VRM_THREE_REVISION < 151\n  #if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n    attribute vec2 uv2;\n    varying vec2 vUv2;\n    uniform mat3 uv2Transform;\n  #endif\n#endif\n\n// #include <displacementmap_pars_vertex>\n// #include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n#ifdef USE_OUTLINEWIDTHMULTIPLYTEXTURE\n  uniform sampler2D outlineWidthMultiplyTexture;\n  uniform mat3 outlineWidthMultiplyTextureUvTransform;\n#endif\n\nuniform float outlineWidthFactor;\n\nvoid main() {\n\n  // #include <uv_vertex>\n  #ifdef MTOON_USE_UV\n    // COMPAT: pre-r151 uses a common uvTransform\n    #if THREE_VRM_THREE_REVISION >= 151\n      vUv = uv;\n    #else\n      vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n    #endif\n  #endif\n\n  // #include <uv2_vertex>\n  // COMAPT: pre-r151 uses uv2 for lightMap and aoMap\n  #if THREE_VRM_THREE_REVISION < 151\n    #if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n      vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n    #endif\n  #endif\n\n  #include <color_vertex>\n\n  #include <beginnormal_vertex>\n  #include <morphnormal_vertex>\n  #include <skinbase_vertex>\n  #include <skinnormal_vertex>\n\n  // we need this to compute the outline properly\n  objectNormal = normalize( objectNormal );\n\n  #include <defaultnormal_vertex>\n\n  #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n    vNormal = normalize( transformedNormal );\n  #endif\n\n  #include <begin_vertex>\n\n  #include <morphtarget_vertex>\n  #include <skinning_vertex>\n  // #include <displacementmap_vertex>\n  #include <project_vertex>\n  #include <logdepthbuf_vertex>\n  #include <clipping_planes_vertex>\n\n  vViewPosition = - mvPosition.xyz;\n\n  float outlineTex = 1.0;\n\n  #ifdef OUTLINE\n    #ifdef USE_OUTLINEWIDTHMULTIPLYTEXTURE\n      vec2 outlineWidthMultiplyTextureUv = ( outlineWidthMultiplyTextureUvTransform * vec3( vUv, 1 ) ).xy;\n      outlineTex = texture2D( outlineWidthMultiplyTexture, outlineWidthMultiplyTextureUv ).g;\n    #endif\n\n    #ifdef OUTLINE_WIDTH_WORLD\n      float worldNormalLength = length( transformedNormal );\n      vec3 outlineOffset = outlineWidthFactor * outlineTex * worldNormalLength * objectNormal;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( outlineOffset + transformed, 1.0 );\n    #endif\n\n    #ifdef OUTLINE_WIDTH_SCREEN\n      vec3 clipNormal = ( projectionMatrix * modelViewMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n      vec2 projectedNormal = normalize( clipNormal.xy );\n      projectedNormal.x *= projectionMatrix[ 0 ].x / projectionMatrix[ 1 ].y;\n      gl_Position.xy += 2.0 * outlineWidthFactor * outlineTex * projectedNormal.xy;\n    #endif\n\n    gl_Position.z += 1E-6 * gl_Position.w; // anti-artifact magic\n  #endif\n\n  #include <worldpos_vertex>\n  // #include <envmap_vertex>\n  #include <shadowmap_vertex>\n  #include <fog_vertex>\n\n}";

var fragmentShader = "// #define PHONG\n\nuniform vec3 litFactor;\n\nuniform float opacity;\n\nuniform vec3 shadeColorFactor;\n#ifdef USE_SHADEMULTIPLYTEXTURE\n  uniform sampler2D shadeMultiplyTexture;\n  uniform mat3 shadeMultiplyTextureUvTransform;\n#endif\n\nuniform float shadingShiftFactor;\nuniform float shadingToonyFactor;\n\n#ifdef USE_SHADINGSHIFTTEXTURE\n  uniform sampler2D shadingShiftTexture;\n  uniform mat3 shadingShiftTextureUvTransform;\n  uniform float shadingShiftTextureScale;\n#endif\n\nuniform float giEqualizationFactor;\n\nuniform vec3 parametricRimColorFactor;\n#ifdef USE_RIMMULTIPLYTEXTURE\n  uniform sampler2D rimMultiplyTexture;\n  uniform mat3 rimMultiplyTextureUvTransform;\n#endif\nuniform float rimLightingMixFactor;\nuniform float parametricRimFresnelPowerFactor;\nuniform float parametricRimLiftFactor;\n\n#ifdef USE_MATCAPTEXTURE\n  uniform vec3 matcapFactor;\n  uniform sampler2D matcapTexture;\n  uniform mat3 matcapTextureUvTransform;\n#endif\n\nuniform vec3 emissive;\nuniform float emissiveIntensity;\n\nuniform vec3 outlineColorFactor;\nuniform float outlineLightingMixFactor;\n\n#ifdef USE_UVANIMATIONMASKTEXTURE\n  uniform sampler2D uvAnimationMaskTexture;\n  uniform mat3 uvAnimationMaskTextureUvTransform;\n#endif\n\nuniform float uvAnimationScrollXOffset;\nuniform float uvAnimationScrollYOffset;\nuniform float uvAnimationRotationPhase;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n\n// #include <uv_pars_fragment>\n#if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\n  varying vec2 vUv;\n#endif\n\n// #include <uv2_pars_fragment>\n// COMAPT: pre-r151 uses uv2 for lightMap and aoMap\n#if THREE_VRM_THREE_REVISION < 151\n  #if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n    varying vec2 vUv2;\n  #endif\n#endif\n\n#include <map_pars_fragment>\n\n#ifdef USE_MAP\n  uniform mat3 mapUvTransform;\n#endif\n\n// #include <alphamap_pars_fragment>\n\n#if THREE_VRM_THREE_REVISION >= 132\n  #include <alphatest_pars_fragment>\n#endif\n\n#include <aomap_pars_fragment>\n// #include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n\n#ifdef USE_EMISSIVEMAP\n  uniform mat3 emissiveMapUvTransform;\n#endif\n\n// #include <envmap_common_pars_fragment>\n// #include <envmap_pars_fragment>\n// #include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n\n// #include <bsdfs>\n// COMPAT: pre-r151 doesn't have BRDF_Lambert in <common>\n#if THREE_VRM_THREE_REVISION < 151\n  vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n    return RECIPROCAL_PI * diffuseColor;\n  }\n#endif\n\n#include <lights_pars_begin>\n\n#if THREE_VRM_THREE_REVISION >= 132\n  #include <normal_pars_fragment>\n#endif\n\n// #include <lights_phong_pars_fragment>\nvarying vec3 vViewPosition;\n\n#if THREE_VRM_THREE_REVISION < 132\n  #ifndef FLAT_SHADED\n    varying vec3 vNormal;\n  #endif\n#endif\n\nstruct MToonMaterial {\n  vec3 diffuseColor;\n  vec3 shadeColor;\n  float shadingShift;\n};\n\nfloat linearstep( float a, float b, float t ) {\n  return clamp( ( t - a ) / ( b - a ), 0.0, 1.0 );\n}\n\n/**\n * Convert NdotL into toon shading factor using shadingShift and shadingToony\n */\nfloat getShading(\n  const in float dotNL,\n  const in float shadow,\n  const in float shadingShift\n) {\n  float shading = dotNL;\n  shading = shading + shadingShift;\n  shading = linearstep( -1.0 + shadingToonyFactor, 1.0 - shadingToonyFactor, shading );\n  shading *= shadow;\n  return shading;\n}\n\n/**\n * Mix diffuseColor and shadeColor using shading factor and light color\n */\nvec3 getDiffuse(\n  const in MToonMaterial material,\n  const in float shading,\n  in vec3 lightColor\n) {\n  #ifdef DEBUG_LITSHADERATE\n    return vec3( BRDF_Lambert( shading * lightColor ) );\n  #endif\n\n  #if THREE_VRM_THREE_REVISION < 132\n    #ifndef PHYSICALLY_CORRECT_LIGHTS\n      lightColor *= PI;\n    #endif\n  #endif\n\n  vec3 col = lightColor * BRDF_Lambert( mix( material.shadeColor, material.diffuseColor, shading ) );\n\n  // The \"comment out if you want to PBR absolutely\" line\n  #ifdef V0_COMPAT_SHADE\n    col = min( col, material.diffuseColor );\n  #endif\n\n  return col;\n}\n\nvoid RE_Direct_MToon( const in IncidentLight directLight, const in GeometricContext geometry, const in MToonMaterial material, const in float shadow, inout ReflectedLight reflectedLight ) {\n  float dotNL = clamp( dot( geometry.normal, directLight.direction ), -1.0, 1.0 );\n  vec3 irradiance = directLight.color;\n\n  #if THREE_VRM_THREE_REVISION < 132\n    #ifndef PHYSICALLY_CORRECT_LIGHTS\n      irradiance *= PI;\n    #endif\n  #endif\n\n  // directSpecular will be used for rim lighting, not an actual specular\n  reflectedLight.directSpecular += irradiance;\n\n  irradiance *= dotNL;\n\n  float shading = getShading( dotNL, shadow, material.shadingShift );\n\n  // toon shaded diffuse\n  reflectedLight.directDiffuse += getDiffuse( material, shading, directLight.color );\n}\n\nvoid RE_IndirectDiffuse_MToon( const in vec3 irradiance, const in GeometricContext geometry, const in MToonMaterial material, inout ReflectedLight reflectedLight ) {\n  // indirect diffuse will use diffuseColor, no shadeColor involved\n  reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n  // directSpecular will be used for rim lighting, not an actual specular\n  reflectedLight.directSpecular += irradiance;\n}\n\n#define RE_Direct RE_Direct_MToon\n#define RE_IndirectDiffuse RE_IndirectDiffuse_MToon\n#define Material_LightProbeLOD( material ) (0)\n\n#include <shadowmap_pars_fragment>\n// #include <bumpmap_pars_fragment>\n\n// #include <normalmap_pars_fragment>\n#ifdef USE_NORMALMAP\n\n  uniform sampler2D normalMap;\n  uniform mat3 normalMapUvTransform;\n  uniform vec2 normalScale;\n\n#endif\n\n// COMPAT: USE_NORMALMAP_OBJECTSPACE used to be OBJECTSPACE_NORMALMAP in pre-r151\n#if defined( USE_NORMALMAP_OBJECTSPACE ) || defined( OBJECTSPACE_NORMALMAP )\n\n  uniform mat3 normalMatrix;\n\n#endif\n\n// COMPAT: USE_NORMALMAP_TANGENTSPACE used to be TANGENTSPACE_NORMALMAP in pre-r151\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( TANGENTSPACE_NORMALMAP ) )\n\n  // Per-Pixel Tangent Space Normal Mapping\n  // http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n  // three-vrm specific change: it requires `uv` as an input in order to support uv scrolls\n\n  // Temporary compat against shader change @ Three.js r126, r151\n  #if THREE_VRM_THREE_REVISION >= 151\n\n    mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\n      vec3 q0 = dFdx( eye_pos.xyz );\n      vec3 q1 = dFdy( eye_pos.xyz );\n      vec2 st0 = dFdx( uv.st );\n      vec2 st1 = dFdy( uv.st );\n\n      vec3 N = surf_norm;\n\n      vec3 q1perp = cross( q1, N );\n      vec3 q0perp = cross( N, q0 );\n\n      vec3 T = q1perp * st0.x + q0perp * st1.x;\n      vec3 B = q1perp * st0.y + q0perp * st1.y;\n\n      float det = max( dot( T, T ), dot( B, B ) );\n      float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\n      return mat3( T * scale, B * scale, N );\n\n    }\n\n  #elif THREE_VRM_THREE_REVISION >= 126\n\n    vec3 perturbNormal2Arb( vec2 uv, vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\n      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n      vec2 st0 = dFdx( uv.st );\n      vec2 st1 = dFdy( uv.st );\n\n      vec3 N = normalize( surf_norm );\n\n      vec3 q1perp = cross( q1, N );\n      vec3 q0perp = cross( N, q0 );\n\n      vec3 T = q1perp * st0.x + q0perp * st1.x;\n      vec3 B = q1perp * st0.y + q0perp * st1.y;\n\n      // three-vrm specific change: Workaround for the issue that happens when delta of uv = 0.0\n      // TODO: Is this still required? Or shall I make a PR about it?\n      if ( length( T ) == 0.0 || length( B ) == 0.0 ) {\n        return surf_norm;\n      }\n\n      float det = max( dot( T, T ), dot( B, B ) );\n      float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\n      return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\n    }\n\n  #else\n\n    vec3 perturbNormal2Arb( vec2 uv, vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\n      // Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n      vec2 st0 = dFdx( uv.st );\n      vec2 st1 = dFdy( uv.st );\n\n      float scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude\n\n      vec3 S = ( q0 * st1.t - q1 * st0.t ) * scale;\n      vec3 T = ( - q0 * st1.s + q1 * st0.s ) * scale;\n\n      // three-vrm specific change: Workaround for the issue that happens when delta of uv = 0.0\n      // TODO: Is this still required? Or shall I make a PR about it?\n\n      if ( length( S ) == 0.0 || length( T ) == 0.0 ) {\n        return surf_norm;\n      }\n\n      S = normalize( S );\n      T = normalize( T );\n      vec3 N = normalize( surf_norm );\n\n      #ifdef DOUBLE_SIDED\n\n        // Workaround for Adreno GPUs gl_FrontFacing bug. See #15850 and #10331\n\n        bool frontFacing = dot( cross( S, T ), N ) > 0.0;\n\n        mapN.xy *= ( float( frontFacing ) * 2.0 - 1.0 );\n\n      #else\n\n        mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n      #endif\n\n      mat3 tsn = mat3( S, T, N );\n      return normalize( tsn * mapN );\n\n    }\n\n  #endif\n\n#endif\n\n// #include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n// == post correction ==========================================================\nvoid postCorrection() {\n  #include <tonemapping_fragment>\n  #include <encodings_fragment>\n  #include <fog_fragment>\n  #include <premultiplied_alpha_fragment>\n  #include <dithering_fragment>\n}\n\n// == main procedure ===========================================================\nvoid main() {\n  #include <clipping_planes_fragment>\n\n  vec2 uv = vec2(0.5, 0.5);\n\n  #if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\n    uv = vUv;\n\n    float uvAnimMask = 1.0;\n    #ifdef USE_UVANIMATIONMASKTEXTURE\n      vec2 uvAnimationMaskTextureUv = ( uvAnimationMaskTextureUvTransform * vec3( uv, 1 ) ).xy;\n      uvAnimMask = texture2D( uvAnimationMaskTexture, uvAnimationMaskTextureUv ).b;\n    #endif\n\n    uv = uv + vec2( uvAnimationScrollXOffset, uvAnimationScrollYOffset ) * uvAnimMask;\n    float uvRotCos = cos( uvAnimationRotationPhase * uvAnimMask );\n    float uvRotSin = sin( uvAnimationRotationPhase * uvAnimMask );\n    uv = mat2( uvRotCos, -uvRotSin, uvRotSin, uvRotCos ) * ( uv - 0.5 ) + 0.5;\n  #endif\n\n  #ifdef DEBUG_UV\n    gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n    #if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\n      gl_FragColor = vec4( uv, 0.0, 1.0 );\n    #endif\n    return;\n  #endif\n\n  vec4 diffuseColor = vec4( litFactor, opacity );\n  ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n  vec3 totalEmissiveRadiance = emissive * emissiveIntensity;\n\n  #include <logdepthbuf_fragment>\n\n  // #include <map_fragment>\n  #ifdef USE_MAP\n    vec2 mapUv = ( mapUvTransform * vec3( uv, 1 ) ).xy;\n    vec4 sampledDiffuseColor = texture2D( map, mapUv );\n    #ifdef DECODE_VIDEO_TEXTURE\n      sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n    #endif\n    diffuseColor *= sampledDiffuseColor;\n  #endif\n\n  // #include <color_fragment>\n  #if ( defined( USE_COLOR ) && !defined( IGNORE_VERTEX_COLOR ) )\n    diffuseColor.rgb *= vColor;\n  #endif\n\n  // #include <alphamap_fragment>\n\n  #include <alphatest_fragment>\n\n  // #include <specularmap_fragment>\n\n  // #include <normal_fragment_begin>\n  float faceDirection = gl_FrontFacing ? 1.0 : -1.0;\n\n  #ifdef FLAT_SHADED\n\n    vec3 fdx = dFdx( vViewPosition );\n    vec3 fdy = dFdy( vViewPosition );\n    vec3 normal = normalize( cross( fdx, fdy ) );\n\n  #else\n\n    vec3 normal = normalize( vNormal );\n\n    #ifdef DOUBLE_SIDED\n\n      normal *= faceDirection;\n\n    #endif\n\n  #endif\n\n  #ifdef USE_NORMALMAP\n\n    vec2 normalMapUv = ( normalMapUvTransform * vec3( uv, 1 ) ).xy;\n\n  #endif\n\n  #ifdef USE_NORMALMAP_TANGENTSPACE\n\n    #ifdef USE_TANGENT\n\n      mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\n    #else\n\n      mat3 tbn = getTangentFrame( - vViewPosition, normal, normalMapUv );\n\n    #endif\n\n    #if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\n      tbn[0] *= faceDirection;\n      tbn[1] *= faceDirection;\n\n    #endif\n\n  #endif\n\n  #ifdef USE_CLEARCOAT_NORMALMAP\n\n    #ifdef USE_TANGENT\n\n      mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\n    #else\n\n      mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\n    #endif\n\n    #if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\n      tbn2[0] *= faceDirection;\n      tbn2[1] *= faceDirection;\n\n    #endif\n\n  #endif\n\n  // non perturbed normal for clearcoat among others\n\n  vec3 geometryNormal = normal;\n\n  #ifdef OUTLINE\n    normal *= -1.0;\n  #endif\n\n  // #include <normal_fragment_maps>\n\n  // COMPAT: USE_NORMALMAP_OBJECTSPACE used to be OBJECTSPACE_NORMALMAP in pre-r151\n  #if defined( USE_NORMALMAP_OBJECTSPACE ) || defined( OBJECTSPACE_NORMALMAP )\n\n    normal = texture2D( normalMap, normalMapUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\n\n    #ifdef FLIP_SIDED\n\n      normal = - normal;\n\n    #endif\n\n    #ifdef DOUBLE_SIDED\n\n      // Temporary compat against shader change @ Three.js r126\n      // See: #21205, #21307, #21299\n      #if THREE_VRM_THREE_REVISION >= 126\n\n        normal = normal * faceDirection;\n\n      #else\n\n        normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n      #endif\n\n    #endif\n\n    normal = normalize( normalMatrix * normal );\n\n  // COMPAT: USE_NORMALMAP_TANGENTSPACE used to be TANGENTSPACE_NORMALMAP in pre-r151\n  #elif defined( USE_NORMALMAP_TANGENTSPACE ) || defined( TANGENTSPACE_NORMALMAP )\n\n    vec3 mapN = texture2D( normalMap, normalMapUv ).xyz * 2.0 - 1.0;\n    mapN.xy *= normalScale;\n\n    // COMPAT: pre-r151\n    #if THREE_VRM_THREE_REVISION >= 151 || defined( USE_TANGENT )\n\n      normal = normalize( tbn * mapN );\n\n    #else\n\n      // pre-r126\n      #if THREE_VRM_THREE_REVISION >= 126\n\n        normal = perturbNormal2Arb( uv, -vViewPosition, normal, mapN, faceDirection );\n\n      #else\n\n        normal = perturbNormal2Arb( uv, -vViewPosition, normal, mapN );\n\n      #endif\n\n    #endif\n\n  #endif\n\n  // #include <emissivemap_fragment>\n  #ifdef USE_EMISSIVEMAP\n    vec2 emissiveMapUv = ( emissiveMapUvTransform * vec3( uv, 1 ) ).xy;\n    totalEmissiveRadiance *= texture2D( emissiveMap, emissiveMapUv ).rgb;\n  #endif\n\n  #ifdef DEBUG_NORMAL\n    gl_FragColor = vec4( 0.5 + 0.5 * normal, 1.0 );\n    return;\n  #endif\n\n  // -- MToon: lighting --------------------------------------------------------\n  // accumulation\n  // #include <lights_phong_fragment>\n  MToonMaterial material;\n\n  material.diffuseColor = diffuseColor.rgb;\n\n  material.shadeColor = shadeColorFactor;\n  #ifdef USE_SHADEMULTIPLYTEXTURE\n    vec2 shadeMultiplyTextureUv = ( shadeMultiplyTextureUvTransform * vec3( uv, 1 ) ).xy;\n    material.shadeColor *= texture2D( shadeMultiplyTexture, shadeMultiplyTextureUv ).rgb;\n  #endif\n\n  #if ( defined( USE_COLOR ) && !defined( IGNORE_VERTEX_COLOR ) )\n    material.shadeColor.rgb *= vColor;\n  #endif\n\n  material.shadingShift = shadingShiftFactor;\n  #ifdef USE_SHADINGSHIFTTEXTURE\n    vec2 shadingShiftTextureUv = ( shadingShiftTextureUvTransform * vec3( uv, 1 ) ).xy;\n    material.shadingShift += texture2D( shadingShiftTexture, shadingShiftTextureUv ).r * shadingShiftTextureScale;\n  #endif\n\n  // #include <lights_fragment_begin>\n\n  // MToon Specific changes:\n  // Since we want to take shadows into account of shading instead of irradiance,\n  // we had to modify the codes that multiplies the results of shadowmap into color of direct lights.\n\n  GeometricContext geometry;\n\n  geometry.position = - vViewPosition;\n  geometry.normal = normal;\n  geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n\n  #ifdef CLEARCOAT\n\n    geometry.clearcoatNormal = clearcoatNormal;\n\n  #endif\n\n  IncidentLight directLight;\n\n  // since these variables will be used in unrolled loop, we have to define in prior\n  float shadow;\n\n  #if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\n    PointLight pointLight;\n    #if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n    PointLightShadow pointLightShadow;\n    #endif\n\n    #pragma unroll_loop_start\n    for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n      pointLight = pointLights[ i ];\n\n      #if THREE_VRM_THREE_REVISION >= 132\n        getPointLightInfo( pointLight, geometry, directLight );\n      #else\n        getPointDirectLightIrradiance( pointLight, geometry, directLight );\n      #endif\n\n      shadow = 1.0;\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n      pointLightShadow = pointLightShadows[ i ];\n      shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n      #endif\n\n      RE_Direct( directLight, geometry, material, shadow, reflectedLight );\n\n    }\n    #pragma unroll_loop_end\n\n  #endif\n\n  #if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\n    SpotLight spotLight;\n    #if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n    SpotLightShadow spotLightShadow;\n    #endif\n\n    #pragma unroll_loop_start\n    for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n      spotLight = spotLights[ i ];\n\n      #if THREE_VRM_THREE_REVISION >= 132\n        getSpotLightInfo( spotLight, geometry, directLight );\n      #else\n        getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n      #endif\n\n      shadow = 1.0;\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n      spotLightShadow = spotLightShadows[ i ];\n      shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n      #endif\n\n      RE_Direct( directLight, geometry, material, shadow, reflectedLight );\n\n    }\n    #pragma unroll_loop_end\n\n  #endif\n\n  #if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\n    DirectionalLight directionalLight;\n    #if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n    DirectionalLightShadow directionalLightShadow;\n    #endif\n\n    #pragma unroll_loop_start\n    for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n      directionalLight = directionalLights[ i ];\n\n      #if THREE_VRM_THREE_REVISION >= 132\n        getDirectionalLightInfo( directionalLight, geometry, directLight );\n      #else\n        getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n      #endif\n\n      shadow = 1.0;\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n      directionalLightShadow = directionalLightShadows[ i ];\n      shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n      #endif\n\n      RE_Direct( directLight, geometry, material, shadow, reflectedLight );\n\n    }\n    #pragma unroll_loop_end\n\n  #endif\n\n  // #if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\n  //   RectAreaLight rectAreaLight;\n\n  //   #pragma unroll_loop_start\n  //   for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\n  //     rectAreaLight = rectAreaLights[ i ];\n  //     RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\n  //   }\n  //   #pragma unroll_loop_end\n\n  // #endif\n\n  #if defined( RE_IndirectDiffuse )\n\n    vec3 iblIrradiance = vec3( 0.0 );\n\n    vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\n    #if THREE_VRM_THREE_REVISION >= 133\n      irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n    #else\n      irradiance += getLightProbeIrradiance( lightProbe, geometry );\n    #endif\n\n    #if ( NUM_HEMI_LIGHTS > 0 )\n\n      #pragma unroll_loop_start\n      for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n        #if THREE_VRM_THREE_REVISION >= 133\n          irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n        #else\n          irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n        #endif\n\n      }\n      #pragma unroll_loop_end\n\n    #endif\n\n  #endif\n\n  // #if defined( RE_IndirectSpecular )\n\n  //   vec3 radiance = vec3( 0.0 );\n  //   vec3 clearcoatRadiance = vec3( 0.0 );\n\n  // #endif\n\n  #include <lights_fragment_maps>\n  #include <lights_fragment_end>\n\n  // modulation\n  #include <aomap_fragment>\n\n  vec3 col = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\n  #ifdef DEBUG_LITSHADERATE\n    gl_FragColor = vec4( col, diffuseColor.a );\n    postCorrection();\n    return;\n  #endif\n\n  // -- MToon: rim lighting -----------------------------------------\n  vec3 viewDir = normalize( vViewPosition );\n\n  #ifndef PHYSICALLY_CORRECT_LIGHTS\n    reflectedLight.directSpecular /= PI;\n  #endif\n  vec3 rimMix = mix( vec3( 1.0 ), reflectedLight.directSpecular, 1.0 );\n\n  vec3 rim = parametricRimColorFactor * pow( saturate( 1.0 - dot( viewDir, normal ) + parametricRimLiftFactor ), parametricRimFresnelPowerFactor );\n\n  #ifdef USE_MATCAPTEXTURE\n    {\n      vec3 x = normalize( vec3( viewDir.z, 0.0, -viewDir.x ) );\n      vec3 y = cross( viewDir, x ); // guaranteed to be normalized\n      vec2 sphereUv = 0.5 + 0.5 * vec2( dot( x, normal ), -dot( y, normal ) );\n      sphereUv = ( matcapTextureUvTransform * vec3( sphereUv, 1 ) ).xy;\n      vec3 matcap = texture2D( matcapTexture, sphereUv ).rgb;\n      rim += matcapFactor * matcap;\n    }\n  #endif\n\n  #ifdef USE_RIMMULTIPLYTEXTURE\n    vec2 rimMultiplyTextureUv = ( rimMultiplyTextureUvTransform * vec3( uv, 1 ) ).xy;\n    rim *= texture2D( rimMultiplyTexture, rimMultiplyTextureUv ).rgb;\n  #endif\n\n  col += rimMix * rim;\n\n  // -- MToon: Emission --------------------------------------------------------\n  col += totalEmissiveRadiance;\n\n  // #include <envmap_fragment>\n\n  // -- Almost done! -----------------------------------------------------------\n  #if defined( OUTLINE )\n    col = outlineColorFactor.rgb * mix( vec3( 1.0 ), col, outlineLightingMixFactor );\n  #endif\n\n  gl_FragColor = vec4( col, diffuseColor.a );\n  postCorrection();\n}\n";

/* eslint-disable @typescript-eslint/naming-convention */
/**
 * Specifiers of debug mode of {@link MToonMaterial}.
 *
 * See: {@link MToonMaterial.debugMode}
 */
const MToonMaterialDebugMode = {
    /**
     * Render normally.
     */
    None: 'none',
    /**
     * Visualize normals of the surface.
     */
    Normal: 'normal',
    /**
     * Visualize lit/shade of the surface.
     */
    LitShadeRate: 'litShadeRate',
    /**
     * Visualize UV of the surface.
     */
    UV: 'uv',
};

/* eslint-disable @typescript-eslint/naming-convention */
const MToonMaterialOutlineWidthMode = {
    None: 'none',
    WorldCoordinates: 'worldCoordinates',
    ScreenCoordinates: 'screenCoordinates',
};

const encodingColorSpaceMap = {
    3000: '',
    3001: 'srgb',
};
/**
 * A compat function to get texture color space.
 *
 * COMPAT: pre-r152
 * Starting from Three.js r152, `texture.encoding` is renamed to `texture.colorSpace`.
 * This function will handle the comapt.
 *
 * @param texture The texture you want to get the color space from
 */
function getTextureColorSpace(texture) {
    if (parseInt(THREE.REVISION, 10) >= 152) {
        return texture.colorSpace;
    }
    else {
        return encodingColorSpaceMap[texture.encoding];
    }
}

/* tslint:disable:member-ordering */
/**
 * MToon is a material specification that has various features.
 * The spec and implementation are originally founded for Unity engine and this is a port of the material.
 *
 * See: https://github.com/Santarh/MToon
 */
class MToonMaterial extends THREE.ShaderMaterial {
    get color() {
        return this.uniforms.litFactor.value;
    }
    set color(value) {
        this.uniforms.litFactor.value = value;
    }
    get map() {
        return this.uniforms.map.value;
    }
    set map(value) {
        this.uniforms.map.value = value;
    }
    get normalMap() {
        return this.uniforms.normalMap.value;
    }
    set normalMap(value) {
        this.uniforms.normalMap.value = value;
    }
    get normalScale() {
        return this.uniforms.normalScale.value;
    }
    set normalScale(value) {
        this.uniforms.normalScale.value = value;
    }
    get emissive() {
        return this.uniforms.emissive.value;
    }
    set emissive(value) {
        this.uniforms.emissive.value = value;
    }
    get emissiveIntensity() {
        return this.uniforms.emissiveIntensity.value;
    }
    set emissiveIntensity(value) {
        this.uniforms.emissiveIntensity.value = value;
    }
    get emissiveMap() {
        return this.uniforms.emissiveMap.value;
    }
    set emissiveMap(value) {
        this.uniforms.emissiveMap.value = value;
    }
    get shadeColorFactor() {
        return this.uniforms.shadeColorFactor.value;
    }
    set shadeColorFactor(value) {
        this.uniforms.shadeColorFactor.value = value;
    }
    get shadeMultiplyTexture() {
        return this.uniforms.shadeMultiplyTexture.value;
    }
    set shadeMultiplyTexture(value) {
        this.uniforms.shadeMultiplyTexture.value = value;
    }
    get shadingShiftFactor() {
        return this.uniforms.shadingShiftFactor.value;
    }
    set shadingShiftFactor(value) {
        this.uniforms.shadingShiftFactor.value = value;
    }
    get shadingShiftTexture() {
        return this.uniforms.shadingShiftTexture.value;
    }
    set shadingShiftTexture(value) {
        this.uniforms.shadingShiftTexture.value = value;
    }
    get shadingShiftTextureScale() {
        return this.uniforms.shadingShiftTextureScale.value;
    }
    set shadingShiftTextureScale(value) {
        this.uniforms.shadingShiftTextureScale.value = value;
    }
    get shadingToonyFactor() {
        return this.uniforms.shadingToonyFactor.value;
    }
    set shadingToonyFactor(value) {
        this.uniforms.shadingToonyFactor.value = value;
    }
    get giEqualizationFactor() {
        return this.uniforms.giEqualizationFactor.value;
    }
    set giEqualizationFactor(value) {
        this.uniforms.giEqualizationFactor.value = value;
    }
    get matcapFactor() {
        return this.uniforms.matcapFactor.value;
    }
    set matcapFactor(value) {
        this.uniforms.matcapFactor.value = value;
    }
    get matcapTexture() {
        return this.uniforms.matcapTexture.value;
    }
    set matcapTexture(value) {
        this.uniforms.matcapTexture.value = value;
    }
    get parametricRimColorFactor() {
        return this.uniforms.parametricRimColorFactor.value;
    }
    set parametricRimColorFactor(value) {
        this.uniforms.parametricRimColorFactor.value = value;
    }
    get rimMultiplyTexture() {
        return this.uniforms.rimMultiplyTexture.value;
    }
    set rimMultiplyTexture(value) {
        this.uniforms.rimMultiplyTexture.value = value;
    }
    get rimLightingMixFactor() {
        return this.uniforms.rimLightingMixFactor.value;
    }
    set rimLightingMixFactor(value) {
        this.uniforms.rimLightingMixFactor.value = value;
    }
    get parametricRimFresnelPowerFactor() {
        return this.uniforms.parametricRimFresnelPowerFactor.value;
    }
    set parametricRimFresnelPowerFactor(value) {
        this.uniforms.parametricRimFresnelPowerFactor.value = value;
    }
    get parametricRimLiftFactor() {
        return this.uniforms.parametricRimLiftFactor.value;
    }
    set parametricRimLiftFactor(value) {
        this.uniforms.parametricRimLiftFactor.value = value;
    }
    get outlineWidthMultiplyTexture() {
        return this.uniforms.outlineWidthMultiplyTexture.value;
    }
    set outlineWidthMultiplyTexture(value) {
        this.uniforms.outlineWidthMultiplyTexture.value = value;
    }
    get outlineWidthFactor() {
        return this.uniforms.outlineWidthFactor.value;
    }
    set outlineWidthFactor(value) {
        this.uniforms.outlineWidthFactor.value = value;
    }
    get outlineColorFactor() {
        return this.uniforms.outlineColorFactor.value;
    }
    set outlineColorFactor(value) {
        this.uniforms.outlineColorFactor.value = value;
    }
    get outlineLightingMixFactor() {
        return this.uniforms.outlineLightingMixFactor.value;
    }
    set outlineLightingMixFactor(value) {
        this.uniforms.outlineLightingMixFactor.value = value;
    }
    get uvAnimationMaskTexture() {
        return this.uniforms.uvAnimationMaskTexture.value;
    }
    set uvAnimationMaskTexture(value) {
        this.uniforms.uvAnimationMaskTexture.value = value;
    }
    get uvAnimationScrollXOffset() {
        return this.uniforms.uvAnimationScrollXOffset.value;
    }
    set uvAnimationScrollXOffset(value) {
        this.uniforms.uvAnimationScrollXOffset.value = value;
    }
    get uvAnimationScrollYOffset() {
        return this.uniforms.uvAnimationScrollYOffset.value;
    }
    set uvAnimationScrollYOffset(value) {
        this.uniforms.uvAnimationScrollYOffset.value = value;
    }
    get uvAnimationRotationPhase() {
        return this.uniforms.uvAnimationRotationPhase.value;
    }
    set uvAnimationRotationPhase(value) {
        this.uniforms.uvAnimationRotationPhase.value = value;
    }
    /**
     * When this is `true`, vertex colors will be ignored.
     * `true` by default.
     */
    get ignoreVertexColor() {
        return this._ignoreVertexColor;
    }
    set ignoreVertexColor(value) {
        this._ignoreVertexColor = value;
        this.needsUpdate = true;
    }
    /**
     * There is a line of the shader called "comment out if you want to PBR absolutely" in VRM0.0 MToon.
     * When this is true, the material enables the line to make it compatible with the legacy rendering of VRM.
     * Usually not recommended to turn this on.
     * `false` by default.
     */
    get v0CompatShade() {
        return this._v0CompatShade;
    }
    /**
     * There is a line of the shader called "comment out if you want to PBR absolutely" in VRM0.0 MToon.
     * When this is true, the material enables the line to make it compatible with the legacy rendering of VRM.
     * Usually not recommended to turn this on.
     * `false` by default.
     */
    set v0CompatShade(v) {
        this._v0CompatShade = v;
        this.needsUpdate = true;
    }
    /**
     * Debug mode for the material.
     * You can visualize several components for diagnosis using debug mode.
     *
     * See: {@link MToonMaterialDebugMode}
     */
    get debugMode() {
        return this._debugMode;
    }
    /**
     * Debug mode for the material.
     * You can visualize several components for diagnosis using debug mode.
     *
     * See: {@link MToonMaterialDebugMode}
     */
    set debugMode(m) {
        this._debugMode = m;
        this.needsUpdate = true;
    }
    get outlineWidthMode() {
        return this._outlineWidthMode;
    }
    set outlineWidthMode(m) {
        this._outlineWidthMode = m;
        this.needsUpdate = true;
    }
    get isOutline() {
        return this._isOutline;
    }
    set isOutline(b) {
        this._isOutline = b;
        this.needsUpdate = true;
    }
    /**
     * Readonly boolean that indicates this is a [[MToonMaterial]].
     */
    get isMToonMaterial() {
        return true;
    }
    constructor(parameters = {}) {
        super({ vertexShader, fragmentShader });
        this.uvAnimationScrollXSpeedFactor = 0.0;
        this.uvAnimationScrollYSpeedFactor = 0.0;
        this.uvAnimationRotationSpeedFactor = 0.0;
        /**
         * Whether the material is affected by fog.
         * `true` by default.
         */
        this.fog = true;
        /**
         * Will be read in WebGLPrograms
         *
         * See: https://github.com/mrdoob/three.js/blob/4f5236ac3d6f41d904aa58401b40554e8fbdcb15/src/renderers/webgl/WebGLPrograms.js#L190-L191
         */
        this.normalMapType = THREE.TangentSpaceNormalMap;
        /**
         * When this is `true`, vertex colors will be ignored.
         * `true` by default.
         */
        this._ignoreVertexColor = true;
        this._v0CompatShade = false;
        this._debugMode = MToonMaterialDebugMode.None;
        this._outlineWidthMode = MToonMaterialOutlineWidthMode.None;
        this._isOutline = false;
        // override depthWrite with transparentWithZWrite
        if (parameters.transparentWithZWrite) {
            parameters.depthWrite = true;
        }
        delete parameters.transparentWithZWrite;
        // == enabling bunch of stuff ==================================================================
        parameters.fog = true;
        parameters.lights = true;
        parameters.clipping = true;
        // COMPAT: pre-r129
        // See: https://github.com/mrdoob/three.js/pull/21788
        if (parseInt(THREE.REVISION, 10) < 129) {
            parameters.skinning = parameters.skinning || false;
        }
        // COMPAT: pre-r131
        // See: https://github.com/mrdoob/three.js/pull/22169
        if (parseInt(THREE.REVISION, 10) < 131) {
            parameters.morphTargets = parameters.morphTargets || false;
            parameters.morphNormals = parameters.morphNormals || false;
        }
        // == uniforms =================================================================================
        this.uniforms = THREE.UniformsUtils.merge([
            THREE.UniformsLib.common,
            THREE.UniformsLib.normalmap,
            THREE.UniformsLib.emissivemap,
            THREE.UniformsLib.fog,
            THREE.UniformsLib.lights,
            {
                litFactor: { value: new THREE.Color(1.0, 1.0, 1.0) },
                mapUvTransform: { value: new THREE.Matrix3() },
                colorAlpha: { value: 1.0 },
                normalMapUvTransform: { value: new THREE.Matrix3() },
                shadeColorFactor: { value: new THREE.Color(0.97, 0.81, 0.86) },
                shadeMultiplyTexture: { value: null },
                shadeMultiplyTextureUvTransform: { value: new THREE.Matrix3() },
                shadingShiftFactor: { value: 0.0 },
                shadingShiftTexture: { value: null },
                shadingShiftTextureUvTransform: { value: new THREE.Matrix3() },
                shadingShiftTextureScale: { value: 1.0 },
                shadingToonyFactor: { value: 0.9 },
                giEqualizationFactor: { value: 0.9 },
                matcapFactor: { value: new THREE.Color(0.0, 0.0, 0.0) },
                matcapTexture: { value: null },
                matcapTextureUvTransform: { value: new THREE.Matrix3() },
                parametricRimColorFactor: { value: new THREE.Color(0.0, 0.0, 0.0) },
                rimMultiplyTexture: { value: null },
                rimMultiplyTextureUvTransform: { value: new THREE.Matrix3() },
                rimLightingMixFactor: { value: 0.0 },
                parametricRimFresnelPowerFactor: { value: 1.0 },
                parametricRimLiftFactor: { value: 0.0 },
                emissive: { value: new THREE.Color(0.0, 0.0, 0.0) },
                emissiveIntensity: { value: 1.0 },
                emissiveMapUvTransform: { value: new THREE.Matrix3() },
                outlineWidthMultiplyTexture: { value: null },
                outlineWidthMultiplyTextureUvTransform: { value: new THREE.Matrix3() },
                outlineWidthFactor: { value: 0.5 },
                outlineColorFactor: { value: new THREE.Color(0.0, 0.0, 0.0) },
                outlineLightingMixFactor: { value: 1.0 },
                uvAnimationMaskTexture: { value: null },
                uvAnimationMaskTextureUvTransform: { value: new THREE.Matrix3() },
                uvAnimationScrollXOffset: { value: 0.0 },
                uvAnimationScrollYOffset: { value: 0.0 },
                uvAnimationRotationPhase: { value: 0.0 },
            },
            parameters.uniforms,
        ]);
        // == finally compile the shader program =======================================================
        this.setValues(parameters);
        // == upload uniforms that need to upload ======================================================
        this._uploadUniformsWorkaround();
        // == update shader stuff ======================================================================
        this.customProgramCacheKey = () => [
            ...Object.entries(this._generateDefines()).map(([token, macro]) => `${token}:${macro}`),
            this.matcapTexture ? `matcapTextureColorSpace:${getTextureColorSpace(this.matcapTexture)}` : '',
            this.shadeMultiplyTexture
                ? `shadeMultiplyTextureColorSpace:${getTextureColorSpace(this.shadeMultiplyTexture)}`
                : '',
            this.rimMultiplyTexture ? `rimMultiplyTextureColorSpace:${getTextureColorSpace(this.rimMultiplyTexture)}` : '',
        ].join(',');
        this.onBeforeCompile = (shader) => {
            const threeRevision = parseInt(THREE.REVISION, 10);
            const defines = Object.entries(Object.assign(Object.assign({}, this._generateDefines()), this.defines))
                .filter(([token, macro]) => !!macro)
                .map(([token, macro]) => `#define ${token} ${macro}`)
                .join('\n') + '\n';
            // -- generate shader code -------------------------------------------------------------------
            shader.vertexShader = defines + shader.vertexShader;
            shader.fragmentShader = defines + shader.fragmentShader;
            // -- compat ---------------------------------------------------------------------------------
            // COMPAT: pre-r132
            // Three.js r132 introduces new shader chunks <normal_pars_fragment> and <alphatest_pars_fragment>
            if (threeRevision < 132) {
                shader.fragmentShader = shader.fragmentShader.replace('#include <normal_pars_fragment>', '');
                shader.fragmentShader = shader.fragmentShader.replace('#include <alphatest_pars_fragment>', '');
            }
        };
    }
    /**
     * Update this material.
     *
     * @param delta deltaTime since last update
     */
    update(delta) {
        this._uploadUniformsWorkaround();
        this._updateUVAnimation(delta);
    }
    copy(source) {
        super.copy(source);
        // uniforms are already copied at this moment
        // Beginning from r133, uniform textures will be cloned instead of reference
        // See: https://github.com/mrdoob/three.js/blob/a8813be04a849bd155f7cf6f1b23d8ee2e0fb48b/examples/jsm/loaders/GLTFLoader.js#L3047
        // See: https://github.com/mrdoob/three.js/blob/a8813be04a849bd155f7cf6f1b23d8ee2e0fb48b/src/renderers/shaders/UniformsUtils.js#L22
        // This will leave their `.version` to be `0`
        // and these textures won't be uploaded to GPU
        // We are going to workaround this in here
        // I've opened an issue for this: https://github.com/mrdoob/three.js/issues/22718
        this.map = source.map;
        this.normalMap = source.normalMap;
        this.emissiveMap = source.emissiveMap;
        this.shadeMultiplyTexture = source.shadeMultiplyTexture;
        this.shadingShiftTexture = source.shadingShiftTexture;
        this.matcapTexture = source.matcapTexture;
        this.rimMultiplyTexture = source.rimMultiplyTexture;
        this.outlineWidthMultiplyTexture = source.outlineWidthMultiplyTexture;
        this.uvAnimationMaskTexture = source.uvAnimationMaskTexture;
        // == copy members =============================================================================
        this.normalMapType = source.normalMapType;
        this.uvAnimationScrollXSpeedFactor = source.uvAnimationScrollXSpeedFactor;
        this.uvAnimationScrollYSpeedFactor = source.uvAnimationScrollYSpeedFactor;
        this.uvAnimationRotationSpeedFactor = source.uvAnimationRotationSpeedFactor;
        this.ignoreVertexColor = source.ignoreVertexColor;
        this.v0CompatShade = source.v0CompatShade;
        this.debugMode = source.debugMode;
        this.outlineWidthMode = source.outlineWidthMode;
        this.isOutline = source.isOutline;
        // == update shader stuff ======================================================================
        this.needsUpdate = true;
        return this;
    }
    /**
     * Update UV animation state.
     * Intended to be called via {@link update}.
     * @param delta deltaTime
     */
    _updateUVAnimation(delta) {
        this.uniforms.uvAnimationScrollXOffset.value += delta * this.uvAnimationScrollXSpeedFactor;
        this.uniforms.uvAnimationScrollYOffset.value += delta * this.uvAnimationScrollYSpeedFactor;
        this.uniforms.uvAnimationRotationPhase.value += delta * this.uvAnimationRotationSpeedFactor;
        this.uniformsNeedUpdate = true;
    }
    /**
     * Upload uniforms that need to upload but doesn't automatically because of reasons.
     * Intended to be called via {@link constructor} and {@link update}.
     */
    _uploadUniformsWorkaround() {
        // workaround: since opacity is defined as a property in THREE.Material
        // and cannot be overridden as an accessor,
        // We are going to update opacity here
        this.uniforms.opacity.value = this.opacity;
        // workaround: texture transforms are not updated automatically
        this._updateTextureMatrix(this.uniforms.map, this.uniforms.mapUvTransform);
        this._updateTextureMatrix(this.uniforms.normalMap, this.uniforms.normalMapUvTransform);
        this._updateTextureMatrix(this.uniforms.emissiveMap, this.uniforms.emissiveMapUvTransform);
        this._updateTextureMatrix(this.uniforms.shadeMultiplyTexture, this.uniforms.shadeMultiplyTextureUvTransform);
        this._updateTextureMatrix(this.uniforms.shadingShiftTexture, this.uniforms.shadingShiftTextureUvTransform);
        this._updateTextureMatrix(this.uniforms.matcapTexture, this.uniforms.matcapTextureUvTransform);
        this._updateTextureMatrix(this.uniforms.rimMultiplyTexture, this.uniforms.rimMultiplyTextureUvTransform);
        this._updateTextureMatrix(this.uniforms.outlineWidthMultiplyTexture, this.uniforms.outlineWidthMultiplyTextureUvTransform);
        this._updateTextureMatrix(this.uniforms.uvAnimationMaskTexture, this.uniforms.uvAnimationMaskTextureUvTransform);
        // COMPAT workaround: starting from r132, alphaTest becomes a uniform instead of preprocessor value
        const threeRevision = parseInt(THREE.REVISION, 10);
        if (threeRevision >= 132) {
            this.uniforms.alphaTest.value = this.alphaTest;
        }
        this.uniformsNeedUpdate = true;
    }
    /**
     * Returns a map object of preprocessor token and macro of the shader program.
     */
    _generateDefines() {
        const threeRevision = parseInt(THREE.REVISION, 10);
        const useUvInVert = this.outlineWidthMultiplyTexture !== null;
        const useUvInFrag = this.map !== null ||
            this.emissiveMap !== null ||
            this.shadeMultiplyTexture !== null ||
            this.shadingShiftTexture !== null ||
            this.rimMultiplyTexture !== null ||
            this.uvAnimationMaskTexture !== null;
        return {
            // Temporary compat against shader change @ Three.js r126
            // See: #21205, #21307, #21299
            THREE_VRM_THREE_REVISION: threeRevision,
            OUTLINE: this._isOutline,
            MTOON_USE_UV: useUvInVert || useUvInFrag,
            MTOON_UVS_VERTEX_ONLY: useUvInVert && !useUvInFrag,
            V0_COMPAT_SHADE: this._v0CompatShade,
            USE_SHADEMULTIPLYTEXTURE: this.shadeMultiplyTexture !== null,
            USE_SHADINGSHIFTTEXTURE: this.shadingShiftTexture !== null,
            USE_MATCAPTEXTURE: this.matcapTexture !== null,
            USE_RIMMULTIPLYTEXTURE: this.rimMultiplyTexture !== null,
            USE_OUTLINEWIDTHMULTIPLYTEXTURE: this._isOutline && this.outlineWidthMultiplyTexture !== null,
            USE_UVANIMATIONMASKTEXTURE: this.uvAnimationMaskTexture !== null,
            IGNORE_VERTEX_COLOR: this._ignoreVertexColor === true,
            DEBUG_NORMAL: this._debugMode === 'normal',
            DEBUG_LITSHADERATE: this._debugMode === 'litShadeRate',
            DEBUG_UV: this._debugMode === 'uv',
            OUTLINE_WIDTH_WORLD: this._isOutline && this._outlineWidthMode === MToonMaterialOutlineWidthMode.WorldCoordinates,
            OUTLINE_WIDTH_SCREEN: this._isOutline && this._outlineWidthMode === MToonMaterialOutlineWidthMode.ScreenCoordinates,
        };
    }
    _updateTextureMatrix(src, dst) {
        if (src.value) {
            if (src.value.matrixAutoUpdate) {
                src.value.updateMatrix();
            }
            dst.value.copy(src.value.matrix);
        }
    }
}

const colorSpaceEncodingMap = {
    '': 3000,
    srgb: 3001,
};
/**
 * A compat function to set texture color space.
 *
 * COMPAT: pre-r152
 * Starting from Three.js r152, `texture.encoding` is renamed to `texture.colorSpace`.
 * This function will handle the comapt.
 *
 * @param texture The texture you want to set the color space to
 * @param colorSpace The color space you want to set to the texture
 */
function setTextureColorSpace(texture, colorSpace) {
    if (parseInt(THREE.REVISION, 10) >= 152) {
        texture.colorSpace = colorSpace;
    }
    else {
        texture.encoding = colorSpaceEncodingMap[colorSpace];
    }
}

/**
 * MaterialParameters hates `undefined`. This helper automatically rejects assign of these `undefined`.
 * It also handles asynchronous process of textures.
 * Make sure await for {@link GLTFMToonMaterialParamsAssignHelper.pending}.
 */
class GLTFMToonMaterialParamsAssignHelper {
    get pending() {
        return Promise.all(this._pendings);
    }
    constructor(parser, materialParams) {
        this._parser = parser;
        this._materialParams = materialParams;
        this._pendings = [];
    }
    assignPrimitive(key, value) {
        if (value != null) {
            this._materialParams[key] = value;
        }
    }
    assignColor(key, value, convertSRGBToLinear) {
        if (value != null) {
            this._materialParams[key] = new THREE.Color().fromArray(value);
            if (convertSRGBToLinear) {
                this._materialParams[key].convertSRGBToLinear();
            }
        }
    }
    assignTexture(key, texture, isColorTexture) {
        return __awaiter$4(this, void 0, void 0, function* () {
            const promise = (() => __awaiter$4(this, void 0, void 0, function* () {
                if (texture != null) {
                    yield this._parser.assignTexture(this._materialParams, key, texture);
                    if (isColorTexture) {
                        setTextureColorSpace(this._materialParams[key], 'srgb');
                    }
                }
            }))();
            this._pendings.push(promise);
            return promise;
        });
    }
    assignTextureByIndex(key, textureIndex, isColorTexture) {
        return __awaiter$4(this, void 0, void 0, function* () {
            return this.assignTexture(key, textureIndex != null ? { index: textureIndex } : undefined, isColorTexture);
        });
    }
}

/**
 * Possible spec versions it recognizes.
 */
const POSSIBLE_SPEC_VERSIONS$2 = new Set(['1.0', '1.0-beta']);
class MToonMaterialLoaderPlugin {
    get name() {
        return MToonMaterialLoaderPlugin.EXTENSION_NAME;
    }
    constructor(parser, options = {}) {
        var _a, _b, _c;
        this.parser = parser;
        this.renderOrderOffset = (_a = options.renderOrderOffset) !== null && _a !== void 0 ? _a : 0;
        this.v0CompatShade = (_b = options.v0CompatShade) !== null && _b !== void 0 ? _b : false;
        this.debugMode = (_c = options.debugMode) !== null && _c !== void 0 ? _c : 'none';
        this._mToonMaterialSet = new Set();
    }
    beforeRoot() {
        return __awaiter$4(this, void 0, void 0, function* () {
            this._removeUnlitExtensionIfMToonExists();
        });
    }
    afterRoot(gltf) {
        return __awaiter$4(this, void 0, void 0, function* () {
            gltf.userData.vrmMToonMaterials = Array.from(this._mToonMaterialSet);
        });
    }
    getMaterialType(materialIndex) {
        const v1Extension = this._getMToonExtension(materialIndex);
        if (v1Extension) {
            return MToonMaterial;
        }
        return null;
    }
    extendMaterialParams(materialIndex, materialParams) {
        const extension = this._getMToonExtension(materialIndex);
        if (extension) {
            return this._extendMaterialParams(extension, materialParams);
        }
        return null;
    }
    loadMesh(meshIndex) {
        var _a;
        return __awaiter$4(this, void 0, void 0, function* () {
            const parser = this.parser;
            const json = parser.json;
            const meshDef = (_a = json.meshes) === null || _a === void 0 ? void 0 : _a[meshIndex];
            if (meshDef == null) {
                throw new Error(`MToonMaterialLoaderPlugin: Attempt to use meshes[${meshIndex}] of glTF but the mesh doesn't exist`);
            }
            const primitivesDef = meshDef.primitives;
            const meshOrGroup = yield parser.loadMesh(meshIndex);
            if (primitivesDef.length === 1) {
                const mesh = meshOrGroup;
                const materialIndex = primitivesDef[0].material;
                if (materialIndex != null) {
                    this._setupPrimitive(mesh, materialIndex);
                }
            }
            else {
                const group = meshOrGroup;
                for (let i = 0; i < primitivesDef.length; i++) {
                    const mesh = group.children[i];
                    const materialIndex = primitivesDef[i].material;
                    if (materialIndex != null) {
                        this._setupPrimitive(mesh, materialIndex);
                    }
                }
            }
            return meshOrGroup;
        });
    }
    /**
     * Delete use of `KHR_materials_unlit` from its `materials` if the material is using MToon.
     *
     * Since GLTFLoader have so many hardcoded procedure related to `KHR_materials_unlit`
     * we have to delete the extension before we start to parse the glTF.
     */
    _removeUnlitExtensionIfMToonExists() {
        const parser = this.parser;
        const json = parser.json;
        const materialDefs = json.materials;
        materialDefs === null || materialDefs === void 0 ? void 0 : materialDefs.map((materialDef, iMaterial) => {
            var _a;
            const extension = this._getMToonExtension(iMaterial);
            if (extension && ((_a = materialDef.extensions) === null || _a === void 0 ? void 0 : _a['KHR_materials_unlit'])) {
                delete materialDef.extensions['KHR_materials_unlit'];
            }
        });
    }
    _getMToonExtension(materialIndex) {
        var _a, _b;
        const parser = this.parser;
        const json = parser.json;
        const materialDef = (_a = json.materials) === null || _a === void 0 ? void 0 : _a[materialIndex];
        if (materialDef == null) {
            console.warn(`MToonMaterialLoaderPlugin: Attempt to use materials[${materialIndex}] of glTF but the material doesn't exist`);
            return undefined;
        }
        const extension = (_b = materialDef.extensions) === null || _b === void 0 ? void 0 : _b[MToonMaterialLoaderPlugin.EXTENSION_NAME];
        if (extension == null) {
            return undefined;
        }
        const specVersion = extension.specVersion;
        if (!POSSIBLE_SPEC_VERSIONS$2.has(specVersion)) {
            console.warn(`MToonMaterialLoaderPlugin: Unknown ${MToonMaterialLoaderPlugin.EXTENSION_NAME} specVersion "${specVersion}"`);
            return undefined;
        }
        return extension;
    }
    _extendMaterialParams(extension, materialParams) {
        var _a;
        return __awaiter$4(this, void 0, void 0, function* () {
            // Removing material params that is not required to supress warnings.
            delete materialParams.metalness;
            delete materialParams.roughness;
            const assignHelper = new GLTFMToonMaterialParamsAssignHelper(this.parser, materialParams);
            assignHelper.assignPrimitive('transparentWithZWrite', extension.transparentWithZWrite);
            assignHelper.assignColor('shadeColorFactor', extension.shadeColorFactor);
            assignHelper.assignTexture('shadeMultiplyTexture', extension.shadeMultiplyTexture, true);
            assignHelper.assignPrimitive('shadingShiftFactor', extension.shadingShiftFactor);
            assignHelper.assignTexture('shadingShiftTexture', extension.shadingShiftTexture, true);
            assignHelper.assignPrimitive('shadingShiftTextureScale', (_a = extension.shadingShiftTexture) === null || _a === void 0 ? void 0 : _a.scale);
            assignHelper.assignPrimitive('shadingToonyFactor', extension.shadingToonyFactor);
            assignHelper.assignPrimitive('giEqualizationFactor', extension.giEqualizationFactor);
            assignHelper.assignColor('matcapFactor', extension.matcapFactor);
            assignHelper.assignTexture('matcapTexture', extension.matcapTexture, true);
            assignHelper.assignColor('parametricRimColorFactor', extension.parametricRimColorFactor);
            assignHelper.assignTexture('rimMultiplyTexture', extension.rimMultiplyTexture, true);
            assignHelper.assignPrimitive('rimLightingMixFactor', extension.rimLightingMixFactor);
            assignHelper.assignPrimitive('parametricRimFresnelPowerFactor', extension.parametricRimFresnelPowerFactor);
            assignHelper.assignPrimitive('parametricRimLiftFactor', extension.parametricRimLiftFactor);
            assignHelper.assignPrimitive('outlineWidthMode', extension.outlineWidthMode);
            assignHelper.assignPrimitive('outlineWidthFactor', extension.outlineWidthFactor);
            assignHelper.assignTexture('outlineWidthMultiplyTexture', extension.outlineWidthMultiplyTexture, false);
            assignHelper.assignColor('outlineColorFactor', extension.outlineColorFactor);
            assignHelper.assignPrimitive('outlineLightingMixFactor', extension.outlineLightingMixFactor);
            assignHelper.assignTexture('uvAnimationMaskTexture', extension.uvAnimationMaskTexture, false);
            assignHelper.assignPrimitive('uvAnimationScrollXSpeedFactor', extension.uvAnimationScrollXSpeedFactor);
            assignHelper.assignPrimitive('uvAnimationScrollYSpeedFactor', extension.uvAnimationScrollYSpeedFactor);
            assignHelper.assignPrimitive('uvAnimationRotationSpeedFactor', extension.uvAnimationRotationSpeedFactor);
            assignHelper.assignPrimitive('v0CompatShade', this.v0CompatShade);
            assignHelper.assignPrimitive('debugMode', this.debugMode);
            yield assignHelper.pending;
        });
    }
    /**
     * This will do two processes that is required to render MToon properly.
     *
     * - Set render order
     * - Generate outline
     *
     * @param mesh A target GLTF primitive
     * @param materialIndex The material index of the primitive
     */
    _setupPrimitive(mesh, materialIndex) {
        const extension = this._getMToonExtension(materialIndex);
        if (extension) {
            const renderOrder = this._parseRenderOrder(extension);
            mesh.renderOrder = renderOrder + this.renderOrderOffset;
            this._generateOutline(mesh);
            this._addToMaterialSet(mesh);
            return;
        }
    }
    /**
     * Generate outline for the given mesh, if it needs.
     *
     * @param mesh The target mesh
     */
    _generateOutline(mesh) {
        // OK, it's the hacky part.
        // We are going to duplicate the MToonMaterial for outline use.
        // Then we are going to create two geometry groups and refer same buffer but different material.
        // It's how we draw two materials at once using a single mesh.
        // make sure the material is mtoon
        const surfaceMaterial = mesh.material;
        if (!(surfaceMaterial instanceof MToonMaterial)) {
            return;
        }
        // check whether we really have to prepare outline or not
        if (surfaceMaterial.outlineWidthMode === 'none' || surfaceMaterial.outlineWidthFactor <= 0.0) {
            return;
        }
        // make its material an array
        mesh.material = [surfaceMaterial]; // mesh.material is guaranteed to be a Material in GLTFLoader
        // duplicate the material for outline use
        const outlineMaterial = surfaceMaterial.clone();
        outlineMaterial.name += ' (Outline)';
        outlineMaterial.isOutline = true;
        outlineMaterial.side = THREE.BackSide;
        mesh.material.push(outlineMaterial);
        // make two geometry groups out of a same buffer
        const geometry = mesh.geometry; // mesh.geometry is guaranteed to be a BufferGeometry in GLTFLoader
        const primitiveVertices = geometry.index ? geometry.index.count : geometry.attributes.position.count / 3;
        geometry.addGroup(0, primitiveVertices, 0);
        geometry.addGroup(0, primitiveVertices, 1);
    }
    _addToMaterialSet(mesh) {
        const materialOrMaterials = mesh.material;
        const materialSet = new Set();
        if (Array.isArray(materialOrMaterials)) {
            materialOrMaterials.forEach((material) => materialSet.add(material));
        }
        else {
            materialSet.add(materialOrMaterials);
        }
        for (const material of materialSet) {
            if (material instanceof MToonMaterial) {
                this._mToonMaterialSet.add(material);
            }
        }
    }
    _parseRenderOrder(extension) {
        var _a;
        // transparentWithZWrite ranges from 0 to +9
        // mere transparent ranges from -9 to 0
        const enabledZWrite = extension.transparentWithZWrite;
        return (enabledZWrite ? 0 : 19) + ((_a = extension.renderQueueOffsetNumber) !== null && _a !== void 0 ? _a : 0);
    }
}
MToonMaterialLoaderPlugin.EXTENSION_NAME = 'VRMC_materials_mtoon';

/*!
 * @pixiv/three-vrm-materials-hdr-emissive-multiplier v2.0.1
 * Support VRMC_hdr_emissiveMultiplier for @pixiv/three-vrm
 *
 * Copyright (c) 2020-2023 pixiv Inc.
 * @pixiv/three-vrm-materials-hdr-emissive-multiplier is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter$3(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class VRMMaterialsHDREmissiveMultiplierLoaderPlugin {
    get name() {
        return VRMMaterialsHDREmissiveMultiplierLoaderPlugin.EXTENSION_NAME;
    }
    constructor(parser) {
        this.parser = parser;
    }
    extendMaterialParams(materialIndex, materialParams) {
        return __awaiter$3(this, void 0, void 0, function* () {
            const extension = this._getHDREmissiveMultiplierExtension(materialIndex);
            if (extension == null) {
                return;
            }
            // This extension is archived. Emit warning
            // See: https://github.com/vrm-c/vrm-specification/pull/375
            console.warn('VRMMaterialsHDREmissiveMultiplierLoaderPlugin: `VRMC_materials_hdr_emissiveMultiplier` is archived. Use `KHR_materials_emissive_strength` instead.');
            const emissiveMultiplier = extension.emissiveMultiplier;
            materialParams.emissiveIntensity = emissiveMultiplier;
        });
    }
    _getHDREmissiveMultiplierExtension(materialIndex) {
        var _a, _b;
        const parser = this.parser;
        const json = parser.json;
        const materialDef = (_a = json.materials) === null || _a === void 0 ? void 0 : _a[materialIndex];
        if (materialDef == null) {
            console.warn(`VRMMaterialsHDREmissiveMultiplierLoaderPlugin: Attempt to use materials[${materialIndex}] of glTF but the material doesn't exist`);
            return undefined;
        }
        const extension = (_b = materialDef.extensions) === null || _b === void 0 ? void 0 : _b[VRMMaterialsHDREmissiveMultiplierLoaderPlugin.EXTENSION_NAME];
        if (extension == null) {
            return undefined;
        }
        return extension;
    }
}
VRMMaterialsHDREmissiveMultiplierLoaderPlugin.EXTENSION_NAME = 'VRMC_materials_hdr_emissiveMultiplier';

/*!
 * @pixiv/three-vrm-materials-v0compat v2.0.1
 * VRM0.0 materials compatibility layer plugin for @pixiv/three-vrm
 *
 * Copyright (c) 2020-2023 pixiv Inc.
 * @pixiv/three-vrm-materials-v0compat is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter$2(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function gammaEOTF(e) {
    return Math.pow(e, 2.2);
}

class VRMMaterialsV0CompatPlugin {
    get name() {
        return 'VRMMaterialsV0CompatPlugin';
    }
    constructor(parser) {
        var _a;
        this.parser = parser;
        this._renderQueueMapTransparent = new Map();
        this._renderQueueMapTransparentZWrite = new Map();
        // WORKAROUND: Add KHR_texture_transform to extensionsUsed
        // It is too late to add this in beforeRoot
        const json = this.parser.json;
        json.extensionsUsed = (_a = json.extensionsUsed) !== null && _a !== void 0 ? _a : [];
        if (json.extensionsUsed.indexOf('KHR_texture_transform') === -1) {
            json.extensionsUsed.push('KHR_texture_transform');
        }
    }
    beforeRoot() {
        var _a;
        return __awaiter$2(this, void 0, void 0, function* () {
            const json = this.parser.json;
            // early abort if it doesn't use V0VRM
            const v0VRMExtension = (_a = json.extensions) === null || _a === void 0 ? void 0 : _a['VRM'];
            const v0MaterialProperties = v0VRMExtension === null || v0VRMExtension === void 0 ? void 0 : v0VRMExtension.materialProperties;
            if (!v0MaterialProperties) {
                return;
            }
            // populate render queue map
            this._populateRenderQueueMap(v0MaterialProperties);
            // convert V0 material properties into V1 compatible format
            v0MaterialProperties.forEach((materialProperties, materialIndex) => {
                var _a, _b;
                const materialDef = (_a = json.materials) === null || _a === void 0 ? void 0 : _a[materialIndex];
                if (materialDef == null) {
                    console.warn(`VRMMaterialsV0CompatPlugin: Attempt to use materials[${materialIndex}] of glTF but the material doesn't exist`);
                    return;
                }
                if (materialProperties.shader === 'VRM/MToon') {
                    const material = this._parseV0MToonProperties(materialProperties, materialDef);
                    json.materials[materialIndex] = material;
                }
                else if ((_b = materialProperties.shader) === null || _b === void 0 ? void 0 : _b.startsWith('VRM/Unlit')) {
                    const material = this._parseV0UnlitProperties(materialProperties, materialDef);
                    json.materials[materialIndex] = material;
                }
                else if (materialProperties.shader === 'VRM_USE_GLTFSHADER') ;
                else {
                    console.warn(`VRMMaterialsV0CompatPlugin: Unknown shader: ${materialProperties.shader}`);
                }
            });
        });
    }
    _parseV0MToonProperties(materialProperties, schemaMaterial) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19;
        const isTransparent = (_b = (_a = materialProperties.keywordMap) === null || _a === void 0 ? void 0 : _a['_ALPHABLEND_ON']) !== null && _b !== void 0 ? _b : false;
        const enabledZWrite = ((_c = materialProperties.floatProperties) === null || _c === void 0 ? void 0 : _c['_ZWrite']) === 1;
        const transparentWithZWrite = enabledZWrite && isTransparent;
        const renderQueueOffsetNumber = this._v0ParseRenderQueue(materialProperties);
        const isCutoff = (_e = (_d = materialProperties.keywordMap) === null || _d === void 0 ? void 0 : _d['_ALPHATEST_ON']) !== null && _e !== void 0 ? _e : false;
        const alphaMode = isTransparent ? 'BLEND' : isCutoff ? 'MASK' : 'OPAQUE';
        const alphaCutoff = isCutoff ? (_f = materialProperties.floatProperties) === null || _f === void 0 ? void 0 : _f['_Cutoff'] : undefined;
        const cullMode = (_h = (_g = materialProperties.floatProperties) === null || _g === void 0 ? void 0 : _g['_CullMode']) !== null && _h !== void 0 ? _h : 2; // enum, { Off, Front, Back }
        const doubleSided = cullMode === 0;
        const textureTransformExt = this._portTextureTransform(materialProperties);
        const baseColorFactor = (_k = (_j = materialProperties.vectorProperties) === null || _j === void 0 ? void 0 : _j['_Color']) === null || _k === void 0 ? void 0 : _k.map((v, i) => (i === 3 ? v : gammaEOTF(v)));
        const baseColorTextureIndex = (_l = materialProperties.textureProperties) === null || _l === void 0 ? void 0 : _l['_MainTex'];
        const baseColorTexture = baseColorTextureIndex != null
            ? {
                index: baseColorTextureIndex,
                extensions: Object.assign({}, textureTransformExt),
            }
            : undefined;
        const normalTextureScale = (_m = materialProperties.floatProperties) === null || _m === void 0 ? void 0 : _m['_BumpScale'];
        const normalTextureIndex = (_o = materialProperties.textureProperties) === null || _o === void 0 ? void 0 : _o['_BumpMap'];
        const normalTexture = normalTextureIndex != null
            ? {
                index: normalTextureIndex,
                scale: normalTextureScale,
                extensions: Object.assign({}, textureTransformExt),
            }
            : undefined;
        const emissiveFactor = (_q = (_p = materialProperties.vectorProperties) === null || _p === void 0 ? void 0 : _p['_EmissionColor']) === null || _q === void 0 ? void 0 : _q.map(gammaEOTF);
        const emissiveTextureIndex = (_r = materialProperties.textureProperties) === null || _r === void 0 ? void 0 : _r['_EmissionMap'];
        const emissiveTexture = emissiveTextureIndex != null
            ? {
                index: emissiveTextureIndex,
                extensions: Object.assign({}, textureTransformExt),
            }
            : undefined;
        const shadeColorFactor = (_t = (_s = materialProperties.vectorProperties) === null || _s === void 0 ? void 0 : _s['_ShadeColor']) === null || _t === void 0 ? void 0 : _t.map(gammaEOTF);
        const shadeMultiplyTextureIndex = (_u = materialProperties.textureProperties) === null || _u === void 0 ? void 0 : _u['_ShadeTexture'];
        const shadeMultiplyTexture = shadeMultiplyTextureIndex != null
            ? {
                index: shadeMultiplyTextureIndex,
                extensions: Object.assign({}, textureTransformExt),
            }
            : undefined;
        // // convert v0 shade shift / shade toony
        let shadingShiftFactor = (_w = (_v = materialProperties.floatProperties) === null || _v === void 0 ? void 0 : _v['_ShadeShift']) !== null && _w !== void 0 ? _w : 0.0;
        let shadingToonyFactor = (_y = (_x = materialProperties.floatProperties) === null || _x === void 0 ? void 0 : _x['_ShadeToony']) !== null && _y !== void 0 ? _y : 0.9;
        shadingToonyFactor = THREE.MathUtils.lerp(shadingToonyFactor, 1.0, 0.5 + 0.5 * shadingShiftFactor);
        shadingShiftFactor = -shadingShiftFactor - (1.0 - shadingToonyFactor);
        const giIntensityFactor = (_z = materialProperties.floatProperties) === null || _z === void 0 ? void 0 : _z['_IndirectLightIntensity'];
        const giEqualizationFactor = giIntensityFactor ? 1.0 - giIntensityFactor : undefined;
        const matcapTextureIndex = (_0 = materialProperties.textureProperties) === null || _0 === void 0 ? void 0 : _0['_SphereAdd'];
        const matcapFactor = matcapTextureIndex != null ? [1.0, 1.0, 1.0] : undefined;
        const matcapTexture = matcapTextureIndex != null
            ? {
                index: matcapTextureIndex,
            }
            : undefined;
        const rimLightingMixFactor = (_1 = materialProperties.floatProperties) === null || _1 === void 0 ? void 0 : _1['_RimLightingMix'];
        const rimMultiplyTextureIndex = (_2 = materialProperties.textureProperties) === null || _2 === void 0 ? void 0 : _2['_RimTexture'];
        const rimMultiplyTexture = rimMultiplyTextureIndex != null
            ? {
                index: rimMultiplyTextureIndex,
                extensions: Object.assign({}, textureTransformExt),
            }
            : undefined;
        const parametricRimColorFactor = (_4 = (_3 = materialProperties.vectorProperties) === null || _3 === void 0 ? void 0 : _3['_RimColor']) === null || _4 === void 0 ? void 0 : _4.map(gammaEOTF);
        const parametricRimFresnelPowerFactor = (_5 = materialProperties.floatProperties) === null || _5 === void 0 ? void 0 : _5['_RimFresnelPower'];
        const parametricRimLiftFactor = (_6 = materialProperties.floatProperties) === null || _6 === void 0 ? void 0 : _6['_RimLift'];
        const outlineWidthMode = ['none', 'worldCoordinates', 'screenCoordinates'][(_8 = (_7 = materialProperties.floatProperties) === null || _7 === void 0 ? void 0 : _7['_OutlineWidthMode']) !== null && _8 !== void 0 ? _8 : 0];
        // // v0 outlineWidthFactor is in centimeter
        let outlineWidthFactor = (_10 = (_9 = materialProperties.floatProperties) === null || _9 === void 0 ? void 0 : _9['_OutlineWidth']) !== null && _10 !== void 0 ? _10 : 0.0;
        outlineWidthFactor = 0.01 * outlineWidthFactor;
        const outlineWidthMultiplyTextureIndex = (_11 = materialProperties.textureProperties) === null || _11 === void 0 ? void 0 : _11['_OutlineWidthTexture'];
        const outlineWidthMultiplyTexture = outlineWidthMultiplyTextureIndex != null
            ? {
                index: outlineWidthMultiplyTextureIndex,
                extensions: Object.assign({}, textureTransformExt),
            }
            : undefined;
        const outlineColorFactor = (_13 = (_12 = materialProperties.vectorProperties) === null || _12 === void 0 ? void 0 : _12['_OutlineColor']) === null || _13 === void 0 ? void 0 : _13.map(gammaEOTF);
        const outlineColorMode = (_14 = materialProperties.floatProperties) === null || _14 === void 0 ? void 0 : _14['_OutlineColorMode']; // enum, { Fixed, Mixed }
        const outlineLightingMixFactor = outlineColorMode === 1 ? (_15 = materialProperties.floatProperties) === null || _15 === void 0 ? void 0 : _15['_OutlineLightingMix'] : 0.0;
        const uvAnimationMaskTextureIndex = (_16 = materialProperties.textureProperties) === null || _16 === void 0 ? void 0 : _16['_UvAnimMaskTexture'];
        const uvAnimationMaskTexture = uvAnimationMaskTextureIndex != null
            ? {
                index: uvAnimationMaskTextureIndex,
                extensions: Object.assign({}, textureTransformExt),
            }
            : undefined;
        const uvAnimationScrollXSpeedFactor = (_17 = materialProperties.floatProperties) === null || _17 === void 0 ? void 0 : _17['_UvAnimScrollX'];
        // uvAnimationScrollYSpeedFactor will be opposite between V0 and V1
        let uvAnimationScrollYSpeedFactor = (_18 = materialProperties.floatProperties) === null || _18 === void 0 ? void 0 : _18['_UvAnimScrollY'];
        if (uvAnimationScrollYSpeedFactor != null) {
            uvAnimationScrollYSpeedFactor = -uvAnimationScrollYSpeedFactor;
        }
        const uvAnimationRotationSpeedFactor = (_19 = materialProperties.floatProperties) === null || _19 === void 0 ? void 0 : _19['_UvAnimRotation'];
        const mtoonExtension = {
            specVersion: '1.0',
            transparentWithZWrite,
            renderQueueOffsetNumber,
            shadeColorFactor,
            shadeMultiplyTexture,
            shadingShiftFactor,
            shadingToonyFactor,
            giEqualizationFactor,
            matcapFactor,
            matcapTexture,
            rimLightingMixFactor,
            rimMultiplyTexture,
            parametricRimColorFactor,
            parametricRimFresnelPowerFactor,
            parametricRimLiftFactor,
            outlineWidthMode,
            outlineWidthFactor,
            outlineWidthMultiplyTexture,
            outlineColorFactor,
            outlineLightingMixFactor,
            uvAnimationMaskTexture,
            uvAnimationScrollXSpeedFactor,
            uvAnimationScrollYSpeedFactor,
            uvAnimationRotationSpeedFactor,
        };
        return Object.assign(Object.assign({}, schemaMaterial), { pbrMetallicRoughness: {
                baseColorFactor,
                baseColorTexture,
            }, normalTexture,
            emissiveTexture,
            emissiveFactor,
            alphaMode,
            alphaCutoff,
            doubleSided, extensions: {
                // eslint-disable-next-line @typescript-eslint/naming-convention
                VRMC_materials_mtoon: mtoonExtension,
            } });
    }
    _parseV0UnlitProperties(materialProperties, schemaMaterial) {
        var _a, _b, _c, _d;
        const isTransparentZWrite = materialProperties.shader === 'VRM/UnlitTransparentZWrite';
        const isTransparent = materialProperties.shader === 'VRM/UnlitTransparent' || isTransparentZWrite;
        const renderQueueOffsetNumber = this._v0ParseRenderQueue(materialProperties);
        const isCutoff = materialProperties.shader === 'VRM/UnlitCutout';
        const alphaMode = isTransparent ? 'BLEND' : isCutoff ? 'MASK' : 'OPAQUE';
        const alphaCutoff = isCutoff ? (_a = materialProperties.floatProperties) === null || _a === void 0 ? void 0 : _a['_Cutoff'] : undefined;
        const textureTransformExt = this._portTextureTransform(materialProperties);
        const baseColorFactor = (_c = (_b = materialProperties.vectorProperties) === null || _b === void 0 ? void 0 : _b['_Color']) === null || _c === void 0 ? void 0 : _c.map(gammaEOTF);
        const baseColorTextureIndex = (_d = materialProperties.textureProperties) === null || _d === void 0 ? void 0 : _d['_MainTex'];
        const baseColorTexture = baseColorTextureIndex != null
            ? {
                index: baseColorTextureIndex,
                extensions: Object.assign({}, textureTransformExt),
            }
            : undefined;
        // use mtoon instead of unlit, since there might be VRM0.0 specific features that are not supported by gltf
        const mtoonExtension = {
            specVersion: '1.0',
            transparentWithZWrite: isTransparentZWrite,
            renderQueueOffsetNumber,
            shadeColorFactor: baseColorFactor,
            shadeMultiplyTexture: baseColorTexture,
        };
        return Object.assign(Object.assign({}, schemaMaterial), { pbrMetallicRoughness: {
                baseColorFactor,
                baseColorTexture,
            }, alphaMode,
            alphaCutoff, extensions: {
                // eslint-disable-next-line @typescript-eslint/naming-convention
                VRMC_materials_mtoon: mtoonExtension,
            } });
    }
    /**
     * Create a glTF `KHR_texture_transform` extension from v0 texture transform info.
     */
    _portTextureTransform(materialProperties) {
        var _a, _b, _c, _d, _e;
        const textureTransform = (_a = materialProperties.vectorProperties) === null || _a === void 0 ? void 0 : _a['_MainTex'];
        if (textureTransform == null) {
            return {};
        }
        const offset = [(_b = textureTransform === null || textureTransform === void 0 ? void 0 : textureTransform[0]) !== null && _b !== void 0 ? _b : 0.0, (_c = textureTransform === null || textureTransform === void 0 ? void 0 : textureTransform[1]) !== null && _c !== void 0 ? _c : 0.0];
        const scale = [(_d = textureTransform === null || textureTransform === void 0 ? void 0 : textureTransform[2]) !== null && _d !== void 0 ? _d : 1.0, (_e = textureTransform === null || textureTransform === void 0 ? void 0 : textureTransform[3]) !== null && _e !== void 0 ? _e : 1.0];
        offset[1] = (scale[1] * (1.0 - offset[1])) % 1.0;
        return {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            KHR_texture_transform: { offset, scale },
        };
    }
    /**
     * Convert v0 render order into v1 render order.
     * This uses a map from v0 render queue to v1 compliant render queue offset which is generated in {@link _populateRenderQueueMap}.
     */
    _v0ParseRenderQueue(materialProperties) {
        var _a, _b, _c;
        const isTransparent = (_b = (_a = materialProperties.keywordMap) === null || _a === void 0 ? void 0 : _a['_ALPHABLEND_ON']) !== null && _b !== void 0 ? _b : false;
        const enabledZWrite = ((_c = materialProperties.floatProperties) === null || _c === void 0 ? void 0 : _c['_ZWrite']) === 1;
        let offset = 0;
        if (isTransparent) {
            const v0Queue = materialProperties.renderQueue;
            if (v0Queue != null) {
                if (enabledZWrite) {
                    offset = this._renderQueueMapTransparentZWrite.get(v0Queue);
                }
                else {
                    offset = this._renderQueueMapTransparent.get(v0Queue);
                }
            }
        }
        return offset;
    }
    /**
     * Create a map which maps v0 render queue to v1 compliant render queue offset.
     * This lists up all render queues the model use and creates a map to new render queue offsets in the same order.
     */
    _populateRenderQueueMap(materialPropertiesList) {
        /**
         * A set of used render queues in Transparent materials.
         */
        const renderQueuesTransparent = new Set();
        /**
         * A set of used render queues in TransparentZWrite materials.
         */
        const renderQueuesTransparentZWrite = new Set();
        // populate the render queue set
        materialPropertiesList.forEach((materialProperties) => {
            var _a, _b, _c;
            const isTransparent = (_b = (_a = materialProperties.keywordMap) === null || _a === void 0 ? void 0 : _a['_ALPHABLEND_ON']) !== null && _b !== void 0 ? _b : false;
            const enabledZWrite = ((_c = materialProperties.floatProperties) === null || _c === void 0 ? void 0 : _c['_ZWrite']) === 1;
            if (isTransparent) {
                const v0Queue = materialProperties.renderQueue;
                if (v0Queue != null) {
                    if (enabledZWrite) {
                        renderQueuesTransparentZWrite.add(v0Queue);
                    }
                    else {
                        renderQueuesTransparent.add(v0Queue);
                    }
                }
            }
        });
        // show a warning if the model uses v1 incompatible number of render queues
        if (renderQueuesTransparent.size > 10) {
            console.warn(`VRMMaterialsV0CompatPlugin: This VRM uses ${renderQueuesTransparent.size} render queues for Transparent materials while VRM 1.0 only supports up to 10 render queues. The model might not be rendered correctly.`);
        }
        if (renderQueuesTransparentZWrite.size > 10) {
            console.warn(`VRMMaterialsV0CompatPlugin: This VRM uses ${renderQueuesTransparentZWrite.size} render queues for TransparentZWrite materials while VRM 1.0 only supports up to 10 render queues. The model might not be rendered correctly.`);
        }
        // create a map from v0 render queue to v1 render queue offset
        Array.from(renderQueuesTransparent)
            .sort()
            .forEach((queue, i) => {
            const newQueueOffset = Math.min(Math.max(i - renderQueuesTransparent.size + 1, -9), 0);
            this._renderQueueMapTransparent.set(queue, newQueueOffset);
        });
        Array.from(renderQueuesTransparentZWrite)
            .sort()
            .forEach((queue, i) => {
            const newQueueOffset = Math.min(Math.max(i, 0), 9);
            this._renderQueueMapTransparentZWrite.set(queue, newQueueOffset);
        });
    }
}

/*!
 * @pixiv/three-vrm-node-constraint v2.0.1
 * Node constraint module for @pixiv/three-vrm
 *
 * Copyright (c) 2020-2023 pixiv Inc.
 * @pixiv/three-vrm-node-constraint is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */

const _v3A$3$1 = new THREE.Vector3();
class VRMNodeConstraintHelper extends THREE.Group {
    constructor(constraint) {
        super();
        this._attrPosition = new THREE.BufferAttribute(new Float32Array([0, 0, 0, 0, 0, 0]), 3);
        this._attrPosition.setUsage(THREE.DynamicDrawUsage);
        const geometry = new THREE.BufferGeometry();
        geometry.setAttribute('position', this._attrPosition);
        const material = new THREE.LineBasicMaterial({
            color: 0xff00ff,
            depthTest: false,
            depthWrite: false,
        });
        this._line = new THREE.Line(geometry, material);
        this.add(this._line);
        this.constraint = constraint;
    }
    updateMatrixWorld(force) {
        _v3A$3$1.setFromMatrixPosition(this.constraint.destination.matrixWorld);
        this._attrPosition.setXYZ(0, _v3A$3$1.x, _v3A$3$1.y, _v3A$3$1.z);
        if (this.constraint.source) {
            _v3A$3$1.setFromMatrixPosition(this.constraint.source.matrixWorld);
        }
        this._attrPosition.setXYZ(1, _v3A$3$1.x, _v3A$3$1.y, _v3A$3$1.z);
        this._attrPosition.needsUpdate = true;
        super.updateMatrixWorld(force);
    }
}

function decomposePosition(matrix, target) {
    return target.set(matrix.elements[12], matrix.elements[13], matrix.elements[14]);
}

const _v3A$2$1 = new THREE.Vector3();
const _v3B$1$1 = new THREE.Vector3();
function decomposeRotation(matrix, target) {
    matrix.decompose(_v3A$2$1, target, _v3B$1$1);
    return target;
}

/**
 * A compat function for `Quaternion.invert()` / `Quaternion.inverse()`.
 * `Quaternion.invert()` is introduced in r123 and `Quaternion.inverse()` emits a warning.
 * We are going to use this compat for a while.
 * @param target A target quaternion
 */
function quatInvertCompat(target) {
    if (target.invert) {
        target.invert();
    }
    else {
        target.inverse();
    }
    return target;
}

/**
 * A base class of VRM constraint classes.
 */
class VRMNodeConstraint {
    /**
     * @param destination The destination object
     * @param source The source object
     */
    constructor(destination, source) {
        this.destination = destination;
        this.source = source;
        this.weight = 1.0;
    }
}

const _v3A$1$1 = new THREE.Vector3();
const _v3B$2 = new THREE.Vector3();
const _v3C$1 = new THREE.Vector3();
const _quatA$2 = new THREE.Quaternion();
const _quatB$2 = new THREE.Quaternion();
const _quatC = new THREE.Quaternion();
/**
 * A constraint that makes it look at a source object.
 *
 * See: https://github.com/vrm-c/vrm-specification/tree/master/specification/VRMC_node_constraint-1.0_beta#roll-constraint
 */
class VRMAimConstraint extends VRMNodeConstraint {
    /**
     * The aim axis of the constraint.
     */
    get aimAxis() {
        return this._aimAxis;
    }
    /**
     * The aim axis of the constraint.
     */
    set aimAxis(aimAxis) {
        this._aimAxis = aimAxis;
        this._v3AimAxis.set(aimAxis === 'PositiveX' ? 1.0 : aimAxis === 'NegativeX' ? -1.0 : 0.0, aimAxis === 'PositiveY' ? 1.0 : aimAxis === 'NegativeY' ? -1.0 : 0.0, aimAxis === 'PositiveZ' ? 1.0 : aimAxis === 'NegativeZ' ? -1.0 : 0.0);
    }
    get dependencies() {
        const set = new Set([this.source]);
        if (this.destination.parent) {
            set.add(this.destination.parent);
        }
        return set;
    }
    constructor(destination, source) {
        super(destination, source);
        this._aimAxis = 'PositiveX';
        this._v3AimAxis = new THREE.Vector3(1, 0, 0);
        this._dstRestQuat = new THREE.Quaternion();
    }
    setInitState() {
        this._dstRestQuat.copy(this.destination.quaternion);
    }
    update() {
        // update world matrix of destination and source manually
        this.destination.updateWorldMatrix(true, false);
        this.source.updateWorldMatrix(true, false);
        // get world quaternion of the parent of the destination
        const dstParentWorldQuat = _quatA$2.identity();
        const invDstParentWorldQuat = _quatB$2.identity();
        if (this.destination.parent) {
            decomposeRotation(this.destination.parent.matrixWorld, dstParentWorldQuat);
            quatInvertCompat(invDstParentWorldQuat.copy(dstParentWorldQuat));
        }
        // calculate from-to vectors in world coord
        const a0 = _v3A$1$1.copy(this._v3AimAxis).applyQuaternion(this._dstRestQuat).applyQuaternion(dstParentWorldQuat);
        const a1 = decomposePosition(this.source.matrixWorld, _v3B$2)
            .sub(decomposePosition(this.destination.matrixWorld, _v3C$1))
            .normalize();
        // create a from-to quaternion, convert to destination local coord, then multiply rest quaternion
        const targetQuat = _quatC
            .setFromUnitVectors(a0, a1)
            .premultiply(invDstParentWorldQuat)
            .multiply(dstParentWorldQuat)
            .multiply(this._dstRestQuat);
        // blend with the rest quaternion using weight
        this.destination.quaternion.copy(this._dstRestQuat).slerp(targetQuat, this.weight);
    }
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter$1(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

/**
 * Traverse ancestors of given object and call given callback from root side.
 * It will include the given object itself.
 *
 * @param object The object you want to traverse
 * @param callback The call back function that will be called for each ancestors
 */
function traverseAncestorsFromRoot$1(object, callback) {
    const ancestors = [object];
    let head = object.parent;
    while (head !== null) {
        ancestors.unshift(head);
        head = head.parent;
    }
    ancestors.forEach((ancestor) => {
        callback(ancestor);
    });
}

class VRMNodeConstraintManager {
    constructor() {
        this._constraints = new Set();
        this._objectConstraintsMap = new Map();
    }
    get constraints() {
        return this._constraints;
    }
    addConstraint(constraint) {
        this._constraints.add(constraint);
        let objectSet = this._objectConstraintsMap.get(constraint.destination);
        if (objectSet == null) {
            objectSet = new Set();
            this._objectConstraintsMap.set(constraint.destination, objectSet);
        }
        objectSet.add(constraint);
    }
    deleteConstraint(constraint) {
        this._constraints.delete(constraint);
        const objectSet = this._objectConstraintsMap.get(constraint.destination);
        objectSet.delete(constraint);
    }
    setInitState() {
        const constraintsTried = new Set();
        const constraintsDone = new Set();
        for (const constraint of this._constraints) {
            this._processConstraint(constraint, constraintsTried, constraintsDone, (constraint) => constraint.setInitState());
        }
    }
    update() {
        const constraintsTried = new Set();
        const constraintsDone = new Set();
        for (const constraint of this._constraints) {
            this._processConstraint(constraint, constraintsTried, constraintsDone, (constraint) => constraint.update());
        }
    }
    /**
     * Update a constraint.
     * If there are other constraints that are dependant, it will try to update them recursively.
     * It might throw an error if there are circular dependencies.
     *
     * Intended to be used in {@link update} and {@link _processConstraint} itself recursively.
     *
     * @param constraint A constraint you want to update
     * @param constraintsTried Set of constraints that are already tried to be updated
     * @param constraintsDone Set of constraints that are already up to date
     */
    _processConstraint(constraint, constraintsTried, constraintsDone, callback) {
        if (constraintsDone.has(constraint)) {
            return;
        }
        if (constraintsTried.has(constraint)) {
            throw new Error('VRMNodeConstraintManager: Circular dependency detected while updating constraints');
        }
        constraintsTried.add(constraint);
        const depObjects = constraint.dependencies;
        for (const depObject of depObjects) {
            traverseAncestorsFromRoot$1(depObject, (depObjectAncestor) => {
                const objectSet = this._objectConstraintsMap.get(depObjectAncestor);
                if (objectSet) {
                    for (const depConstraint of objectSet) {
                        this._processConstraint(depConstraint, constraintsTried, constraintsDone, callback);
                    }
                }
            });
        }
        callback(constraint);
        constraintsDone.add(constraint);
    }
}

const _quatA$1 = new THREE.Quaternion();
const _quatB$1 = new THREE.Quaternion();
/**
 * A constraint that transfers a rotation around one axis of a source.
 *
 * See: https://github.com/vrm-c/vrm-specification/tree/master/specification/VRMC_node_constraint-1.0_beta#roll-constraint
 */
class VRMRotationConstraint extends VRMNodeConstraint {
    get dependencies() {
        return new Set([this.source]);
    }
    constructor(destination, source) {
        super(destination, source);
        this._dstRestQuat = new THREE.Quaternion();
        this._invSrcRestQuat = new THREE.Quaternion();
    }
    setInitState() {
        this._dstRestQuat.copy(this.destination.quaternion);
        quatInvertCompat(this._invSrcRestQuat.copy(this.source.quaternion));
    }
    update() {
        // calculate the delta rotation from the rest about the source
        const srcDeltaQuat = _quatA$1.copy(this._invSrcRestQuat).multiply(this.source.quaternion);
        // multiply the delta to the rest of the destination
        const targetQuat = _quatB$1.copy(this._dstRestQuat).multiply(srcDeltaQuat);
        // blend with the rest quaternion using weight
        this.destination.quaternion.copy(this._dstRestQuat).slerp(targetQuat, this.weight);
    }
}

const _v3A$5 = new THREE.Vector3();
const _quatA$3 = new THREE.Quaternion();
const _quatB = new THREE.Quaternion();
/**
 * A constraint that transfers a rotation around one axis of a source.
 *
 * See: https://github.com/vrm-c/vrm-specification/tree/master/specification/VRMC_node_constraint-1.0_beta#roll-constraint
 */
class VRMRollConstraint extends VRMNodeConstraint {
    /**
     * The roll axis of the constraint.
     */
    get rollAxis() {
        return this._rollAxis;
    }
    /**
     * The roll axis of the constraint.
     */
    set rollAxis(rollAxis) {
        this._rollAxis = rollAxis;
        this._v3RollAxis.set(rollAxis === 'X' ? 1.0 : 0.0, rollAxis === 'Y' ? 1.0 : 0.0, rollAxis === 'Z' ? 1.0 : 0.0);
    }
    get dependencies() {
        return new Set([this.source]);
    }
    constructor(destination, source) {
        super(destination, source);
        this._rollAxis = 'X';
        this._v3RollAxis = new THREE.Vector3(1, 0, 0);
        this._dstRestQuat = new THREE.Quaternion();
        this._invDstRestQuat = new THREE.Quaternion();
        this._invSrcRestQuatMulDstRestQuat = new THREE.Quaternion();
    }
    setInitState() {
        this._dstRestQuat.copy(this.destination.quaternion);
        quatInvertCompat(this._invDstRestQuat.copy(this._dstRestQuat));
        quatInvertCompat(this._invSrcRestQuatMulDstRestQuat.copy(this.source.quaternion)).multiply(this._dstRestQuat);
    }
    update() {
        // calculate the delta rotation from the rest about the source, then convert to the destination local coord
        /**
         * What the quatDelta is intended to be:
         *
         * ```ts
         * const quatSrcDelta = _quatA
         *   .copy( this._invSrcRestQuat )
         *   .multiply( this.source.quaternion );
         * const quatSrcDeltaInParent = _quatB
         *   .copy( this._srcRestQuat )
         *   .multiply( quatSrcDelta )
         *   .multiply( this._invSrcRestQuat );
         * const quatSrcDeltaInDst = _quatA
         *   .copy( this._invDstRestQuat )
         *   .multiply( quatSrcDeltaInParent )
         *   .multiply( this._dstRestQuat );
         * ```
         */
        const quatDelta = _quatA$3
            .copy(this._invDstRestQuat)
            .multiply(this.source.quaternion)
            .multiply(this._invSrcRestQuatMulDstRestQuat);
        // create a from-to quaternion
        const n1 = _v3A$5.copy(this._v3RollAxis).applyQuaternion(quatDelta);
        /**
         * What the quatFromTo is intended to be:
         *
         * ```ts
         * const quatFromTo = _quatB.setFromUnitVectors( this._v3RollAxis, n1 ).inverse();
         * ```
         */
        const quatFromTo = _quatB.setFromUnitVectors(n1, this._v3RollAxis);
        // quatFromTo * quatDelta == roll extracted from quatDelta
        const targetQuat = quatFromTo.premultiply(this._dstRestQuat).multiply(quatDelta);
        // blend with the rest quaternion using weight
        this.destination.quaternion.copy(this._dstRestQuat).slerp(targetQuat, this.weight);
    }
}

/**
 * Possible spec versions it recognizes.
 */
const POSSIBLE_SPEC_VERSIONS$1 = new Set(['1.0', '1.0-beta']);
class VRMNodeConstraintLoaderPlugin {
    get name() {
        return VRMNodeConstraintLoaderPlugin.EXTENSION_NAME;
    }
    constructor(parser, options) {
        this.parser = parser;
        this.helperRoot = options === null || options === void 0 ? void 0 : options.helperRoot;
    }
    afterRoot(gltf) {
        return __awaiter$1(this, void 0, void 0, function* () {
            gltf.userData.vrmNodeConstraintManager = yield this._import(gltf);
        });
    }
    /**
     * Import constraints from a GLTF and returns a {@link VRMNodeConstraintManager}.
     * It might return `null` instead when it does not need to be created or something go wrong.
     *
     * @param gltf A parsed result of GLTF taken from GLTFLoader
     */
    _import(gltf) {
        var _a;
        return __awaiter$1(this, void 0, void 0, function* () {
            const json = this.parser.json;
            // early abort if it doesn't use constraints
            const isConstraintsUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf(VRMNodeConstraintLoaderPlugin.EXTENSION_NAME)) !== -1;
            if (!isConstraintsUsed) {
                return null;
            }
            const manager = new VRMNodeConstraintManager();
            const threeNodes = yield this.parser.getDependencies('node');
            // import constraints for each nodes
            threeNodes.forEach((node, nodeIndex) => {
                var _a;
                const schemaNode = json.nodes[nodeIndex];
                // check if the extension uses the extension
                const extension = (_a = schemaNode === null || schemaNode === void 0 ? void 0 : schemaNode.extensions) === null || _a === void 0 ? void 0 : _a[VRMNodeConstraintLoaderPlugin.EXTENSION_NAME];
                if (extension == null) {
                    return;
                }
                const specVersion = extension.specVersion;
                if (!POSSIBLE_SPEC_VERSIONS$1.has(specVersion)) {
                    console.warn(`VRMNodeConstraintLoaderPlugin: Unknown ${VRMNodeConstraintLoaderPlugin.EXTENSION_NAME} specVersion "${specVersion}"`);
                    return;
                }
                const constraintDef = extension.constraint;
                // import constraints
                if (constraintDef.roll != null) {
                    const constraint = this._importRollConstraint(node, threeNodes, constraintDef.roll);
                    manager.addConstraint(constraint);
                }
                else if (constraintDef.aim != null) {
                    const constraint = this._importAimConstraint(node, threeNodes, constraintDef.aim);
                    manager.addConstraint(constraint);
                }
                else if (constraintDef.rotation != null) {
                    const constraint = this._importRotationConstraint(node, threeNodes, constraintDef.rotation);
                    manager.addConstraint(constraint);
                }
            });
            // init constraints
            gltf.scene.updateMatrixWorld();
            manager.setInitState();
            return manager;
        });
    }
    _importRollConstraint(destination, nodes, rollConstraintDef) {
        const { source: sourceIndex, rollAxis, weight } = rollConstraintDef;
        const source = nodes[sourceIndex];
        const constraint = new VRMRollConstraint(destination, source);
        if (rollAxis != null) {
            constraint.rollAxis = rollAxis;
        }
        if (weight != null) {
            constraint.weight = weight;
        }
        if (this.helperRoot) {
            const helper = new VRMNodeConstraintHelper(constraint);
            this.helperRoot.add(helper);
        }
        return constraint;
    }
    _importAimConstraint(destination, nodes, aimConstraintDef) {
        const { source: sourceIndex, aimAxis, weight } = aimConstraintDef;
        const source = nodes[sourceIndex];
        const constraint = new VRMAimConstraint(destination, source);
        if (aimAxis != null) {
            constraint.aimAxis = aimAxis;
        }
        if (weight != null) {
            constraint.weight = weight;
        }
        if (this.helperRoot) {
            const helper = new VRMNodeConstraintHelper(constraint);
            this.helperRoot.add(helper);
        }
        return constraint;
    }
    _importRotationConstraint(destination, nodes, rotationConstraintDef) {
        const { source: sourceIndex, weight } = rotationConstraintDef;
        const source = nodes[sourceIndex];
        const constraint = new VRMRotationConstraint(destination, source);
        if (weight != null) {
            constraint.weight = weight;
        }
        if (this.helperRoot) {
            const helper = new VRMNodeConstraintHelper(constraint);
            this.helperRoot.add(helper);
        }
        return constraint;
    }
}
VRMNodeConstraintLoaderPlugin.EXTENSION_NAME = 'VRMC_node_constraint';

/*!
 * @pixiv/three-vrm-springbone v2.0.0
 * Spring bone module for @pixiv/three-vrm
 *
 * Copyright (c) 2020-2023 pixiv Inc.
 * @pixiv/three-vrm-springbone is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */

/**
 * Represents a shape of a collider.
 */
class VRMSpringBoneColliderShape {
}

const _v3A$4 = new THREE.Vector3();
const _v3B$1 = new THREE.Vector3();
class VRMSpringBoneColliderShapeCapsule extends VRMSpringBoneColliderShape {
    get type() {
        return 'capsule';
    }
    constructor(params) {
        var _a, _b, _c;
        super();
        this.offset = (_a = params === null || params === void 0 ? void 0 : params.offset) !== null && _a !== void 0 ? _a : new THREE.Vector3(0.0, 0.0, 0.0);
        this.tail = (_b = params === null || params === void 0 ? void 0 : params.tail) !== null && _b !== void 0 ? _b : new THREE.Vector3(0.0, 0.0, 0.0);
        this.radius = (_c = params === null || params === void 0 ? void 0 : params.radius) !== null && _c !== void 0 ? _c : 0.0;
    }
    calculateCollision(colliderMatrix, objectPosition, objectRadius, target) {
        _v3A$4.copy(this.offset).applyMatrix4(colliderMatrix); // transformed head
        _v3B$1.copy(this.tail).applyMatrix4(colliderMatrix); // transformed tail
        _v3B$1.sub(_v3A$4); // from head to tail
        const lengthSqCapsule = _v3B$1.lengthSq();
        target.copy(objectPosition).sub(_v3A$4); // from head to object
        const dot = _v3B$1.dot(target); // dot product of offsetToTail and offsetToObject
        if (dot <= 0.0) ;
        else if (lengthSqCapsule <= dot) {
            // if object is near from the tail
            target.sub(_v3B$1); // from tail to object
        }
        else {
            // if object is between two ends
            _v3B$1.multiplyScalar(dot / lengthSqCapsule); // from head to the nearest point of the shaft
            target.sub(_v3B$1); // from the shaft point to object
        }
        const radius = objectRadius + this.radius;
        const distance = target.length() - radius;
        target.normalize();
        return distance;
    }
}

class VRMSpringBoneColliderShapeSphere extends VRMSpringBoneColliderShape {
    get type() {
        return 'sphere';
    }
    constructor(params) {
        var _a, _b;
        super();
        this.offset = (_a = params === null || params === void 0 ? void 0 : params.offset) !== null && _a !== void 0 ? _a : new THREE.Vector3(0.0, 0.0, 0.0);
        this.radius = (_b = params === null || params === void 0 ? void 0 : params.radius) !== null && _b !== void 0 ? _b : 0.0;
    }
    calculateCollision(colliderMatrix, objectPosition, objectRadius, target) {
        target.copy(this.offset).applyMatrix4(colliderMatrix); // transformed offset
        target.negate().add(objectPosition); // a vector from collider center to object position
        const radius = objectRadius + this.radius;
        const distance = target.length() - radius;
        target.normalize();
        return distance;
    }
}

const _v3A$3 = new THREE.Vector3();
class ColliderShapeCapsuleBufferGeometry extends THREE.BufferGeometry {
    constructor(shape) {
        super();
        this.worldScale = 1.0;
        this._currentRadius = 0;
        this._currentOffset = new THREE.Vector3();
        this._currentTail = new THREE.Vector3();
        this._shape = shape;
        this._attrPos = new THREE.BufferAttribute(new Float32Array(396), 3);
        this.setAttribute('position', this._attrPos);
        this._attrIndex = new THREE.BufferAttribute(new Uint16Array(264), 1);
        this.setIndex(this._attrIndex);
        this._buildIndex();
        this.update();
    }
    update() {
        let shouldUpdateGeometry = false;
        const radius = this._shape.radius / this.worldScale;
        if (this._currentRadius !== radius) {
            this._currentRadius = radius;
            shouldUpdateGeometry = true;
        }
        if (!this._currentOffset.equals(this._shape.offset)) {
            this._currentOffset.copy(this._shape.offset);
            shouldUpdateGeometry = true;
        }
        const tail = _v3A$3.copy(this._shape.tail).divideScalar(this.worldScale);
        if (this._currentTail.distanceToSquared(tail) > 1e-10) {
            this._currentTail.copy(tail);
            shouldUpdateGeometry = true;
        }
        if (shouldUpdateGeometry) {
            this._buildPosition();
        }
    }
    _buildPosition() {
        _v3A$3.copy(this._currentTail).sub(this._currentOffset);
        const l = _v3A$3.length() / this._currentRadius;
        for (let i = 0; i <= 16; i++) {
            const t = (i / 16.0) * Math.PI;
            this._attrPos.setXYZ(i, -Math.sin(t), -Math.cos(t), 0.0);
            this._attrPos.setXYZ(17 + i, l + Math.sin(t), Math.cos(t), 0.0);
            this._attrPos.setXYZ(34 + i, -Math.sin(t), 0.0, -Math.cos(t));
            this._attrPos.setXYZ(51 + i, l + Math.sin(t), 0.0, Math.cos(t));
        }
        for (let i = 0; i < 32; i++) {
            const t = (i / 16.0) * Math.PI;
            this._attrPos.setXYZ(68 + i, 0.0, Math.sin(t), Math.cos(t));
            this._attrPos.setXYZ(100 + i, l, Math.sin(t), Math.cos(t));
        }
        const theta = Math.atan2(_v3A$3.y, Math.sqrt(_v3A$3.x * _v3A$3.x + _v3A$3.z * _v3A$3.z));
        const phi = -Math.atan2(_v3A$3.z, _v3A$3.x);
        this.rotateZ(theta);
        this.rotateY(phi);
        this.scale(this._currentRadius, this._currentRadius, this._currentRadius);
        this.translate(this._currentOffset.x, this._currentOffset.y, this._currentOffset.z);
        this._attrPos.needsUpdate = true;
    }
    _buildIndex() {
        for (let i = 0; i < 34; i++) {
            const i1 = (i + 1) % 34;
            this._attrIndex.setXY(i * 2, i, i1);
            this._attrIndex.setXY(68 + i * 2, 34 + i, 34 + i1);
        }
        for (let i = 0; i < 32; i++) {
            const i1 = (i + 1) % 32;
            this._attrIndex.setXY(136 + i * 2, 68 + i, 68 + i1);
            this._attrIndex.setXY(200 + i * 2, 100 + i, 100 + i1);
        }
        this._attrIndex.needsUpdate = true;
    }
}

class ColliderShapeSphereBufferGeometry extends THREE.BufferGeometry {
    constructor(shape) {
        super();
        this.worldScale = 1.0;
        this._currentRadius = 0;
        this._currentOffset = new THREE.Vector3();
        this._shape = shape;
        this._attrPos = new THREE.BufferAttribute(new Float32Array(32 * 3 * 3), 3);
        this.setAttribute('position', this._attrPos);
        this._attrIndex = new THREE.BufferAttribute(new Uint16Array(64 * 3), 1);
        this.setIndex(this._attrIndex);
        this._buildIndex();
        this.update();
    }
    update() {
        let shouldUpdateGeometry = false;
        const radius = this._shape.radius / this.worldScale;
        if (this._currentRadius !== radius) {
            this._currentRadius = radius;
            shouldUpdateGeometry = true;
        }
        if (!this._currentOffset.equals(this._shape.offset)) {
            this._currentOffset.copy(this._shape.offset);
            shouldUpdateGeometry = true;
        }
        if (shouldUpdateGeometry) {
            this._buildPosition();
        }
    }
    _buildPosition() {
        for (let i = 0; i < 32; i++) {
            const t = (i / 16.0) * Math.PI;
            this._attrPos.setXYZ(i, Math.cos(t), Math.sin(t), 0.0);
            this._attrPos.setXYZ(32 + i, 0.0, Math.cos(t), Math.sin(t));
            this._attrPos.setXYZ(64 + i, Math.sin(t), 0.0, Math.cos(t));
        }
        this.scale(this._currentRadius, this._currentRadius, this._currentRadius);
        this.translate(this._currentOffset.x, this._currentOffset.y, this._currentOffset.z);
        this._attrPos.needsUpdate = true;
    }
    _buildIndex() {
        for (let i = 0; i < 32; i++) {
            const i1 = (i + 1) % 32;
            this._attrIndex.setXY(i * 2, i, i1);
            this._attrIndex.setXY(64 + i * 2, 32 + i, 32 + i1);
            this._attrIndex.setXY(128 + i * 2, 64 + i, 64 + i1);
        }
        this._attrIndex.needsUpdate = true;
    }
}

const _v3A$2 = new THREE.Vector3();
class VRMSpringBoneColliderHelper extends THREE.Group {
    constructor(collider) {
        super();
        this.matrixAutoUpdate = false;
        this.collider = collider;
        if (this.collider.shape instanceof VRMSpringBoneColliderShapeSphere) {
            this._geometry = new ColliderShapeSphereBufferGeometry(this.collider.shape);
        }
        else if (this.collider.shape instanceof VRMSpringBoneColliderShapeCapsule) {
            this._geometry = new ColliderShapeCapsuleBufferGeometry(this.collider.shape);
        }
        else {
            throw new Error('VRMSpringBoneColliderHelper: Unknown collider shape type detected');
        }
        const material = new THREE.LineBasicMaterial({
            color: 0xff00ff,
            depthTest: false,
            depthWrite: false,
        });
        this._line = new THREE.LineSegments(this._geometry, material);
        this.add(this._line);
    }
    dispose() {
        this._geometry.dispose();
    }
    updateMatrixWorld(force) {
        this.collider.updateWorldMatrix(true, false);
        this.matrix.copy(this.collider.matrixWorld);
        const matrixWorldElements = this.matrix.elements;
        this._geometry.worldScale = _v3A$2
            .set(matrixWorldElements[0], matrixWorldElements[1], matrixWorldElements[2])
            .length(); // calculate scale of x component
        this._geometry.update();
        super.updateMatrixWorld(force);
    }
}

class SpringBoneBufferGeometry extends THREE.BufferGeometry {
    constructor(springBone) {
        super();
        this.worldScale = 1.0;
        this._currentRadius = 0;
        this._currentTail = new THREE.Vector3();
        this._springBone = springBone;
        this._attrPos = new THREE.BufferAttribute(new Float32Array(294), 3);
        this.setAttribute('position', this._attrPos);
        this._attrIndex = new THREE.BufferAttribute(new Uint16Array(194), 1);
        this.setIndex(this._attrIndex);
        this._buildIndex();
        this.update();
    }
    update() {
        let shouldUpdateGeometry = false;
        const radius = this._springBone.settings.hitRadius / this.worldScale;
        if (this._currentRadius !== radius) {
            this._currentRadius = radius;
            shouldUpdateGeometry = true;
        }
        if (!this._currentTail.equals(this._springBone.initialLocalChildPosition)) {
            this._currentTail.copy(this._springBone.initialLocalChildPosition);
            shouldUpdateGeometry = true;
        }
        if (shouldUpdateGeometry) {
            this._buildPosition();
        }
    }
    _buildPosition() {
        for (let i = 0; i < 32; i++) {
            const t = (i / 16.0) * Math.PI;
            this._attrPos.setXYZ(i, Math.cos(t), Math.sin(t), 0.0);
            this._attrPos.setXYZ(32 + i, 0.0, Math.cos(t), Math.sin(t));
            this._attrPos.setXYZ(64 + i, Math.sin(t), 0.0, Math.cos(t));
        }
        this.scale(this._currentRadius, this._currentRadius, this._currentRadius);
        this.translate(this._currentTail.x, this._currentTail.y, this._currentTail.z);
        this._attrPos.setXYZ(96, 0, 0, 0);
        this._attrPos.setXYZ(97, this._currentTail.x, this._currentTail.y, this._currentTail.z);
        this._attrPos.needsUpdate = true;
    }
    _buildIndex() {
        for (let i = 0; i < 32; i++) {
            const i1 = (i + 1) % 32;
            this._attrIndex.setXY(i * 2, i, i1);
            this._attrIndex.setXY(64 + i * 2, 32 + i, 32 + i1);
            this._attrIndex.setXY(128 + i * 2, 64 + i, 64 + i1);
        }
        this._attrIndex.setXY(192, 96, 97);
        this._attrIndex.needsUpdate = true;
    }
}

const _v3A$1 = new THREE.Vector3();
class VRMSpringBoneJointHelper extends THREE.Group {
    constructor(springBone) {
        super();
        this.matrixAutoUpdate = false;
        this.springBone = springBone;
        this._geometry = new SpringBoneBufferGeometry(this.springBone);
        const material = new THREE.LineBasicMaterial({
            color: 0xffff00,
            depthTest: false,
            depthWrite: false,
        });
        this._line = new THREE.LineSegments(this._geometry, material);
        this.add(this._line);
    }
    dispose() {
        this._geometry.dispose();
    }
    updateMatrixWorld(force) {
        this.springBone.bone.updateWorldMatrix(true, false);
        this.matrix.copy(this.springBone.bone.matrixWorld);
        const matrixWorldElements = this.matrix.elements;
        this._geometry.worldScale = _v3A$1
            .set(matrixWorldElements[0], matrixWorldElements[1], matrixWorldElements[2])
            .length(); // calculate scale of x component
        this._geometry.update();
        super.updateMatrixWorld(force);
    }
}

/**
 * Represents a collider of a VRM.
 */
class VRMSpringBoneCollider extends THREE.Object3D {
    constructor(shape) {
        super();
        this.shape = shape;
    }
}

const _matA$1 = new THREE.Matrix4();
/**
 * A compat function for `Matrix4.invert()` / `Matrix4.getInverse()`.
 * `Matrix4.invert()` is introduced in r123 and `Matrix4.getInverse()` emits a warning.
 * We are going to use this compat for a while.
 * @param target A target matrix
 */
function mat4InvertCompat(target) {
    if (target.invert) {
        target.invert();
    }
    else {
        target.getInverse(_matA$1.copy(target));
    }
    return target;
}

class Matrix4InverseCache {
    /**
     * Inverse of given matrix.
     * Note that it will return its internal private instance.
     * Make sure copying this before mutate this.
     */
    get inverse() {
        if (this._shouldUpdateInverse) {
            this._inverseCache.copy(this.matrix);
            mat4InvertCompat(this._inverseCache);
            this._shouldUpdateInverse = false;
        }
        return this._inverseCache;
    }
    constructor(matrix) {
        /**
         * A cache of inverse of current matrix.
         */
        this._inverseCache = new THREE.Matrix4();
        /**
         * A flag that makes it want to recalculate its {@link _inverseCache}.
         * Will be set `true` when `elements` are mutated and be used in `getInverse`.
         */
        this._shouldUpdateInverse = true;
        this.matrix = matrix;
        const handler = {
            set: (obj, prop, newVal) => {
                this._shouldUpdateInverse = true;
                obj[prop] = newVal;
                return true;
            },
        };
        this._originalElements = matrix.elements;
        matrix.elements = new Proxy(matrix.elements, handler);
    }
    revert() {
        this.matrix.elements = this._originalElements;
    }
}

// based on
// http://rocketjump.skr.jp/unity3d/109/
// https://github.com/dwango/UniVRM/blob/master/Scripts/SpringBone/VRMSpringBone.cs
const IDENTITY_MATRIX4 = new THREE.Matrix4();
// 計算中の一時保存用変数（一度インスタンスを作ったらあとは使い回す）
const _v3A = new THREE.Vector3();
const _v3B = new THREE.Vector3();
const _v3C = new THREE.Vector3();
/**
 * A temporary variable which is used in `update`
 */
const _worldSpacePosition = new THREE.Vector3();
/**
 * A temporary variable which is used in `update`
 */
const _centerSpacePosition = new THREE.Vector3();
/**
 * A temporary variable which is used in `update`
 */
const _nextTail = new THREE.Vector3();
const _quatA = new THREE.Quaternion();
const _matA = new THREE.Matrix4();
const _matB = new THREE.Matrix4();
/**
 * A class represents a single joint of a spring bone.
 * It should be managed by a [[VRMSpringBoneManager]].
 */
class VRMSpringBoneJoint {
    get center() {
        return this._center;
    }
    set center(center) {
        var _a;
        // uninstall inverse cache
        if ((_a = this._center) === null || _a === void 0 ? void 0 : _a.userData.inverseCacheProxy) {
            this._center.userData.inverseCacheProxy.revert();
            delete this._center.userData.inverseCacheProxy;
        }
        // change the center
        this._center = center;
        // install inverse cache
        if (this._center) {
            if (!this._center.userData.inverseCacheProxy) {
                this._center.userData.inverseCacheProxy = new Matrix4InverseCache(this._center.matrixWorld);
            }
        }
    }
    get initialLocalChildPosition() {
        return this._initialLocalChildPosition;
    }
    /**
     * Returns the world matrix of its parent object.
     * Note that it returns a reference to the matrix. Don't mutate this directly!
     */
    get _parentMatrixWorld() {
        return this.bone.parent ? this.bone.parent.matrixWorld : IDENTITY_MATRIX4;
    }
    /**
     * Create a new VRMSpringBone.
     *
     * @param bone An Object3D that will be attached to this bone
     * @param child An Object3D that will be used as a tail of this spring bone. It can be null when the spring bone is imported from VRM 0.0
     * @param settings Several parameters related to behavior of the spring bone
     * @param colliderGroups Collider groups that will be collided with this spring bone
     */
    constructor(bone, child, settings = {}, colliderGroups = []) {
        var _a, _b, _c, _d, _e, _f;
        /**
         * Current position of child tail, in center unit. Will be used for verlet integration.
         */
        this._currentTail = new THREE.Vector3();
        /**
         * Previous position of child tail, in center unit. Will be used for verlet integration.
         */
        this._prevTail = new THREE.Vector3();
        /**
         * Initial axis of the bone, in local unit.
         */
        this._boneAxis = new THREE.Vector3();
        /**
         * Length of the bone in world unit.
         * Will be used for normalization in update loop, will be updated by {@link _calcWorldSpaceBoneLength}.
         *
         * It's same as local unit length unless there are scale transformations in the world space.
         */
        this._worldSpaceBoneLength = 0.0;
        /**
         * This springbone will be calculated based on the space relative from this object.
         * If this is `null`, springbone will be calculated in world space.
         */
        this._center = null;
        /**
         * Initial state of the local matrix of the bone.
         */
        this._initialLocalMatrix = new THREE.Matrix4();
        /**
         * Initial state of the rotation of the bone.
         */
        this._initialLocalRotation = new THREE.Quaternion();
        /**
         * Initial state of the position of its child.
         */
        this._initialLocalChildPosition = new THREE.Vector3();
        this.bone = bone; // uniVRMでの parent
        this.bone.matrixAutoUpdate = false; // updateにより計算されるのでthree.js内での自動処理は不要
        this.child = child;
        this.settings = {
            hitRadius: (_a = settings.hitRadius) !== null && _a !== void 0 ? _a : 0.0,
            stiffness: (_b = settings.stiffness) !== null && _b !== void 0 ? _b : 1.0,
            gravityPower: (_c = settings.gravityPower) !== null && _c !== void 0 ? _c : 0.0,
            gravityDir: (_e = (_d = settings.gravityDir) === null || _d === void 0 ? void 0 : _d.clone()) !== null && _e !== void 0 ? _e : new THREE.Vector3(0.0, -1.0, 0.0),
            dragForce: (_f = settings.dragForce) !== null && _f !== void 0 ? _f : 0.4,
        };
        this.colliderGroups = colliderGroups;
    }
    /**
     * Set the initial state of this spring bone.
     * You might want to call {@link VRMSpringBoneManager.setInitState} instead.
     */
    setInitState() {
        // remember initial position of itself
        this._initialLocalMatrix.copy(this.bone.matrix);
        this._initialLocalRotation.copy(this.bone.quaternion);
        // see initial position of its local child
        if (this.child) {
            this._initialLocalChildPosition.copy(this.child.position);
        }
        else {
            // vrm0 requires a 7cm fixed bone length for the final node in a chain
            // See: https://github.com/vrm-c/vrm-specification/tree/master/specification/VRMC_springBone-1.0#about-spring-configuration
            this._initialLocalChildPosition.copy(this.bone.position).normalize().multiplyScalar(0.07);
        }
        // copy the child position to tails
        const matrixWorldToCenter = this._getMatrixWorldToCenter(_matA);
        this.bone.localToWorld(this._currentTail.copy(this._initialLocalChildPosition)).applyMatrix4(matrixWorldToCenter);
        this._prevTail.copy(this._currentTail);
        // set initial states that are related to local child position
        this._boneAxis.copy(this._initialLocalChildPosition).normalize();
    }
    /**
     * Reset the state of this bone.
     * You might want to call [[VRMSpringBoneManager.reset]] instead.
     */
    reset() {
        this.bone.quaternion.copy(this._initialLocalRotation);
        // We need to update its matrixWorld manually, since we tweaked the bone by our hand
        this.bone.updateMatrix();
        this.bone.matrixWorld.multiplyMatrices(this._parentMatrixWorld, this.bone.matrix);
        // Apply updated position to tail states
        const matrixWorldToCenter = this._getMatrixWorldToCenter(_matA);
        this.bone.localToWorld(this._currentTail.copy(this._initialLocalChildPosition)).applyMatrix4(matrixWorldToCenter);
        this._prevTail.copy(this._currentTail);
    }
    /**
     * Update the state of this bone.
     * You might want to call [[VRMSpringBoneManager.update]] instead.
     *
     * @param delta deltaTime
     */
    update(delta) {
        if (delta <= 0)
            return;
        // Update the _worldSpaceBoneLength
        this._calcWorldSpaceBoneLength();
        // Get bone position in center space
        _worldSpacePosition.setFromMatrixPosition(this.bone.matrixWorld);
        let matrixWorldToCenter = this._getMatrixWorldToCenter(_matA);
        _centerSpacePosition.copy(_worldSpacePosition).applyMatrix4(matrixWorldToCenter);
        const quatWorldToCenter = _quatA.setFromRotationMatrix(matrixWorldToCenter);
        // Get parent matrix in center space
        const centerSpaceParentMatrix = _matB.copy(matrixWorldToCenter).multiply(this._parentMatrixWorld);
        // Get boneAxis in center space
        const centerSpaceBoneAxis = _v3B
            .copy(this._boneAxis)
            .applyMatrix4(this._initialLocalMatrix)
            .applyMatrix4(centerSpaceParentMatrix)
            .sub(_centerSpacePosition)
            .normalize();
        // gravity in center space
        const centerSpaceGravity = _v3C.copy(this.settings.gravityDir).applyQuaternion(quatWorldToCenter).normalize();
        const matrixCenterToWorld = this._getMatrixCenterToWorld(_matA);
        // verlet積分で次の位置を計算
        _nextTail
            .copy(this._currentTail)
            .add(_v3A
            .copy(this._currentTail)
            .sub(this._prevTail)
            .multiplyScalar(1 - this.settings.dragForce)) // 前フレームの移動を継続する(減衰もあるよ)
            .add(_v3A.copy(centerSpaceBoneAxis).multiplyScalar(this.settings.stiffness * delta)) // 親の回転による子ボーンの移動目標
            .add(_v3A.copy(centerSpaceGravity).multiplyScalar(this.settings.gravityPower * delta)) // 外力による移動量
            .applyMatrix4(matrixCenterToWorld); // tailをworld spaceに戻す
        // normalize bone length
        _nextTail.sub(_worldSpacePosition).normalize().multiplyScalar(this._worldSpaceBoneLength).add(_worldSpacePosition);
        // Collisionで移動
        this._collision(_nextTail);
        // update prevTail and currentTail
        matrixWorldToCenter = this._getMatrixWorldToCenter(_matA);
        this._prevTail.copy(this._currentTail);
        this._currentTail.copy(_v3A.copy(_nextTail).applyMatrix4(matrixWorldToCenter));
        // Apply rotation, convert vector3 thing into actual quaternion
        // Original UniVRM is doing center unit calculus at here but we're gonna do this on local unit
        const worldSpaceInitialMatrixInv = mat4InvertCompat(_matA.copy(this._parentMatrixWorld).multiply(this._initialLocalMatrix));
        const applyRotation = _quatA.setFromUnitVectors(this._boneAxis, _v3A.copy(_nextTail).applyMatrix4(worldSpaceInitialMatrixInv).normalize());
        this.bone.quaternion.copy(this._initialLocalRotation).multiply(applyRotation);
        // We need to update its matrixWorld manually, since we tweaked the bone by our hand
        this.bone.updateMatrix();
        this.bone.matrixWorld.multiplyMatrices(this._parentMatrixWorld, this.bone.matrix);
    }
    /**
     * Do collision math against every colliders attached to this bone.
     *
     * @param tail The tail you want to process
     */
    _collision(tail) {
        this.colliderGroups.forEach((colliderGroup) => {
            colliderGroup.colliders.forEach((collider) => {
                const dist = collider.shape.calculateCollision(collider.matrixWorld, tail, this.settings.hitRadius, _v3A);
                if (dist < 0.0) {
                    // hit
                    tail.add(_v3A.multiplyScalar(-dist));
                    // normalize bone length
                    tail.sub(_worldSpacePosition).normalize().multiplyScalar(this._worldSpaceBoneLength).add(_worldSpacePosition);
                }
            });
        });
    }
    /**
     * Calculate the {@link _worldSpaceBoneLength}.
     * Intended to be used in {@link update}.
     */
    _calcWorldSpaceBoneLength() {
        _v3A.setFromMatrixPosition(this.bone.matrixWorld); // get world position of this.bone
        if (this.child) {
            _v3B.setFromMatrixPosition(this.child.matrixWorld); // get world position of this.child
        }
        else {
            _v3B.copy(this._initialLocalChildPosition);
            _v3B.applyMatrix4(this.bone.matrixWorld);
        }
        this._worldSpaceBoneLength = _v3A.sub(_v3B).length();
    }
    /**
     * Create a matrix that converts center space into world space.
     * @param target Target matrix
     */
    _getMatrixCenterToWorld(target) {
        if (this._center) {
            target.copy(this._center.matrixWorld);
        }
        else {
            target.identity();
        }
        return target;
    }
    /**
     * Create a matrix that converts world space into center space.
     * @param target Target matrix
     */
    _getMatrixWorldToCenter(target) {
        if (this._center) {
            target.copy(this._center.userData.inverseCacheProxy.inverse);
        }
        else {
            target.identity();
        }
        return target;
    }
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function traverseAncestorsFromRoot(object, callback) {
    const ancestors = [];
    let head = object;
    while (head !== null) {
        ancestors.unshift(head);
        head = head.parent;
    }
    ancestors.forEach((ancestor) => {
        callback(ancestor);
    });
}

/**
 * Traverse children of given object and execute given callback.
 * The given object itself wont be given to the callback.
 * If the return value of the callback is `true`, it will halt the traversal of its children.
 * @param object A root object
 * @param callback A callback function called for each children
 */
function traverseChildrenUntilConditionMet(object, callback) {
    object.children.forEach((child) => {
        const result = callback(child);
        if (!result) {
            traverseChildrenUntilConditionMet(child, callback);
        }
    });
}

class VRMSpringBoneManager {
    constructor() {
        this._joints = new Set();
        this._objectSpringBonesMap = new Map();
    }
    get joints() {
        return this._joints;
    }
    /**
     * @deprecated Use {@link joints} instead.
     */
    get springBones() {
        console.warn('VRMSpringBoneManager: springBones is deprecated. use joints instead.');
        return this._joints;
    }
    get colliderGroups() {
        const set = new Set();
        this._joints.forEach((springBone) => {
            springBone.colliderGroups.forEach((colliderGroup) => {
                set.add(colliderGroup);
            });
        });
        return Array.from(set);
    }
    get colliders() {
        const set = new Set();
        this.colliderGroups.forEach((colliderGroup) => {
            colliderGroup.colliders.forEach((collider) => {
                set.add(collider);
            });
        });
        return Array.from(set);
    }
    addJoint(joint) {
        this._joints.add(joint);
        let objectSet = this._objectSpringBonesMap.get(joint.bone);
        if (objectSet == null) {
            objectSet = new Set();
            this._objectSpringBonesMap.set(joint.bone, objectSet);
        }
        objectSet.add(joint);
    }
    /**
     * @deprecated Use {@link addJoint} instead.
     */
    addSpringBone(joint) {
        console.warn('VRMSpringBoneManager: addSpringBone() is deprecated. use addJoint() instead.');
        this.addJoint(joint);
    }
    deleteJoint(joint) {
        this._joints.delete(joint);
        const objectSet = this._objectSpringBonesMap.get(joint.bone);
        objectSet.delete(joint);
    }
    /**
     * @deprecated Use {@link deleteJoint} instead.
     */
    deleteSpringBone(joint) {
        console.warn('VRMSpringBoneManager: deleteSpringBone() is deprecated. use deleteJoint() instead.');
        this.deleteJoint(joint);
    }
    setInitState() {
        const springBonesTried = new Set();
        const springBonesDone = new Set();
        const objectUpdated = new Set();
        for (const springBone of this._joints) {
            this._processSpringBone(springBone, springBonesTried, springBonesDone, objectUpdated, (springBone) => springBone.setInitState());
        }
    }
    reset() {
        const springBonesTried = new Set();
        const springBonesDone = new Set();
        const objectUpdated = new Set();
        for (const springBone of this._joints) {
            this._processSpringBone(springBone, springBonesTried, springBonesDone, objectUpdated, (springBone) => springBone.reset());
        }
    }
    update(delta) {
        const springBonesTried = new Set();
        const springBonesDone = new Set();
        const objectUpdated = new Set();
        for (const springBone of this._joints) {
            // update the springbone
            this._processSpringBone(springBone, springBonesTried, springBonesDone, objectUpdated, (springBone) => springBone.update(delta));
            // update children world matrices
            // it is required when the spring bone chain is sparse
            traverseChildrenUntilConditionMet(springBone.bone, (object) => {
                var _a, _b;
                // if the object has attached springbone, halt the traversal
                if (((_b = (_a = this._objectSpringBonesMap.get(object)) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0) > 0) {
                    return true;
                }
                // otherwise update its world matrix
                object.updateWorldMatrix(false, false);
                return false;
            });
        }
    }
    /**
     * Update a spring bone.
     * If there are other spring bone that are dependant, it will try to update them recursively.
     * It updates matrixWorld of all ancestors and myself.
     * It might throw an error if there are circular dependencies.
     *
     * Intended to be used in {@link update} and {@link _processSpringBone} itself recursively.
     *
     * @param springBone A springBone you want to update
     * @param springBonesTried Set of springBones that are already tried to be updated
     * @param springBonesDone Set of springBones that are already up to date
     * @param objectUpdated Set of object3D whose matrixWorld is updated
     */
    _processSpringBone(springBone, springBonesTried, springBonesDone, objectUpdated, callback) {
        if (springBonesDone.has(springBone)) {
            return;
        }
        if (springBonesTried.has(springBone)) {
            throw new Error('VRMSpringBoneManager: Circular dependency detected while updating springbones');
        }
        springBonesTried.add(springBone);
        const depObjects = this._getDependencies(springBone);
        for (const depObject of depObjects) {
            traverseAncestorsFromRoot(depObject, (depObjectAncestor) => {
                const objectSet = this._objectSpringBonesMap.get(depObjectAncestor);
                if (objectSet) {
                    for (const depSpringBone of objectSet) {
                        this._processSpringBone(depSpringBone, springBonesTried, springBonesDone, objectUpdated, callback);
                    }
                }
                else if (!objectUpdated.has(depObjectAncestor)) {
                    // update matrix of non-springbone
                    depObjectAncestor.updateWorldMatrix(false, false);
                    objectUpdated.add(depObjectAncestor);
                }
            });
        }
        // update my matrix
        springBone.bone.updateMatrix();
        springBone.bone.updateWorldMatrix(false, false);
        callback(springBone);
        objectUpdated.add(springBone.bone);
        springBonesDone.add(springBone);
    }
    /**
     * Return a set of objects that are dependant of given spring bone.
     * @param springBone A spring bone
     * @return A set of objects that are dependant of given spring bone
     */
    _getDependencies(springBone) {
        const set = new Set();
        const parent = springBone.bone.parent;
        if (parent) {
            set.add(parent);
        }
        springBone.colliderGroups.forEach((colliderGroup) => {
            colliderGroup.colliders.forEach((collider) => {
                set.add(collider);
            });
        });
        return set;
    }
}

/**
 * Possible spec versions it recognizes.
 */
const POSSIBLE_SPEC_VERSIONS = new Set(['1.0', '1.0-beta']);
class VRMSpringBoneLoaderPlugin {
    get name() {
        return VRMSpringBoneLoaderPlugin.EXTENSION_NAME;
    }
    constructor(parser, options) {
        this.parser = parser;
        this.jointHelperRoot = options === null || options === void 0 ? void 0 : options.jointHelperRoot;
        this.colliderHelperRoot = options === null || options === void 0 ? void 0 : options.colliderHelperRoot;
    }
    afterRoot(gltf) {
        return __awaiter(this, void 0, void 0, function* () {
            gltf.userData.vrmSpringBoneManager = yield this._import(gltf);
        });
    }
    /**
     * Import spring bones from a GLTF and return a {@link VRMSpringBoneManager}.
     * It might return `null` instead when it does not need to be created or something go wrong.
     *
     * @param gltf A parsed result of GLTF taken from GLTFLoader
     */
    _import(gltf) {
        return __awaiter(this, void 0, void 0, function* () {
            const v1Result = yield this._v1Import(gltf);
            if (v1Result != null) {
                return v1Result;
            }
            const v0Result = yield this._v0Import(gltf);
            if (v0Result != null) {
                return v0Result;
            }
            return null;
        });
    }
    _v1Import(gltf) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const json = gltf.parser.json;
            // early abort if it doesn't use spring bones
            const isSpringBoneUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf(VRMSpringBoneLoaderPlugin.EXTENSION_NAME)) !== -1;
            if (!isSpringBoneUsed) {
                return null;
            }
            const manager = new VRMSpringBoneManager();
            const threeNodes = yield gltf.parser.getDependencies('node');
            const extension = (_b = json.extensions) === null || _b === void 0 ? void 0 : _b[VRMSpringBoneLoaderPlugin.EXTENSION_NAME];
            if (!extension) {
                return null;
            }
            const specVersion = extension.specVersion;
            if (!POSSIBLE_SPEC_VERSIONS.has(specVersion)) {
                console.warn(`VRMSpringBoneLoaderPlugin: Unknown ${VRMSpringBoneLoaderPlugin.EXTENSION_NAME} specVersion "${specVersion}"`);
                return null;
            }
            const colliders = (_c = extension.colliders) === null || _c === void 0 ? void 0 : _c.map((schemaCollider, iCollider) => {
                var _a, _b, _c, _d, _e;
                const node = threeNodes[schemaCollider.node];
                const schemaShape = schemaCollider.shape;
                if (schemaShape.sphere) {
                    return this._importSphereCollider(node, {
                        offset: new THREE.Vector3().fromArray((_a = schemaShape.sphere.offset) !== null && _a !== void 0 ? _a : [0.0, 0.0, 0.0]),
                        radius: (_b = schemaShape.sphere.radius) !== null && _b !== void 0 ? _b : 0.0,
                    });
                }
                else if (schemaShape.capsule) {
                    return this._importCapsuleCollider(node, {
                        offset: new THREE.Vector3().fromArray((_c = schemaShape.capsule.offset) !== null && _c !== void 0 ? _c : [0.0, 0.0, 0.0]),
                        radius: (_d = schemaShape.capsule.radius) !== null && _d !== void 0 ? _d : 0.0,
                        tail: new THREE.Vector3().fromArray((_e = schemaShape.capsule.tail) !== null && _e !== void 0 ? _e : [0.0, 0.0, 0.0]),
                    });
                }
                throw new Error(`VRMSpringBoneLoaderPlugin: The collider #${iCollider} has no valid shape`);
            });
            const colliderGroups = (_d = extension.colliderGroups) === null || _d === void 0 ? void 0 : _d.map((schemaColliderGroup, iColliderGroup) => {
                var _a;
                const cols = ((_a = schemaColliderGroup.colliders) !== null && _a !== void 0 ? _a : []).map((iCollider) => {
                    const col = colliders === null || colliders === void 0 ? void 0 : colliders[iCollider];
                    if (col == null) {
                        throw new Error(`VRMSpringBoneLoaderPlugin: The colliderGroup #${iColliderGroup} attempted to use a collider #${iCollider} but not found`);
                    }
                    return col;
                });
                return {
                    colliders: cols,
                    name: schemaColliderGroup.name,
                };
            });
            (_e = extension.springs) === null || _e === void 0 ? void 0 : _e.forEach((schemaSpring, iSpring) => {
                var _a;
                const schemaJoints = schemaSpring.joints;
                // prepare colliders
                const colliderGroupsForSpring = (_a = schemaSpring.colliderGroups) === null || _a === void 0 ? void 0 : _a.map((iColliderGroup) => {
                    const group = colliderGroups === null || colliderGroups === void 0 ? void 0 : colliderGroups[iColliderGroup];
                    if (group == null) {
                        throw new Error(`VRMSpringBoneLoaderPlugin: The spring #${iSpring} attempted to use a colliderGroup ${iColliderGroup} but not found`);
                    }
                    return group;
                });
                const center = schemaSpring.center != null ? threeNodes[schemaSpring.center] : undefined;
                let prevSchemaJoint;
                schemaJoints.forEach((schemaJoint) => {
                    if (prevSchemaJoint) {
                        // prepare node
                        const nodeIndex = prevSchemaJoint.node;
                        const node = threeNodes[nodeIndex];
                        const childIndex = schemaJoint.node;
                        const child = threeNodes[childIndex];
                        // prepare setting
                        const setting = {
                            hitRadius: prevSchemaJoint.hitRadius,
                            dragForce: prevSchemaJoint.dragForce,
                            gravityPower: prevSchemaJoint.gravityPower,
                            stiffness: prevSchemaJoint.stiffness,
                            gravityDir: prevSchemaJoint.gravityDir != null
                                ? new THREE.Vector3().fromArray(prevSchemaJoint.gravityDir)
                                : undefined,
                        };
                        // create spring bones
                        const joint = this._importJoint(node, child, setting, colliderGroupsForSpring);
                        if (center) {
                            joint.center = center;
                        }
                        manager.addJoint(joint);
                    }
                    prevSchemaJoint = schemaJoint;
                });
            });
            // init spring bones
            manager.setInitState();
            return manager;
        });
    }
    _v0Import(gltf) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const json = gltf.parser.json;
            // early abort if it doesn't use vrm
            const isVRMUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf('VRM')) !== -1;
            if (!isVRMUsed) {
                return null;
            }
            // early abort if it doesn't have bone groups
            const extension = (_b = json.extensions) === null || _b === void 0 ? void 0 : _b['VRM'];
            const schemaSecondaryAnimation = extension === null || extension === void 0 ? void 0 : extension.secondaryAnimation;
            if (!schemaSecondaryAnimation) {
                return null;
            }
            const schemaBoneGroups = schemaSecondaryAnimation === null || schemaSecondaryAnimation === void 0 ? void 0 : schemaSecondaryAnimation.boneGroups;
            if (!schemaBoneGroups) {
                return null;
            }
            const manager = new VRMSpringBoneManager();
            const threeNodes = yield gltf.parser.getDependencies('node');
            const colliderGroups = (_c = schemaSecondaryAnimation.colliderGroups) === null || _c === void 0 ? void 0 : _c.map((schemaColliderGroup) => {
                var _a;
                const node = threeNodes[schemaColliderGroup.node];
                const colliders = ((_a = schemaColliderGroup.colliders) !== null && _a !== void 0 ? _a : []).map((schemaCollider, iCollider) => {
                    var _a, _b, _c;
                    const offset = new THREE.Vector3(0.0, 0.0, 0.0);
                    if (schemaCollider.offset) {
                        offset.set((_a = schemaCollider.offset.x) !== null && _a !== void 0 ? _a : 0.0, (_b = schemaCollider.offset.y) !== null && _b !== void 0 ? _b : 0.0, schemaCollider.offset.z ? -schemaCollider.offset.z : 0.0);
                    }
                    return this._importSphereCollider(node, {
                        offset,
                        radius: (_c = schemaCollider.radius) !== null && _c !== void 0 ? _c : 0.0,
                    });
                });
                return { colliders };
            });
            // import spring bones for each spring bone groups
            schemaBoneGroups === null || schemaBoneGroups === void 0 ? void 0 : schemaBoneGroups.forEach((schemaBoneGroup, iBoneGroup) => {
                const rootIndices = schemaBoneGroup.bones;
                if (!rootIndices) {
                    return;
                }
                rootIndices.forEach((rootIndex) => {
                    var _a, _b, _c, _d;
                    const root = threeNodes[rootIndex];
                    // prepare setting
                    const gravityDir = new THREE.Vector3();
                    if (schemaBoneGroup.gravityDir) {
                        gravityDir.set((_a = schemaBoneGroup.gravityDir.x) !== null && _a !== void 0 ? _a : 0.0, (_b = schemaBoneGroup.gravityDir.y) !== null && _b !== void 0 ? _b : 0.0, (_c = schemaBoneGroup.gravityDir.z) !== null && _c !== void 0 ? _c : 0.0);
                    }
                    else {
                        gravityDir.set(0.0, -1.0, 0.0);
                    }
                    const center = schemaBoneGroup.center != null ? threeNodes[schemaBoneGroup.center] : undefined;
                    const setting = {
                        hitRadius: schemaBoneGroup.hitRadius,
                        dragForce: schemaBoneGroup.dragForce,
                        gravityPower: schemaBoneGroup.gravityPower,
                        stiffness: schemaBoneGroup.stiffiness,
                        gravityDir,
                    };
                    // prepare colliders
                    const colliderGroupsForSpring = (_d = schemaBoneGroup.colliderGroups) === null || _d === void 0 ? void 0 : _d.map((iColliderGroup) => {
                        const group = colliderGroups === null || colliderGroups === void 0 ? void 0 : colliderGroups[iColliderGroup];
                        if (group == null) {
                            throw new Error(`VRMSpringBoneLoaderPlugin: The spring #${iBoneGroup} attempted to use a colliderGroup ${iColliderGroup} but not found`);
                        }
                        return group;
                    });
                    // create spring bones
                    root.traverse((node) => {
                        var _a;
                        const child = (_a = node.children[0]) !== null && _a !== void 0 ? _a : null;
                        const joint = this._importJoint(node, child, setting, colliderGroupsForSpring);
                        if (center) {
                            joint.center = center;
                        }
                        manager.addJoint(joint);
                    });
                });
            });
            // init spring bones
            gltf.scene.updateMatrixWorld();
            manager.setInitState();
            return manager;
        });
    }
    _importJoint(node, child, setting, colliderGroupsForSpring) {
        const springBone = new VRMSpringBoneJoint(node, child, setting, colliderGroupsForSpring);
        if (this.jointHelperRoot) {
            const helper = new VRMSpringBoneJointHelper(springBone);
            this.jointHelperRoot.add(helper);
            helper.renderOrder = this.jointHelperRoot.renderOrder;
        }
        return springBone;
    }
    _importSphereCollider(destination, params) {
        const { offset, radius } = params;
        const shape = new VRMSpringBoneColliderShapeSphere({ offset, radius });
        const collider = new VRMSpringBoneCollider(shape);
        destination.add(collider);
        if (this.colliderHelperRoot) {
            const helper = new VRMSpringBoneColliderHelper(collider);
            this.colliderHelperRoot.add(helper);
            helper.renderOrder = this.colliderHelperRoot.renderOrder;
        }
        return collider;
    }
    _importCapsuleCollider(destination, params) {
        const { offset, radius, tail } = params;
        const shape = new VRMSpringBoneColliderShapeCapsule({ offset, radius, tail });
        const collider = new VRMSpringBoneCollider(shape);
        destination.add(collider);
        if (this.colliderHelperRoot) {
            const helper = new VRMSpringBoneColliderHelper(collider);
            this.colliderHelperRoot.add(helper);
            helper.renderOrder = this.colliderHelperRoot.renderOrder;
        }
        return collider;
    }
}
VRMSpringBoneLoaderPlugin.EXTENSION_NAME = 'VRMC_springBone';

class VRMLoaderPlugin {
    get name() {
        return 'VRMLoaderPlugin';
    }
    constructor(parser, options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        this.parser = parser;
        const helperRoot = options === null || options === void 0 ? void 0 : options.helperRoot;
        const autoUpdateHumanBones = options === null || options === void 0 ? void 0 : options.autoUpdateHumanBones;
        this.expressionPlugin = (_a = options === null || options === void 0 ? void 0 : options.expressionPlugin) !== null && _a !== void 0 ? _a : new VRMExpressionLoaderPlugin(parser);
        this.firstPersonPlugin = (_b = options === null || options === void 0 ? void 0 : options.firstPersonPlugin) !== null && _b !== void 0 ? _b : new VRMFirstPersonLoaderPlugin(parser);
        this.humanoidPlugin =
            (_c = options === null || options === void 0 ? void 0 : options.humanoidPlugin) !== null && _c !== void 0 ? _c : new VRMHumanoidLoaderPlugin(parser, {
                helperRoot,
                autoUpdateHumanBones,
            });
        this.lookAtPlugin = (_d = options === null || options === void 0 ? void 0 : options.lookAtPlugin) !== null && _d !== void 0 ? _d : new VRMLookAtLoaderPlugin(parser, { helperRoot });
        this.metaPlugin = (_e = options === null || options === void 0 ? void 0 : options.metaPlugin) !== null && _e !== void 0 ? _e : new VRMMetaLoaderPlugin(parser);
        this.mtoonMaterialPlugin = (_f = options === null || options === void 0 ? void 0 : options.mtoonMaterialPlugin) !== null && _f !== void 0 ? _f : new MToonMaterialLoaderPlugin(parser);
        this.materialsHDREmissiveMultiplierPlugin =
            (_g = options === null || options === void 0 ? void 0 : options.materialsHDREmissiveMultiplierPlugin) !== null && _g !== void 0 ? _g : new VRMMaterialsHDREmissiveMultiplierLoaderPlugin(parser);
        this.materialsV0CompatPlugin = (_h = options === null || options === void 0 ? void 0 : options.materialsV0CompatPlugin) !== null && _h !== void 0 ? _h : new VRMMaterialsV0CompatPlugin(parser);
        this.springBonePlugin =
            (_j = options === null || options === void 0 ? void 0 : options.springBonePlugin) !== null && _j !== void 0 ? _j : new VRMSpringBoneLoaderPlugin(parser, {
                colliderHelperRoot: helperRoot,
                jointHelperRoot: helperRoot,
            });
        this.nodeConstraintPlugin =
            (_k = options === null || options === void 0 ? void 0 : options.nodeConstraintPlugin) !== null && _k !== void 0 ? _k : new VRMNodeConstraintLoaderPlugin(parser, { helperRoot });
    }
    beforeRoot() {
        return __awaiter$5(this, void 0, void 0, function* () {
            yield this.materialsV0CompatPlugin.beforeRoot();
            yield this.mtoonMaterialPlugin.beforeRoot();
        });
    }
    loadMesh(meshIndex) {
        return __awaiter$5(this, void 0, void 0, function* () {
            return yield this.mtoonMaterialPlugin.loadMesh(meshIndex);
        });
    }
    getMaterialType(materialIndex) {
        const mtoonType = this.mtoonMaterialPlugin.getMaterialType(materialIndex);
        if (mtoonType != null) {
            return mtoonType;
        }
        return null;
    }
    extendMaterialParams(materialIndex, materialParams) {
        return __awaiter$5(this, void 0, void 0, function* () {
            yield this.materialsHDREmissiveMultiplierPlugin.extendMaterialParams(materialIndex, materialParams);
            yield this.mtoonMaterialPlugin.extendMaterialParams(materialIndex, materialParams);
        });
    }
    afterRoot(gltf) {
        return __awaiter$5(this, void 0, void 0, function* () {
            yield this.metaPlugin.afterRoot(gltf);
            yield this.humanoidPlugin.afterRoot(gltf);
            yield this.expressionPlugin.afterRoot(gltf);
            yield this.lookAtPlugin.afterRoot(gltf);
            yield this.firstPersonPlugin.afterRoot(gltf);
            yield this.springBonePlugin.afterRoot(gltf);
            yield this.nodeConstraintPlugin.afterRoot(gltf);
            yield this.mtoonMaterialPlugin.afterRoot(gltf);
            const meta = gltf.userData.vrmMeta;
            const humanoid = gltf.userData.vrmHumanoid;
            // meta and humanoid are required to be a VRM.
            // Don't create VRM if they are null
            if (meta && humanoid) {
                const vrm = new VRM({
                    scene: gltf.scene,
                    expressionManager: gltf.userData.vrmExpressionManager,
                    firstPerson: gltf.userData.vrmFirstPerson,
                    humanoid,
                    lookAt: gltf.userData.vrmLookAt,
                    meta,
                    materials: gltf.userData.vrmMToonMaterials,
                    springBoneManager: gltf.userData.vrmSpringBoneManager,
                    nodeConstraintManager: gltf.userData.vrmNodeConstraintManager,
                });
                gltf.userData.vrm = vrm;
            }
        });
    }
}

// See: https://threejs.org/docs/#manual/en/introduction/How-to-dispose-of-objects
function disposeMaterial(material) {
    Object.values(material).forEach((value) => {
        if (value === null || value === void 0 ? void 0 : value.isTexture) {
            const texture = value;
            texture.dispose();
        }
    });
    if (material.isShaderMaterial) {
        const uniforms = material.uniforms;
        if (uniforms) {
            Object.values(uniforms).forEach((uniform) => {
                const value = uniform.value;
                if (value === null || value === void 0 ? void 0 : value.isTexture) {
                    const texture = value;
                    texture.dispose();
                }
            });
        }
    }
    material.dispose();
}
function dispose(object3D) {
    const geometry = object3D.geometry;
    if (geometry) {
        geometry.dispose();
    }
    const skeleton = object3D.skeleton;
    if (skeleton) {
        skeleton.dispose();
    }
    const material = object3D.material;
    if (material) {
        if (Array.isArray(material)) {
            material.forEach((material) => disposeMaterial(material));
        }
        else if (material) {
            disposeMaterial(material);
        }
    }
}
function deepDispose(object3D) {
    object3D.traverse(dispose);
}

/**
 * Traverse given object and remove unnecessarily bound joints from every `THREE.SkinnedMesh`.
 * Some environments like mobile devices have a lower limit of bones and might be unable to perform mesh skinning, this function might resolve such an issue.
 * Also this function might greatly improve the performance of mesh skinning.
 *
 * @param root Root object that will be traversed
 */
function removeUnnecessaryJoints(root) {
    // some meshes might share a same skinIndex attribute and this map prevents to convert the attribute twice
    const skeletonList = new Map();
    // Traverse an entire tree
    root.traverse((obj) => {
        if (obj.type !== 'SkinnedMesh') {
            return;
        }
        const mesh = obj;
        const geometry = mesh.geometry;
        const attribute = geometry.getAttribute('skinIndex');
        // look for existing skeleton
        let skeleton = skeletonList.get(attribute);
        if (!skeleton) {
            // generate reduced bone list
            const bones = []; // new list of bone
            const boneInverses = []; // new list of boneInverse
            const boneIndexMap = {}; // map of old bone index vs. new bone index
            // create a new bone map
            const array = attribute.array;
            for (let i = 0; i < array.length; i++) {
                const index = array[i];
                // new skinIndex buffer
                if (boneIndexMap[index] === undefined) {
                    boneIndexMap[index] = bones.length;
                    bones.push(mesh.skeleton.bones[index]);
                    boneInverses.push(mesh.skeleton.boneInverses[index]);
                }
                array[i] = boneIndexMap[index];
            }
            // replace with new indices
            attribute.copyArray(array);
            attribute.needsUpdate = true;
            // replace with new indices
            skeleton = new THREE.Skeleton(bones, boneInverses);
            skeletonList.set(attribute, skeleton);
        }
        mesh.bind(skeleton, new THREE.Matrix4());
        //                  ^^^^^^^^^^^^^^^^^^^ transform of meshes should be ignored
        // See: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins
    });
}

/**
 * Traverse given object and remove unnecessary vertices from every BufferGeometries.
 * This only processes buffer geometries with index buffer.
 *
 * Three.js creates morph textures for each geometries and it sometimes consumes unnecessary amount of VRAM for certain models.
 * This function will optimize geometries to reduce the size of morph texture.
 * See: https://github.com/mrdoob/three.js/issues/23095
 *
 * @param root Root object that will be traversed
 */
function removeUnnecessaryVertices(root) {
    const geometryMap = new Map();
    // Traverse an entire tree
    root.traverse((obj) => {
        var _a, _b, _c, _d;
        if (!obj.isMesh) {
            return;
        }
        const mesh = obj;
        const geometry = mesh.geometry;
        // if the geometry does not have an index buffer it does not need to process
        const origianlIndex = geometry.index;
        if (origianlIndex == null) {
            return;
        }
        // skip already processed geometry
        const newGeometryAlreadyExisted = geometryMap.get(geometry);
        if (newGeometryAlreadyExisted != null) {
            mesh.geometry = newGeometryAlreadyExisted;
            return;
        }
        const newGeometry = new THREE.BufferGeometry();
        // copy various properties
        // Ref: https://github.com/mrdoob/three.js/blob/1a241ef10048770d56e06d6cd6a64c76cc720f95/src/core/BufferGeometry.js#L1011
        newGeometry.name = geometry.name;
        newGeometry.morphTargetsRelative = geometry.morphTargetsRelative;
        geometry.groups.forEach((group) => {
            newGeometry.addGroup(group.start, group.count, group.materialIndex);
        });
        newGeometry.boundingBox = (_b = (_a = geometry.boundingBox) === null || _a === void 0 ? void 0 : _a.clone()) !== null && _b !== void 0 ? _b : null;
        newGeometry.boundingSphere = (_d = (_c = geometry.boundingSphere) === null || _c === void 0 ? void 0 : _c.clone()) !== null && _d !== void 0 ? _d : null;
        newGeometry.setDrawRange(geometry.drawRange.start, geometry.drawRange.count);
        newGeometry.userData = geometry.userData;
        // set to geometryMap
        geometryMap.set(geometry, newGeometry);
        /** from original index to new index */
        const originalIndexNewIndexMap = [];
        /** from new index to original index */
        const newIndexOriginalIndexMap = [];
        // reorganize indices
        {
            const originalIndexArray = origianlIndex.array;
            const newIndexArray = new originalIndexArray.constructor(originalIndexArray.length);
            let indexHead = 0;
            for (let i = 0; i < originalIndexArray.length; i++) {
                const originalIndex = originalIndexArray[i];
                let newIndex = originalIndexNewIndexMap[originalIndex];
                if (newIndex == null) {
                    originalIndexNewIndexMap[originalIndex] = indexHead;
                    newIndexOriginalIndexMap[indexHead] = originalIndex;
                    newIndex = indexHead;
                    indexHead++;
                }
                newIndexArray[i] = newIndex;
            }
            newGeometry.setIndex(new BufferAttribute(newIndexArray, 1, false));
        }
        // reorganize attributes
        Object.keys(geometry.attributes).forEach((attributeName) => {
            const originalAttribute = geometry.attributes[attributeName];
            if (originalAttribute.isInterleavedBufferAttribute) {
                throw new Error('removeUnnecessaryVertices: InterleavedBufferAttribute is not supported');
            }
            const originalAttributeArray = originalAttribute.array;
            const { itemSize, normalized } = originalAttribute;
            const newAttributeArray = new originalAttributeArray.constructor(newIndexOriginalIndexMap.length * itemSize);
            newIndexOriginalIndexMap.forEach((originalIndex, i) => {
                for (let j = 0; j < itemSize; j++) {
                    newAttributeArray[i * itemSize + j] = originalAttributeArray[originalIndex * itemSize + j];
                }
            });
            newGeometry.setAttribute(attributeName, new BufferAttribute(newAttributeArray, itemSize, normalized));
        });
        // reorganize morph attributes
        /** True if all morphs are zero. */
        let isNullMorph = true;
        Object.keys(geometry.morphAttributes).forEach((attributeName) => {
            newGeometry.morphAttributes[attributeName] = [];
            const morphs = geometry.morphAttributes[attributeName];
            for (let iMorph = 0; iMorph < morphs.length; iMorph++) {
                const originalAttribute = morphs[iMorph];
                if (originalAttribute.isInterleavedBufferAttribute) {
                    throw new Error('removeUnnecessaryVertices: InterleavedBufferAttribute is not supported');
                }
                const originalAttributeArray = originalAttribute.array;
                const { itemSize, normalized } = originalAttribute;
                const newAttributeArray = new originalAttributeArray.constructor(newIndexOriginalIndexMap.length * itemSize);
                newIndexOriginalIndexMap.forEach((originalIndex, i) => {
                    for (let j = 0; j < itemSize; j++) {
                        newAttributeArray[i * itemSize + j] = originalAttributeArray[originalIndex * itemSize + j];
                    }
                });
                isNullMorph = isNullMorph && newAttributeArray.every((v) => v === 0);
                newGeometry.morphAttributes[attributeName][iMorph] = new BufferAttribute(newAttributeArray, itemSize, normalized);
            }
        });
        // If all morphs are zero, just discard the morph attributes we've just made
        if (isNullMorph) {
            newGeometry.morphAttributes = {};
        }
        mesh.geometry = newGeometry;
    });
    Array.from(geometryMap.keys()).forEach((originalGeometry) => {
        originalGeometry.dispose();
    });
}

/**
 * If the given VRM is VRM0.0, rotate the `vrm.scene` by 180 degrees around the Y axis.
 *
 * @param vrm The target VRM
 */
function rotateVRM0(vrm) {
    var _a;
    if (((_a = vrm.meta) === null || _a === void 0 ? void 0 : _a.metaVersion) === '0') {
        vrm.scene.rotation.y = Math.PI;
    }
}

class VRMUtils {
    constructor() {
        // this class is not meant to be instantiated
    }
}
VRMUtils.deepDispose = deepDispose;
VRMUtils.removeUnnecessaryJoints = removeUnnecessaryJoints;
VRMUtils.removeUnnecessaryVertices = removeUnnecessaryVertices;
VRMUtils.rotateVRM0 = rotateVRM0;

export { MToonMaterial, MToonMaterialDebugMode, MToonMaterialLoaderPlugin, MToonMaterialOutlineWidthMode, VRM, VRMAimConstraint, VRMCore, VRMCoreLoaderPlugin, VRMExpression, VRMExpressionLoaderPlugin, VRMExpressionManager, VRMExpressionMaterialColorType, VRMExpressionOverrideType, VRMExpressionPresetName, VRMFirstPerson, VRMFirstPersonLoaderPlugin, VRMFirstPersonMeshAnnotationType, VRMHumanBoneList, VRMHumanBoneName, VRMHumanBoneParentMap, VRMHumanoid, VRMHumanoidHelper, VRMHumanoidLoaderPlugin, VRMLoaderPlugin, VRMLookAt, VRMLookAtBoneApplier, VRMLookAtExpressionApplier, VRMLookAtHelper, VRMLookAtLoaderPlugin, VRMLookAtRangeMap, VRMLookAtTypeName, VRMMetaLoaderPlugin, VRMNodeConstraint, VRMNodeConstraintHelper, VRMNodeConstraintLoaderPlugin, VRMNodeConstraintManager, VRMRequiredHumanBoneName, VRMRollConstraint, VRMRotationConstraint, VRMSpringBoneCollider, VRMSpringBoneColliderHelper, VRMSpringBoneColliderShape, VRMSpringBoneColliderShapeCapsule, VRMSpringBoneColliderShapeSphere, VRMSpringBoneJoint, VRMSpringBoneJointHelper, VRMSpringBoneLoaderPlugin, VRMSpringBoneManager, VRMUtils };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyZWUtdnJtLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vdGhyZWUtdnJtLWNvcmUvbGliL3RocmVlLXZybS1jb3JlLm1vZHVsZS5qcyIsIi4uL3NyYy9WUk0udHMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwiLi4vLi4vdGhyZWUtdnJtLW1hdGVyaWFscy1tdG9vbi9saWIvdGhyZWUtdnJtLW1hdGVyaWFscy1tdG9vbi5tb2R1bGUuanMiLCIuLi8uLi90aHJlZS12cm0tbWF0ZXJpYWxzLWhkci1lbWlzc2l2ZS1tdWx0aXBsaWVyL2xpYi90aHJlZS12cm0tbWF0ZXJpYWxzLWhkci1lbWlzc2l2ZS1tdWx0aXBsaWVyLm1vZHVsZS5qcyIsIi4uLy4uL3RocmVlLXZybS1tYXRlcmlhbHMtdjBjb21wYXQvbGliL3RocmVlLXZybS1tYXRlcmlhbHMtdjBjb21wYXQubW9kdWxlLmpzIiwiLi4vLi4vdGhyZWUtdnJtLW5vZGUtY29uc3RyYWludC9saWIvdGhyZWUtdnJtLW5vZGUtY29uc3RyYWludC5tb2R1bGUuanMiLCIuLi8uLi90aHJlZS12cm0tc3ByaW5nYm9uZS9saWIvdGhyZWUtdnJtLXNwcmluZ2JvbmUubW9kdWxlLmpzIiwiLi4vc3JjL1ZSTUxvYWRlclBsdWdpbi50cyIsIi4uL3NyYy9WUk1VdGlscy9kZWVwRGlzcG9zZS50cyIsIi4uL3NyYy9WUk1VdGlscy9yZW1vdmVVbm5lY2Vzc2FyeUpvaW50cy50cyIsIi4uL3NyYy9WUk1VdGlscy9yZW1vdmVVbm5lY2Vzc2FyeVZlcnRpY2VzLnRzIiwiLi4vc3JjL1ZSTVV0aWxzL3JvdGF0ZVZSTTAudHMiLCIuLi9zcmMvVlJNVXRpbHMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAcGl4aXYvdGhyZWUtdnJtLWNvcmUgdjIuMC4xXG4gKiBUaGUgaW1wbGVtZW50YXRpb24gb2YgY29yZSBmZWF0dXJlcyBvZiBWUk0sIGZvciBAcGl4aXYvdGhyZWUtdnJtXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDIwLTIwMjMgcGl4aXYgSW5jLlxuICogQHBpeGl2L3RocmVlLXZybS1jb3JlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGl4aXYvdGhyZWUtdnJtL2Jsb2IvcmVsZWFzZS9MSUNFTlNFXG4gKi9cbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuLy8gYW5pbWF0aW9uTWl4ZXIg44Gu55uj6KaW5a++6LGh44Gv44CBU2NlbmUg44Gu5Lit44Gr5YWl44Gj44Gm44GE44KL5b+F6KaB44GM44GC44KL44CCXG4vLyDjgZ3jga7jgZ/jgoHjgIHooajnpLrjgqrjg5bjgrjjgqfjgq/jg4jjgafjga/jgarjgYTjgZHjgozjganjgIFPYmplY3QzRCDjgpLntpnmib/jgZfjgaYgU2NlbmUg44Gr5oqV5YWl44Gn44GN44KL44KI44GG44Gr44GZ44KL44CCXG5jbGFzcyBWUk1FeHByZXNzaW9uIGV4dGVuZHMgVEhSRUUuT2JqZWN0M0Qge1xuICAgIC8qKlxuICAgICAqIEEgdmFsdWUgcmVwcmVzZW50cyBob3cgbXVjaCBpdCBzaG91bGQgb3ZlcnJpZGUgYmxpbmsgZXhwcmVzc2lvbnMuXG4gICAgICogYDAuMGAgPT0gbm8gb3ZlcnJpZGUgYXQgYWxsLCBgMS4wYCA9PSBjb21wbGV0ZWx5IGJsb2NrIHRoZSBleHByZXNzaW9ucy5cbiAgICAgKi9cbiAgICBnZXQgb3ZlcnJpZGVCbGlua0Ftb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMub3ZlcnJpZGVCbGluayA9PT0gJ2Jsb2NrJykge1xuICAgICAgICAgICAgcmV0dXJuIDAuMCA8IHRoaXMud2VpZ2h0ID8gMS4wIDogMC4wO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMub3ZlcnJpZGVCbGluayA9PT0gJ2JsZW5kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2VpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDAuMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHZhbHVlIHJlcHJlc2VudHMgaG93IG11Y2ggaXQgc2hvdWxkIG92ZXJyaWRlIGxvb2tBdCBleHByZXNzaW9ucy5cbiAgICAgKiBgMC4wYCA9PSBubyBvdmVycmlkZSBhdCBhbGwsIGAxLjBgID09IGNvbXBsZXRlbHkgYmxvY2sgdGhlIGV4cHJlc3Npb25zLlxuICAgICAqL1xuICAgIGdldCBvdmVycmlkZUxvb2tBdEFtb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMub3ZlcnJpZGVMb29rQXQgPT09ICdibG9jaycpIHtcbiAgICAgICAgICAgIHJldHVybiAwLjAgPCB0aGlzLndlaWdodCA/IDEuMCA6IDAuMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLm92ZXJyaWRlTG9va0F0ID09PSAnYmxlbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53ZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMC4wO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgdmFsdWUgcmVwcmVzZW50cyBob3cgbXVjaCBpdCBzaG91bGQgb3ZlcnJpZGUgbW91dGggZXhwcmVzc2lvbnMuXG4gICAgICogYDAuMGAgPT0gbm8gb3ZlcnJpZGUgYXQgYWxsLCBgMS4wYCA9PSBjb21wbGV0ZWx5IGJsb2NrIHRoZSBleHByZXNzaW9ucy5cbiAgICAgKi9cbiAgICBnZXQgb3ZlcnJpZGVNb3V0aEFtb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMub3ZlcnJpZGVNb3V0aCA9PT0gJ2Jsb2NrJykge1xuICAgICAgICAgICAgcmV0dXJuIDAuMCA8IHRoaXMud2VpZ2h0ID8gMS4wIDogMC4wO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMub3ZlcnJpZGVNb3V0aCA9PT0gJ2JsZW5kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2VpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDAuMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihleHByZXNzaW9uTmFtZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGN1cnJlbnQgd2VpZ2h0IG9mIHRoZSBleHByZXNzaW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53ZWlnaHQgPSAwLjA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnRlcnByZXQgdmFsdWVzIGdyZWF0ZXIgdGhhbiAwLjUgYXMgMS4wLCBvcnRoZXJ3aXNlIDAuMC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaXNCaW5hcnkgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZnkgaG93IHRoZSBleHByZXNzaW9uIG92ZXJyaWRlcyBibGluayBleHByZXNzaW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub3ZlcnJpZGVCbGluayA9ICdub25lJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZnkgaG93IHRoZSBleHByZXNzaW9uIG92ZXJyaWRlcyBsb29rQXQgZXhwcmVzc2lvbnMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm92ZXJyaWRlTG9va0F0ID0gJ25vbmUnO1xuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmeSBob3cgdGhlIGV4cHJlc3Npb24gb3ZlcnJpZGVzIG1vdXRoIGV4cHJlc3Npb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vdmVycmlkZU1vdXRoID0gJ25vbmUnO1xuICAgICAgICB0aGlzLl9iaW5kcyA9IFtdO1xuICAgICAgICB0aGlzLm5hbWUgPSBgVlJNRXhwcmVzc2lvbl8ke2V4cHJlc3Npb25OYW1lfWA7XG4gICAgICAgIHRoaXMuZXhwcmVzc2lvbk5hbWUgPSBleHByZXNzaW9uTmFtZTtcbiAgICAgICAgLy8gdHJhdmVyc2Ug5pmC44Gu5pWR5riI5omL5q6144Go44GX44GmIE9iamVjdDNEIOOBp+OBr+OBquOBhOOBk+OBqOOCkuaYjuekuuOBl+OBpuOBiuOBj1xuICAgICAgICB0aGlzLnR5cGUgPSAnVlJNRXhwcmVzc2lvbic7XG4gICAgICAgIC8vIOihqOekuuebrueahOOBruOCquODluOCuOOCp+OCr+ODiOOBp+OBr+OBquOBhOOBruOBp+OAgeiyoOiNt+i7vea4m+OBruOBn+OCgeOBqyB2aXNpYmxlIOOCkiBmYWxzZSDjgavjgZfjgabjgYrjgY/jgIJcbiAgICAgICAgLy8g44GT44KM44Gr44KI44KK44CB44GT44Gu44Kk44Oz44K544K/44Oz44K544Gr5a++44GZ44KL5q+O44OV44Os44O844Og44GuIG1hdHJpeCDoh6rli5XoqIjnrpfjgpLnnIHnlaXjgafjgY3jgovjgIJcbiAgICAgICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxuICAgIGFkZEJpbmQoYmluZCkge1xuICAgICAgICB0aGlzLl9iaW5kcy5wdXNoKGJpbmQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBseSB3ZWlnaHQgdG8gZXZlcnkgYXNzaWduZWQgYmxlbmQgc2hhcGVzLlxuICAgICAqIFNob3VsZCBiZSBjYWxsZWQgZXZlcnkgZnJhbWUuXG4gICAgICovXG4gICAgYXBwbHlXZWlnaHQob3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGxldCBhY3R1YWxXZWlnaHQgPSB0aGlzLmlzQmluYXJ5ID8gKHRoaXMud2VpZ2h0IDw9IDAuNSA/IDAuMCA6IDEuMCkgOiB0aGlzLndlaWdodDtcbiAgICAgICAgYWN0dWFsV2VpZ2h0ICo9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tdWx0aXBsaWVyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAxLjA7XG4gICAgICAgIHRoaXMuX2JpbmRzLmZvckVhY2goKGJpbmQpID0+IGJpbmQuYXBwbHlXZWlnaHQoYWN0dWFsV2VpZ2h0KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFyIHByZXZpb3VzbHkgYXNzaWduZWQgYmxlbmQgc2hhcGVzLlxuICAgICAqL1xuICAgIGNsZWFyQXBwbGllZFdlaWdodCgpIHtcbiAgICAgICAgdGhpcy5fYmluZHMuZm9yRWFjaCgoYmluZCkgPT4gYmluZC5jbGVhckFwcGxpZWRXZWlnaHQoKSk7XG4gICAgfVxufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbmZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cblxuZnVuY3Rpb24gZXh0cmFjdFByaW1pdGl2ZXNJbnRlcm5hbChnbHRmLCBub2RlSW5kZXgsIG5vZGUpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IGpzb24gPSBnbHRmLnBhcnNlci5qc29uO1xuICAgIC8qKlxuICAgICAqIExldCdzIGxpc3QgdXAgZXZlcnkgcG9zc2libGUgcGF0dGVybnMgdGhhdCBwYXJzZWQgZ2x0ZiBub2RlcyB3aXRoIGEgbWVzaCBjYW4gaGF2ZSwsLFxuICAgICAqXG4gICAgICogXCIqXCIgaW5kaWNhdGVzIHRoYXQgdGhvc2UgbWVzaGVzIHNob3VsZCBiZSBsaXN0ZWQgdXAgdXNpbmcgdGhpcyBmdW5jdGlvblxuICAgICAqXG4gICAgICogIyMjIEEgbm9kZSB3aXRoIGEgKG1lc2gsIGEgc2lnbmxlIHByaW1pdGl2ZSlcbiAgICAgKlxuICAgICAqIC0gYFRIUkVFLk1lc2hgOiBUaGUgb25seSBwcmltaXRpdmUgb2YgdGhlIG1lc2ggKlxuICAgICAqXG4gICAgICogIyMjIEEgbm9kZSB3aXRoIGEgKG1lc2gsIG11bHRpcGxlIHByaW1pdGl2ZXMpXG4gICAgICpcbiAgICAgKiAtIGBUSFJFRS5Hcm91cGA6IFRoZSByb290IG9mIHRoZSBtZXNoXG4gICAgICogICAtIGBUSFJFRS5NZXNoYDogQSBwcmltaXRpdmUgb2YgdGhlIG1lc2ggKlxuICAgICAqICAgLSBgVEhSRUUuTWVzaGA6IEEgcHJpbWl0aXZlIG9mIHRoZSBtZXNoICgyKSAqXG4gICAgICpcbiAgICAgKiAjIyMgQSBub2RlIHdpdGggYSAobWVzaCwgbXVsdGlwbGUgcHJpbWl0aXZlcykgQU5EIChhIGNoaWxkIHdpdGggYSBtZXNoLCBhIHNpbmdsZSBwcmltaXRpdmUpXG4gICAgICpcbiAgICAgKiAtIGBUSFJFRS5Hcm91cGA6IFRoZSByb290IG9mIHRoZSBtZXNoXG4gICAgICogICAtIGBUSFJFRS5NZXNoYDogQSBwcmltaXRpdmUgb2YgdGhlIG1lc2ggKlxuICAgICAqICAgLSBgVEhSRUUuTWVzaGA6IEEgcHJpbWl0aXZlIG9mIHRoZSBtZXNoICgyKSAqXG4gICAgICogICAtIGBUSFJFRS5NZXNoYDogQSBwcmltaXRpdmUgb2YgYSBNRVNIIE9GIFRIRSBDSElMRFxuICAgICAqXG4gICAgICogIyMjIEEgbm9kZSB3aXRoIGEgKG1lc2gsIG11bHRpcGxlIHByaW1pdGl2ZXMpIEFORCAoYSBjaGlsZCB3aXRoIGEgbWVzaCwgbXVsdGlwbGUgcHJpbWl0aXZlcylcbiAgICAgKlxuICAgICAqIC0gYFRIUkVFLkdyb3VwYDogVGhlIHJvb3Qgb2YgdGhlIG1lc2hcbiAgICAgKiAgIC0gYFRIUkVFLk1lc2hgOiBBIHByaW1pdGl2ZSBvZiB0aGUgbWVzaCAqXG4gICAgICogICAtIGBUSFJFRS5NZXNoYDogQSBwcmltaXRpdmUgb2YgdGhlIG1lc2ggKDIpICpcbiAgICAgKiAgIC0gYFRIUkVFLkdyb3VwYDogVGhlIHJvb3Qgb2YgYSBNRVNIIE9GIFRIRSBDSElMRFxuICAgICAqICAgICAtIGBUSFJFRS5NZXNoYDogQSBwcmltaXRpdmUgb2YgdGhlIG1lc2ggb2YgdGhlIGNoaWxkXG4gICAgICogICAgIC0gYFRIUkVFLk1lc2hgOiBBIHByaW1pdGl2ZSBvZiB0aGUgbWVzaCBvZiB0aGUgY2hpbGQgKDIpXG4gICAgICpcbiAgICAgKiAjIyMgQSBub2RlIHdpdGggYSAobWVzaCwgbXVsdGlwbGUgcHJpbWl0aXZlcykgQlVUIHRoZSBub2RlIGlzIGEgYm9uZVxuICAgICAqXG4gICAgICogLSBgVEhSRUUuQm9uZWA6IFRoZSByb290IG9mIHRoZSBub2RlLCBhcyBhIGJvbmVcbiAgICAgKiAgIC0gYFRIUkVFLkdyb3VwYDogVGhlIHJvb3Qgb2YgdGhlIG1lc2hcbiAgICAgKiAgICAgLSBgVEhSRUUuTWVzaGA6IEEgcHJpbWl0aXZlIG9mIHRoZSBtZXNoICpcbiAgICAgKiAgICAgLSBgVEhSRUUuTWVzaGA6IEEgcHJpbWl0aXZlIG9mIHRoZSBtZXNoICgyKSAqXG4gICAgICpcbiAgICAgKiAjIyMgQSBub2RlIHdpdGggYSAobWVzaCwgbXVsdGlwbGUgcHJpbWl0aXZlcykgQU5EIChhIGNoaWxkIHdpdGggYSBtZXNoLCBtdWx0aXBsZSBwcmltaXRpdmVzKSBCVVQgdGhlIG5vZGUgaXMgYSBib25lXG4gICAgICpcbiAgICAgKiAtIGBUSFJFRS5Cb25lYDogVGhlIHJvb3Qgb2YgdGhlIG5vZGUsIGFzIGEgYm9uZVxuICAgICAqICAgLSBgVEhSRUUuR3JvdXBgOiBUaGUgcm9vdCBvZiB0aGUgbWVzaFxuICAgICAqICAgICAtIGBUSFJFRS5NZXNoYDogQSBwcmltaXRpdmUgb2YgdGhlIG1lc2ggKlxuICAgICAqICAgICAtIGBUSFJFRS5NZXNoYDogQSBwcmltaXRpdmUgb2YgdGhlIG1lc2ggKDIpICpcbiAgICAgKiAgIC0gYFRIUkVFLkdyb3VwYDogVGhlIHJvb3Qgb2YgYSBNRVNIIE9GIFRIRSBDSElMRFxuICAgICAqICAgICAtIGBUSFJFRS5NZXNoYDogQSBwcmltaXRpdmUgb2YgdGhlIG1lc2ggb2YgdGhlIGNoaWxkXG4gICAgICogICAgIC0gYFRIUkVFLk1lc2hgOiBBIHByaW1pdGl2ZSBvZiB0aGUgbWVzaCBvZiB0aGUgY2hpbGQgKDIpXG4gICAgICpcbiAgICAgKiAuLi5JIHdpbGwgdGFrZSBhIHN0cmF0ZWd5IHRoYXQgdHJhdmVyc2VzIHRoZSByb290IG9mIHRoZSBub2RlIGFuZCB0YWtlIGZpcnN0IChwcmltaXRpdmVDb3VudCkgbWVzaGVzLlxuICAgICAqL1xuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBub2RlIGhhcyBhIG1lc2hcbiAgICBjb25zdCBzY2hlbWFOb2RlID0gKF9hID0ganNvbi5ub2RlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW25vZGVJbmRleF07XG4gICAgaWYgKHNjaGVtYU5vZGUgPT0gbnVsbCkge1xuICAgICAgICBjb25zb2xlLndhcm4oYGV4dHJhY3RQcmltaXRpdmVzSW50ZXJuYWw6IEF0dGVtcHQgdG8gdXNlIG5vZGVzWyR7bm9kZUluZGV4fV0gb2YgZ2xURiBidXQgdGhlIG5vZGUgZG9lc24ndCBleGlzdGApO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbWVzaEluZGV4ID0gc2NoZW1hTm9kZS5tZXNoO1xuICAgIGlmIChtZXNoSW5kZXggPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gSG93IG1hbnkgcHJpbWl0aXZlcyB0aGUgbWVzaCBoYXM/XG4gICAgY29uc3Qgc2NoZW1hTWVzaCA9IChfYiA9IGpzb24ubWVzaGVzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbbWVzaEluZGV4XTtcbiAgICBpZiAoc2NoZW1hTWVzaCA9PSBudWxsKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgZXh0cmFjdFByaW1pdGl2ZXNJbnRlcm5hbDogQXR0ZW1wdCB0byB1c2UgbWVzaGVzWyR7bWVzaEluZGV4fV0gb2YgZ2xURiBidXQgdGhlIG1lc2ggZG9lc24ndCBleGlzdGApO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcHJpbWl0aXZlQ291bnQgPSBzY2hlbWFNZXNoLnByaW1pdGl2ZXMubGVuZ3RoO1xuICAgIC8vIFRyYXZlcnNlIHRoZSBub2RlIGFuZCB0YWtlIGZpcnN0IChwcmltaXRpdmVDb3VudCkgbWVzaGVzXG4gICAgY29uc3QgcHJpbWl0aXZlcyA9IFtdO1xuICAgIG5vZGUudHJhdmVyc2UoKG9iamVjdCkgPT4ge1xuICAgICAgICBpZiAocHJpbWl0aXZlcy5sZW5ndGggPCBwcmltaXRpdmVDb3VudCkge1xuICAgICAgICAgICAgaWYgKG9iamVjdC5pc01lc2gpIHtcbiAgICAgICAgICAgICAgICBwcmltaXRpdmVzLnB1c2gob2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwcmltaXRpdmVzO1xufVxuLyoqXG4gKiBFeHRyYWN0IHByaW1pdGl2ZXMgKCBgVEhSRUUuTWVzaFtdYCApIG9mIGEgbm9kZSBmcm9tIGEgbG9hZGVkIEdMVEYuXG4gKiBUaGUgbWFpbiBwdXJwb3NlIG9mIHRoaXMgZnVuY3Rpb24gaXMgdG8gZGlzdGluZ3Vpc2ggcHJpbWl0aXZlcyBhbmQgY2hpbGRyZW4gZnJvbSBhIG5vZGUgdGhhdCBoYXMgYm90aCBtZXNoZXMgYW5kIGNoaWxkcmVuLlxuICpcbiAqIEl0IHV0aWxpemVzIHRoZSBiZWhhdmlvciB0aGF0IEdMVEZMb2FkZXIgYWRkcyBtZXNoIHByaW1pdGl2ZXMgdG8gdGhlIG5vZGUgb2JqZWN0ICggYFRIUkVFLkdyb3VwYCApIGZpcnN0IHRoZW4gYWRkcyBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIGdsdGYgQSBHTFRGIG9iamVjdCB0YWtlbiBmcm9tIEdMVEZMb2FkZXJcbiAqIEBwYXJhbSBub2RlSW5kZXggVGhlIGluZGV4IG9mIHRoZSBub2RlXG4gKi9cbmZ1bmN0aW9uIGdsdGZFeHRyYWN0UHJpbWl0aXZlc0Zyb21Ob2RlKGdsdGYsIG5vZGVJbmRleCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB5aWVsZCBnbHRmLnBhcnNlci5nZXREZXBlbmRlbmN5KCdub2RlJywgbm9kZUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RQcmltaXRpdmVzSW50ZXJuYWwoZ2x0Ziwgbm9kZUluZGV4LCBub2RlKTtcbiAgICB9KTtcbn1cbi8qKlxuICogRXh0cmFjdCBwcmltaXRpdmVzICggYFRIUkVFLk1lc2hbXWAgKSBvZiBub2RlcyBmcm9tIGEgbG9hZGVkIEdMVEYuXG4gKiBTZWUge0BsaW5rIGdsdGZFeHRyYWN0UHJpbWl0aXZlc0Zyb21Ob2RlfSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEl0IHJldHVybnMgYSBtYXAgZnJvbSBub2RlIGluZGV4IHRvIGV4dHJhY3Rpb24gcmVzdWx0LlxuICogSWYgYSBub2RlIGRvZXMgbm90IGhhdmUgYSBtZXNoLCB0aGUgZW50cnkgZm9yIHRoZSBub2RlIHdpbGwgbm90IGJlIHB1dCBpbiB0aGUgcmV0dXJuaW5nIG1hcC5cbiAqXG4gKiBAcGFyYW0gZ2x0ZiBBIEdMVEYgb2JqZWN0IHRha2VuIGZyb20gR0xURkxvYWRlclxuICovXG5mdW5jdGlvbiBnbHRmRXh0cmFjdFByaW1pdGl2ZXNGcm9tTm9kZXMoZ2x0Zikge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IG5vZGVzID0geWllbGQgZ2x0Zi5wYXJzZXIuZ2V0RGVwZW5kZW5jaWVzKCdub2RlJyk7XG4gICAgICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgbm9kZXMuZm9yRWFjaCgobm9kZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGV4dHJhY3RQcmltaXRpdmVzSW50ZXJuYWwoZ2x0ZiwgaW5kZXgsIG5vZGUpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbWFwLnNldChpbmRleCwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfSk7XG59XG5cbi8qKlxuICogR2V0IGEgbWF0ZXJpYWwgZGVmaW5pdGlvbiBpbmRleCBvZiBnbFRGIGZyb20gYXNzb2NpYXRlZCBtYXRlcmlhbC5cbiAqIEl0J3MgYmFzaWNhbGx5IGEgY29tYXQgY29kZSBiZXR3ZWVuIFRocmVlLmpzIHIxMzMgb3IgYWJvdmUgYW5kIHByZXZpb3VzIHZlcnNpb25zLlxuICogQHBhcmFtIHBhcnNlciBHTFRGUGFyc2VyXG4gKiBAcGFyYW0gbWF0ZXJpYWwgQSBtYXRlcmlhbCBvZiBnbHRmXG4gKiBAcmV0dXJucyBNYXRlcmlhbCBkZWZpbml0aW9uIGluZGV4IG9mIGdsVEZcbiAqL1xuZnVuY3Rpb24gZ2x0ZkdldEFzc29jaWF0ZWRNYXRlcmlhbEluZGV4KHBhcnNlciwgbWF0ZXJpYWwpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IHRocmVlUmV2aXNpb24gPSBwYXJzZUludChUSFJFRS5SRVZJU0lPTiwgMTApO1xuICAgIGxldCBpbmRleCA9IG51bGw7XG4gICAgaWYgKHRocmVlUmV2aXNpb24gPj0gMTMzKSB7XG4gICAgICAgIGluZGV4ID0gKF9iID0gKF9hID0gcGFyc2VyLmFzc29jaWF0aW9ucy5nZXQobWF0ZXJpYWwpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWF0ZXJpYWxzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBudWxsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgYXNzb2NpYXRpb25zID0gcGFyc2VyLmFzc29jaWF0aW9ucztcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gYXNzb2NpYXRpb25zLmdldChtYXRlcmlhbCk7XG4gICAgICAgIGlmICgocmVmZXJlbmNlID09PSBudWxsIHx8IHJlZmVyZW5jZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVmZXJlbmNlLnR5cGUpID09PSAnbWF0ZXJpYWxzJykge1xuICAgICAgICAgICAgaW5kZXggPSByZWZlcmVuY2UuaW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbmNvbnN0IFZSTUV4cHJlc3Npb25QcmVzZXROYW1lID0ge1xuICAgIEFhOiAnYWEnLFxuICAgIEloOiAnaWgnLFxuICAgIE91OiAnb3UnLFxuICAgIEVlOiAnZWUnLFxuICAgIE9oOiAnb2gnLFxuICAgIEJsaW5rOiAnYmxpbmsnLFxuICAgIEhhcHB5OiAnaGFwcHknLFxuICAgIEFuZ3J5OiAnYW5ncnknLFxuICAgIFNhZDogJ3NhZCcsXG4gICAgUmVsYXhlZDogJ3JlbGF4ZWQnLFxuICAgIExvb2tVcDogJ2xvb2tVcCcsXG4gICAgU3VycHJpc2VkOiAnc3VycHJpc2VkJyxcbiAgICBMb29rRG93bjogJ2xvb2tEb3duJyxcbiAgICBMb29rTGVmdDogJ2xvb2tMZWZ0JyxcbiAgICBMb29rUmlnaHQ6ICdsb29rUmlnaHQnLFxuICAgIEJsaW5rTGVmdDogJ2JsaW5rTGVmdCcsXG4gICAgQmxpbmtSaWdodDogJ2JsaW5rUmlnaHQnLFxuICAgIE5ldXRyYWw6ICduZXV0cmFsJyxcbn07XG5cbi8qKlxuICogQ2xhbXAgdGhlIGlucHV0IHZhbHVlIHdpdGhpbiBbMC4wIC0gMS4wXS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIGlucHV0IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHNhdHVyYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKHZhbHVlLCAxLjApLCAwLjApO1xufVxuXG5jbGFzcyBWUk1FeHByZXNzaW9uTWFuYWdlciB7XG4gICAgZ2V0IGV4cHJlc3Npb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhwcmVzc2lvbnMuY29uY2F0KCk7XG4gICAgfVxuICAgIGdldCBleHByZXNzaW9uTWFwKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fZXhwcmVzc2lvbk1hcCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgbWFwIGZyb20gbmFtZSB0byBleHByZXNzaW9uLCBidXQgZXhjbHVkaW5nIGN1c3RvbSBleHByZXNzaW9ucy5cbiAgICAgKi9cbiAgICBnZXQgcHJlc2V0RXhwcmVzc2lvbk1hcCgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICAgIGNvbnN0IHByZXNldE5hbWVTZXQgPSBuZXcgU2V0KE9iamVjdC52YWx1ZXMoVlJNRXhwcmVzc2lvblByZXNldE5hbWUpKTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5fZXhwcmVzc2lvbk1hcCkuZm9yRWFjaCgoW25hbWUsIGV4cHJlc3Npb25dKSA9PiB7XG4gICAgICAgICAgICBpZiAocHJlc2V0TmFtZVNldC5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbbmFtZV0gPSBleHByZXNzaW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBtYXAgZnJvbSBuYW1lIHRvIGV4cHJlc3Npb24sIGJ1dCBleGNsdWRpbmcgcHJlc2V0IGV4cHJlc3Npb25zLlxuICAgICAqL1xuICAgIGdldCBjdXN0b21FeHByZXNzaW9uTWFwKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICAgICAgY29uc3QgcHJlc2V0TmFtZVNldCA9IG5ldyBTZXQoT2JqZWN0LnZhbHVlcyhWUk1FeHByZXNzaW9uUHJlc2V0TmFtZSkpO1xuICAgICAgICBPYmplY3QuZW50cmllcyh0aGlzLl9leHByZXNzaW9uTWFwKS5mb3JFYWNoKChbbmFtZSwgZXhwcmVzc2lvbl0pID0+IHtcbiAgICAgICAgICAgIGlmICghcHJlc2V0TmFtZVNldC5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbbmFtZV0gPSBleHByZXNzaW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHtAbGluayBWUk1FeHByZXNzaW9uTWFuYWdlcn0uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHNldCBvZiBuYW1lIG9yIHByZXNldCBuYW1lIG9mIGV4cHJlc3Npb25zIHRoYXQgd2lsbCBiZSBvdmVycmlkZGVuIGJ5IHtAbGluayBWUk1FeHByZXNzaW9uLm92ZXJyaWRlQmxpbmt9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ibGlua0V4cHJlc3Npb25OYW1lcyA9IFsnYmxpbmsnLCAnYmxpbmtMZWZ0JywgJ2JsaW5rUmlnaHQnXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgc2V0IG9mIG5hbWUgb3IgcHJlc2V0IG5hbWUgb2YgZXhwcmVzc2lvbnMgdGhhdCB3aWxsIGJlIG92ZXJyaWRkZW4gYnkge0BsaW5rIFZSTUV4cHJlc3Npb24ub3ZlcnJpZGVMb29rQXR9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sb29rQXRFeHByZXNzaW9uTmFtZXMgPSBbJ2xvb2tMZWZ0JywgJ2xvb2tSaWdodCcsICdsb29rVXAnLCAnbG9va0Rvd24nXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgc2V0IG9mIG5hbWUgb3IgcHJlc2V0IG5hbWUgb2YgZXhwcmVzc2lvbnMgdGhhdCB3aWxsIGJlIG92ZXJyaWRkZW4gYnkge0BsaW5rIFZSTUV4cHJlc3Npb24ub3ZlcnJpZGVNb3V0aH0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1vdXRoRXhwcmVzc2lvbk5hbWVzID0gWydhYScsICdlZScsICdpaCcsICdvaCcsICdvdSddO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBzZXQgb2Yge0BsaW5rIFZSTUV4cHJlc3Npb259LlxuICAgICAgICAgKiBXaGVuIHlvdSB3YW50IHRvIHJlZ2lzdGVyIGV4cHJlc3Npb25zLCB1c2Uge0BsaW5rIHJlZ2lzdGVyRXhwcmVzc2lvbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2V4cHJlc3Npb25zID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIG1hcCBmcm9tIG5hbWUgdG8gZXhwcmVzc2lvbi5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2V4cHJlc3Npb25NYXAgPSB7fTtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3B5IHRoZSBnaXZlbiB7QGxpbmsgVlJNRXhwcmVzc2lvbk1hbmFnZXJ9IGludG8gdGhpcyBvbmUuXG4gICAgICogQHBhcmFtIHNvdXJjZSBUaGUge0BsaW5rIFZSTUV4cHJlc3Npb25NYW5hZ2VyfSB5b3Ugd2FudCB0byBjb3B5XG4gICAgICogQHJldHVybnMgdGhpc1xuICAgICAqL1xuICAgIGNvcHkoc291cmNlKSB7XG4gICAgICAgIC8vIGZpcnN0IHVucmVnaXN0ZXIgYWxsIHRoZSBleHByZXNzaW9uIGl0IGhhc1xuICAgICAgICBjb25zdCBleHByZXNzaW9ucyA9IHRoaXMuX2V4cHJlc3Npb25zLmNvbmNhdCgpO1xuICAgICAgICBleHByZXNzaW9ucy5mb3JFYWNoKChleHByZXNzaW9uKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVucmVnaXN0ZXJFeHByZXNzaW9uKGV4cHJlc3Npb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gdGhlbiByZWdpc3RlciBhbGwgdGhlIGV4cHJlc3Npb24gb2YgdGhlIHNvdXJjZVxuICAgICAgICBzb3VyY2UuX2V4cHJlc3Npb25zLmZvckVhY2goKGV4cHJlc3Npb24pID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJFeHByZXNzaW9uKGV4cHJlc3Npb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gY29weSByZW1haW5pbmcgbWVtYmVyc1xuICAgICAgICB0aGlzLmJsaW5rRXhwcmVzc2lvbk5hbWVzID0gc291cmNlLmJsaW5rRXhwcmVzc2lvbk5hbWVzLmNvbmNhdCgpO1xuICAgICAgICB0aGlzLmxvb2tBdEV4cHJlc3Npb25OYW1lcyA9IHNvdXJjZS5sb29rQXRFeHByZXNzaW9uTmFtZXMuY29uY2F0KCk7XG4gICAgICAgIHRoaXMubW91dGhFeHByZXNzaW9uTmFtZXMgPSBzb3VyY2UubW91dGhFeHByZXNzaW9uTmFtZXMuY29uY2F0KCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgY2xvbmUgb2YgdGhpcyB7QGxpbmsgVlJNRXhwcmVzc2lvbk1hbmFnZXJ9LlxuICAgICAqIEByZXR1cm5zIENvcGllZCB7QGxpbmsgVlJNRXhwcmVzc2lvbk1hbmFnZXJ9XG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVlJNRXhwcmVzc2lvbk1hbmFnZXIoKS5jb3B5KHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSByZWdpc3RlcmVkIGV4cHJlc3Npb24uXG4gICAgICogSWYgaXQgY2Fubm90IGZpbmQgYW4gZXhwcmVzc2lvbiwgaXQgd2lsbCByZXR1cm4gYG51bGxgIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSBOYW1lIG9yIHByZXNldCBuYW1lIG9mIHRoZSBleHByZXNzaW9uXG4gICAgICovXG4gICAgZ2V0RXhwcmVzc2lvbihuYW1lKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuX2V4cHJlc3Npb25NYXBbbmFtZV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGFuIGV4cHJlc3Npb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXhwcmVzc2lvbiB7QGxpbmsgVlJNRXhwcmVzc2lvbn0gdGhhdCBkZXNjcmliZXMgdGhlIGV4cHJlc3Npb25cbiAgICAgKi9cbiAgICByZWdpc3RlckV4cHJlc3Npb24oZXhwcmVzc2lvbikge1xuICAgICAgICB0aGlzLl9leHByZXNzaW9ucy5wdXNoKGV4cHJlc3Npb24pO1xuICAgICAgICB0aGlzLl9leHByZXNzaW9uTWFwW2V4cHJlc3Npb24uZXhwcmVzc2lvbk5hbWVdID0gZXhwcmVzc2lvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVW5yZWdpc3RlciBhbiBleHByZXNzaW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV4cHJlc3Npb24gVGhlIGV4cHJlc3Npb24geW91IHdhbnQgdG8gdW5yZWdpc3RlclxuICAgICAqL1xuICAgIHVucmVnaXN0ZXJFeHByZXNzaW9uKGV4cHJlc3Npb24pIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9leHByZXNzaW9ucy5pbmRleE9mKGV4cHJlc3Npb24pO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1ZSTUV4cHJlc3Npb25NYW5hZ2VyOiBUaGUgc3BlY2lmaWVkIGV4cHJlc3Npb25zIGlzIG5vdCByZWdpc3RlcmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2V4cHJlc3Npb25NYXBbZXhwcmVzc2lvbi5leHByZXNzaW9uTmFtZV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCB3ZWlnaHQgb2YgdGhlIHNwZWNpZmllZCBleHByZXNzaW9uLlxuICAgICAqIElmIGl0IGRvZXNuJ3QgaGF2ZSBhbiBleHByZXNzaW9uIG9mIGdpdmVuIG5hbWUsIGl0IHdpbGwgcmV0dXJuIGBudWxsYCBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZXhwcmVzc2lvblxuICAgICAqL1xuICAgIGdldFZhbHVlKG5hbWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBleHByZXNzaW9uID0gdGhpcy5nZXRFeHByZXNzaW9uKG5hbWUpO1xuICAgICAgICByZXR1cm4gKF9hID0gZXhwcmVzc2lvbiA9PT0gbnVsbCB8fCBleHByZXNzaW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBleHByZXNzaW9uLndlaWdodCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGEgd2VpZ2h0IHRvIHRoZSBzcGVjaWZpZWQgZXhwcmVzc2lvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGV4cHJlc3Npb25cbiAgICAgKiBAcGFyYW0gd2VpZ2h0IFdlaWdodFxuICAgICAqL1xuICAgIHNldFZhbHVlKG5hbWUsIHdlaWdodCkge1xuICAgICAgICBjb25zdCBleHByZXNzaW9uID0gdGhpcy5nZXRFeHByZXNzaW9uKG5hbWUpO1xuICAgICAgICBpZiAoZXhwcmVzc2lvbikge1xuICAgICAgICAgICAgZXhwcmVzc2lvbi53ZWlnaHQgPSBzYXR1cmF0ZSh3ZWlnaHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIHRyYWNrIG5hbWUgb2Ygc3BlY2lmaWVkIGV4cHJlc3Npb24uXG4gICAgICogVGhpcyB0cmFjayBuYW1lIGlzIG5lZWRlZCB0byBtYW5pcHVsYXRlIGl0cyBleHByZXNzaW9uIHZpYSBrZXlmcmFtZSBhbmltYXRpb25zLlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgTWFuaXB1bGF0ZSBhbiBleHByZXNzaW9uIHVzaW5nIGtleWZyYW1lIGFuaW1hdGlvblxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgdHJhY2tOYW1lID0gdnJtLmV4cHJlc3Npb25NYW5hZ2VyLmdldEV4cHJlc3Npb25UcmFja05hbWUoICdibGluaycgKTtcbiAgICAgKiBjb25zdCB0cmFjayA9IG5ldyBUSFJFRS5OdW1iZXJLZXlmcmFtZVRyYWNrKFxuICAgICAqICAgbmFtZSxcbiAgICAgKiAgIFsgMC4wLCAwLjUsIDEuMCBdLCAvLyB0aW1lc1xuICAgICAqICAgWyAwLjAsIDEuMCwgMC4wIF0gLy8gdmFsdWVzXG4gICAgICogKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IGNsaXAgPSBuZXcgVEhSRUUuQW5pbWF0aW9uQ2xpcChcbiAgICAgKiAgICdibGluaycsIC8vIG5hbWVcbiAgICAgKiAgIDEuMCwgLy8gZHVyYXRpb25cbiAgICAgKiAgIFsgdHJhY2sgXSAvLyB0cmFja3NcbiAgICAgKiApO1xuICAgICAqXG4gICAgICogY29uc3QgbWl4ZXIgPSBuZXcgVEhSRUUuQW5pbWF0aW9uTWl4ZXIoIHZybS5zY2VuZSApO1xuICAgICAqIGNvbnN0IGFjdGlvbiA9IG1peGVyLmNsaXBBY3Rpb24oIGNsaXAgKTtcbiAgICAgKiBhY3Rpb24ucGxheSgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZXhwcmVzc2lvblxuICAgICAqL1xuICAgIGdldEV4cHJlc3Npb25UcmFja05hbWUobmFtZSkge1xuICAgICAgICBjb25zdCBleHByZXNzaW9uID0gdGhpcy5nZXRFeHByZXNzaW9uKG5hbWUpO1xuICAgICAgICByZXR1cm4gZXhwcmVzc2lvbiA/IGAke2V4cHJlc3Npb24ubmFtZX0ud2VpZ2h0YCA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBldmVyeSBleHByZXNzaW9ucy5cbiAgICAgKi9cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIC8vIHNlZSBob3cgbXVjaCB3ZSBzaG91bGQgb3ZlcnJpZGUgY2VydGFpbiBleHByZXNzaW9uc1xuICAgICAgICBjb25zdCB3ZWlnaHRNdWx0aXBsaWVycyA9IHRoaXMuX2NhbGN1bGF0ZVdlaWdodE11bHRpcGxpZXJzKCk7XG4gICAgICAgIC8vIHJlc2V0IGV4cHJlc3Npb24gYmluZHMgZmlyc3RcbiAgICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuZm9yRWFjaCgoZXhwcmVzc2lvbikgPT4ge1xuICAgICAgICAgICAgZXhwcmVzc2lvbi5jbGVhckFwcGxpZWRXZWlnaHQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHRoZW4gYXBwbHkgYmluZHNcbiAgICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuZm9yRWFjaCgoZXhwcmVzc2lvbikgPT4ge1xuICAgICAgICAgICAgbGV0IG11bHRpcGxpZXIgPSAxLjA7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gZXhwcmVzc2lvbi5leHByZXNzaW9uTmFtZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmJsaW5rRXhwcmVzc2lvbk5hbWVzLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbXVsdGlwbGllciAqPSB3ZWlnaHRNdWx0aXBsaWVycy5ibGluaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmxvb2tBdEV4cHJlc3Npb25OYW1lcy5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIG11bHRpcGxpZXIgKj0gd2VpZ2h0TXVsdGlwbGllcnMubG9va0F0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubW91dGhFeHByZXNzaW9uTmFtZXMuaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBtdWx0aXBsaWVyICo9IHdlaWdodE11bHRpcGxpZXJzLm1vdXRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhwcmVzc2lvbi5hcHBseVdlaWdodCh7IG11bHRpcGxpZXIgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgc3VtIG9mIG92ZXJyaWRlIGFtb3VudHMgdG8gc2VlIGhvdyBtdWNoIHdlIHNob3VsZCBtdWx0aXBseSB3ZWlnaHRzIG9mIGNlcnRhaW4gZXhwcmVzc2lvbnMuXG4gICAgICovXG4gICAgX2NhbGN1bGF0ZVdlaWdodE11bHRpcGxpZXJzKCkge1xuICAgICAgICBsZXQgYmxpbmsgPSAxLjA7XG4gICAgICAgIGxldCBsb29rQXQgPSAxLjA7XG4gICAgICAgIGxldCBtb3V0aCA9IDEuMDtcbiAgICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuZm9yRWFjaCgoZXhwcmVzc2lvbikgPT4ge1xuICAgICAgICAgICAgYmxpbmsgLT0gZXhwcmVzc2lvbi5vdmVycmlkZUJsaW5rQW1vdW50O1xuICAgICAgICAgICAgbG9va0F0IC09IGV4cHJlc3Npb24ub3ZlcnJpZGVMb29rQXRBbW91bnQ7XG4gICAgICAgICAgICBtb3V0aCAtPSBleHByZXNzaW9uLm92ZXJyaWRlTW91dGhBbW91bnQ7XG4gICAgICAgIH0pO1xuICAgICAgICBibGluayA9IE1hdGgubWF4KDAuMCwgYmxpbmspO1xuICAgICAgICBsb29rQXQgPSBNYXRoLm1heCgwLjAsIGxvb2tBdCk7XG4gICAgICAgIG1vdXRoID0gTWF0aC5tYXgoMC4wLCBtb3V0aCk7XG4gICAgICAgIHJldHVybiB7IGJsaW5rLCBsb29rQXQsIG1vdXRoIH07XG4gICAgfVxufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbmNvbnN0IFZSTUV4cHJlc3Npb25NYXRlcmlhbENvbG9yVHlwZSA9IHtcbiAgICBDb2xvcjogJ2NvbG9yJyxcbiAgICBFbWlzc2lvbkNvbG9yOiAnZW1pc3Npb25Db2xvcicsXG4gICAgU2hhZGVDb2xvcjogJ3NoYWRlQ29sb3InLFxuICAgIE1hdGNhcENvbG9yOiAnbWF0Y2FwQ29sb3InLFxuICAgIFJpbUNvbG9yOiAncmltQ29sb3InLFxuICAgIE91dGxpbmVDb2xvcjogJ291dGxpbmVDb2xvcicsXG59O1xuY29uc3QgdjBFeHByZXNzaW9uTWF0ZXJpYWxDb2xvck1hcCA9IHtcbiAgICBfQ29sb3I6IFZSTUV4cHJlc3Npb25NYXRlcmlhbENvbG9yVHlwZS5Db2xvcixcbiAgICBfRW1pc3Npb25Db2xvcjogVlJNRXhwcmVzc2lvbk1hdGVyaWFsQ29sb3JUeXBlLkVtaXNzaW9uQ29sb3IsXG4gICAgX1NoYWRlQ29sb3I6IFZSTUV4cHJlc3Npb25NYXRlcmlhbENvbG9yVHlwZS5TaGFkZUNvbG9yLFxuICAgIF9SaW1Db2xvcjogVlJNRXhwcmVzc2lvbk1hdGVyaWFsQ29sb3JUeXBlLlJpbUNvbG9yLFxuICAgIF9PdXRsaW5lQ29sb3I6IFZSTUV4cHJlc3Npb25NYXRlcmlhbENvbG9yVHlwZS5PdXRsaW5lQ29sb3IsXG59O1xuXG5jb25zdCBfY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoKTtcbi8qKlxuICogQSBiaW5kIG9mIGV4cHJlc3Npb24gaW5mbHVlbmNlcyB0byBhIG1hdGVyaWFsIGNvbG9yLlxuICovXG5jbGFzcyBWUk1FeHByZXNzaW9uTWF0ZXJpYWxDb2xvckJpbmQge1xuICAgIGNvbnN0cnVjdG9yKHsgbWF0ZXJpYWwsIHR5cGUsIHRhcmdldFZhbHVlLCB9KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMudGFyZ2V0VmFsdWUgPSB0YXJnZXRWYWx1ZTtcbiAgICAgICAgLy8gaW5pdCBwcm9wZXJ0eSBuYW1lXG4gICAgICAgIGNvbnN0IHByb3BlcnR5TmFtZU1hcCA9IChfYSA9IE9iamVjdC5lbnRyaWVzKFZSTUV4cHJlc3Npb25NYXRlcmlhbENvbG9yQmluZC5fcHJvcGVydHlOYW1lTWFwTWFwKS5maW5kKChbZGlzdGluZ3Vpc2hlcl0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBtYXRlcmlhbFtkaXN0aW5ndWlzaGVyXSA9PT0gdHJ1ZTtcbiAgICAgICAgfSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVsxXTtcbiAgICAgICAgY29uc3QgcHJvcGVydHlOYW1lID0gKF9iID0gcHJvcGVydHlOYW1lTWFwID09PSBudWxsIHx8IHByb3BlcnR5TmFtZU1hcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvcGVydHlOYW1lTWFwW3R5cGVdKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBudWxsO1xuICAgICAgICBpZiAocHJvcGVydHlOYW1lID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgVHJpZWQgdG8gYWRkIGEgbWF0ZXJpYWwgY29sb3IgYmluZCB0byB0aGUgbWF0ZXJpYWwgJHsoX2MgPSBtYXRlcmlhbC5uYW1lKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAnKG5vIG5hbWUpJ30sIHRoZSB0eXBlICR7dHlwZX0gYnV0IHRoZSBtYXRlcmlhbCBvciB0aGUgdHlwZSBpcyBub3Qgc3VwcG9ydGVkLmApO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gbWF0ZXJpYWxbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IGluaXRpYWxWYWx1ZSA9IHRhcmdldC5jbG9uZSgpO1xuICAgICAgICAgICAgLy8g6LKg44Gu5YCk44KS5L+d5oyB44GZ44KL44Gf44KB44GrQ29sb3Iuc3Vi44KS5L2/44KP44Ga44Gr5beu5YiG44KS6KiI566X44GZ44KLXG4gICAgICAgICAgICBjb25zdCBkZWx0YVZhbHVlID0gbmV3IFRIUkVFLkNvbG9yKHRhcmdldFZhbHVlLnIgLSBpbml0aWFsVmFsdWUuciwgdGFyZ2V0VmFsdWUuZyAtIGluaXRpYWxWYWx1ZS5nLCB0YXJnZXRWYWx1ZS5iIC0gaW5pdGlhbFZhbHVlLmIpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lLFxuICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSxcbiAgICAgICAgICAgICAgICBkZWx0YVZhbHVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhcHBseVdlaWdodCh3ZWlnaHQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIHdhcm5pbmcgaXMgYWxyZWFkeSBlbWl0dGVkIGluIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBwcm9wZXJ0eU5hbWUsIGRlbHRhVmFsdWUgfSA9IHRoaXMuX3N0YXRlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLm1hdGVyaWFsW3Byb3BlcnR5TmFtZV07XG4gICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIFRPRE86IHdlIHNob3VsZCBraWNrIHRoaXMgYXQgYGFkZE1hdGVyaWFsVmFsdWVgXG4gICAgICAgIHRhcmdldC5hZGQoX2NvbG9yLmNvcHkoZGVsdGFWYWx1ZSkubXVsdGlwbHlTY2FsYXIod2VpZ2h0KSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5tYXRlcmlhbC5zaG91bGRBcHBseVVuaWZvcm1zID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRoaXMubWF0ZXJpYWwuc2hvdWxkQXBwbHlVbmlmb3JtcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXJBcHBsaWVkV2VpZ2h0KCkge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gd2FybmluZyBpcyBhbHJlYWR5IGVtaXR0ZWQgaW4gY29uc3RydWN0b3JcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHByb3BlcnR5TmFtZSwgaW5pdGlhbFZhbHVlIH0gPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5tYXRlcmlhbFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBUT0RPOiB3ZSBzaG91bGQga2ljayB0aGlzIGF0IGBhZGRNYXRlcmlhbFZhbHVlYFxuICAgICAgICB0YXJnZXQuY29weShpbml0aWFsVmFsdWUpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMubWF0ZXJpYWwuc2hvdWxkQXBwbHlVbmlmb3JtcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICB0aGlzLm1hdGVyaWFsLnNob3VsZEFwcGx5VW5pZm9ybXMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBNYXBwaW5nIG9mIHByb3BlcnR5IG5hbWVzIGZyb20gVlJNQy9tYXRlcmlhbENvbG9yQmluZHMudHlwZSB0byB0aHJlZS5qcy9NYXRlcmlhbC5cbiAqL1xuVlJNRXhwcmVzc2lvbk1hdGVyaWFsQ29sb3JCaW5kLl9wcm9wZXJ0eU5hbWVNYXBNYXAgPSB7XG4gICAgaXNNZXNoU3RhbmRhcmRNYXRlcmlhbDoge1xuICAgICAgICBjb2xvcjogJ2NvbG9yJyxcbiAgICAgICAgZW1pc3Npb25Db2xvcjogJ2VtaXNzaXZlJyxcbiAgICB9LFxuICAgIGlzTWVzaEJhc2ljTWF0ZXJpYWw6IHtcbiAgICAgICAgY29sb3I6ICdjb2xvcicsXG4gICAgfSxcbiAgICBpc01Ub29uTWF0ZXJpYWw6IHtcbiAgICAgICAgY29sb3I6ICdjb2xvcicsXG4gICAgICAgIGVtaXNzaW9uQ29sb3I6ICdlbWlzc2l2ZScsXG4gICAgICAgIG91dGxpbmVDb2xvcjogJ291dGxpbmVDb2xvckZhY3RvcicsXG4gICAgICAgIG1hdGNhcENvbG9yOiAnbWF0Y2FwRmFjdG9yJyxcbiAgICAgICAgcmltQ29sb3I6ICdwYXJhbWV0cmljUmltQ29sb3JGYWN0b3InLFxuICAgICAgICBzaGFkZUNvbG9yOiAnc2hhZGVDb2xvckZhY3RvcicsXG4gICAgfSxcbn07XG5cbi8qKlxuICogQSBiaW5kIG9mIHtAbGluayBWUk1FeHByZXNzaW9ufSBpbmZsdWVuY2VzIHRvIG1vcnBoIHRhcmdldHMuXG4gKi9cbmNsYXNzIFZSTUV4cHJlc3Npb25Nb3JwaFRhcmdldEJpbmQge1xuICAgIGNvbnN0cnVjdG9yKHsgcHJpbWl0aXZlcywgaW5kZXgsIHdlaWdodCwgfSkge1xuICAgICAgICB0aGlzLnByaW1pdGl2ZXMgPSBwcmltaXRpdmVzO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMud2VpZ2h0ID0gd2VpZ2h0O1xuICAgIH1cbiAgICBhcHBseVdlaWdodCh3ZWlnaHQpIHtcbiAgICAgICAgdGhpcy5wcmltaXRpdmVzLmZvckVhY2goKG1lc2gpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmICgoKF9hID0gbWVzaC5tb3JwaFRhcmdldEluZmx1ZW5jZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVt0aGlzLmluZGV4XSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG1lc2gubW9ycGhUYXJnZXRJbmZsdWVuY2VzW3RoaXMuaW5kZXhdICs9IHRoaXMud2VpZ2h0ICogd2VpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2xlYXJBcHBsaWVkV2VpZ2h0KCkge1xuICAgICAgICB0aGlzLnByaW1pdGl2ZXMuZm9yRWFjaCgobWVzaCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKCgoX2EgPSBtZXNoLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW3RoaXMuaW5kZXhdKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbWVzaC5tb3JwaFRhcmdldEluZmx1ZW5jZXNbdGhpcy5pbmRleF0gPSAwLjA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgX3YyID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcbi8qKlxuICogQSBiaW5kIG9mIGV4cHJlc3Npb24gaW5mbHVlbmNlcyB0byB0ZXh0dXJlIHRyYW5zZm9ybXMuXG4gKi9cbmNsYXNzIFZSTUV4cHJlc3Npb25UZXh0dXJlVHJhbnNmb3JtQmluZCB7XG4gICAgY29uc3RydWN0b3IoeyBtYXRlcmlhbCwgc2NhbGUsIG9mZnNldCwgfSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG4gICAgICAgIHRoaXMuc2NhbGUgPSBzY2FsZTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5TmFtZXMgPSAoX2EgPSBPYmplY3QuZW50cmllcyhWUk1FeHByZXNzaW9uVGV4dHVyZVRyYW5zZm9ybUJpbmQuX3Byb3BlcnR5TmFtZXNNYXApLmZpbmQoKFtkaXN0aW5ndWlzaGVyXSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsW2Rpc3Rpbmd1aXNoZXJdID09PSB0cnVlO1xuICAgICAgICB9KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hWzFdO1xuICAgICAgICBpZiAocHJvcGVydHlOYW1lcyA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFRyaWVkIHRvIGFkZCBhIHRleHR1cmUgdHJhbnNmb3JtIGJpbmQgdG8gdGhlIG1hdGVyaWFsICR7KF9iID0gbWF0ZXJpYWwubmFtZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyhubyBuYW1lKSd9IGJ1dCB0aGUgbWF0ZXJpYWwgaXMgbm90IHN1cHBvcnRlZC5gKTtcbiAgICAgICAgICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBbXTtcbiAgICAgICAgICAgIHByb3BlcnR5TmFtZXMuZm9yRWFjaCgocHJvcGVydHlOYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHR1cmUgPSAoX2EgPSBtYXRlcmlhbFtwcm9wZXJ0eU5hbWVdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1hdGVyaWFsW3Byb3BlcnR5TmFtZV0gPSB0ZXh0dXJlOyAvLyBiZWNhdXNlIHRoZSB0ZXh0dXJlIGlzIGNsb25lZFxuICAgICAgICAgICAgICAgIGNvbnN0IGluaXRpYWxPZmZzZXQgPSB0ZXh0dXJlLm9mZnNldC5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluaXRpYWxTY2FsZSA9IHRleHR1cmUucmVwZWF0LmNsb25lKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsdGFPZmZzZXQgPSBvZmZzZXQuY2xvbmUoKS5zdWIoaW5pdGlhbE9mZnNldCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsdGFTY2FsZSA9IHNjYWxlLmNsb25lKCkuc3ViKGluaXRpYWxTY2FsZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvcGVydGllcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcHJvcGVydHlOYW1lLFxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBkZWx0YU9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFNjYWxlLFxuICAgICAgICAgICAgICAgICAgICBkZWx0YVNjYWxlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXBwbHlXZWlnaHQod2VpZ2h0KSB7XG4gICAgICAgIHRoaXMuX3Byb3BlcnRpZXMuZm9yRWFjaCgocHJvcGVydHkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMubWF0ZXJpYWxbcHJvcGVydHkubmFtZV07XG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IC8vIFRPRE86IHdlIHNob3VsZCBraWNrIHRoaXMgYXQgYGFkZE1hdGVyaWFsVmFsdWVgXG4gICAgICAgICAgICB0YXJnZXQub2Zmc2V0LmFkZChfdjIuY29weShwcm9wZXJ0eS5kZWx0YU9mZnNldCkubXVsdGlwbHlTY2FsYXIod2VpZ2h0KSk7XG4gICAgICAgICAgICB0YXJnZXQucmVwZWF0LmFkZChfdjIuY29weShwcm9wZXJ0eS5kZWx0YVNjYWxlKS5tdWx0aXBseVNjYWxhcih3ZWlnaHQpKTtcbiAgICAgICAgICAgIHRhcmdldC5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjbGVhckFwcGxpZWRXZWlnaHQoKSB7XG4gICAgICAgIHRoaXMuX3Byb3BlcnRpZXMuZm9yRWFjaCgocHJvcGVydHkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMubWF0ZXJpYWxbcHJvcGVydHkubmFtZV07XG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IC8vIFRPRE86IHdlIHNob3VsZCBraWNrIHRoaXMgYXQgYGFkZE1hdGVyaWFsVmFsdWVgXG4gICAgICAgICAgICB0YXJnZXQub2Zmc2V0LmNvcHkocHJvcGVydHkuaW5pdGlhbE9mZnNldCk7XG4gICAgICAgICAgICB0YXJnZXQucmVwZWF0LmNvcHkocHJvcGVydHkuaW5pdGlhbFNjYWxlKTtcbiAgICAgICAgICAgIHRhcmdldC5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblZSTUV4cHJlc3Npb25UZXh0dXJlVHJhbnNmb3JtQmluZC5fcHJvcGVydHlOYW1lc01hcCA9IHtcbiAgICBpc01lc2hTdGFuZGFyZE1hdGVyaWFsOiBbXG4gICAgICAgICdtYXAnLFxuICAgICAgICAnZW1pc3NpdmVNYXAnLFxuICAgICAgICAnYnVtcE1hcCcsXG4gICAgICAgICdub3JtYWxNYXAnLFxuICAgICAgICAnZGlzcGxhY2VtZW50TWFwJyxcbiAgICAgICAgJ3JvdWdobmVzc01hcCcsXG4gICAgICAgICdtZXRhbG5lc3NNYXAnLFxuICAgICAgICAnYWxwaGFNYXAnLFxuICAgIF0sXG4gICAgaXNNZXNoQmFzaWNNYXRlcmlhbDogWydtYXAnLCAnc3BlY3VsYXJNYXAnLCAnYWxwaGFNYXAnXSxcbiAgICBpc01Ub29uTWF0ZXJpYWw6IFtcbiAgICAgICAgJ21hcCcsXG4gICAgICAgICdub3JtYWxNYXAnLFxuICAgICAgICAnZW1pc3NpdmVNYXAnLFxuICAgICAgICAnc2hhZGVNdWx0aXBseVRleHR1cmUnLFxuICAgICAgICAncmltTXVsdGlwbHlUZXh0dXJlJyxcbiAgICAgICAgJ291dGxpbmVXaWR0aE11bHRpcGx5VGV4dHVyZScsXG4gICAgICAgICd1dkFuaW1hdGlvbk1hc2tUZXh0dXJlJyxcbiAgICBdLFxufTtcblxuLyoqXG4gKiBQb3NzaWJsZSBzcGVjIHZlcnNpb25zIGl0IHJlY29nbml6ZXMuXG4gKi9cbmNvbnN0IFBPU1NJQkxFX1NQRUNfVkVSU0lPTlMkNCA9IG5ldyBTZXQoWycxLjAnLCAnMS4wLWJldGEnXSk7XG4vKipcbiAqIEEgcGx1Z2luIG9mIEdMVEZMb2FkZXIgdGhhdCBpbXBvcnRzIGEge0BsaW5rIFZSTUV4cHJlc3Npb25NYW5hZ2VyfSBmcm9tIGEgVlJNIGV4dGVuc2lvbiBvZiBhIEdMVEYuXG4gKi9cbmNsYXNzIFZSTUV4cHJlc3Npb25Mb2FkZXJQbHVnaW4ge1xuICAgIGdldCBuYW1lKCkge1xuICAgICAgICAvLyBXZSBzaG91bGQgdXNlIHRoZSBleHRlbnNpb24gbmFtZSBpbnN0ZWFkIGJ1dCB3ZSBoYXZlIG11bHRpcGxlIHBsdWdpbnMgZm9yIGFuIGV4dGVuc2lvbi4uLlxuICAgICAgICByZXR1cm4gJ1ZSTUV4cHJlc3Npb25Mb2FkZXJQbHVnaW4nO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIpIHtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG4gICAgfVxuICAgIGFmdGVyUm9vdChnbHRmKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBnbHRmLnVzZXJEYXRhLnZybUV4cHJlc3Npb25NYW5hZ2VyID0geWllbGQgdGhpcy5faW1wb3J0KGdsdGYpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW1wb3J0IGEge0BsaW5rIFZSTUV4cHJlc3Npb25NYW5hZ2VyfSBmcm9tIGEgVlJNLlxuICAgICAqXG4gICAgICogQHBhcmFtIGdsdGYgQSBwYXJzZWQgcmVzdWx0IG9mIEdMVEYgdGFrZW4gZnJvbSBHTFRGTG9hZGVyXG4gICAgICovXG4gICAgX2ltcG9ydChnbHRmKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCB2MVJlc3VsdCA9IHlpZWxkIHRoaXMuX3YxSW1wb3J0KGdsdGYpO1xuICAgICAgICAgICAgaWYgKHYxUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYxUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdjBSZXN1bHQgPSB5aWVsZCB0aGlzLl92MEltcG9ydChnbHRmKTtcbiAgICAgICAgICAgIGlmICh2MFJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2MFJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3YxSW1wb3J0KGdsdGYpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSB0aGlzLnBhcnNlci5qc29uO1xuICAgICAgICAgICAgLy8gZWFybHkgYWJvcnQgaWYgaXQgZG9lc24ndCB1c2UgdnJtXG4gICAgICAgICAgICBjb25zdCBpc1ZSTVVzZWQgPSAoKF9hID0ganNvbi5leHRlbnNpb25zVXNlZCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmluZGV4T2YoJ1ZSTUNfdnJtJykpICE9PSAtMTtcbiAgICAgICAgICAgIGlmICghaXNWUk1Vc2VkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBleHRlbnNpb24gPSAoX2IgPSBqc29uLmV4dGVuc2lvbnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYlsnVlJNQ192cm0nXTtcbiAgICAgICAgICAgIGlmICghZXh0ZW5zaW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzcGVjVmVyc2lvbiA9IGV4dGVuc2lvbi5zcGVjVmVyc2lvbjtcbiAgICAgICAgICAgIGlmICghUE9TU0lCTEVfU1BFQ19WRVJTSU9OUyQ0LmhhcyhzcGVjVmVyc2lvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFZSTUV4cHJlc3Npb25Mb2FkZXJQbHVnaW46IFVua25vd24gVlJNQ192cm0gc3BlY1ZlcnNpb24gXCIke3NwZWNWZXJzaW9ufVwiYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzY2hlbWFFeHByZXNzaW9ucyA9IGV4dGVuc2lvbi5leHByZXNzaW9ucztcbiAgICAgICAgICAgIGlmICghc2NoZW1hRXhwcmVzc2lvbnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGxpc3QgZXhwcmVzc2lvbnNcbiAgICAgICAgICAgIGNvbnN0IHByZXNldE5hbWVTZXQgPSBuZXcgU2V0KE9iamVjdC52YWx1ZXMoVlJNRXhwcmVzc2lvblByZXNldE5hbWUpKTtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVTY2hlbWFFeHByZXNzaW9uTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgaWYgKHNjaGVtYUV4cHJlc3Npb25zLnByZXNldCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoc2NoZW1hRXhwcmVzc2lvbnMucHJlc2V0KS5mb3JFYWNoKChbbmFtZSwgc2NoZW1hRXhwcmVzc2lvbl0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjaGVtYUV4cHJlc3Npb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9IC8vIHR5cGVzY3JpcHRcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcmVzZXROYW1lU2V0LmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBWUk1FeHByZXNzaW9uTG9hZGVyUGx1Z2luOiBVbmtub3duIHByZXNldCBuYW1lIFwiJHtuYW1lfVwiIGRldGVjdGVkLiBJZ25vcmluZyB0aGUgZXhwcmVzc2lvbmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5hbWVTY2hlbWFFeHByZXNzaW9uTWFwLnNldChuYW1lLCBzY2hlbWFFeHByZXNzaW9uKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzY2hlbWFFeHByZXNzaW9ucy5jdXN0b20gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHNjaGVtYUV4cHJlc3Npb25zLmN1c3RvbSkuZm9yRWFjaCgoW25hbWUsIHNjaGVtYUV4cHJlc3Npb25dKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmVzZXROYW1lU2V0LmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBWUk1FeHByZXNzaW9uTG9hZGVyUGx1Z2luOiBDdXN0b20gZXhwcmVzc2lvbiBjYW5ub3QgaGF2ZSBwcmVzZXQgbmFtZSBcIiR7bmFtZX1cIi4gSWdub3JpbmcgdGhlIGV4cHJlc3Npb25gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuYW1lU2NoZW1hRXhwcmVzc2lvbk1hcC5zZXQobmFtZSwgc2NoZW1hRXhwcmVzc2lvbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBwcmVwYXJlIG1hbmFnZXJcbiAgICAgICAgICAgIGNvbnN0IG1hbmFnZXIgPSBuZXcgVlJNRXhwcmVzc2lvbk1hbmFnZXIoKTtcbiAgICAgICAgICAgIC8vIGxvYWQgZXhwcmVzc2lvbnNcbiAgICAgICAgICAgIHlpZWxkIFByb21pc2UuYWxsKEFycmF5LmZyb20obmFtZVNjaGVtYUV4cHJlc3Npb25NYXAuZW50cmllcygpKS5tYXAoKFtuYW1lLCBzY2hlbWFFeHByZXNzaW9uXSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIHZhciBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfajtcbiAgICAgICAgICAgICAgICBjb25zdCBleHByZXNzaW9uID0gbmV3IFZSTUV4cHJlc3Npb24obmFtZSk7XG4gICAgICAgICAgICAgICAgZ2x0Zi5zY2VuZS5hZGQoZXhwcmVzc2lvbik7XG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbi5pc0JpbmFyeSA9IChfYyA9IHNjaGVtYUV4cHJlc3Npb24uaXNCaW5hcnkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGZhbHNlO1xuICAgICAgICAgICAgICAgIGV4cHJlc3Npb24ub3ZlcnJpZGVCbGluayA9IChfZCA9IHNjaGVtYUV4cHJlc3Npb24ub3ZlcnJpZGVCbGluaykgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogJ25vbmUnO1xuICAgICAgICAgICAgICAgIGV4cHJlc3Npb24ub3ZlcnJpZGVMb29rQXQgPSAoX2UgPSBzY2hlbWFFeHByZXNzaW9uLm92ZXJyaWRlTG9va0F0KSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAnbm9uZSc7XG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbi5vdmVycmlkZU1vdXRoID0gKF9mID0gc2NoZW1hRXhwcmVzc2lvbi5vdmVycmlkZU1vdXRoKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAnbm9uZSc7XG4gICAgICAgICAgICAgICAgKF9nID0gc2NoZW1hRXhwcmVzc2lvbi5tb3JwaFRhcmdldEJpbmRzKSA9PT0gbnVsbCB8fCBfZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2cuZm9yRWFjaCgoYmluZCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2s7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiaW5kLm5vZGUgPT09IHVuZGVmaW5lZCB8fCBiaW5kLmluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmltaXRpdmVzID0gKHlpZWxkIGdsdGZFeHRyYWN0UHJpbWl0aXZlc0Zyb21Ob2RlKGdsdGYsIGJpbmQubm9kZSkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtb3JwaFRhcmdldEluZGV4ID0gYmluZC5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIG1lc2ggaGFzIHRoZSB0YXJnZXQgbW9ycGggdGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJpbWl0aXZlcy5ldmVyeSgocHJpbWl0aXZlKSA9PiBBcnJheS5pc0FycmF5KHByaW1pdGl2ZS5tb3JwaFRhcmdldEluZmx1ZW5jZXMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3JwaFRhcmdldEluZGV4IDwgcHJpbWl0aXZlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFZSTUV4cHJlc3Npb25Mb2FkZXJQbHVnaW46ICR7c2NoZW1hRXhwcmVzc2lvbi5uYW1lfSBhdHRlbXB0cyB0byBpbmRleCBtb3JwaCAjJHttb3JwaFRhcmdldEluZGV4fSBidXQgbm90IGZvdW5kLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24uYWRkQmluZChuZXcgVlJNRXhwcmVzc2lvbk1vcnBoVGFyZ2V0QmluZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IG1vcnBoVGFyZ2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IChfayA9IGJpbmQud2VpZ2h0KSAhPT0gbnVsbCAmJiBfayAhPT0gdm9pZCAwID8gX2sgOiAxLjAsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgaWYgKHNjaGVtYUV4cHJlc3Npb24ubWF0ZXJpYWxDb2xvckJpbmRzIHx8IHNjaGVtYUV4cHJlc3Npb24udGV4dHVyZVRyYW5zZm9ybUJpbmRzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxpc3QgdXAgZXZlcnkgbWF0ZXJpYWwgaW4gYGdsdGYuc2NlbmVgXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdsdGZNYXRlcmlhbHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZ2x0Zi5zY2VuZS50cmF2ZXJzZSgob2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsdGZNYXRlcmlhbHMucHVzaChtYXRlcmlhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAoX2ggPSBzY2hlbWFFeHByZXNzaW9uLm1hdGVyaWFsQ29sb3JCaW5kcykgPT09IG51bGwgfHwgX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oLmZvckVhY2goKGJpbmQpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFscyA9IGdsdGZNYXRlcmlhbHMuZmlsdGVyKChtYXRlcmlhbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsSW5kZXggPSBnbHRmR2V0QXNzb2NpYXRlZE1hdGVyaWFsSW5kZXgodGhpcy5wYXJzZXIsIG1hdGVyaWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmluZC5tYXRlcmlhbCA9PT0gbWF0ZXJpYWxJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxzLmZvckVhY2goKG1hdGVyaWFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbi5hZGRCaW5kKG5ldyBWUk1FeHByZXNzaW9uTWF0ZXJpYWxDb2xvckJpbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYmluZC50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRWYWx1ZTogbmV3IFRIUkVFLkNvbG9yKCkuZnJvbUFycmF5KGJpbmQudGFyZ2V0VmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIChfaiA9IHNjaGVtYUV4cHJlc3Npb24udGV4dHVyZVRyYW5zZm9ybUJpbmRzKSA9PT0gbnVsbCB8fCBfaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ouZm9yRWFjaCgoYmluZCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxzID0gZ2x0Zk1hdGVyaWFscy5maWx0ZXIoKG1hdGVyaWFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxJbmRleCA9IGdsdGZHZXRBc3NvY2lhdGVkTWF0ZXJpYWxJbmRleCh0aGlzLnBhcnNlciwgbWF0ZXJpYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiaW5kLm1hdGVyaWFsID09PSBtYXRlcmlhbEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbHMuZm9yRWFjaCgobWF0ZXJpYWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24uYWRkQmluZChuZXcgVlJNRXhwcmVzc2lvblRleHR1cmVUcmFuc2Zvcm1CaW5kKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogbmV3IFRIUkVFLlZlY3RvcjIoKS5mcm9tQXJyYXkoKF9hID0gYmluZC5vZmZzZXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFswLjAsIDAuMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZTogbmV3IFRIUkVFLlZlY3RvcjIoKS5mcm9tQXJyYXkoKF9iID0gYmluZC5zY2FsZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogWzEuMCwgMS4wXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWFuYWdlci5yZWdpc3RlckV4cHJlc3Npb24oZXhwcmVzc2lvbik7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICAgICAgcmV0dXJuIG1hbmFnZXI7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfdjBJbXBvcnQoZ2x0Zikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBqc29uID0gdGhpcy5wYXJzZXIuanNvbjtcbiAgICAgICAgICAgIC8vIGVhcmx5IGFib3J0IGlmIGl0IGRvZXNuJ3QgdXNlIHZybVxuICAgICAgICAgICAgY29uc3QgdnJtRXh0ID0gKF9hID0ganNvbi5leHRlbnNpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuVlJNO1xuICAgICAgICAgICAgaWYgKCF2cm1FeHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYUJsZW5kU2hhcGUgPSB2cm1FeHQuYmxlbmRTaGFwZU1hc3RlcjtcbiAgICAgICAgICAgIGlmICghc2NoZW1hQmxlbmRTaGFwZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWFuYWdlciA9IG5ldyBWUk1FeHByZXNzaW9uTWFuYWdlcigpO1xuICAgICAgICAgICAgY29uc3Qgc2NoZW1hQmxlbmRTaGFwZUdyb3VwcyA9IHNjaGVtYUJsZW5kU2hhcGUuYmxlbmRTaGFwZUdyb3VwcztcbiAgICAgICAgICAgIGlmICghc2NoZW1hQmxlbmRTaGFwZUdyb3Vwcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYW5hZ2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYmxlbmRTaGFwZU5hbWVTZXQgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICB5aWVsZCBQcm9taXNlLmFsbChzY2hlbWFCbGVuZFNoYXBlR3JvdXBzLm1hcCgoc2NoZW1hR3JvdXApID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2I7XG4gICAgICAgICAgICAgICAgY29uc3QgdjBQcmVzZXROYW1lID0gc2NoZW1hR3JvdXAucHJlc2V0TmFtZTtcbiAgICAgICAgICAgICAgICBjb25zdCB2MVByZXNldE5hbWUgPSAodjBQcmVzZXROYW1lICE9IG51bGwgJiYgVlJNRXhwcmVzc2lvbkxvYWRlclBsdWdpbi52MHYxUHJlc2V0TmFtZU1hcFt2MFByZXNldE5hbWVdKSB8fCBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB2MVByZXNldE5hbWUgIT09IG51bGwgJiYgdjFQcmVzZXROYW1lICE9PSB2b2lkIDAgPyB2MVByZXNldE5hbWUgOiBzY2hlbWFHcm91cC5uYW1lO1xuICAgICAgICAgICAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdWUk1FeHByZXNzaW9uTG9hZGVyUGx1Z2luOiBPbmUgb2YgY3VzdG9tIGV4cHJlc3Npb25zIGhhcyBubyBuYW1lLiBJZ25vcmluZyB0aGUgZXhwcmVzc2lvbicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGR1cGxpY2F0aW9uIGNoZWNrXG4gICAgICAgICAgICAgICAgaWYgKGJsZW5kU2hhcGVOYW1lU2V0LmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFZSTUV4cHJlc3Npb25Mb2FkZXJQbHVnaW46IEFuIGV4cHJlc3Npb24gcHJlc2V0ICR7djBQcmVzZXROYW1lfSBoYXMgZHVwbGljYXRlZCBlbnRyaWVzLiBJZ25vcmluZyB0aGUgZXhwcmVzc2lvbmApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJsZW5kU2hhcGVOYW1lU2V0LmFkZChuYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zdCBleHByZXNzaW9uID0gbmV3IFZSTUV4cHJlc3Npb24obmFtZSk7XG4gICAgICAgICAgICAgICAgZ2x0Zi5zY2VuZS5hZGQoZXhwcmVzc2lvbik7XG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbi5pc0JpbmFyeSA9IChfYiA9IHNjaGVtYUdyb3VwLmlzQmluYXJ5KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyB2MCBkb2Vzbid0IGhhdmUgaWdub3JlIHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAvLyBCaW5kIG1vcnBoVGFyZ2V0XG4gICAgICAgICAgICAgICAgaWYgKHNjaGVtYUdyb3VwLmJpbmRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjaGVtYUdyb3VwLmJpbmRzLmZvckVhY2goKGJpbmQpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiaW5kLm1lc2ggPT09IHVuZGVmaW5lZCB8fCBiaW5kLmluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub2Rlc1VzaW5nTWVzaCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9jID0ganNvbi5ub2RlcykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmZvckVhY2goKG5vZGUsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5tZXNoID09PSBiaW5kLm1lc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNVc2luZ01lc2gucHVzaChpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vcnBoVGFyZ2V0SW5kZXggPSBiaW5kLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgUHJvbWlzZS5hbGwobm9kZXNVc2luZ01lc2gubWFwKChub2RlSW5kZXgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpbWl0aXZlcyA9ICh5aWVsZCBnbHRmRXh0cmFjdFByaW1pdGl2ZXNGcm9tTm9kZShnbHRmLCBub2RlSW5kZXgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgbWVzaCBoYXMgdGhlIHRhcmdldCBtb3JwaCB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXByaW1pdGl2ZXMuZXZlcnkoKHByaW1pdGl2ZSkgPT4gQXJyYXkuaXNBcnJheShwcmltaXRpdmUubW9ycGhUYXJnZXRJbmZsdWVuY2VzKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JwaFRhcmdldEluZGV4IDwgcHJpbWl0aXZlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVlJNRXhwcmVzc2lvbkxvYWRlclBsdWdpbjogJHtzY2hlbWFHcm91cC5uYW1lfSBhdHRlbXB0cyB0byBpbmRleCAke21vcnBoVGFyZ2V0SW5kZXh9dGggbW9ycGggYnV0IG5vdCBmb3VuZC5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uLmFkZEJpbmQobmV3IFZSTUV4cHJlc3Npb25Nb3JwaFRhcmdldEJpbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogbW9ycGhUYXJnZXRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAwLjAxICogKChfZCA9IGJpbmQud2VpZ2h0KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAxMDApLCAvLyBuYXJyb3dpbmcgdGhlIHJhbmdlIGZyb20gWyAwLjAgLSAxMDAuMCBdIHRvIFsgMC4wIC0gMS4wIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEJpbmQgTWF0ZXJpYWxDb2xvciBhbmQgVGV4dHVyZVRyYW5zZm9ybVxuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsVmFsdWVzID0gc2NoZW1hR3JvdXAubWF0ZXJpYWxWYWx1ZXM7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsVmFsdWVzICYmIG1hdGVyaWFsVmFsdWVzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFZhbHVlcy5mb3JFYWNoKChtYXRlcmlhbFZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0ZXJpYWxWYWx1ZS5tYXRlcmlhbE5hbWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsVmFsdWUucHJvcGVydHlOYW1lID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFZhbHVlLnRhcmdldFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIOOCouODkOOCv+ODvOOBruOCquODluOCuOOCp+OCr+ODiOOBq+ioreWumuOBleOCjOOBpuOBhOOCi+ODnuODhuODquOCouODq+OBruWGheOBi+OCiVxuICAgICAgICAgICAgICAgICAgICAgICAgICogbWF0ZXJpYWxWYWx1ZeOBp+aMh+WumuOBleOCjOOBpuOBhOOCi+ODnuODhuODquOCouODq+OCkumbhuOCgeOCi+OAglxuICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIOeJueWumuOBq+OBr+WQjeWJjeOCkuS9v+eUqOOBmeOCi+OAglxuICAgICAgICAgICAgICAgICAgICAgICAgICog44Ki44Km44OI44Op44Kk44Oz5o+P55S755So44Gu44Oe44OG44Oq44Ki44Or44KC5ZCM5pmC44Gr6ZuG44KB44KL44CCXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFscyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2x0Zi5zY2VuZS50cmF2ZXJzZSgob2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iamVjdC5tYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWF0ZXJpYWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbHMucHVzaCguLi5tYXRlcmlhbC5maWx0ZXIoKG10bCkgPT4gKG10bC5uYW1lID09PSBtYXRlcmlhbFZhbHVlLm1hdGVyaWFsTmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG10bC5uYW1lID09PSBtYXRlcmlhbFZhbHVlLm1hdGVyaWFsTmFtZSArICcgKE91dGxpbmUpJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbHMuaW5kZXhPZihtdGwpID09PSAtMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1hdGVyaWFsLm5hbWUgPT09IG1hdGVyaWFsVmFsdWUubWF0ZXJpYWxOYW1lICYmIG1hdGVyaWFscy5pbmRleE9mKG1hdGVyaWFsKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFscy5wdXNoKG1hdGVyaWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxQcm9wZXJ0eU5hbWUgPSBtYXRlcmlhbFZhbHVlLnByb3BlcnR5TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFscy5mb3JFYWNoKChtYXRlcmlhbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRleHR1cmVUcmFuc2Zvcm1CaW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsUHJvcGVydHlOYW1lID09PSAnX01haW5UZXhfU1QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gbmV3IFRIUkVFLlZlY3RvcjIobWF0ZXJpYWxWYWx1ZS50YXJnZXRWYWx1ZVswXSwgbWF0ZXJpYWxWYWx1ZS50YXJnZXRWYWx1ZVsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IG5ldyBUSFJFRS5WZWN0b3IyKG1hdGVyaWFsVmFsdWUudGFyZ2V0VmFsdWVbMl0sIG1hdGVyaWFsVmFsdWUudGFyZ2V0VmFsdWVbM10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uLmFkZEJpbmQobmV3IFZSTUV4cHJlc3Npb25UZXh0dXJlVHJhbnNmb3JtQmluZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0ZXJpYWxDb2xvckJpbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbENvbG9yVHlwZSA9IHYwRXhwcmVzc2lvbk1hdGVyaWFsQ29sb3JNYXBbbWF0ZXJpYWxQcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbENvbG9yVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uLmFkZEJpbmQobmV3IFZSTUV4cHJlc3Npb25NYXRlcmlhbENvbG9yQmluZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG1hdGVyaWFsQ29sb3JUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0VmFsdWU6IG5ldyBUSFJFRS5Db2xvciguLi5tYXRlcmlhbFZhbHVlLnRhcmdldFZhbHVlLnNsaWNlKDAsIDMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihtYXRlcmlhbFByb3BlcnR5TmFtZSArICcgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYW5hZ2VyLnJlZ2lzdGVyRXhwcmVzc2lvbihleHByZXNzaW9uKTtcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICByZXR1cm4gbWFuYWdlcjtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuVlJNRXhwcmVzc2lvbkxvYWRlclBsdWdpbi52MHYxUHJlc2V0TmFtZU1hcCA9IHtcbiAgICBhOiAnYWEnLFxuICAgIGU6ICdlZScsXG4gICAgaTogJ2loJyxcbiAgICBvOiAnb2gnLFxuICAgIHU6ICdvdScsXG4gICAgYmxpbms6ICdibGluaycsXG4gICAgam95OiAnaGFwcHknLFxuICAgIGFuZ3J5OiAnYW5ncnknLFxuICAgIHNvcnJvdzogJ3NhZCcsXG4gICAgZnVuOiAncmVsYXhlZCcsXG4gICAgbG9va3VwOiAnbG9va1VwJyxcbiAgICBsb29rZG93bjogJ2xvb2tEb3duJyxcbiAgICBsb29rbGVmdDogJ2xvb2tMZWZ0JyxcbiAgICBsb29rcmlnaHQ6ICdsb29rUmlnaHQnLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbiAgICBibGlua19sOiAnYmxpbmtMZWZ0JyxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICAgYmxpbmtfcjogJ2JsaW5rUmlnaHQnLFxuICAgIG5ldXRyYWw6ICduZXV0cmFsJyxcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuY29uc3QgVlJNRXhwcmVzc2lvbk92ZXJyaWRlVHlwZSA9IHtcbiAgICBOb25lOiAnbm9uZScsXG4gICAgQmxvY2s6ICdibG9jaycsXG4gICAgQmxlbmQ6ICdibGVuZCcsXG59O1xuXG5jbGFzcyBWUk1GaXJzdFBlcnNvbiB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFZSTUZpcnN0UGVyc29uIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBodW1hbm9pZCBBIHtAbGluayBWUk1IdW1hbm9pZH1cbiAgICAgKiBAcGFyYW0gbWVzaEFubm90YXRpb25zIEEgcmVuZGVyZXIgc2V0dGluZ3MuIFNlZSB0aGUgZGVzY3JpcHRpb24gb2YgW1tSZW5kZXJlckZpcnN0UGVyc29uRmxhZ3NdXSBmb3IgbW9yZSBpbmZvXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaHVtYW5vaWQsIG1lc2hBbm5vdGF0aW9ucykge1xuICAgICAgICB0aGlzLl9maXJzdFBlcnNvbk9ubHlMYXllciA9IFZSTUZpcnN0UGVyc29uLkRFRkFVTFRfRklSU1RQRVJTT05fT05MWV9MQVlFUjtcbiAgICAgICAgdGhpcy5fdGhpcmRQZXJzb25Pbmx5TGF5ZXIgPSBWUk1GaXJzdFBlcnNvbi5ERUZBVUxUX1RISVJEUEVSU09OX09OTFlfTEFZRVI7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkTGF5ZXJzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaHVtYW5vaWQgPSBodW1hbm9pZDtcbiAgICAgICAgdGhpcy5tZXNoQW5ub3RhdGlvbnMgPSBtZXNoQW5ub3RhdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvcHkgdGhlIGdpdmVuIHtAbGluayBWUk1GaXJzdFBlcnNvbn0gaW50byB0aGlzIG9uZS5cbiAgICAgKiB7QGxpbmsgaHVtYW5vaWR9IG11c3QgYmUgc2FtZSBhcyB0aGUgc291cmNlIG9uZS5cbiAgICAgKiBAcGFyYW0gc291cmNlIFRoZSB7QGxpbmsgVlJNRmlyc3RQZXJzb259IHlvdSB3YW50IHRvIGNvcHlcbiAgICAgKiBAcmV0dXJucyB0aGlzXG4gICAgICovXG4gICAgY29weShzb3VyY2UpIHtcbiAgICAgICAgaWYgKHRoaXMuaHVtYW5vaWQgIT09IHNvdXJjZS5odW1hbm9pZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWUk1GaXJzdFBlcnNvbjogaHVtYW5vaWQgbXVzdCBiZSBzYW1lIGluIG9yZGVyIHRvIGNvcHknKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1lc2hBbm5vdGF0aW9ucyA9IHNvdXJjZS5tZXNoQW5ub3RhdGlvbnMubWFwKChhbm5vdGF0aW9uKSA9PiAoe1xuICAgICAgICAgICAgbWVzaGVzOiBhbm5vdGF0aW9uLm1lc2hlcy5jb25jYXQoKSxcbiAgICAgICAgICAgIHR5cGU6IGFubm90YXRpb24udHlwZSxcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGNsb25lIG9mIHRoaXMge0BsaW5rIFZSTUZpcnN0UGVyc29ufS5cbiAgICAgKiBAcmV0dXJucyBDb3BpZWQge0BsaW5rIFZSTUZpcnN0UGVyc29ufVxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZSTUZpcnN0UGVyc29uKHRoaXMuaHVtYW5vaWQsIHRoaXMubWVzaEFubm90YXRpb25zKS5jb3B5KHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIGNhbWVyYSBsYXllciByZXByZXNlbnRzIGBGaXJzdFBlcnNvbk9ubHlgIGxheWVyLlxuICAgICAqIE5vdGUgdGhhdCAqKnlvdSBtdXN0IGNhbGwge0BsaW5rIHNldHVwfSBmaXJzdCBiZWZvcmUgeW91IHVzZSB0aGUgbGF5ZXIgZmVhdHVyZSoqIG9yIGl0IGRvZXMgbm90IHdvcmsgcHJvcGVybHkuXG4gICAgICpcbiAgICAgKiBUaGUgdmFsdWUgaXMge0BsaW5rIERFRkFVTFRfRklSU1RQRVJTT05fT05MWV9MQVlFUn0gYnkgZGVmYXVsdCBidXQgeW91IGNhbiBjaGFuZ2UgdGhlIGxheWVyIGJ5IHNwZWNpZnlpbmcgdmlhIHtAbGluayBzZXR1cH0gaWYgeW91IHByZWZlci5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly92cm0uZGV2L2VuL3VuaXZybS9hcGkvdW5pdnJtX3VzZV9maXJzdHBlcnNvbi9cbiAgICAgKiBAc2VlIGh0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy8jYXBpL2VuL2NvcmUvTGF5ZXJzXG4gICAgICovXG4gICAgZ2V0IGZpcnN0UGVyc29uT25seUxheWVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlyc3RQZXJzb25Pbmx5TGF5ZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgY2FtZXJhIGxheWVyIHJlcHJlc2VudHMgYFRoaXJkUGVyc29uT25seWAgbGF5ZXIuXG4gICAgICogTm90ZSB0aGF0ICoqeW91IG11c3QgY2FsbCB7QGxpbmsgc2V0dXB9IGZpcnN0IGJlZm9yZSB5b3UgdXNlIHRoZSBsYXllciBmZWF0dXJlKiogb3IgaXQgZG9lcyBub3Qgd29yayBwcm9wZXJseS5cbiAgICAgKlxuICAgICAqIFRoZSB2YWx1ZSBpcyB7QGxpbmsgREVGQVVMVF9USElSRFBFUlNPTl9PTkxZX0xBWUVSfSBieSBkZWZhdWx0IGJ1dCB5b3UgY2FuIGNoYW5nZSB0aGUgbGF5ZXIgYnkgc3BlY2lmeWluZyB2aWEge0BsaW5rIHNldHVwfSBpZiB5b3UgcHJlZmVyLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3ZybS5kZXYvZW4vdW5pdnJtL2FwaS91bml2cm1fdXNlX2ZpcnN0cGVyc29uL1xuICAgICAqIEBzZWUgaHR0cHM6Ly90aHJlZWpzLm9yZy9kb2NzLyNhcGkvZW4vY29yZS9MYXllcnNcbiAgICAgKi9cbiAgICBnZXQgdGhpcmRQZXJzb25Pbmx5TGF5ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90aGlyZFBlcnNvbk9ubHlMYXllcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW4gdGhpcyBtZXRob2QsIGl0IGFzc2lnbnMgbGF5ZXJzIGZvciBldmVyeSBtZXNoZXMgYmFzZWQgb24gbWVzaCBhbm5vdGF0aW9ucy5cbiAgICAgKiBZb3UgbXVzdCBjYWxsIHRoaXMgbWV0aG9kIGZpcnN0IGJlZm9yZSB5b3UgdXNlIHRoZSBsYXllciBmZWF0dXJlLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBhbiBlcXVpdmFsZW50IG9mIFtWUk1GaXJzdFBlcnNvbi5TZXR1cF0oaHR0cHM6Ly9naXRodWIuY29tL3ZybS1jL1VuaVZSTS9ibG9iLzczYTViZDhmY2RkYWEyYTdhODczNTA5OWE5N2U2M2M5ZGIzZTVlYTAvQXNzZXRzL1ZSTS9SdW50aW1lL0ZpcnN0UGVyc29uL1ZSTUZpcnN0UGVyc29uLmNzI0wyOTUtTDI5OSkgb2YgdGhlIFVuaVZSTS5cbiAgICAgKlxuICAgICAqIFRoZSBgY2FtZXJhTGF5ZXJgIHBhcmFtZXRlciBzcGVjaWZpZXMgd2hpY2ggbGF5ZXIgd2lsbCBiZSBhc3NpZ25lZCBmb3IgYEZpcnN0UGVyc29uT25seWAgLyBgVGhpcmRQZXJzb25Pbmx5YC5cbiAgICAgKiBJbiBVbmlWUk0sIHdlIHNwZWNpZmllZCB0aG9zZSBieSBuYW1pbmcgZWFjaCBkZXNpcmVkIGxheWVyIGFzIGBGSVJTVFBFUlNPTl9PTkxZX0xBWUVSYCAvIGBUSElSRFBFUlNPTl9PTkxZX0xBWUVSYFxuICAgICAqIGJ1dCB3ZSBhcmUgZ29pbmcgdG8gc3BlY2lmeSB0aGVzZSBsYXllcnMgYXQgaGVyZSBzaW5jZSB3ZSBhcmUgdW5hYmxlIHRvIG5hbWUgbGF5ZXJzIGluIFRocmVlLmpzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbWVyYUxheWVyIFNwZWNpZnkgd2hpY2ggbGF5ZXIgd2lsbCBiZSBmb3IgYEZpcnN0UGVyc29uT25seWAgLyBgVGhpcmRQZXJzb25Pbmx5YC5cbiAgICAgKi9cbiAgICBzZXR1cCh7IGZpcnN0UGVyc29uT25seUxheWVyID0gVlJNRmlyc3RQZXJzb24uREVGQVVMVF9GSVJTVFBFUlNPTl9PTkxZX0xBWUVSLCB0aGlyZFBlcnNvbk9ubHlMYXllciA9IFZSTUZpcnN0UGVyc29uLkRFRkFVTFRfVEhJUkRQRVJTT05fT05MWV9MQVlFUiwgfSA9IHt9KSB7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZExheWVycykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ZpcnN0UGVyc29uT25seUxheWVyID0gZmlyc3RQZXJzb25Pbmx5TGF5ZXI7XG4gICAgICAgIHRoaXMuX3RoaXJkUGVyc29uT25seUxheWVyID0gdGhpcmRQZXJzb25Pbmx5TGF5ZXI7XG4gICAgICAgIHRoaXMubWVzaEFubm90YXRpb25zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGl0ZW0ubWVzaGVzLmZvckVhY2goKG1lc2gpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnZmlyc3RQZXJzb25Pbmx5Jykge1xuICAgICAgICAgICAgICAgICAgICBtZXNoLmxheWVycy5zZXQodGhpcy5fZmlyc3RQZXJzb25Pbmx5TGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgICBtZXNoLnRyYXZlcnNlKChjaGlsZCkgPT4gY2hpbGQubGF5ZXJzLnNldCh0aGlzLl9maXJzdFBlcnNvbk9ubHlMYXllcikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICd0aGlyZFBlcnNvbk9ubHknKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc2gubGF5ZXJzLnNldCh0aGlzLl90aGlyZFBlcnNvbk9ubHlMYXllcik7XG4gICAgICAgICAgICAgICAgICAgIG1lc2gudHJhdmVyc2UoKGNoaWxkKSA9PiBjaGlsZC5sYXllcnMuc2V0KHRoaXMuX3RoaXJkUGVyc29uT25seUxheWVyKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUhlYWRsZXNzTW9kZWwobWVzaCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZExheWVycyA9IHRydWU7XG4gICAgfVxuICAgIF9leGNsdWRlVHJpYW5nbGVzKHRyaWFuZ2xlcywgYndzLCBza2luSW5kZXgsIGV4Y2x1ZGUpIHtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgaWYgKGJ3cyAhPSBudWxsICYmIGJ3cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyaWFuZ2xlcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSB0cmlhbmdsZXNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgYiA9IHRyaWFuZ2xlc1tpICsgMV07XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHRyaWFuZ2xlc1tpICsgMl07XG4gICAgICAgICAgICAgICAgY29uc3QgYncwID0gYndzW2FdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNraW4wID0gc2tpbkluZGV4W2FdO1xuICAgICAgICAgICAgICAgIGlmIChidzBbMF0gPiAwICYmIGV4Y2x1ZGUuaW5jbHVkZXMoc2tpbjBbMF0pKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBpZiAoYncwWzFdID4gMCAmJiBleGNsdWRlLmluY2x1ZGVzKHNraW4wWzFdKSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKGJ3MFsyXSA+IDAgJiYgZXhjbHVkZS5pbmNsdWRlcyhza2luMFsyXSkpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmIChidzBbM10gPiAwICYmIGV4Y2x1ZGUuaW5jbHVkZXMoc2tpbjBbM10pKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBidzEgPSBid3NbYl07XG4gICAgICAgICAgICAgICAgY29uc3Qgc2tpbjEgPSBza2luSW5kZXhbYl07XG4gICAgICAgICAgICAgICAgaWYgKGJ3MVswXSA+IDAgJiYgZXhjbHVkZS5pbmNsdWRlcyhza2luMVswXSkpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmIChidzFbMV0gPiAwICYmIGV4Y2x1ZGUuaW5jbHVkZXMoc2tpbjFbMV0pKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBpZiAoYncxWzJdID4gMCAmJiBleGNsdWRlLmluY2x1ZGVzKHNraW4xWzJdKSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKGJ3MVszXSA+IDAgJiYgZXhjbHVkZS5pbmNsdWRlcyhza2luMVszXSkpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ3MiA9IGJ3c1tjXTtcbiAgICAgICAgICAgICAgICBjb25zdCBza2luMiA9IHNraW5JbmRleFtjXTtcbiAgICAgICAgICAgICAgICBpZiAoYncyWzBdID4gMCAmJiBleGNsdWRlLmluY2x1ZGVzKHNraW4yWzBdKSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKGJ3MlsxXSA+IDAgJiYgZXhjbHVkZS5pbmNsdWRlcyhza2luMlsxXSkpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmIChidzJbMl0gPiAwICYmIGV4Y2x1ZGUuaW5jbHVkZXMoc2tpbjJbMl0pKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBpZiAoYncyWzNdID4gMCAmJiBleGNsdWRlLmluY2x1ZGVzKHNraW4yWzNdKSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgdHJpYW5nbGVzW2NvdW50KytdID0gYTtcbiAgICAgICAgICAgICAgICB0cmlhbmdsZXNbY291bnQrK10gPSBiO1xuICAgICAgICAgICAgICAgIHRyaWFuZ2xlc1tjb3VudCsrXSA9IGM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cbiAgICBfY3JlYXRlRXJhc2VkTWVzaChzcmMsIGVyYXNpbmdCb25lc0luZGV4KSB7XG4gICAgICAgIGNvbnN0IGRzdCA9IG5ldyBUSFJFRS5Ta2lubmVkTWVzaChzcmMuZ2VvbWV0cnkuY2xvbmUoKSwgc3JjLm1hdGVyaWFsKTtcbiAgICAgICAgZHN0Lm5hbWUgPSBgJHtzcmMubmFtZX0oZXJhc2UpYDtcbiAgICAgICAgZHN0LmZydXN0dW1DdWxsZWQgPSBzcmMuZnJ1c3R1bUN1bGxlZDtcbiAgICAgICAgZHN0LmxheWVycy5zZXQodGhpcy5fZmlyc3RQZXJzb25Pbmx5TGF5ZXIpO1xuICAgICAgICBjb25zdCBnZW9tZXRyeSA9IGRzdC5nZW9tZXRyeTtcbiAgICAgICAgY29uc3Qgc2tpbkluZGV4QXR0ciA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSgnc2tpbkluZGV4Jyk7XG4gICAgICAgIGNvbnN0IHNraW5JbmRleEF0dHJBcnJheSA9IHNraW5JbmRleEF0dHIgaW5zdGFuY2VvZiBUSFJFRS5HTEJ1ZmZlckF0dHJpYnV0ZSA/IFtdIDogc2tpbkluZGV4QXR0ci5hcnJheTtcbiAgICAgICAgY29uc3Qgc2tpbkluZGV4ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2tpbkluZGV4QXR0ckFycmF5Lmxlbmd0aDsgaSArPSA0KSB7XG4gICAgICAgICAgICBza2luSW5kZXgucHVzaChbXG4gICAgICAgICAgICAgICAgc2tpbkluZGV4QXR0ckFycmF5W2ldLFxuICAgICAgICAgICAgICAgIHNraW5JbmRleEF0dHJBcnJheVtpICsgMV0sXG4gICAgICAgICAgICAgICAgc2tpbkluZGV4QXR0ckFycmF5W2kgKyAyXSxcbiAgICAgICAgICAgICAgICBza2luSW5kZXhBdHRyQXJyYXlbaSArIDNdLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2tpbldlaWdodEF0dHIgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoJ3NraW5XZWlnaHQnKTtcbiAgICAgICAgY29uc3Qgc2tpbldlaWdodEF0dHJBcnJheSA9IHNraW5XZWlnaHRBdHRyIGluc3RhbmNlb2YgVEhSRUUuR0xCdWZmZXJBdHRyaWJ1dGUgPyBbXSA6IHNraW5XZWlnaHRBdHRyLmFycmF5O1xuICAgICAgICBjb25zdCBza2luV2VpZ2h0ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2tpbldlaWdodEF0dHJBcnJheS5sZW5ndGg7IGkgKz0gNCkge1xuICAgICAgICAgICAgc2tpbldlaWdodC5wdXNoKFtcbiAgICAgICAgICAgICAgICBza2luV2VpZ2h0QXR0ckFycmF5W2ldLFxuICAgICAgICAgICAgICAgIHNraW5XZWlnaHRBdHRyQXJyYXlbaSArIDFdLFxuICAgICAgICAgICAgICAgIHNraW5XZWlnaHRBdHRyQXJyYXlbaSArIDJdLFxuICAgICAgICAgICAgICAgIHNraW5XZWlnaHRBdHRyQXJyYXlbaSArIDNdLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5kZXggPSBnZW9tZXRyeS5nZXRJbmRleCgpO1xuICAgICAgICBpZiAoIWluZGV4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZ2VvbWV0cnkgZG9lc24ndCBoYXZlIGFuIGluZGV4IGJ1ZmZlclwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvbGRUcmlhbmdsZXMgPSBBcnJheS5mcm9tKGluZGV4LmFycmF5KTtcbiAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLl9leGNsdWRlVHJpYW5nbGVzKG9sZFRyaWFuZ2xlcywgc2tpbldlaWdodCwgc2tpbkluZGV4LCBlcmFzaW5nQm9uZXNJbmRleCk7XG4gICAgICAgIGNvbnN0IG5ld1RyaWFuZ2xlID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgbmV3VHJpYW5nbGVbaV0gPSBvbGRUcmlhbmdsZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgZ2VvbWV0cnkuc2V0SW5kZXgobmV3VHJpYW5nbGUpO1xuICAgICAgICAvLyBtdG9vbiBtYXRlcmlhbCBpbmNsdWRlcyBvbkJlZm9yZVJlbmRlci4gdGhpcyBpcyB1bnN1cHBvcnRlZCBhdCBTa2lubmVkTWVzaCNjbG9uZVxuICAgICAgICBpZiAoc3JjLm9uQmVmb3JlUmVuZGVyKSB7XG4gICAgICAgICAgICBkc3Qub25CZWZvcmVSZW5kZXIgPSBzcmMub25CZWZvcmVSZW5kZXI7XG4gICAgICAgIH1cbiAgICAgICAgZHN0LmJpbmQobmV3IFRIUkVFLlNrZWxldG9uKHNyYy5za2VsZXRvbi5ib25lcywgc3JjLnNrZWxldG9uLmJvbmVJbnZlcnNlcyksIG5ldyBUSFJFRS5NYXRyaXg0KCkpO1xuICAgICAgICByZXR1cm4gZHN0O1xuICAgIH1cbiAgICBfY3JlYXRlSGVhZGxlc3NNb2RlbEZvclNraW5uZWRNZXNoKHBhcmVudCwgbWVzaCkge1xuICAgICAgICBjb25zdCBlcmFzZUJvbmVJbmRleGVzID0gW107XG4gICAgICAgIG1lc2guc2tlbGV0b24uYm9uZXMuZm9yRWFjaCgoYm9uZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0VyYXNlVGFyZ2V0KGJvbmUpKVxuICAgICAgICAgICAgICAgIGVyYXNlQm9uZUluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBVbmxpa2UgVW5pVlJNIHdlIGRvbid0IGNvcHkgbWVzaCBpZiBubyBpbnZpc2libGUgYm9uZSB3YXMgZm91bmRcbiAgICAgICAgaWYgKCFlcmFzZUJvbmVJbmRleGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgbWVzaC5sYXllcnMuZW5hYmxlKHRoaXMuX3RoaXJkUGVyc29uT25seUxheWVyKTtcbiAgICAgICAgICAgIG1lc2gubGF5ZXJzLmVuYWJsZSh0aGlzLl9maXJzdFBlcnNvbk9ubHlMYXllcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbWVzaC5sYXllcnMuc2V0KHRoaXMuX3RoaXJkUGVyc29uT25seUxheWVyKTtcbiAgICAgICAgY29uc3QgbmV3TWVzaCA9IHRoaXMuX2NyZWF0ZUVyYXNlZE1lc2gobWVzaCwgZXJhc2VCb25lSW5kZXhlcyk7XG4gICAgICAgIHBhcmVudC5hZGQobmV3TWVzaCk7XG4gICAgfVxuICAgIF9jcmVhdGVIZWFkbGVzc01vZGVsKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0dyb3VwJykge1xuICAgICAgICAgICAgbm9kZS5sYXllcnMuc2V0KHRoaXMuX3RoaXJkUGVyc29uT25seUxheWVyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0VyYXNlVGFyZ2V0KG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgbm9kZS50cmF2ZXJzZSgoY2hpbGQpID0+IGNoaWxkLmxheWVycy5zZXQodGhpcy5fdGhpcmRQZXJzb25Pbmx5TGF5ZXIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuICAgICAgICAgICAgICAgIHBhcmVudC5uYW1lID0gYF9oZWFkbGVzc18ke25vZGUubmFtZX1gO1xuICAgICAgICAgICAgICAgIHBhcmVudC5sYXllcnMuc2V0KHRoaXMuX2ZpcnN0UGVyc29uT25seUxheWVyKTtcbiAgICAgICAgICAgICAgICBub2RlLnBhcmVudC5hZGQocGFyZW50KTtcbiAgICAgICAgICAgICAgICBub2RlLmNoaWxkcmVuXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKGNoaWxkKSA9PiBjaGlsZC50eXBlID09PSAnU2tpbm5lZE1lc2gnKVxuICAgICAgICAgICAgICAgICAgICAuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2tpbm5lZE1lc2ggPSBjaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlSGVhZGxlc3NNb2RlbEZvclNraW5uZWRNZXNoKHBhcmVudCwgc2tpbm5lZE1lc2gpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gJ1NraW5uZWRNZXNoJykge1xuICAgICAgICAgICAgY29uc3Qgc2tpbm5lZE1lc2ggPSBub2RlO1xuICAgICAgICAgICAgdGhpcy5fY3JlYXRlSGVhZGxlc3NNb2RlbEZvclNraW5uZWRNZXNoKG5vZGUucGFyZW50LCBza2lubmVkTWVzaCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNFcmFzZVRhcmdldChub2RlKSkge1xuICAgICAgICAgICAgICAgIG5vZGUubGF5ZXJzLnNldCh0aGlzLl90aGlyZFBlcnNvbk9ubHlMYXllcik7XG4gICAgICAgICAgICAgICAgbm9kZS50cmF2ZXJzZSgoY2hpbGQpID0+IGNoaWxkLmxheWVycy5zZXQodGhpcy5fdGhpcmRQZXJzb25Pbmx5TGF5ZXIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfaXNFcmFzZVRhcmdldChib25lKSB7XG4gICAgICAgIGlmIChib25lID09PSB0aGlzLmh1bWFub2lkLmdldFJhd0JvbmVOb2RlKCdoZWFkJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFib25lLnBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRXJhc2VUYXJnZXQoYm9uZS5wYXJlbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBBIGRlZmF1bHQgY2FtZXJhIGxheWVyIGZvciBgRmlyc3RQZXJzb25Pbmx5YCBsYXllci5cbiAqXG4gKiBAc2VlIFtbZ2V0Rmlyc3RQZXJzb25Pbmx5TGF5ZXJdXVxuICovXG5WUk1GaXJzdFBlcnNvbi5ERUZBVUxUX0ZJUlNUUEVSU09OX09OTFlfTEFZRVIgPSA5O1xuLyoqXG4gKiBBIGRlZmF1bHQgY2FtZXJhIGxheWVyIGZvciBgVGhpcmRQZXJzb25Pbmx5YCBsYXllci5cbiAqXG4gKiBAc2VlIFtbZ2V0VGhpcmRQZXJzb25Pbmx5TGF5ZXJdXVxuICovXG5WUk1GaXJzdFBlcnNvbi5ERUZBVUxUX1RISVJEUEVSU09OX09OTFlfTEFZRVIgPSAxMDtcblxuLyoqXG4gKiBQb3NzaWJsZSBzcGVjIHZlcnNpb25zIGl0IHJlY29nbml6ZXMuXG4gKi9cbmNvbnN0IFBPU1NJQkxFX1NQRUNfVkVSU0lPTlMkMyA9IG5ldyBTZXQoWycxLjAnLCAnMS4wLWJldGEnXSk7XG4vKipcbiAqIEEgcGx1Z2luIG9mIEdMVEZMb2FkZXIgdGhhdCBpbXBvcnRzIGEge0BsaW5rIFZSTUZpcnN0UGVyc29ufSBmcm9tIGEgVlJNIGV4dGVuc2lvbiBvZiBhIEdMVEYuXG4gKi9cbmNsYXNzIFZSTUZpcnN0UGVyc29uTG9hZGVyUGx1Z2luIHtcbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgLy8gV2Ugc2hvdWxkIHVzZSB0aGUgZXh0ZW5zaW9uIG5hbWUgaW5zdGVhZCBidXQgd2UgaGF2ZSBtdWx0aXBsZSBwbHVnaW5zIGZvciBhbiBleHRlbnNpb24uLi5cbiAgICAgICAgcmV0dXJuICdWUk1GaXJzdFBlcnNvbkxvYWRlclBsdWdpbic7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcnNlcikge1xuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICB9XG4gICAgYWZ0ZXJSb290KGdsdGYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHZybUh1bWFub2lkID0gZ2x0Zi51c2VyRGF0YS52cm1IdW1hbm9pZDtcbiAgICAgICAgICAgIC8vIGV4cGxpY2l0bHkgZGlzdGluZ3Vpc2ggbnVsbCBhbmQgdW5kZWZpbmVkXG4gICAgICAgICAgICAvLyBzaW5jZSB2cm1IdW1hbm9pZCBtaWdodCBiZSBudWxsIGFzIGEgcmVzdWx0XG4gICAgICAgICAgICBpZiAodnJtSHVtYW5vaWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2cm1IdW1hbm9pZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWUk1GaXJzdFBlcnNvbkxvYWRlclBsdWdpbjogdnJtSHVtYW5vaWQgaXMgdW5kZWZpbmVkLiBWUk1IdW1hbm9pZExvYWRlclBsdWdpbiBoYXZlIHRvIGJlIHVzZWQgZmlyc3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdsdGYudXNlckRhdGEudnJtRmlyc3RQZXJzb24gPSB5aWVsZCB0aGlzLl9pbXBvcnQoZ2x0ZiwgdnJtSHVtYW5vaWQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW1wb3J0IGEge0BsaW5rIFZSTUZpcnN0UGVyc29ufSBmcm9tIGEgVlJNLlxuICAgICAqXG4gICAgICogQHBhcmFtIGdsdGYgQSBwYXJzZWQgcmVzdWx0IG9mIEdMVEYgdGFrZW4gZnJvbSBHTFRGTG9hZGVyXG4gICAgICogQHBhcmFtIGh1bWFub2lkIEEge0BsaW5rIFZSTUh1bWFub2lkfSBpbnN0YW5jZSB0aGF0IHJlcHJlc2VudHMgdGhlIFZSTVxuICAgICAqL1xuICAgIF9pbXBvcnQoZ2x0ZiwgaHVtYW5vaWQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmIChodW1hbm9pZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2MVJlc3VsdCA9IHlpZWxkIHRoaXMuX3YxSW1wb3J0KGdsdGYsIGh1bWFub2lkKTtcbiAgICAgICAgICAgIGlmICh2MVJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2MVJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHYwUmVzdWx0ID0geWllbGQgdGhpcy5fdjBJbXBvcnQoZ2x0ZiwgaHVtYW5vaWQpO1xuICAgICAgICAgICAgaWYgKHYwUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYwUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfdjFJbXBvcnQoZ2x0ZiwgaHVtYW5vaWQpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSB0aGlzLnBhcnNlci5qc29uO1xuICAgICAgICAgICAgLy8gZWFybHkgYWJvcnQgaWYgaXQgZG9lc24ndCB1c2UgdnJtXG4gICAgICAgICAgICBjb25zdCBpc1ZSTVVzZWQgPSAoKF9hID0ganNvbi5leHRlbnNpb25zVXNlZCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmluZGV4T2YoJ1ZSTUNfdnJtJykpICE9PSAtMTtcbiAgICAgICAgICAgIGlmICghaXNWUk1Vc2VkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBleHRlbnNpb24gPSAoX2IgPSBqc29uLmV4dGVuc2lvbnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYlsnVlJNQ192cm0nXTtcbiAgICAgICAgICAgIGlmICghZXh0ZW5zaW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzcGVjVmVyc2lvbiA9IGV4dGVuc2lvbi5zcGVjVmVyc2lvbjtcbiAgICAgICAgICAgIGlmICghUE9TU0lCTEVfU1BFQ19WRVJTSU9OUyQzLmhhcyhzcGVjVmVyc2lvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFZSTUZpcnN0UGVyc29uTG9hZGVyUGx1Z2luOiBVbmtub3duIFZSTUNfdnJtIHNwZWNWZXJzaW9uIFwiJHtzcGVjVmVyc2lvbn1cImApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2NoZW1hRmlyc3RQZXJzb24gPSBleHRlbnNpb24uZmlyc3RQZXJzb247XG4gICAgICAgICAgICBpZiAoIXNjaGVtYUZpcnN0UGVyc29uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtZXNoQW5ub3RhdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVQcmltaXRpdmVzTWFwID0geWllbGQgZ2x0ZkV4dHJhY3RQcmltaXRpdmVzRnJvbU5vZGVzKGdsdGYpO1xuICAgICAgICAgICAgQXJyYXkuZnJvbShub2RlUHJpbWl0aXZlc01hcC5lbnRyaWVzKCkpLmZvckVhY2goKFtub2RlSW5kZXgsIHByaW1pdGl2ZXNdKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFubm90YXRpb24gPSBzY2hlbWFGaXJzdFBlcnNvbi5tZXNoQW5ub3RhdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgPyBzY2hlbWFGaXJzdFBlcnNvbi5tZXNoQW5ub3RhdGlvbnMuZmluZCgoYSkgPT4gYS5ub2RlID09PSBub2RlSW5kZXgpXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIG1lc2hBbm5vdGF0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzaGVzOiBwcmltaXRpdmVzLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAoX2EgPSBhbm5vdGF0aW9uID09PSBudWxsIHx8IGFubm90YXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFubm90YXRpb24udHlwZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ2JvdGgnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFZSTUZpcnN0UGVyc29uKGh1bWFub2lkLCBtZXNoQW5ub3RhdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3YwSW1wb3J0KGdsdGYsIGh1bWFub2lkKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSB0aGlzLnBhcnNlci5qc29uO1xuICAgICAgICAgICAgY29uc3QgdnJtRXh0ID0gKF9hID0ganNvbi5leHRlbnNpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuVlJNO1xuICAgICAgICAgICAgaWYgKCF2cm1FeHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYUZpcnN0UGVyc29uID0gdnJtRXh0LmZpcnN0UGVyc29uO1xuICAgICAgICAgICAgaWYgKCFzY2hlbWFGaXJzdFBlcnNvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWVzaEFubm90YXRpb25zID0gW107XG4gICAgICAgICAgICBjb25zdCBub2RlUHJpbWl0aXZlc01hcCA9IHlpZWxkIGdsdGZFeHRyYWN0UHJpbWl0aXZlc0Zyb21Ob2RlcyhnbHRmKTtcbiAgICAgICAgICAgIEFycmF5LmZyb20obm9kZVByaW1pdGl2ZXNNYXAuZW50cmllcygpKS5mb3JFYWNoKChbbm9kZUluZGV4LCBwcmltaXRpdmVzXSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjaGVtYU5vZGUgPSBqc29uLm5vZGVzW25vZGVJbmRleF07XG4gICAgICAgICAgICAgICAgY29uc3QgZmxhZyA9IHNjaGVtYUZpcnN0UGVyc29uLm1lc2hBbm5vdGF0aW9uc1xuICAgICAgICAgICAgICAgICAgICA/IHNjaGVtYUZpcnN0UGVyc29uLm1lc2hBbm5vdGF0aW9ucy5maW5kKChhKSA9PiBhLm1lc2ggPT09IHNjaGVtYU5vZGUubWVzaClcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgbWVzaEFubm90YXRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBtZXNoZXM6IHByaW1pdGl2ZXMsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMuX2NvbnZlcnRWMEZsYWdUb1YxVHlwZShmbGFnID09PSBudWxsIHx8IGZsYWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZsYWcuZmlyc3RQZXJzb25GbGFnKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBWUk1GaXJzdFBlcnNvbihodW1hbm9pZCwgbWVzaEFubm90YXRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9jb252ZXJ0VjBGbGFnVG9WMVR5cGUoZmxhZykge1xuICAgICAgICBpZiAoZmxhZyA9PT0gJ0ZpcnN0UGVyc29uT25seScpIHtcbiAgICAgICAgICAgIHJldHVybiAnZmlyc3RQZXJzb25Pbmx5JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmbGFnID09PSAnVGhpcmRQZXJzb25Pbmx5Jykge1xuICAgICAgICAgICAgcmV0dXJuICd0aGlyZFBlcnNvbk9ubHknO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZsYWcgPT09ICdBdXRvJykge1xuICAgICAgICAgICAgcmV0dXJuICdhdXRvJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnYm90aCc7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuY29uc3QgVlJNRmlyc3RQZXJzb25NZXNoQW5ub3RhdGlvblR5cGUgPSB7XG4gICAgQXV0bzogJ2F1dG8nLFxuICAgIEJvdGg6ICdib3RoJyxcbiAgICBUaGlyZFBlcnNvbk9ubHk6ICd0aGlyZFBlcnNvbk9ubHknLFxuICAgIEZpcnN0UGVyc29uT25seTogJ2ZpcnN0UGVyc29uT25seScsXG59O1xuXG5jb25zdCBfdjNBJDQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuY29uc3QgX3YzQiQyID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbmNvbnN0IF9xdWF0QSQ1ID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbmNsYXNzIFZSTUh1bWFub2lkSGVscGVyIGV4dGVuZHMgVEhSRUUuR3JvdXAge1xuICAgIGNvbnN0cnVjdG9yKGh1bWFub2lkKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudnJtSHVtYW5vaWQgPSBodW1hbm9pZDtcbiAgICAgICAgdGhpcy5fYm9uZUF4ZXNNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIE9iamVjdC52YWx1ZXMoaHVtYW5vaWQuaHVtYW5Cb25lcykuZm9yRWFjaCgoYm9uZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaGVscGVyID0gbmV3IFRIUkVFLkF4ZXNIZWxwZXIoMS4wKTtcbiAgICAgICAgICAgIGhlbHBlci5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBoZWxwZXIubWF0ZXJpYWwuZGVwdGhUZXN0ID0gZmFsc2U7XG4gICAgICAgICAgICBoZWxwZXIubWF0ZXJpYWwuZGVwdGhXcml0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5hZGQoaGVscGVyKTtcbiAgICAgICAgICAgIHRoaXMuX2JvbmVBeGVzTWFwLnNldChib25lLCBoZWxwZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgQXJyYXkuZnJvbSh0aGlzLl9ib25lQXhlc01hcC52YWx1ZXMoKSkuZm9yRWFjaCgoYXhlcykgPT4ge1xuICAgICAgICAgICAgYXhlcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG4gICAgICAgICAgICBheGVzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKSB7XG4gICAgICAgIEFycmF5LmZyb20odGhpcy5fYm9uZUF4ZXNNYXAuZW50cmllcygpKS5mb3JFYWNoKChbYm9uZSwgYXhlc10pID0+IHtcbiAgICAgICAgICAgIGJvbmUubm9kZS51cGRhdGVXb3JsZE1hdHJpeCh0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICBib25lLm5vZGUubWF0cml4V29ybGQuZGVjb21wb3NlKF92M0EkNCwgX3F1YXRBJDUsIF92M0IkMik7XG4gICAgICAgICAgICBjb25zdCBzY2FsZSA9IF92M0EkNC5zZXQoMC4xLCAwLjEsIDAuMSkuZGl2aWRlKF92M0IkMik7XG4gICAgICAgICAgICBheGVzLm1hdHJpeC5jb3B5KGJvbmUubm9kZS5tYXRyaXhXb3JsZCkuc2NhbGUoc2NhbGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3VwZXIudXBkYXRlTWF0cml4V29ybGQoZm9yY2UpO1xuICAgIH1cbn1cblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4vKipcbiAqIFRoZSBsaXN0IG9mIHtAbGluayBWUk1IdW1hbkJvbmVOYW1lfS4gRGVwZW5kZW5jeSBhd2FyZS5cbiAqL1xuY29uc3QgVlJNSHVtYW5Cb25lTGlzdCA9IFtcbiAgICAnaGlwcycsXG4gICAgJ3NwaW5lJyxcbiAgICAnY2hlc3QnLFxuICAgICd1cHBlckNoZXN0JyxcbiAgICAnbmVjaycsXG4gICAgJ2hlYWQnLFxuICAgICdsZWZ0RXllJyxcbiAgICAncmlnaHRFeWUnLFxuICAgICdqYXcnLFxuICAgICdsZWZ0VXBwZXJMZWcnLFxuICAgICdsZWZ0TG93ZXJMZWcnLFxuICAgICdsZWZ0Rm9vdCcsXG4gICAgJ2xlZnRUb2VzJyxcbiAgICAncmlnaHRVcHBlckxlZycsXG4gICAgJ3JpZ2h0TG93ZXJMZWcnLFxuICAgICdyaWdodEZvb3QnLFxuICAgICdyaWdodFRvZXMnLFxuICAgICdsZWZ0U2hvdWxkZXInLFxuICAgICdsZWZ0VXBwZXJBcm0nLFxuICAgICdsZWZ0TG93ZXJBcm0nLFxuICAgICdsZWZ0SGFuZCcsXG4gICAgJ3JpZ2h0U2hvdWxkZXInLFxuICAgICdyaWdodFVwcGVyQXJtJyxcbiAgICAncmlnaHRMb3dlckFybScsXG4gICAgJ3JpZ2h0SGFuZCcsXG4gICAgJ2xlZnRUaHVtYk1ldGFjYXJwYWwnLFxuICAgICdsZWZ0VGh1bWJQcm94aW1hbCcsXG4gICAgJ2xlZnRUaHVtYkRpc3RhbCcsXG4gICAgJ2xlZnRJbmRleFByb3hpbWFsJyxcbiAgICAnbGVmdEluZGV4SW50ZXJtZWRpYXRlJyxcbiAgICAnbGVmdEluZGV4RGlzdGFsJyxcbiAgICAnbGVmdE1pZGRsZVByb3hpbWFsJyxcbiAgICAnbGVmdE1pZGRsZUludGVybWVkaWF0ZScsXG4gICAgJ2xlZnRNaWRkbGVEaXN0YWwnLFxuICAgICdsZWZ0UmluZ1Byb3hpbWFsJyxcbiAgICAnbGVmdFJpbmdJbnRlcm1lZGlhdGUnLFxuICAgICdsZWZ0UmluZ0Rpc3RhbCcsXG4gICAgJ2xlZnRMaXR0bGVQcm94aW1hbCcsXG4gICAgJ2xlZnRMaXR0bGVJbnRlcm1lZGlhdGUnLFxuICAgICdsZWZ0TGl0dGxlRGlzdGFsJyxcbiAgICAncmlnaHRUaHVtYk1ldGFjYXJwYWwnLFxuICAgICdyaWdodFRodW1iUHJveGltYWwnLFxuICAgICdyaWdodFRodW1iRGlzdGFsJyxcbiAgICAncmlnaHRJbmRleFByb3hpbWFsJyxcbiAgICAncmlnaHRJbmRleEludGVybWVkaWF0ZScsXG4gICAgJ3JpZ2h0SW5kZXhEaXN0YWwnLFxuICAgICdyaWdodE1pZGRsZVByb3hpbWFsJyxcbiAgICAncmlnaHRNaWRkbGVJbnRlcm1lZGlhdGUnLFxuICAgICdyaWdodE1pZGRsZURpc3RhbCcsXG4gICAgJ3JpZ2h0UmluZ1Byb3hpbWFsJyxcbiAgICAncmlnaHRSaW5nSW50ZXJtZWRpYXRlJyxcbiAgICAncmlnaHRSaW5nRGlzdGFsJyxcbiAgICAncmlnaHRMaXR0bGVQcm94aW1hbCcsXG4gICAgJ3JpZ2h0TGl0dGxlSW50ZXJtZWRpYXRlJyxcbiAgICAncmlnaHRMaXR0bGVEaXN0YWwnLFxuXTtcblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4vKipcbiAqIFRoZSBuYW1lcyBvZiB7QGxpbmsgVlJNSHVtYW5vaWR9IGJvbmUgbmFtZXMuXG4gKlxuICogUmVmOiBodHRwczovL2dpdGh1Yi5jb20vdnJtLWMvdnJtLXNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi9WUk1DX3ZybS0xLjAvaHVtYW5vaWQubWRcbiAqL1xuY29uc3QgVlJNSHVtYW5Cb25lTmFtZSA9IHtcbiAgICBIaXBzOiAnaGlwcycsXG4gICAgU3BpbmU6ICdzcGluZScsXG4gICAgQ2hlc3Q6ICdjaGVzdCcsXG4gICAgVXBwZXJDaGVzdDogJ3VwcGVyQ2hlc3QnLFxuICAgIE5lY2s6ICduZWNrJyxcbiAgICBIZWFkOiAnaGVhZCcsXG4gICAgTGVmdEV5ZTogJ2xlZnRFeWUnLFxuICAgIFJpZ2h0RXllOiAncmlnaHRFeWUnLFxuICAgIEphdzogJ2phdycsXG4gICAgTGVmdFVwcGVyTGVnOiAnbGVmdFVwcGVyTGVnJyxcbiAgICBMZWZ0TG93ZXJMZWc6ICdsZWZ0TG93ZXJMZWcnLFxuICAgIExlZnRGb290OiAnbGVmdEZvb3QnLFxuICAgIExlZnRUb2VzOiAnbGVmdFRvZXMnLFxuICAgIFJpZ2h0VXBwZXJMZWc6ICdyaWdodFVwcGVyTGVnJyxcbiAgICBSaWdodExvd2VyTGVnOiAncmlnaHRMb3dlckxlZycsXG4gICAgUmlnaHRGb290OiAncmlnaHRGb290JyxcbiAgICBSaWdodFRvZXM6ICdyaWdodFRvZXMnLFxuICAgIExlZnRTaG91bGRlcjogJ2xlZnRTaG91bGRlcicsXG4gICAgTGVmdFVwcGVyQXJtOiAnbGVmdFVwcGVyQXJtJyxcbiAgICBMZWZ0TG93ZXJBcm06ICdsZWZ0TG93ZXJBcm0nLFxuICAgIExlZnRIYW5kOiAnbGVmdEhhbmQnLFxuICAgIFJpZ2h0U2hvdWxkZXI6ICdyaWdodFNob3VsZGVyJyxcbiAgICBSaWdodFVwcGVyQXJtOiAncmlnaHRVcHBlckFybScsXG4gICAgUmlnaHRMb3dlckFybTogJ3JpZ2h0TG93ZXJBcm0nLFxuICAgIFJpZ2h0SGFuZDogJ3JpZ2h0SGFuZCcsXG4gICAgTGVmdFRodW1iTWV0YWNhcnBhbDogJ2xlZnRUaHVtYk1ldGFjYXJwYWwnLFxuICAgIExlZnRUaHVtYlByb3hpbWFsOiAnbGVmdFRodW1iUHJveGltYWwnLFxuICAgIExlZnRUaHVtYkRpc3RhbDogJ2xlZnRUaHVtYkRpc3RhbCcsXG4gICAgTGVmdEluZGV4UHJveGltYWw6ICdsZWZ0SW5kZXhQcm94aW1hbCcsXG4gICAgTGVmdEluZGV4SW50ZXJtZWRpYXRlOiAnbGVmdEluZGV4SW50ZXJtZWRpYXRlJyxcbiAgICBMZWZ0SW5kZXhEaXN0YWw6ICdsZWZ0SW5kZXhEaXN0YWwnLFxuICAgIExlZnRNaWRkbGVQcm94aW1hbDogJ2xlZnRNaWRkbGVQcm94aW1hbCcsXG4gICAgTGVmdE1pZGRsZUludGVybWVkaWF0ZTogJ2xlZnRNaWRkbGVJbnRlcm1lZGlhdGUnLFxuICAgIExlZnRNaWRkbGVEaXN0YWw6ICdsZWZ0TWlkZGxlRGlzdGFsJyxcbiAgICBMZWZ0UmluZ1Byb3hpbWFsOiAnbGVmdFJpbmdQcm94aW1hbCcsXG4gICAgTGVmdFJpbmdJbnRlcm1lZGlhdGU6ICdsZWZ0UmluZ0ludGVybWVkaWF0ZScsXG4gICAgTGVmdFJpbmdEaXN0YWw6ICdsZWZ0UmluZ0Rpc3RhbCcsXG4gICAgTGVmdExpdHRsZVByb3hpbWFsOiAnbGVmdExpdHRsZVByb3hpbWFsJyxcbiAgICBMZWZ0TGl0dGxlSW50ZXJtZWRpYXRlOiAnbGVmdExpdHRsZUludGVybWVkaWF0ZScsXG4gICAgTGVmdExpdHRsZURpc3RhbDogJ2xlZnRMaXR0bGVEaXN0YWwnLFxuICAgIFJpZ2h0VGh1bWJNZXRhY2FycGFsOiAncmlnaHRUaHVtYk1ldGFjYXJwYWwnLFxuICAgIFJpZ2h0VGh1bWJQcm94aW1hbDogJ3JpZ2h0VGh1bWJQcm94aW1hbCcsXG4gICAgUmlnaHRUaHVtYkRpc3RhbDogJ3JpZ2h0VGh1bWJEaXN0YWwnLFxuICAgIFJpZ2h0SW5kZXhQcm94aW1hbDogJ3JpZ2h0SW5kZXhQcm94aW1hbCcsXG4gICAgUmlnaHRJbmRleEludGVybWVkaWF0ZTogJ3JpZ2h0SW5kZXhJbnRlcm1lZGlhdGUnLFxuICAgIFJpZ2h0SW5kZXhEaXN0YWw6ICdyaWdodEluZGV4RGlzdGFsJyxcbiAgICBSaWdodE1pZGRsZVByb3hpbWFsOiAncmlnaHRNaWRkbGVQcm94aW1hbCcsXG4gICAgUmlnaHRNaWRkbGVJbnRlcm1lZGlhdGU6ICdyaWdodE1pZGRsZUludGVybWVkaWF0ZScsXG4gICAgUmlnaHRNaWRkbGVEaXN0YWw6ICdyaWdodE1pZGRsZURpc3RhbCcsXG4gICAgUmlnaHRSaW5nUHJveGltYWw6ICdyaWdodFJpbmdQcm94aW1hbCcsXG4gICAgUmlnaHRSaW5nSW50ZXJtZWRpYXRlOiAncmlnaHRSaW5nSW50ZXJtZWRpYXRlJyxcbiAgICBSaWdodFJpbmdEaXN0YWw6ICdyaWdodFJpbmdEaXN0YWwnLFxuICAgIFJpZ2h0TGl0dGxlUHJveGltYWw6ICdyaWdodExpdHRsZVByb3hpbWFsJyxcbiAgICBSaWdodExpdHRsZUludGVybWVkaWF0ZTogJ3JpZ2h0TGl0dGxlSW50ZXJtZWRpYXRlJyxcbiAgICBSaWdodExpdHRsZURpc3RhbDogJ3JpZ2h0TGl0dGxlRGlzdGFsJyxcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuLyoqXG4gKiBBbiBvYmplY3QgdGhhdCBtYXBzIGZyb20ge0BsaW5rIFZSTUh1bWFuQm9uZU5hbWV9IHRvIGl0cyBwYXJlbnQge0BsaW5rIFZSTUh1bWFuQm9uZU5hbWV9LlxuICpcbiAqIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL3ZybS1jL3ZybS1zcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vVlJNQ192cm0tMS4wL2h1bWFub2lkLm1kXG4gKi9cbmNvbnN0IFZSTUh1bWFuQm9uZVBhcmVudE1hcCA9IHtcbiAgICBoaXBzOiBudWxsLFxuICAgIHNwaW5lOiAnaGlwcycsXG4gICAgY2hlc3Q6ICdzcGluZScsXG4gICAgdXBwZXJDaGVzdDogJ2NoZXN0JyxcbiAgICBuZWNrOiAndXBwZXJDaGVzdCcsXG4gICAgaGVhZDogJ25lY2snLFxuICAgIGxlZnRFeWU6ICdoZWFkJyxcbiAgICByaWdodEV5ZTogJ2hlYWQnLFxuICAgIGphdzogJ2hlYWQnLFxuICAgIGxlZnRVcHBlckxlZzogJ2hpcHMnLFxuICAgIGxlZnRMb3dlckxlZzogJ2xlZnRVcHBlckxlZycsXG4gICAgbGVmdEZvb3Q6ICdsZWZ0TG93ZXJMZWcnLFxuICAgIGxlZnRUb2VzOiAnbGVmdEZvb3QnLFxuICAgIHJpZ2h0VXBwZXJMZWc6ICdoaXBzJyxcbiAgICByaWdodExvd2VyTGVnOiAncmlnaHRVcHBlckxlZycsXG4gICAgcmlnaHRGb290OiAncmlnaHRMb3dlckxlZycsXG4gICAgcmlnaHRUb2VzOiAncmlnaHRGb290JyxcbiAgICBsZWZ0U2hvdWxkZXI6ICd1cHBlckNoZXN0JyxcbiAgICBsZWZ0VXBwZXJBcm06ICdsZWZ0U2hvdWxkZXInLFxuICAgIGxlZnRMb3dlckFybTogJ2xlZnRVcHBlckFybScsXG4gICAgbGVmdEhhbmQ6ICdsZWZ0TG93ZXJBcm0nLFxuICAgIHJpZ2h0U2hvdWxkZXI6ICd1cHBlckNoZXN0JyxcbiAgICByaWdodFVwcGVyQXJtOiAncmlnaHRTaG91bGRlcicsXG4gICAgcmlnaHRMb3dlckFybTogJ3JpZ2h0VXBwZXJBcm0nLFxuICAgIHJpZ2h0SGFuZDogJ3JpZ2h0TG93ZXJBcm0nLFxuICAgIGxlZnRUaHVtYk1ldGFjYXJwYWw6ICdsZWZ0SGFuZCcsXG4gICAgbGVmdFRodW1iUHJveGltYWw6ICdsZWZ0VGh1bWJNZXRhY2FycGFsJyxcbiAgICBsZWZ0VGh1bWJEaXN0YWw6ICdsZWZ0VGh1bWJQcm94aW1hbCcsXG4gICAgbGVmdEluZGV4UHJveGltYWw6ICdsZWZ0SGFuZCcsXG4gICAgbGVmdEluZGV4SW50ZXJtZWRpYXRlOiAnbGVmdEluZGV4UHJveGltYWwnLFxuICAgIGxlZnRJbmRleERpc3RhbDogJ2xlZnRJbmRleEludGVybWVkaWF0ZScsXG4gICAgbGVmdE1pZGRsZVByb3hpbWFsOiAnbGVmdEhhbmQnLFxuICAgIGxlZnRNaWRkbGVJbnRlcm1lZGlhdGU6ICdsZWZ0TWlkZGxlUHJveGltYWwnLFxuICAgIGxlZnRNaWRkbGVEaXN0YWw6ICdsZWZ0TWlkZGxlSW50ZXJtZWRpYXRlJyxcbiAgICBsZWZ0UmluZ1Byb3hpbWFsOiAnbGVmdEhhbmQnLFxuICAgIGxlZnRSaW5nSW50ZXJtZWRpYXRlOiAnbGVmdFJpbmdQcm94aW1hbCcsXG4gICAgbGVmdFJpbmdEaXN0YWw6ICdsZWZ0UmluZ0ludGVybWVkaWF0ZScsXG4gICAgbGVmdExpdHRsZVByb3hpbWFsOiAnbGVmdEhhbmQnLFxuICAgIGxlZnRMaXR0bGVJbnRlcm1lZGlhdGU6ICdsZWZ0TGl0dGxlUHJveGltYWwnLFxuICAgIGxlZnRMaXR0bGVEaXN0YWw6ICdsZWZ0TGl0dGxlSW50ZXJtZWRpYXRlJyxcbiAgICByaWdodFRodW1iTWV0YWNhcnBhbDogJ3JpZ2h0SGFuZCcsXG4gICAgcmlnaHRUaHVtYlByb3hpbWFsOiAncmlnaHRUaHVtYk1ldGFjYXJwYWwnLFxuICAgIHJpZ2h0VGh1bWJEaXN0YWw6ICdyaWdodFRodW1iUHJveGltYWwnLFxuICAgIHJpZ2h0SW5kZXhQcm94aW1hbDogJ3JpZ2h0SGFuZCcsXG4gICAgcmlnaHRJbmRleEludGVybWVkaWF0ZTogJ3JpZ2h0SW5kZXhQcm94aW1hbCcsXG4gICAgcmlnaHRJbmRleERpc3RhbDogJ3JpZ2h0SW5kZXhJbnRlcm1lZGlhdGUnLFxuICAgIHJpZ2h0TWlkZGxlUHJveGltYWw6ICdyaWdodEhhbmQnLFxuICAgIHJpZ2h0TWlkZGxlSW50ZXJtZWRpYXRlOiAncmlnaHRNaWRkbGVQcm94aW1hbCcsXG4gICAgcmlnaHRNaWRkbGVEaXN0YWw6ICdyaWdodE1pZGRsZUludGVybWVkaWF0ZScsXG4gICAgcmlnaHRSaW5nUHJveGltYWw6ICdyaWdodEhhbmQnLFxuICAgIHJpZ2h0UmluZ0ludGVybWVkaWF0ZTogJ3JpZ2h0UmluZ1Byb3hpbWFsJyxcbiAgICByaWdodFJpbmdEaXN0YWw6ICdyaWdodFJpbmdJbnRlcm1lZGlhdGUnLFxuICAgIHJpZ2h0TGl0dGxlUHJveGltYWw6ICdyaWdodEhhbmQnLFxuICAgIHJpZ2h0TGl0dGxlSW50ZXJtZWRpYXRlOiAncmlnaHRMaXR0bGVQcm94aW1hbCcsXG4gICAgcmlnaHRMaXR0bGVEaXN0YWw6ICdyaWdodExpdHRsZUludGVybWVkaWF0ZScsXG59O1xuXG4vKipcbiAqIEEgY29tcGF0IGZ1bmN0aW9uIGZvciBgUXVhdGVybmlvbi5pbnZlcnQoKWAgLyBgUXVhdGVybmlvbi5pbnZlcnNlKClgLlxuICogYFF1YXRlcm5pb24uaW52ZXJ0KClgIGlzIGludHJvZHVjZWQgaW4gcjEyMyBhbmQgYFF1YXRlcm5pb24uaW52ZXJzZSgpYCBlbWl0cyBhIHdhcm5pbmcuXG4gKiBXZSBhcmUgZ29pbmcgdG8gdXNlIHRoaXMgY29tcGF0IGZvciBhIHdoaWxlLlxuICogQHBhcmFtIHRhcmdldCBBIHRhcmdldCBxdWF0ZXJuaW9uXG4gKi9cbmZ1bmN0aW9uIHF1YXRJbnZlcnRDb21wYXQodGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldC5pbnZlcnQpIHtcbiAgICAgICAgdGFyZ2V0LmludmVydCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGFyZ2V0LmludmVyc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cblxuY29uc3QgX3YzQSQzID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbmNvbnN0IF9xdWF0QSQ0ID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbi8qKlxuICogQSBjbGFzcyByZXByZXNlbnRzIHRoZSBSaWcgb2YgYSBWUk0uXG4gKi9cbmNsYXNzIFZSTVJpZyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHtAbGluayBWUk1IdW1hbm9pZH0uXG4gICAgICogQHBhcmFtIGh1bWFuQm9uZXMgQSB7QGxpbmsgVlJNSHVtYW5Cb25lc30gY29udGFpbnMgYWxsIHRoZSBib25lcyBvZiB0aGUgbmV3IGh1bWFub2lkXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaHVtYW5Cb25lcykge1xuICAgICAgICB0aGlzLmh1bWFuQm9uZXMgPSBodW1hbkJvbmVzO1xuICAgICAgICB0aGlzLnJlc3RQb3NlID0gdGhpcy5nZXRBYnNvbHV0ZVBvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBjdXJyZW50IGFic29sdXRlIHBvc2Ugb2YgdGhpcyBodW1hbm9pZCBhcyBhIHtAbGluayBWUk1Qb3NlfS5cbiAgICAgKiBOb3RlIHRoYXQgdGhlIG91dHB1dCByZXN1bHQgd2lsbCBjb250YWluIGluaXRpYWwgc3RhdGUgb2YgdGhlIFZSTSBhbmQgbm90IGNvbXBhdGlibGUgYmV0d2VlbiBkaWZmZXJlbnQgbW9kZWxzLlxuICAgICAqIFlvdSBtaWdodCB3YW50IHRvIHVzZSB7QGxpbmsgZ2V0UG9zZX0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBnZXRBYnNvbHV0ZVBvc2UoKSB7XG4gICAgICAgIGNvbnN0IHBvc2UgPSB7fTtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5odW1hbkJvbmVzKS5mb3JFYWNoKCh2cm1Cb25lTmFtZVN0cmluZykgPT4ge1xuICAgICAgICAgICAgY29uc3QgdnJtQm9uZU5hbWUgPSB2cm1Cb25lTmFtZVN0cmluZztcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldEJvbmVOb2RlKHZybUJvbmVOYW1lKTtcbiAgICAgICAgICAgIC8vIElnbm9yZSB3aGVuIHRoZXJlIGFyZSBubyBib25lIG9uIHRoZSBWUk1IdW1hbm9pZFxuICAgICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gR2V0IHRoZSBwb3NpdGlvbiAvIHJvdGF0aW9uIGZyb20gdGhlIG5vZGVcbiAgICAgICAgICAgIF92M0EkMy5jb3B5KG5vZGUucG9zaXRpb24pO1xuICAgICAgICAgICAgX3F1YXRBJDQuY29weShub2RlLnF1YXRlcm5pb24pO1xuICAgICAgICAgICAgLy8gQ29udmVydCB0byByYXcgYXJyYXlzXG4gICAgICAgICAgICBwb3NlW3ZybUJvbmVOYW1lXSA9IHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogX3YzQSQzLnRvQXJyYXkoKSxcbiAgICAgICAgICAgICAgICByb3RhdGlvbjogX3F1YXRBJDQudG9BcnJheSgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwb3NlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIGN1cnJlbnQgcG9zZSBvZiB0aGlzIGh1bWFub2lkIGFzIGEge0BsaW5rIFZSTVBvc2V9LlxuICAgICAqXG4gICAgICogRWFjaCB0cmFuc2Zvcm0gaXMgYSBsb2NhbCB0cmFuc2Zvcm0gcmVsYXRpdmUgZnJvbSByZXN0IHBvc2UgKFQtcG9zZSkuXG4gICAgICovXG4gICAgZ2V0UG9zZSgpIHtcbiAgICAgICAgY29uc3QgcG9zZSA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmh1bWFuQm9uZXMpLmZvckVhY2goKGJvbmVOYW1lU3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBib25lTmFtZSA9IGJvbmVOYW1lU3RyaW5nO1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZ2V0Qm9uZU5vZGUoYm9uZU5hbWUpO1xuICAgICAgICAgICAgLy8gSWdub3JlIHdoZW4gdGhlcmUgYXJlIG5vIGJvbmUgb24gdGhlIFZSTUh1bWFub2lkXG4gICAgICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUYWtlIGEgZGlmZiBmcm9tIHJlc3RQb3NlXG4gICAgICAgICAgICBfdjNBJDMuc2V0KDAsIDAsIDApO1xuICAgICAgICAgICAgX3F1YXRBJDQuaWRlbnRpdHkoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3RTdGF0ZSA9IHRoaXMucmVzdFBvc2VbYm9uZU5hbWVdO1xuICAgICAgICAgICAgaWYgKHJlc3RTdGF0ZSA9PT0gbnVsbCB8fCByZXN0U3RhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3RTdGF0ZS5wb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIF92M0EkMy5mcm9tQXJyYXkocmVzdFN0YXRlLnBvc2l0aW9uKS5uZWdhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN0U3RhdGUgPT09IG51bGwgfHwgcmVzdFN0YXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXN0U3RhdGUucm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICBxdWF0SW52ZXJ0Q29tcGF0KF9xdWF0QSQ0LmZyb21BcnJheShyZXN0U3RhdGUucm90YXRpb24pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEdldCB0aGUgcG9zaXRpb24gLyByb3RhdGlvbiBmcm9tIHRoZSBub2RlXG4gICAgICAgICAgICBfdjNBJDMuYWRkKG5vZGUucG9zaXRpb24pO1xuICAgICAgICAgICAgX3F1YXRBJDQucHJlbXVsdGlwbHkobm9kZS5xdWF0ZXJuaW9uKTtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgdG8gcmF3IGFycmF5c1xuICAgICAgICAgICAgcG9zZVtib25lTmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IF92M0EkMy50b0FycmF5KCksXG4gICAgICAgICAgICAgICAgcm90YXRpb246IF9xdWF0QSQ0LnRvQXJyYXkoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcG9zZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGV0IHRoZSBodW1hbm9pZCBkbyBhIHNwZWNpZmllZCBwb3NlLlxuICAgICAqXG4gICAgICogRWFjaCB0cmFuc2Zvcm0gaGF2ZSB0byBiZSBhIGxvY2FsIHRyYW5zZm9ybSByZWxhdGl2ZSBmcm9tIHJlc3QgcG9zZSAoVC1wb3NlKS5cbiAgICAgKiBZb3UgY2FuIHBhc3Mgd2hhdCB5b3UgZ290IGZyb20ge0BsaW5rIGdldFBvc2V9LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBvc2VPYmplY3QgQSBbW1ZSTVBvc2VdXSB0aGF0IHJlcHJlc2VudHMgYSBzaW5nbGUgcG9zZVxuICAgICAqL1xuICAgIHNldFBvc2UocG9zZU9iamVjdCkge1xuICAgICAgICBPYmplY3QuZW50cmllcyhwb3NlT2JqZWN0KS5mb3JFYWNoKChbYm9uZU5hbWVTdHJpbmcsIHN0YXRlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYm9uZU5hbWUgPSBib25lTmFtZVN0cmluZztcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldEJvbmVOb2RlKGJvbmVOYW1lKTtcbiAgICAgICAgICAgIC8vIElnbm9yZSB3aGVuIHRoZXJlIGFyZSBubyBib25lIHRoYXQgaXMgZGVmaW5lZCBpbiB0aGUgcG9zZSBvbiB0aGUgVlJNSHVtYW5vaWRcbiAgICAgICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3RTdGF0ZSA9IHRoaXMucmVzdFBvc2VbYm9uZU5hbWVdO1xuICAgICAgICAgICAgaWYgKCFyZXN0U3RhdGUpIHtcbiAgICAgICAgICAgICAgICAvLyBJdCdzIHZlcnkgdW5saWtlbHkuIFBvc3NpYmx5IGEgYnVnXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQXBwbHkgdGhlIHN0YXRlIHRvIHRoZSBhY3R1YWwgYm9uZVxuICAgICAgICAgICAgaWYgKHN0YXRlID09PSBudWxsIHx8IHN0YXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdGF0ZS5wb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIG5vZGUucG9zaXRpb24uZnJvbUFycmF5KHN0YXRlLnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdFN0YXRlLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUucG9zaXRpb24uYWRkKF92M0EkMy5mcm9tQXJyYXkocmVzdFN0YXRlLnBvc2l0aW9uKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlID09PSBudWxsIHx8IHN0YXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdGF0ZS5yb3RhdGlvbikge1xuICAgICAgICAgICAgICAgIG5vZGUucXVhdGVybmlvbi5mcm9tQXJyYXkoc3RhdGUucm90YXRpb24pO1xuICAgICAgICAgICAgICAgIGlmIChyZXN0U3RhdGUucm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5xdWF0ZXJuaW9uLm11bHRpcGx5KF9xdWF0QSQ0LmZyb21BcnJheShyZXN0U3RhdGUucm90YXRpb24pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgaHVtYW5vaWQgdG8gaXRzIHJlc3QgcG9zZS5cbiAgICAgKi9cbiAgICByZXNldFBvc2UoKSB7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMucmVzdFBvc2UpLmZvckVhY2goKFtib25lTmFtZSwgcmVzdF0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldEJvbmVOb2RlKGJvbmVOYW1lKTtcbiAgICAgICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN0ID09PSBudWxsIHx8IHJlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3QucG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICBub2RlLnBvc2l0aW9uLmZyb21BcnJheShyZXN0LnBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN0ID09PSBudWxsIHx8IHJlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3Qucm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICBub2RlLnF1YXRlcm5pb24uZnJvbUFycmF5KHJlc3Qucm90YXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgYm9uZSBib3VuZCB0byBhIHNwZWNpZmllZCB7QGxpbmsgVlJNSHVtYW5Cb25lTmFtZX0sIGFzIGEge0BsaW5rIFZSTUh1bWFuQm9uZX0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBib25lIHlvdSB3YW50XG4gICAgICovXG4gICAgZ2V0Qm9uZShuYW1lKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuaHVtYW5Cb25lc1tuYW1lXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBib25lIGJvdW5kIHRvIGEgc3BlY2lmaWVkIHtAbGluayBWUk1IdW1hbkJvbmVOYW1lfSwgYXMgYSBgVEhSRUUuT2JqZWN0M0RgLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgYm9uZSB5b3Ugd2FudFxuICAgICAqL1xuICAgIGdldEJvbmVOb2RlKG5hbWUpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuaHVtYW5Cb25lc1tuYW1lXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5vZGUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XG4gICAgfVxufVxuXG5jb25zdCBfdjNBJDIgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuY29uc3QgX3F1YXRBJDMgPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuY29uc3QgX2JvbmVXb3JsZFBvcyA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50cyB0aGUgbm9ybWFsaXplZCBSaWcgb2YgYSBWUk0uXG4gKi9cbmNsYXNzIFZSTUh1bWFub2lkUmlnIGV4dGVuZHMgVlJNUmlnIHtcbiAgICBzdGF0aWMgX3NldHVwVHJhbnNmb3Jtcyhtb2RlbFJpZykge1xuICAgICAgICBjb25zdCByb290ID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgICAgIHJvb3QubmFtZSA9ICdWUk1IdW1hbm9pZFJpZyc7XG4gICAgICAgIC8vIHN0b3JlIGJvbmVXb3JsZFBvc2l0aW9ucyBhbmQgYm9uZVdvcmxkUm90YXRpb25zXG4gICAgICAgIGNvbnN0IGJvbmVXb3JsZFBvc2l0aW9ucyA9IHt9O1xuICAgICAgICBjb25zdCBib25lV29ybGRSb3RhdGlvbnMgPSB7fTtcbiAgICAgICAgY29uc3QgYm9uZVJvdGF0aW9ucyA9IHt9O1xuICAgICAgICBWUk1IdW1hbkJvbmVMaXN0LmZvckVhY2goKGJvbmVOYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBib25lTm9kZSA9IG1vZGVsUmlnLmdldEJvbmVOb2RlKGJvbmVOYW1lKTtcbiAgICAgICAgICAgIGlmIChib25lTm9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvbmVXb3JsZFBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBib25lV29ybGRSb3RhdGlvbiA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG4gICAgICAgICAgICAgICAgYm9uZU5vZGUudXBkYXRlV29ybGRNYXRyaXgodHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGJvbmVOb2RlLm1hdHJpeFdvcmxkLmRlY29tcG9zZShib25lV29ybGRQb3NpdGlvbiwgYm9uZVdvcmxkUm90YXRpb24sIF92M0EkMik7XG4gICAgICAgICAgICAgICAgYm9uZVdvcmxkUG9zaXRpb25zW2JvbmVOYW1lXSA9IGJvbmVXb3JsZFBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIGJvbmVXb3JsZFJvdGF0aW9uc1tib25lTmFtZV0gPSBib25lV29ybGRSb3RhdGlvbjtcbiAgICAgICAgICAgICAgICBib25lUm90YXRpb25zW2JvbmVOYW1lXSA9IGJvbmVOb2RlLnF1YXRlcm5pb24uY2xvbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGJ1aWxkIHJpZyBoaWVyYXJjaHkgKyBzdG9yZSBwYXJlbnRXb3JsZFJvdGF0aW9uc1xuICAgICAgICBjb25zdCBwYXJlbnRXb3JsZFJvdGF0aW9ucyA9IHt9O1xuICAgICAgICBjb25zdCByaWdCb25lcyA9IHt9O1xuICAgICAgICBWUk1IdW1hbkJvbmVMaXN0LmZvckVhY2goKGJvbmVOYW1lKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCBib25lTm9kZSA9IG1vZGVsUmlnLmdldEJvbmVOb2RlKGJvbmVOYW1lKTtcbiAgICAgICAgICAgIGlmIChib25lTm9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvbmVXb3JsZFBvc2l0aW9uID0gYm9uZVdvcmxkUG9zaXRpb25zW2JvbmVOYW1lXTtcbiAgICAgICAgICAgICAgICAvLyBzZWUgdGhlIG5lYXJlc3QgcGFyZW50IHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRCb25lTmFtZSA9IGJvbmVOYW1lO1xuICAgICAgICAgICAgICAgIGxldCBwYXJlbnRXb3JsZFBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIGxldCBwYXJlbnRXb3JsZFJvdGF0aW9uO1xuICAgICAgICAgICAgICAgIHdoaWxlIChwYXJlbnRXb3JsZFBvc2l0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEJvbmVOYW1lID0gVlJNSHVtYW5Cb25lUGFyZW50TWFwW2N1cnJlbnRCb25lTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Qm9uZU5hbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGFyZW50V29ybGRQb3NpdGlvbiA9IGJvbmVXb3JsZFBvc2l0aW9uc1tjdXJyZW50Qm9uZU5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRXb3JsZFJvdGF0aW9uID0gYm9uZVdvcmxkUm90YXRpb25zW2N1cnJlbnRCb25lTmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGFkZCB0byBoaWVyYXJjaHlcbiAgICAgICAgICAgICAgICBjb25zdCByaWdCb25lTm9kZSA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgICAgICAgICAgICAgIHJpZ0JvbmVOb2RlLm5hbWUgPSAnTm9ybWFsaXplZF8nICsgYm9uZU5vZGUubmFtZTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRSaWdCb25lTm9kZSA9IChjdXJyZW50Qm9uZU5hbWUgPyAoX2EgPSByaWdCb25lc1tjdXJyZW50Qm9uZU5hbWVdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eubm9kZSA6IHJvb3QpO1xuICAgICAgICAgICAgICAgIHBhcmVudFJpZ0JvbmVOb2RlLmFkZChyaWdCb25lTm9kZSk7XG4gICAgICAgICAgICAgICAgcmlnQm9uZU5vZGUucG9zaXRpb24uY29weShib25lV29ybGRQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudFdvcmxkUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmlnQm9uZU5vZGUucG9zaXRpb24uc3ViKHBhcmVudFdvcmxkUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByaWdCb25lc1tib25lTmFtZV0gPSB7IG5vZGU6IHJpZ0JvbmVOb2RlIH07XG4gICAgICAgICAgICAgICAgLy8gc3RvcmUgcGFyZW50V29ybGRSb3RhdGlvblxuICAgICAgICAgICAgICAgIHBhcmVudFdvcmxkUm90YXRpb25zW2JvbmVOYW1lXSA9IHBhcmVudFdvcmxkUm90YXRpb24gIT09IG51bGwgJiYgcGFyZW50V29ybGRSb3RhdGlvbiAhPT0gdm9pZCAwID8gcGFyZW50V29ybGRSb3RhdGlvbiA6IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmlnQm9uZXM6IHJpZ0JvbmVzLFxuICAgICAgICAgICAgcm9vdCxcbiAgICAgICAgICAgIHBhcmVudFdvcmxkUm90YXRpb25zLFxuICAgICAgICAgICAgYm9uZVJvdGF0aW9ucyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaHVtYW5vaWQpIHtcbiAgICAgICAgY29uc3QgeyByaWdCb25lcywgcm9vdCwgcGFyZW50V29ybGRSb3RhdGlvbnMsIGJvbmVSb3RhdGlvbnMgfSA9IFZSTUh1bWFub2lkUmlnLl9zZXR1cFRyYW5zZm9ybXMoaHVtYW5vaWQpO1xuICAgICAgICBzdXBlcihyaWdCb25lcyk7XG4gICAgICAgIHRoaXMub3JpZ2luYWwgPSBodW1hbm9pZDtcbiAgICAgICAgdGhpcy5yb290ID0gcm9vdDtcbiAgICAgICAgdGhpcy5fcGFyZW50V29ybGRSb3RhdGlvbnMgPSBwYXJlbnRXb3JsZFJvdGF0aW9ucztcbiAgICAgICAgdGhpcy5fYm9uZVJvdGF0aW9ucyA9IGJvbmVSb3RhdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGlzIGh1bWFub2lkIHJpZy5cbiAgICAgKi9cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIFZSTUh1bWFuQm9uZUxpc3QuZm9yRWFjaCgoYm9uZU5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJvbmVOb2RlID0gdGhpcy5vcmlnaW5hbC5nZXRCb25lTm9kZShib25lTmFtZSk7XG4gICAgICAgICAgICBpZiAoYm9uZU5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJpZ0JvbmVOb2RlID0gdGhpcy5nZXRCb25lTm9kZShib25lTmFtZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50V29ybGRSb3RhdGlvbiA9IHRoaXMuX3BhcmVudFdvcmxkUm90YXRpb25zW2JvbmVOYW1lXTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnZQYXJlbnRXb3JsZFJvdGF0aW9uID0gX3F1YXRBJDMuY29weShwYXJlbnRXb3JsZFJvdGF0aW9uKS5pbnZlcnQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBib25lUm90YXRpb24gPSB0aGlzLl9ib25lUm90YXRpb25zW2JvbmVOYW1lXTtcbiAgICAgICAgICAgICAgICBib25lTm9kZS5xdWF0ZXJuaW9uXG4gICAgICAgICAgICAgICAgICAgIC5jb3B5KHJpZ0JvbmVOb2RlLnF1YXRlcm5pb24pXG4gICAgICAgICAgICAgICAgICAgIC5tdWx0aXBseShwYXJlbnRXb3JsZFJvdGF0aW9uKVxuICAgICAgICAgICAgICAgICAgICAucHJlbXVsdGlwbHkoaW52UGFyZW50V29ybGRSb3RhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgLm11bHRpcGx5KGJvbmVSb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgLy8gTW92ZSB0aGUgbWFzcyBjZW50ZXIgb2YgdGhlIFZSTVxuICAgICAgICAgICAgICAgIGlmIChib25lTmFtZSA9PT0gJ2hpcHMnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvbmVXb3JsZFBvc2l0aW9uID0gcmlnQm9uZU5vZGUuZ2V0V29ybGRQb3NpdGlvbihfYm9uZVdvcmxkUG9zKTtcbiAgICAgICAgICAgICAgICAgICAgYm9uZU5vZGUucGFyZW50LnVwZGF0ZVdvcmxkTWF0cml4KHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50V29ybGRNYXRyaXggPSBib25lTm9kZS5wYXJlbnQubWF0cml4V29ybGQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsUG9zaXRpb24gPSBib25lV29ybGRQb3NpdGlvbi5hcHBseU1hdHJpeDQocGFyZW50V29ybGRNYXRyaXguaW52ZXJ0KCkpO1xuICAgICAgICAgICAgICAgICAgICBib25lTm9kZS5wb3NpdGlvbi5jb3B5KGxvY2FsUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50cyBhIGh1bWFub2lkIG9mIGEgVlJNLlxuICovXG5jbGFzcyBWUk1IdW1hbm9pZCB7XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZC4gVXNlIGVpdGhlciB7QGxpbmsgcmF3UmVzdFBvc2V9IG9yIHtAbGluayBub3JtYWxpemVkUmVzdFBvc2V9IGluc3RlYWQuXG4gICAgICovXG4gICAgZ2V0IHJlc3RQb3NlKCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1ZSTUh1bWFub2lkOiByZXN0UG9zZSBpcyBkZXByZWNhdGVkLiBVc2UgZWl0aGVyIHJhd1Jlc3RQb3NlIG9yIG5vcm1hbGl6ZWRSZXN0UG9zZSBpbnN0ZWFkLicpO1xuICAgICAgICByZXR1cm4gdGhpcy5yYXdSZXN0UG9zZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSB7QGxpbmsgVlJNUG9zZX0gb2YgaXRzIHJhdyBodW1hbiBib25lcyB0aGF0IGlzIGl0cyBkZWZhdWx0IHN0YXRlLlxuICAgICAqIE5vdGUgdGhhdCBpdCdzIG5vdCBjb21wYXRpYmxlIHdpdGgge0BsaW5rIHNldFJhd1Bvc2V9IGFuZCB7QGxpbmsgZ2V0UmF3UG9zZX0sIHNpbmNlIGl0IGNvbnRhaW5zIG5vbi1yZWxhdGl2ZSB2YWx1ZXMgb2YgZWFjaCBsb2NhbCB0cmFuc2Zvcm1zLlxuICAgICAqL1xuICAgIGdldCByYXdSZXN0UG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jhd0h1bWFuQm9uZXMucmVzdFBvc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEge0BsaW5rIFZSTVBvc2V9IG9mIGl0cyBub3JtYWxpemVkIGh1bWFuIGJvbmVzIHRoYXQgaXMgaXRzIGRlZmF1bHQgc3RhdGUuXG4gICAgICogTm90ZSB0aGF0IGl0J3Mgbm90IGNvbXBhdGlibGUgd2l0aCB7QGxpbmsgc2V0Tm9ybWFsaXplZFBvc2V9IGFuZCB7QGxpbmsgZ2V0Tm9ybWFsaXplZFBvc2V9LCBzaW5jZSBpdCBjb250YWlucyBub24tcmVsYXRpdmUgdmFsdWVzIG9mIGVhY2ggbG9jYWwgdHJhbnNmb3Jtcy5cbiAgICAgKi9cbiAgICBnZXQgbm9ybWFsaXplZFJlc3RQb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplZEh1bWFuQm9uZXMucmVzdFBvc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgbWFwIGZyb20ge0BsaW5rIFZSTUh1bWFuQm9uZU5hbWV9IHRvIHJhdyB7QGxpbmsgVlJNSHVtYW5Cb25lfXMuXG4gICAgICovXG4gICAgZ2V0IGh1bWFuQm9uZXMoKSB7XG4gICAgICAgIC8vIGFuIGFsaWFzIG9mIGByYXdIdW1hbkJvbmVzYFxuICAgICAgICByZXR1cm4gdGhpcy5fcmF3SHVtYW5Cb25lcy5odW1hbkJvbmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIG1hcCBmcm9tIHtAbGluayBWUk1IdW1hbkJvbmVOYW1lfSB0byByYXcge0BsaW5rIFZSTUh1bWFuQm9uZX1zLlxuICAgICAqL1xuICAgIGdldCByYXdIdW1hbkJvbmVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmF3SHVtYW5Cb25lcy5odW1hbkJvbmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIG1hcCBmcm9tIHtAbGluayBWUk1IdW1hbkJvbmVOYW1lfSB0byBub3JtYWxpemVkIHtAbGluayBWUk1IdW1hbkJvbmV9cy5cbiAgICAgKi9cbiAgICBnZXQgbm9ybWFsaXplZEh1bWFuQm9uZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub3JtYWxpemVkSHVtYW5Cb25lcy5odW1hbkJvbmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgcm9vdCBvZiBub3JtYWxpemVkIHtAbGluayBWUk1IdW1hbkJvbmV9cy5cbiAgICAgKi9cbiAgICBnZXQgbm9ybWFsaXplZEh1bWFuQm9uZXNSb290KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplZEh1bWFuQm9uZXMucm9vdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHtAbGluayBWUk1IdW1hbm9pZH0uXG4gICAgICogQHBhcmFtIGh1bWFuQm9uZXMgQSB7QGxpbmsgVlJNSHVtYW5Cb25lc30gY29udGFpbnMgYWxsIHRoZSBib25lcyBvZiB0aGUgbmV3IGh1bWFub2lkXG4gICAgICogQHBhcmFtIGF1dG9VcGRhdGVIdW1hbkJvbmVzIFdoZXRoZXIgaXQgY29waWVzIHBvc2UgZnJvbSBub3JtYWxpemVkSHVtYW5Cb25lcyB0byByYXdIdW1hbkJvbmVzIG9uIHtAbGluayB1cGRhdGV9LiBgdHJ1ZWAgYnkgZGVmYXVsdC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihodW1hbkJvbmVzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5hdXRvVXBkYXRlSHVtYW5Cb25lcyA9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hdXRvVXBkYXRlSHVtYW5Cb25lcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmF3SHVtYW5Cb25lcyA9IG5ldyBWUk1SaWcoaHVtYW5Cb25lcyk7XG4gICAgICAgIHRoaXMuX25vcm1hbGl6ZWRIdW1hbkJvbmVzID0gbmV3IFZSTUh1bWFub2lkUmlnKHRoaXMuX3Jhd0h1bWFuQm9uZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3B5IHRoZSBnaXZlbiB7QGxpbmsgVlJNSHVtYW5vaWR9IGludG8gdGhpcyBvbmUuXG4gICAgICogQHBhcmFtIHNvdXJjZSBUaGUge0BsaW5rIFZSTUh1bWFub2lkfSB5b3Ugd2FudCB0byBjb3B5XG4gICAgICogQHJldHVybnMgdGhpc1xuICAgICAqL1xuICAgIGNvcHkoc291cmNlKSB7XG4gICAgICAgIHRoaXMuYXV0b1VwZGF0ZUh1bWFuQm9uZXMgPSBzb3VyY2UuYXV0b1VwZGF0ZUh1bWFuQm9uZXM7XG4gICAgICAgIHRoaXMuX3Jhd0h1bWFuQm9uZXMgPSBuZXcgVlJNUmlnKHNvdXJjZS5odW1hbkJvbmVzKTtcbiAgICAgICAgdGhpcy5fbm9ybWFsaXplZEh1bWFuQm9uZXMgPSBuZXcgVlJNSHVtYW5vaWRSaWcodGhpcy5fcmF3SHVtYW5Cb25lcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgY2xvbmUgb2YgdGhpcyB7QGxpbmsgVlJNSHVtYW5vaWR9LlxuICAgICAqIEByZXR1cm5zIENvcGllZCB7QGxpbmsgVlJNSHVtYW5vaWR9XG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVlJNSHVtYW5vaWQodGhpcy5odW1hbkJvbmVzLCB7IGF1dG9VcGRhdGVIdW1hbkJvbmVzOiB0aGlzLmF1dG9VcGRhdGVIdW1hbkJvbmVzIH0pLmNvcHkodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQuIFVzZSBlaXRoZXIge0BsaW5rIGdldFJhd0Fic29sdXRlUG9zZX0gb3Ige0BsaW5rIGdldE5vcm1hbGl6ZWRBYnNvbHV0ZVBvc2V9IGluc3RlYWQuXG4gICAgICovXG4gICAgZ2V0QWJzb2x1dGVQb3NlKCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1ZSTUh1bWFub2lkOiBnZXRBYnNvbHV0ZVBvc2UoKSBpcyBkZXByZWNhdGVkLiBVc2UgZWl0aGVyIGdldFJhd0Fic29sdXRlUG9zZSgpIG9yIGdldE5vcm1hbGl6ZWRBYnNvbHV0ZVBvc2UoKSBpbnN0ZWFkLicpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSYXdBYnNvbHV0ZVBvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBjdXJyZW50IGFic29sdXRlIHBvc2Ugb2YgdGhpcyByYXcgaHVtYW4gYm9uZXMgYXMgYSB7QGxpbmsgVlJNUG9zZX0uXG4gICAgICogTm90ZSB0aGF0IHRoZSBvdXRwdXQgcmVzdWx0IHdpbGwgY29udGFpbiBpbml0aWFsIHN0YXRlIG9mIHRoZSBWUk0gYW5kIG5vdCBjb21wYXRpYmxlIGJldHdlZW4gZGlmZmVyZW50IG1vZGVscy5cbiAgICAgKiBZb3UgbWlnaHQgd2FudCB0byB1c2Uge0BsaW5rIGdldFJhd1Bvc2V9IGluc3RlYWQuXG4gICAgICovXG4gICAgZ2V0UmF3QWJzb2x1dGVQb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmF3SHVtYW5Cb25lcy5nZXRBYnNvbHV0ZVBvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBjdXJyZW50IGFic29sdXRlIHBvc2Ugb2YgdGhpcyBub3JtYWxpemVkIGh1bWFuIGJvbmVzIGFzIGEge0BsaW5rIFZSTVBvc2V9LlxuICAgICAqIE5vdGUgdGhhdCB0aGUgb3V0cHV0IHJlc3VsdCB3aWxsIGNvbnRhaW4gaW5pdGlhbCBzdGF0ZSBvZiB0aGUgVlJNIGFuZCBub3QgY29tcGF0aWJsZSBiZXR3ZWVuIGRpZmZlcmVudCBtb2RlbHMuXG4gICAgICogWW91IG1pZ2h0IHdhbnQgdG8gdXNlIHtAbGluayBnZXROb3JtYWxpemVkUG9zZX0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBnZXROb3JtYWxpemVkQWJzb2x1dGVQb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplZEh1bWFuQm9uZXMuZ2V0QWJzb2x1dGVQb3NlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQuIFVzZSBlaXRoZXIge0BsaW5rIGdldFJhd1Bvc2V9IG9yIHtAbGluayBnZXROb3JtYWxpemVkUG9zZX0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBnZXRQb3NlKCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1ZSTUh1bWFub2lkOiBnZXRQb3NlKCkgaXMgZGVwcmVjYXRlZC4gVXNlIGVpdGhlciBnZXRSYXdQb3NlKCkgb3IgZ2V0Tm9ybWFsaXplZFBvc2UoKSBpbnN0ZWFkLicpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSYXdQb3NlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgY3VycmVudCBwb3NlIG9mIHJhdyBodW1hbiBib25lcyBhcyBhIHtAbGluayBWUk1Qb3NlfS5cbiAgICAgKlxuICAgICAqIEVhY2ggdHJhbnNmb3JtIGlzIGEgbG9jYWwgdHJhbnNmb3JtIHJlbGF0aXZlIGZyb20gcmVzdCBwb3NlIChULXBvc2UpLlxuICAgICAqL1xuICAgIGdldFJhd1Bvc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYXdIdW1hbkJvbmVzLmdldFBvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBjdXJyZW50IHBvc2Ugb2Ygbm9ybWFsaXplZCBodW1hbiBib25lcyBhcyBhIHtAbGluayBWUk1Qb3NlfS5cbiAgICAgKlxuICAgICAqIEVhY2ggdHJhbnNmb3JtIGlzIGEgbG9jYWwgdHJhbnNmb3JtIHJlbGF0aXZlIGZyb20gcmVzdCBwb3NlIChULXBvc2UpLlxuICAgICAqL1xuICAgIGdldE5vcm1hbGl6ZWRQb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplZEh1bWFuQm9uZXMuZ2V0UG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBEZXByZWNhdGVkLiBVc2UgZWl0aGVyIHtAbGluayBzZXRSYXdQb3NlfSBvciB7QGxpbmsgc2V0Tm9ybWFsaXplZFBvc2V9IGluc3RlYWQuXG4gICAgICovXG4gICAgc2V0UG9zZShwb3NlT2JqZWN0KSB7XG4gICAgICAgIGNvbnNvbGUud2FybignVlJNSHVtYW5vaWQ6IHNldFBvc2UoKSBpcyBkZXByZWNhdGVkLiBVc2UgZWl0aGVyIHNldFJhd1Bvc2UoKSBvciBzZXROb3JtYWxpemVkUG9zZSgpIGluc3RlYWQuJyk7XG4gICAgICAgIHJldHVybiB0aGlzLnNldFJhd1Bvc2UocG9zZU9iamVjdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExldCB0aGUgcmF3IGh1bWFuIGJvbmVzIGRvIGEgc3BlY2lmaWVkIHBvc2UuXG4gICAgICpcbiAgICAgKiBFYWNoIHRyYW5zZm9ybSBoYXZlIHRvIGJlIGEgbG9jYWwgdHJhbnNmb3JtIHJlbGF0aXZlIGZyb20gcmVzdCBwb3NlIChULXBvc2UpLlxuICAgICAqIFlvdSBjYW4gcGFzcyB3aGF0IHlvdSBnb3QgZnJvbSB7QGxpbmsgZ2V0UmF3UG9zZX0uXG4gICAgICpcbiAgICAgKiBJZiB5b3UgYXJlIHVzaW5nIHtAbGluayBhdXRvVXBkYXRlSHVtYW5Cb25lc30sIHlvdSBtaWdodCB3YW50IHRvIHVzZSB7QGxpbmsgc2V0Tm9ybWFsaXplZFBvc2V9IGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcG9zZU9iamVjdCBBIHtAbGluayBWUk1Qb3NlfSB0aGF0IHJlcHJlc2VudHMgYSBzaW5nbGUgcG9zZVxuICAgICAqL1xuICAgIHNldFJhd1Bvc2UocG9zZU9iamVjdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmF3SHVtYW5Cb25lcy5zZXRQb3NlKHBvc2VPYmplY3QpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMZXQgdGhlIG5vcm1hbGl6ZWQgaHVtYW4gYm9uZXMgZG8gYSBzcGVjaWZpZWQgcG9zZS5cbiAgICAgKlxuICAgICAqIEVhY2ggdHJhbnNmb3JtIGhhdmUgdG8gYmUgYSBsb2NhbCB0cmFuc2Zvcm0gcmVsYXRpdmUgZnJvbSByZXN0IHBvc2UgKFQtcG9zZSkuXG4gICAgICogWW91IGNhbiBwYXNzIHdoYXQgeW91IGdvdCBmcm9tIHtAbGluayBnZXROb3JtYWxpemVkUG9zZX0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcG9zZU9iamVjdCBBIHtAbGluayBWUk1Qb3NlfSB0aGF0IHJlcHJlc2VudHMgYSBzaW5nbGUgcG9zZVxuICAgICAqL1xuICAgIHNldE5vcm1hbGl6ZWRQb3NlKHBvc2VPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vcm1hbGl6ZWRIdW1hbkJvbmVzLnNldFBvc2UocG9zZU9iamVjdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQuIFVzZSBlaXRoZXIge0BsaW5rIHJlc2V0UmF3UG9zZX0gb3Ige0BsaW5rIHJlc2V0Tm9ybWFsaXplZFBvc2V9IGluc3RlYWQuXG4gICAgICovXG4gICAgcmVzZXRQb3NlKCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1ZSTUh1bWFub2lkOiByZXNldFBvc2UoKSBpcyBkZXByZWNhdGVkLiBVc2UgZWl0aGVyIHJlc2V0UmF3UG9zZSgpIG9yIHJlc2V0Tm9ybWFsaXplZFBvc2UoKSBpbnN0ZWFkLicpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXNldFJhd1Bvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIHJhdyBodW1hbm9pZCB0byBpdHMgcmVzdCBwb3NlLlxuICAgICAqXG4gICAgICogSWYgeW91IGFyZSB1c2luZyB7QGxpbmsgYXV0b1VwZGF0ZUh1bWFuQm9uZXN9LCB5b3UgbWlnaHQgd2FudCB0byB1c2Uge0BsaW5rIHJlc2V0Tm9ybWFsaXplZFBvc2V9IGluc3RlYWQuXG4gICAgICovXG4gICAgcmVzZXRSYXdQb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmF3SHVtYW5Cb25lcy5yZXNldFBvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIG5vcm1hbGl6ZWQgaHVtYW5vaWQgdG8gaXRzIHJlc3QgcG9zZS5cbiAgICAgKi9cbiAgICByZXNldE5vcm1hbGl6ZWRQb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplZEh1bWFuQm9uZXMucmVzZXRQb3NlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQuIFVzZSBlaXRoZXIge0BsaW5rIGdldFJhd0JvbmV9IG9yIHtAbGluayBnZXROb3JtYWxpemVkQm9uZX0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBnZXRCb25lKG5hbWUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdWUk1IdW1hbm9pZDogZ2V0Qm9uZSgpIGlzIGRlcHJlY2F0ZWQuIFVzZSBlaXRoZXIgZ2V0UmF3Qm9uZSgpIG9yIGdldE5vcm1hbGl6ZWRCb25lKCkgaW5zdGVhZC4nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmF3Qm9uZShuYW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgcmF3IHtAbGluayBWUk1IdW1hbkJvbmV9IGJvdW5kIHRvIGEgc3BlY2lmaWVkIHtAbGluayBWUk1IdW1hbkJvbmVOYW1lfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGJvbmUgeW91IHdhbnRcbiAgICAgKi9cbiAgICBnZXRSYXdCb25lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jhd0h1bWFuQm9uZXMuZ2V0Qm9uZShuYW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgbm9ybWFsaXplZCB7QGxpbmsgVlJNSHVtYW5Cb25lfSBib3VuZCB0byBhIHNwZWNpZmllZCB7QGxpbmsgVlJNSHVtYW5Cb25lTmFtZX0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBib25lIHlvdSB3YW50XG4gICAgICovXG4gICAgZ2V0Tm9ybWFsaXplZEJvbmUobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplZEh1bWFuQm9uZXMuZ2V0Qm9uZShuYW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZC4gVXNlIGVpdGhlciB7QGxpbmsgZ2V0UmF3Qm9uZU5vZGV9IG9yIHtAbGluayBnZXROb3JtYWxpemVkQm9uZU5vZGV9IGluc3RlYWQuXG4gICAgICovXG4gICAgZ2V0Qm9uZU5vZGUobmFtZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1ZSTUh1bWFub2lkOiBnZXRCb25lTm9kZSgpIGlzIGRlcHJlY2F0ZWQuIFVzZSBlaXRoZXIgZ2V0UmF3Qm9uZU5vZGUoKSBvciBnZXROb3JtYWxpemVkQm9uZU5vZGUoKSBpbnN0ZWFkLicpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSYXdCb25lTm9kZShuYW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgcmF3IGJvbmUgYXMgYSBgVEhSRUUuT2JqZWN0M0RgIGJvdW5kIHRvIGEgc3BlY2lmaWVkIHtAbGluayBWUk1IdW1hbkJvbmVOYW1lfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGJvbmUgeW91IHdhbnRcbiAgICAgKi9cbiAgICBnZXRSYXdCb25lTm9kZShuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYXdIdW1hbkJvbmVzLmdldEJvbmVOb2RlKG5hbWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBub3JtYWxpemVkIGJvbmUgYXMgYSBgVEhSRUUuT2JqZWN0M0RgIGJvdW5kIHRvIGEgc3BlY2lmaWVkIHtAbGluayBWUk1IdW1hbkJvbmVOYW1lfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGJvbmUgeW91IHdhbnRcbiAgICAgKi9cbiAgICBnZXROb3JtYWxpemVkQm9uZU5vZGUobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplZEh1bWFuQm9uZXMuZ2V0Qm9uZU5vZGUobmFtZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgaHVtYW5vaWQgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogSWYge0BsaW5rIGF1dG9VcGRhdGVIdW1hbkJvbmVzfSBpcyBgdHJ1ZWAsIGl0IHRyYW5zZmVycyB0aGUgcG9zZSBvZiBub3JtYWxpemVkIGh1bWFuIGJvbmVzIHRvIHJhdyBodW1hbiBib25lcy5cbiAgICAgKi9cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmF1dG9VcGRhdGVIdW1hbkJvbmVzKSB7XG4gICAgICAgICAgICB0aGlzLl9ub3JtYWxpemVkSHVtYW5Cb25lcy51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG5jb25zdCBWUk1SZXF1aXJlZEh1bWFuQm9uZU5hbWUgPSB7XG4gICAgSGlwczogJ2hpcHMnLFxuICAgIFNwaW5lOiAnc3BpbmUnLFxuICAgIEhlYWQ6ICdoZWFkJyxcbiAgICBMZWZ0VXBwZXJMZWc6ICdsZWZ0VXBwZXJMZWcnLFxuICAgIExlZnRMb3dlckxlZzogJ2xlZnRMb3dlckxlZycsXG4gICAgTGVmdEZvb3Q6ICdsZWZ0Rm9vdCcsXG4gICAgUmlnaHRVcHBlckxlZzogJ3JpZ2h0VXBwZXJMZWcnLFxuICAgIFJpZ2h0TG93ZXJMZWc6ICdyaWdodExvd2VyTGVnJyxcbiAgICBSaWdodEZvb3Q6ICdyaWdodEZvb3QnLFxuICAgIExlZnRVcHBlckFybTogJ2xlZnRVcHBlckFybScsXG4gICAgTGVmdExvd2VyQXJtOiAnbGVmdExvd2VyQXJtJyxcbiAgICBMZWZ0SGFuZDogJ2xlZnRIYW5kJyxcbiAgICBSaWdodFVwcGVyQXJtOiAncmlnaHRVcHBlckFybScsXG4gICAgUmlnaHRMb3dlckFybTogJ3JpZ2h0TG93ZXJBcm0nLFxuICAgIFJpZ2h0SGFuZDogJ3JpZ2h0SGFuZCcsXG59O1xuXG4vKipcbiAqIFBvc3NpYmxlIHNwZWMgdmVyc2lvbnMgaXQgcmVjb2duaXplcy5cbiAqL1xuY29uc3QgUE9TU0lCTEVfU1BFQ19WRVJTSU9OUyQyID0gbmV3IFNldChbJzEuMCcsICcxLjAtYmV0YSddKTtcbi8qKlxuICogQSBtYXAgZnJvbSBvbGQgdGh1bWIgYm9uZSBuYW1lcyB0byBuZXcgdGh1bWIgYm9uZSBuYW1lc1xuICovXG5jb25zdCB0aHVtYkJvbmVOYW1lTWFwID0ge1xuICAgIGxlZnRUaHVtYlByb3hpbWFsOiAnbGVmdFRodW1iTWV0YWNhcnBhbCcsXG4gICAgbGVmdFRodW1iSW50ZXJtZWRpYXRlOiAnbGVmdFRodW1iUHJveGltYWwnLFxuICAgIHJpZ2h0VGh1bWJQcm94aW1hbDogJ3JpZ2h0VGh1bWJNZXRhY2FycGFsJyxcbiAgICByaWdodFRodW1iSW50ZXJtZWRpYXRlOiAncmlnaHRUaHVtYlByb3hpbWFsJyxcbn07XG4vKipcbiAqIEEgcGx1Z2luIG9mIEdMVEZMb2FkZXIgdGhhdCBpbXBvcnRzIGEge0BsaW5rIFZSTUh1bWFub2lkfSBmcm9tIGEgVlJNIGV4dGVuc2lvbiBvZiBhIEdMVEYuXG4gKi9cbmNsYXNzIFZSTUh1bWFub2lkTG9hZGVyUGx1Z2luIHtcbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgLy8gV2Ugc2hvdWxkIHVzZSB0aGUgZXh0ZW5zaW9uIG5hbWUgaW5zdGVhZCBidXQgd2UgaGF2ZSBtdWx0aXBsZSBwbHVnaW5zIGZvciBhbiBleHRlbnNpb24uLi5cbiAgICAgICAgcmV0dXJuICdWUk1IdW1hbm9pZExvYWRlclBsdWdpbic7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICAgICAgdGhpcy5oZWxwZXJSb290ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlbHBlclJvb3Q7XG4gICAgICAgIHRoaXMuYXV0b1VwZGF0ZUh1bWFuQm9uZXMgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYXV0b1VwZGF0ZUh1bWFuQm9uZXM7XG4gICAgfVxuICAgIGFmdGVyUm9vdChnbHRmKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBnbHRmLnVzZXJEYXRhLnZybUh1bWFub2lkID0geWllbGQgdGhpcy5faW1wb3J0KGdsdGYpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW1wb3J0IGEge0BsaW5rIFZSTUh1bWFub2lkfSBmcm9tIGEgVlJNLlxuICAgICAqXG4gICAgICogQHBhcmFtIGdsdGYgQSBwYXJzZWQgcmVzdWx0IG9mIEdMVEYgdGFrZW4gZnJvbSBHTFRGTG9hZGVyXG4gICAgICovXG4gICAgX2ltcG9ydChnbHRmKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCB2MVJlc3VsdCA9IHlpZWxkIHRoaXMuX3YxSW1wb3J0KGdsdGYpO1xuICAgICAgICAgICAgaWYgKHYxUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYxUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdjBSZXN1bHQgPSB5aWVsZCB0aGlzLl92MEltcG9ydChnbHRmKTtcbiAgICAgICAgICAgIGlmICh2MFJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2MFJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3YxSW1wb3J0KGdsdGYpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSB0aGlzLnBhcnNlci5qc29uO1xuICAgICAgICAgICAgLy8gZWFybHkgYWJvcnQgaWYgaXQgZG9lc24ndCB1c2UgdnJtXG4gICAgICAgICAgICBjb25zdCBpc1ZSTVVzZWQgPSAoKF9hID0ganNvbi5leHRlbnNpb25zVXNlZCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmluZGV4T2YoJ1ZSTUNfdnJtJykpICE9PSAtMTtcbiAgICAgICAgICAgIGlmICghaXNWUk1Vc2VkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBleHRlbnNpb24gPSAoX2IgPSBqc29uLmV4dGVuc2lvbnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYlsnVlJNQ192cm0nXTtcbiAgICAgICAgICAgIGlmICghZXh0ZW5zaW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzcGVjVmVyc2lvbiA9IGV4dGVuc2lvbi5zcGVjVmVyc2lvbjtcbiAgICAgICAgICAgIGlmICghUE9TU0lCTEVfU1BFQ19WRVJTSU9OUyQyLmhhcyhzcGVjVmVyc2lvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFZSTUh1bWFub2lkTG9hZGVyUGx1Z2luOiBVbmtub3duIFZSTUNfdnJtIHNwZWNWZXJzaW9uIFwiJHtzcGVjVmVyc2lvbn1cImApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2NoZW1hSHVtYW5vaWQgPSBleHRlbnNpb24uaHVtYW5vaWQ7XG4gICAgICAgICAgICBpZiAoIXNjaGVtYUh1bWFub2lkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGNvbXBhdDogMS4wLWJldGEgdGh1bWIgYm9uZSBuYW1lc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIGB0cnVlYCBpZiBgbGVmdFRodW1iSW50ZXJtZWRpYXRlYCBvciBgcmlnaHRUaHVtYkludGVybWVkaWF0ZWAgZXhpc3RzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IGV4aXN0c1ByZXZpb3VzVGh1bWJOYW1lID0gc2NoZW1hSHVtYW5vaWQuaHVtYW5Cb25lcy5sZWZ0VGh1bWJJbnRlcm1lZGlhdGUgIT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIHNjaGVtYUh1bWFub2lkLmh1bWFuQm9uZXMucmlnaHRUaHVtYkludGVybWVkaWF0ZSAhPSBudWxsO1xuICAgICAgICAgICAgY29uc3QgaHVtYW5Cb25lcyA9IHt9O1xuICAgICAgICAgICAgaWYgKHNjaGVtYUh1bWFub2lkLmh1bWFuQm9uZXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHlpZWxkIFByb21pc2UuYWxsKE9iamVjdC5lbnRyaWVzKHNjaGVtYUh1bWFub2lkLmh1bWFuQm9uZXMpLm1hcCgoW2JvbmVOYW1lU3RyaW5nLCBzY2hlbWFIdW1hbkJvbmVdKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBib25lTmFtZSA9IGJvbmVOYW1lU3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHNjaGVtYUh1bWFuQm9uZS5ub2RlO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb21wYXQ6IDEuMC1iZXRhIHByZXZpb3VzIHRodW1iIGJvbmUgbmFtZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0c1ByZXZpb3VzVGh1bWJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aHVtYkJvbmVOYW1lID0gdGh1bWJCb25lTmFtZU1hcFtib25lTmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGh1bWJCb25lTmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9uZU5hbWUgPSB0aHVtYkJvbmVOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB5aWVsZCB0aGlzLnBhcnNlci5nZXREZXBlbmRlbmN5KCdub2RlJywgaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgc3BlY2lmaWVkIG5vZGUgZG9lcyBub3QgZXhpc3QsIGVtaXQgYSB3YXJuaW5nXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgQSBnbFRGIG5vZGUgYm91bmQgdG8gdGhlIGh1bWFub2lkIGJvbmUgJHtib25lTmFtZX0gKGluZGV4ID0gJHtpbmRleH0pIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRvIHRoZSBgaHVtYW5Cb25lc2BcbiAgICAgICAgICAgICAgICAgICAgaHVtYW5Cb25lc1tib25lTmFtZV0gPSB7IG5vZGUgfTtcbiAgICAgICAgICAgICAgICB9KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaHVtYW5vaWQgPSBuZXcgVlJNSHVtYW5vaWQodGhpcy5fZW5zdXJlUmVxdWlyZWRCb25lc0V4aXN0KGh1bWFuQm9uZXMpLCB7XG4gICAgICAgICAgICAgICAgYXV0b1VwZGF0ZUh1bWFuQm9uZXM6IHRoaXMuYXV0b1VwZGF0ZUh1bWFuQm9uZXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGdsdGYuc2NlbmUuYWRkKGh1bWFub2lkLm5vcm1hbGl6ZWRIdW1hbkJvbmVzUm9vdCk7XG4gICAgICAgICAgICBpZiAodGhpcy5oZWxwZXJSb290KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVscGVyID0gbmV3IFZSTUh1bWFub2lkSGVscGVyKGh1bWFub2lkKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhlbHBlclJvb3QuYWRkKGhlbHBlcik7XG4gICAgICAgICAgICAgICAgaGVscGVyLnJlbmRlck9yZGVyID0gdGhpcy5oZWxwZXJSb290LnJlbmRlck9yZGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGh1bWFub2lkO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3YwSW1wb3J0KGdsdGYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QganNvbiA9IHRoaXMucGFyc2VyLmpzb247XG4gICAgICAgICAgICBjb25zdCB2cm1FeHQgPSAoX2EgPSBqc29uLmV4dGVuc2lvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5WUk07XG4gICAgICAgICAgICBpZiAoIXZybUV4dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2NoZW1hSHVtYW5vaWQgPSB2cm1FeHQuaHVtYW5vaWQ7XG4gICAgICAgICAgICBpZiAoIXNjaGVtYUh1bWFub2lkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBodW1hbkJvbmVzID0ge307XG4gICAgICAgICAgICBpZiAoc2NoZW1hSHVtYW5vaWQuaHVtYW5Cb25lcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgUHJvbWlzZS5hbGwoc2NoZW1hSHVtYW5vaWQuaHVtYW5Cb25lcy5tYXAoKGJvbmUpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9uZU5hbWUgPSBib25lLmJvbmU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYm9uZS5ub2RlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYm9uZU5hbWUgPT0gbnVsbCB8fCBpbmRleCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHlpZWxkIHRoaXMucGFyc2VyLmdldERlcGVuZGVuY3koJ25vZGUnLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBzcGVjaWZpZWQgbm9kZSBkb2VzIG5vdCBleGlzdCwgZW1pdCBhIHdhcm5pbmdcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBBIGdsVEYgbm9kZSBib3VuZCB0byB0aGUgaHVtYW5vaWQgYm9uZSAke2JvbmVOYW1lfSAoaW5kZXggPSAke2luZGV4fSkgZG9lcyBub3QgZXhpc3RgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBtYXAgdG8gbmV3IGJvbmUgbmFtZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aHVtYkJvbmVOYW1lID0gdGh1bWJCb25lTmFtZU1hcFtib25lTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0JvbmVOYW1lID0gKHRodW1iQm9uZU5hbWUgIT09IG51bGwgJiYgdGh1bWJCb25lTmFtZSAhPT0gdm9pZCAwID8gdGh1bWJCb25lTmFtZSA6IGJvbmVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdjAgVlJNcyBtaWdodCBoYXZlIGEgbXVsdGlwbGUgbm9kZXMgYXR0YWNoZWQgdG8gYSBzaW5nbGUgYm9uZS4uLlxuICAgICAgICAgICAgICAgICAgICAvLyBzbyBpZiB0aGVyZSBhbHJlYWR5IGlzIGFuIGVudHJ5IGluIHRoZSBgaHVtYW5Cb25lc2AsIHNob3cgYSB3YXJuaW5nIGFuZCBpZ25vcmUgaXRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGh1bWFuQm9uZXNbbmV3Qm9uZU5hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgTXVsdGlwbGUgYm9uZSBlbnRyaWVzIGZvciAke25ld0JvbmVOYW1lfSBkZXRlY3RlZCAoaW5kZXggPSAke2luZGV4fSksIGlnbm9yaW5nIGR1cGxpY2F0ZWQgZW50cmllcy5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdG8gdGhlIGBodW1hbkJvbmVzYFxuICAgICAgICAgICAgICAgICAgICBodW1hbkJvbmVzW25ld0JvbmVOYW1lXSA9IHsgbm9kZSB9O1xuICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBodW1hbm9pZCA9IG5ldyBWUk1IdW1hbm9pZCh0aGlzLl9lbnN1cmVSZXF1aXJlZEJvbmVzRXhpc3QoaHVtYW5Cb25lcyksIHtcbiAgICAgICAgICAgICAgICBhdXRvVXBkYXRlSHVtYW5Cb25lczogdGhpcy5hdXRvVXBkYXRlSHVtYW5Cb25lcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZ2x0Zi5zY2VuZS5hZGQoaHVtYW5vaWQubm9ybWFsaXplZEh1bWFuQm9uZXNSb290KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhlbHBlclJvb3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWxwZXIgPSBuZXcgVlJNSHVtYW5vaWRIZWxwZXIoaHVtYW5vaWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuaGVscGVyUm9vdC5hZGQoaGVscGVyKTtcbiAgICAgICAgICAgICAgICBoZWxwZXIucmVuZGVyT3JkZXIgPSB0aGlzLmhlbHBlclJvb3QucmVuZGVyT3JkZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaHVtYW5vaWQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbnN1cmUgcmVxdWlyZWQgYm9uZXMgZXhpc3QgaW4gZ2l2ZW4gaHVtYW4gYm9uZXMuXG4gICAgICogQHBhcmFtIGh1bWFuQm9uZXMgSHVtYW4gYm9uZXNcbiAgICAgKiBAcmV0dXJucyBIdW1hbiBib25lcywgbm8gbG9uZ2VyIHBhcnRpYWwhXG4gICAgICovXG4gICAgX2Vuc3VyZVJlcXVpcmVkQm9uZXNFeGlzdChodW1hbkJvbmVzKSB7XG4gICAgICAgIC8vIGVuc3VyZSByZXF1aXJlZCBib25lcyBleGlzdFxuICAgICAgICBjb25zdCBtaXNzaW5nUmVxdWlyZWRCb25lcyA9IE9iamVjdC52YWx1ZXMoVlJNUmVxdWlyZWRIdW1hbkJvbmVOYW1lKS5maWx0ZXIoKHJlcXVpcmVkQm9uZU5hbWUpID0+IGh1bWFuQm9uZXNbcmVxdWlyZWRCb25lTmFtZV0gPT0gbnVsbCk7XG4gICAgICAgIC8vIHRocm93IGFuIGVycm9yIGlmIHRoZXJlIGFyZSBtaXNzaW5nIGJvbmVzXG4gICAgICAgIGlmIChtaXNzaW5nUmVxdWlyZWRCb25lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFZSTUh1bWFub2lkTG9hZGVyUGx1Z2luOiBUaGVzZSBodW1hbm9pZCBib25lcyBhcmUgcmVxdWlyZWQgYnV0IG5vdCBleGlzdDogJHttaXNzaW5nUmVxdWlyZWRCb25lcy5qb2luKCcsICcpfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBodW1hbkJvbmVzO1xuICAgIH1cbn1cblxuY2xhc3MgRmFuQnVmZmVyR2VvbWV0cnkgZXh0ZW5kcyBUSFJFRS5CdWZmZXJHZW9tZXRyeSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRUaGV0YSA9IDA7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRSYWRpdXMgPSAwO1xuICAgICAgICB0aGlzLnRoZXRhID0gMC4wO1xuICAgICAgICB0aGlzLnJhZGl1cyA9IDAuMDtcbiAgICAgICAgdGhpcy5fY3VycmVudFRoZXRhID0gMC4wO1xuICAgICAgICB0aGlzLl9jdXJyZW50UmFkaXVzID0gMC4wO1xuICAgICAgICB0aGlzLl9hdHRyUG9zID0gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KDY1ICogMyksIDMpO1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCB0aGlzLl9hdHRyUG9zKTtcbiAgICAgICAgdGhpcy5fYXR0ckluZGV4ID0gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgVWludDE2QXJyYXkoMyAqIDYzKSwgMSk7XG4gICAgICAgIHRoaXMuc2V0SW5kZXgodGhpcy5fYXR0ckluZGV4KTtcbiAgICAgICAgdGhpcy5fYnVpbGRJbmRleCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGxldCBzaG91bGRVcGRhdGVHZW9tZXRyeSA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudFRoZXRhICE9PSB0aGlzLnRoZXRhKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50VGhldGEgPSB0aGlzLnRoZXRhO1xuICAgICAgICAgICAgc2hvdWxkVXBkYXRlR2VvbWV0cnkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50UmFkaXVzICE9PSB0aGlzLnJhZGl1cykge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFJhZGl1cyA9IHRoaXMucmFkaXVzO1xuICAgICAgICAgICAgc2hvdWxkVXBkYXRlR2VvbWV0cnkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGRVcGRhdGVHZW9tZXRyeSkge1xuICAgICAgICAgICAgdGhpcy5fYnVpbGRQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9idWlsZFBvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLl9hdHRyUG9zLnNldFhZWigwLCAwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2NDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gKGkgLyA2My4wKSAqIHRoaXMuX2N1cnJlbnRUaGV0YTtcbiAgICAgICAgICAgIHRoaXMuX2F0dHJQb3Muc2V0WFlaKGkgKyAxLCB0aGlzLl9jdXJyZW50UmFkaXVzICogTWF0aC5zaW4odCksIDAuMCwgdGhpcy5fY3VycmVudFJhZGl1cyAqIE1hdGguY29zKHQpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hdHRyUG9zLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgX2J1aWxkSW5kZXgoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjM7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fYXR0ckluZGV4LnNldFhZWihpICogMywgMCwgaSArIDEsIGkgKyAyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hdHRySW5kZXgubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIH1cbn1cblxuY2xhc3MgTGluZUFuZFNwaGVyZUJ1ZmZlckdlb21ldHJ5IGV4dGVuZHMgVEhSRUUuQnVmZmVyR2VvbWV0cnkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJhZGl1cyA9IDAuMDtcbiAgICAgICAgdGhpcy5fY3VycmVudFJhZGl1cyA9IDAuMDtcbiAgICAgICAgdGhpcy50YWlsID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgICAgdGhpcy5fY3VycmVudFRhaWwgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICAgICAgICB0aGlzLl9hdHRyUG9zID0gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KDI5NCksIDMpO1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCB0aGlzLl9hdHRyUG9zKTtcbiAgICAgICAgdGhpcy5fYXR0ckluZGV4ID0gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgVWludDE2QXJyYXkoMTk0KSwgMSk7XG4gICAgICAgIHRoaXMuc2V0SW5kZXgodGhpcy5fYXR0ckluZGV4KTtcbiAgICAgICAgdGhpcy5fYnVpbGRJbmRleCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGxldCBzaG91bGRVcGRhdGVHZW9tZXRyeSA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudFJhZGl1cyAhPT0gdGhpcy5yYWRpdXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRSYWRpdXMgPSB0aGlzLnJhZGl1cztcbiAgICAgICAgICAgIHNob3VsZFVwZGF0ZUdlb21ldHJ5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2N1cnJlbnRUYWlsLmVxdWFscyh0aGlzLnRhaWwpKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50VGFpbC5jb3B5KHRoaXMudGFpbCk7XG4gICAgICAgICAgICBzaG91bGRVcGRhdGVHZW9tZXRyeSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZFVwZGF0ZUdlb21ldHJ5KSB7XG4gICAgICAgICAgICB0aGlzLl9idWlsZFBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2J1aWxkUG9zaXRpb24oKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzI7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdCA9IChpIC8gMTYuMCkgKiBNYXRoLlBJO1xuICAgICAgICAgICAgdGhpcy5fYXR0clBvcy5zZXRYWVooaSwgTWF0aC5jb3ModCksIE1hdGguc2luKHQpLCAwLjApO1xuICAgICAgICAgICAgdGhpcy5fYXR0clBvcy5zZXRYWVooMzIgKyBpLCAwLjAsIE1hdGguY29zKHQpLCBNYXRoLnNpbih0KSk7XG4gICAgICAgICAgICB0aGlzLl9hdHRyUG9zLnNldFhZWig2NCArIGksIE1hdGguc2luKHQpLCAwLjAsIE1hdGguY29zKHQpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNjYWxlKHRoaXMuX2N1cnJlbnRSYWRpdXMsIHRoaXMuX2N1cnJlbnRSYWRpdXMsIHRoaXMuX2N1cnJlbnRSYWRpdXMpO1xuICAgICAgICB0aGlzLnRyYW5zbGF0ZSh0aGlzLl9jdXJyZW50VGFpbC54LCB0aGlzLl9jdXJyZW50VGFpbC55LCB0aGlzLl9jdXJyZW50VGFpbC56KTtcbiAgICAgICAgdGhpcy5fYXR0clBvcy5zZXRYWVooOTYsIDAsIDAsIDApO1xuICAgICAgICB0aGlzLl9hdHRyUG9zLnNldFhZWig5NywgdGhpcy5fY3VycmVudFRhaWwueCwgdGhpcy5fY3VycmVudFRhaWwueSwgdGhpcy5fY3VycmVudFRhaWwueik7XG4gICAgICAgIHRoaXMuX2F0dHJQb3MubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIH1cbiAgICBfYnVpbGRJbmRleCgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpMSA9IChpICsgMSkgJSAzMjtcbiAgICAgICAgICAgIHRoaXMuX2F0dHJJbmRleC5zZXRYWShpICogMiwgaSwgaTEpO1xuICAgICAgICAgICAgdGhpcy5fYXR0ckluZGV4LnNldFhZKDY0ICsgaSAqIDIsIDMyICsgaSwgMzIgKyBpMSk7XG4gICAgICAgICAgICB0aGlzLl9hdHRySW5kZXguc2V0WFkoMTI4ICsgaSAqIDIsIDY0ICsgaSwgNjQgKyBpMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXR0ckluZGV4LnNldFhZKDE5MiwgOTYsIDk3KTtcbiAgICAgICAgdGhpcy5fYXR0ckluZGV4Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG59XG5cbmNvbnN0IF9xdWF0QSQyID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbmNvbnN0IF9xdWF0QiQyID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbmNvbnN0IF92M0EkMSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5jb25zdCBfdjNCJDEgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuY29uc3QgU1FSVF8yX09WRVJfMiA9IE1hdGguc3FydCgyLjApIC8gMi4wO1xuY29uc3QgUVVBVF9YWV9DVzkwID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oMCwgMCwgLVNRUlRfMl9PVkVSXzIsIFNRUlRfMl9PVkVSXzIpO1xuY29uc3QgVkVDM19QT1NJVElWRV9ZID0gbmV3IFRIUkVFLlZlY3RvcjMoMC4wLCAxLjAsIDAuMCk7XG5jbGFzcyBWUk1Mb29rQXRIZWxwZXIgZXh0ZW5kcyBUSFJFRS5Hcm91cCB7XG4gICAgY29uc3RydWN0b3IobG9va0F0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZybUxvb2tBdCA9IGxvb2tBdDtcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgRmFuQnVmZmVyR2VvbWV0cnkoKTtcbiAgICAgICAgICAgIGdlb21ldHJ5LnJhZGl1cyA9IDAuNTtcbiAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogMHgwMGZmMDAsXG4gICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMC41LFxuICAgICAgICAgICAgICAgIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGUsXG4gICAgICAgICAgICAgICAgZGVwdGhUZXN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkZXB0aFdyaXRlOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fbWVzaFBpdGNoID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgICAgICAgIHRoaXMuYWRkKHRoaXMuX21lc2hQaXRjaCk7XG4gICAgICAgIH1cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgRmFuQnVmZmVyR2VvbWV0cnkoKTtcbiAgICAgICAgICAgIGdlb21ldHJ5LnJhZGl1cyA9IDAuNTtcbiAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogMHhmZjAwMDAsXG4gICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMC41LFxuICAgICAgICAgICAgICAgIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGUsXG4gICAgICAgICAgICAgICAgZGVwdGhUZXN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkZXB0aFdyaXRlOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fbWVzaFlhdyA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG4gICAgICAgICAgICB0aGlzLmFkZCh0aGlzLl9tZXNoWWF3KTtcbiAgICAgICAgfVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBMaW5lQW5kU3BoZXJlQnVmZmVyR2VvbWV0cnkoKTtcbiAgICAgICAgICAgIGdlb21ldHJ5LnJhZGl1cyA9IDAuMTtcbiAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogMHhmZmZmZmYsXG4gICAgICAgICAgICAgICAgZGVwdGhUZXN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkZXB0aFdyaXRlOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fbGluZVRhcmdldCA9IG5ldyBUSFJFRS5MaW5lU2VnbWVudHMoZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgICAgICAgIHRoaXMuX2xpbmVUYXJnZXQuZnJ1c3R1bUN1bGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5hZGQodGhpcy5fbGluZVRhcmdldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5fbWVzaFlhdy5nZW9tZXRyeS5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX21lc2hZYXcubWF0ZXJpYWwuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9tZXNoUGl0Y2guZ2VvbWV0cnkuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9tZXNoUGl0Y2gubWF0ZXJpYWwuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9saW5lVGFyZ2V0Lmdlb21ldHJ5LmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fbGluZVRhcmdldC5tYXRlcmlhbC5kaXNwb3NlKCk7XG4gICAgfVxuICAgIHVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKSB7XG4gICAgICAgIC8vIHVwZGF0ZSBnZW9tZXRyaWVzXG4gICAgICAgIGNvbnN0IHlhdyA9IFRIUkVFLk1hdGhVdGlscy5ERUcyUkFEICogdGhpcy52cm1Mb29rQXQueWF3O1xuICAgICAgICB0aGlzLl9tZXNoWWF3Lmdlb21ldHJ5LnRoZXRhID0geWF3O1xuICAgICAgICB0aGlzLl9tZXNoWWF3Lmdlb21ldHJ5LnVwZGF0ZSgpO1xuICAgICAgICBjb25zdCBwaXRjaCA9IFRIUkVFLk1hdGhVdGlscy5ERUcyUkFEICogdGhpcy52cm1Mb29rQXQucGl0Y2g7XG4gICAgICAgIHRoaXMuX21lc2hQaXRjaC5nZW9tZXRyeS50aGV0YSA9IHBpdGNoO1xuICAgICAgICB0aGlzLl9tZXNoUGl0Y2guZ2VvbWV0cnkudXBkYXRlKCk7XG4gICAgICAgIC8vIGdldCB3b3JsZCBwb3NpdGlvbiBhbmQgcXVhdGVybmlvblxuICAgICAgICB0aGlzLnZybUxvb2tBdC5nZXRMb29rQXRXb3JsZFBvc2l0aW9uKF92M0EkMSk7XG4gICAgICAgIHRoaXMudnJtTG9va0F0LmdldExvb2tBdFdvcmxkUXVhdGVybmlvbihfcXVhdEEkMik7XG4gICAgICAgIC8vIGNhbGN1bGF0ZSByb3RhdGlvbiB1c2luZyBmYWNlRnJvbnRcbiAgICAgICAgX3F1YXRBJDIubXVsdGlwbHkodGhpcy52cm1Mb29rQXQuZ2V0RmFjZUZyb250UXVhdGVybmlvbihfcXVhdEIkMikpO1xuICAgICAgICAvLyBzZXQgdHJhbnNmb3JtIHRvIG1lc2hlc1xuICAgICAgICB0aGlzLl9tZXNoWWF3LnBvc2l0aW9uLmNvcHkoX3YzQSQxKTtcbiAgICAgICAgdGhpcy5fbWVzaFlhdy5xdWF0ZXJuaW9uLmNvcHkoX3F1YXRBJDIpO1xuICAgICAgICB0aGlzLl9tZXNoUGl0Y2gucG9zaXRpb24uY29weShfdjNBJDEpO1xuICAgICAgICB0aGlzLl9tZXNoUGl0Y2gucXVhdGVybmlvbi5jb3B5KF9xdWF0QSQyKTtcbiAgICAgICAgdGhpcy5fbWVzaFBpdGNoLnF1YXRlcm5pb24ubXVsdGlwbHkoX3F1YXRCJDIuc2V0RnJvbUF4aXNBbmdsZShWRUMzX1BPU0lUSVZFX1ksIHlhdykpO1xuICAgICAgICB0aGlzLl9tZXNoUGl0Y2gucXVhdGVybmlvbi5tdWx0aXBseShRVUFUX1hZX0NXOTApO1xuICAgICAgICAvLyB1cGRhdGUgdGFyZ2V0IGxpbmUgYW5kIHNwaGVyZVxuICAgICAgICBjb25zdCB7IHRhcmdldCwgYXV0b1VwZGF0ZSB9ID0gdGhpcy52cm1Mb29rQXQ7XG4gICAgICAgIGlmICh0YXJnZXQgIT0gbnVsbCAmJiBhdXRvVXBkYXRlKSB7XG4gICAgICAgICAgICB0YXJnZXQuZ2V0V29ybGRQb3NpdGlvbihfdjNCJDEpLnN1YihfdjNBJDEpO1xuICAgICAgICAgICAgdGhpcy5fbGluZVRhcmdldC5nZW9tZXRyeS50YWlsLmNvcHkoX3YzQiQxKTtcbiAgICAgICAgICAgIHRoaXMuX2xpbmVUYXJnZXQuZ2VvbWV0cnkudXBkYXRlKCk7XG4gICAgICAgICAgICB0aGlzLl9saW5lVGFyZ2V0LnBvc2l0aW9uLmNvcHkoX3YzQSQxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBhcHBseSB0cmFuc2Zvcm0gdG8gbWVzaGVzXG4gICAgICAgIHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKTtcbiAgICB9XG59XG5cbmNvbnN0IF9wb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5jb25zdCBfc2NhbGUgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuLyoqXG4gKiBBIHJlcGxhY2VtZW50IG9mIGBPYmplY3QzRC5nZXRXb3JsZFF1YXRlcm5pb25gLlxuICogRXh0cmFjdCB0aGUgd29ybGQgcXVhdGVybmlvbiBvZiBhbiBvYmplY3QgZnJvbSBpdHMgd29ybGQgc3BhY2UgbWF0cml4LCB3aXRob3V0IGNhbGxpbmcgYE9iamVjdDNELnVwZGF0ZVdvcmxkTWF0cml4YC5cbiAqIFVzZSB0aGlzIHdoZW4geW91J3JlIHN1cmUgdGhhdCB0aGUgd29ybGQgbWF0cml4IGlzIHVwLXRvLWRhdGUuXG4gKlxuICogQHBhcmFtIG9iamVjdCBUaGUgb2JqZWN0XG4gKiBAcGFyYW0gb3V0IEEgdGFyZ2V0IHF1YXRlcm5pb25cbiAqL1xuZnVuY3Rpb24gZ2V0V29ybGRRdWF0ZXJuaW9uTGl0ZShvYmplY3QsIG91dCkge1xuICAgIG9iamVjdC5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoX3Bvc2l0aW9uLCBvdXQsIF9zY2FsZSk7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgYXppbXV0aCAvIGFsdGl0dWRlIGFuZ2xlcyBmcm9tIGEgdmVjdG9yLlxuICpcbiAqIFRoaXMgcmV0dXJucyBhIGRpZmZlcmVuY2Ugb2YgYW5nbGVzIGZyb20gKDEsIDAsIDApLlxuICogQXppbXV0aCByZXByZXNlbnRzIGFuIGFuZ2xlIGFyb3VuZCBZIGF4aXMuXG4gKiBBbHRpdHVkZSByZXByZXNlbnRzIGFuIGFuZ2xlIGFyb3VuZCBaIGF4aXMuXG4gKiBJdCBpcyByb3RhdGVkIGluIGludHJpbnNpYyBZLVogb3JkZXIuXG4gKlxuICogQHBhcmFtIHZlY3RvciBUaGUgdmVjdG9yXG4gKiBAcmV0dXJucyBBIHR1cGxlIGNvbnRhaW5zIHR3byBhbmdsZXMsIGBbIGF6aW11dGgsIGFsdGl0dWRlIF1gXG4gKi9cbmZ1bmN0aW9uIGNhbGNBemltdXRoQWx0aXR1ZGUodmVjdG9yKSB7XG4gICAgcmV0dXJuIFtNYXRoLmF0YW4yKC12ZWN0b3IueiwgdmVjdG9yLngpLCBNYXRoLmF0YW4yKHZlY3Rvci55LCBNYXRoLnNxcnQodmVjdG9yLnggKiB2ZWN0b3IueCArIHZlY3Rvci56ICogdmVjdG9yLnopKV07XG59XG5cbi8qKlxuICogTWFrZSBzdXJlIHRoZSBhbmdsZSBpcyB3aXRoaW4gLVBJIHRvIFBJLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogc2FuaXRpemVBbmdsZSgxLjUgKiBNYXRoLlBJKSAvLyAtMC41ICogUElcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBhbmdsZSBBbiBpbnB1dCBhbmdsZVxuICovXG5mdW5jdGlvbiBzYW5pdGl6ZUFuZ2xlKGFuZ2xlKSB7XG4gICAgY29uc3Qgcm91bmRUdXJuID0gTWF0aC5yb3VuZChhbmdsZSAvIDIuMCAvIE1hdGguUEkpO1xuICAgIHJldHVybiBhbmdsZSAtIDIuMCAqIE1hdGguUEkgKiByb3VuZFR1cm47XG59XG5cbmNvbnN0IFZFQzNfUE9TSVRJVkVfWiQxID0gbmV3IFRIUkVFLlZlY3RvcjMoMC4wLCAwLjAsIDEuMCk7XG5jb25zdCBfdjNBID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbmNvbnN0IF92M0IgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuY29uc3QgX3YzQyA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5jb25zdCBfcXVhdEEkMSA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG5jb25zdCBfcXVhdEIkMSA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG5jb25zdCBfcXVhdEMgPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuY29uc3QgX3F1YXREID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbmNvbnN0IF9ldWxlckEkMSA9IG5ldyBUSFJFRS5FdWxlcigpO1xuLyoqXG4gKiBBIGNsYXNzIGNvbnRyb2xzIGV5ZSBnYXplIG1vdmVtZW50cyBvZiBhIFZSTS5cbiAqL1xuY2xhc3MgVlJNTG9va0F0IHtcbiAgICAvKipcbiAgICAgKiBJdHMgY3VycmVudCBhbmdsZSBhcm91bmQgWSBheGlzLCBpbiBkZWdyZWUuXG4gICAgICovXG4gICAgZ2V0IHlhdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3lhdztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSXRzIGN1cnJlbnQgYW5nbGUgYXJvdW5kIFkgYXhpcywgaW4gZGVncmVlLlxuICAgICAqL1xuICAgIHNldCB5YXcodmFsdWUpIHtcbiAgICAgICAgdGhpcy5feWF3ID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX25lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSXRzIGN1cnJlbnQgYW5nbGUgYXJvdW5kIFggYXhpcywgaW4gZGVncmVlLlxuICAgICAqL1xuICAgIGdldCBwaXRjaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BpdGNoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJdHMgY3VycmVudCBhbmdsZSBhcm91bmQgWCBheGlzLCBpbiBkZWdyZWUuXG4gICAgICovXG4gICAgc2V0IHBpdGNoKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3BpdGNoID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX25lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBnZXRFdWxlcn0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBnZXQgZXVsZXIoKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignVlJNTG9va0F0OiBldWxlciBpcyBkZXByZWNhdGVkLiB1c2UgZ2V0RXVsZXIoKSBpbnN0ZWFkLicpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRFdWxlcihuZXcgVEhSRUUuRXVsZXIoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyB7QGxpbmsgVlJNTG9va0F0fS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBodW1hbm9pZCBBIHtAbGluayBWUk1IdW1hbm9pZH1cbiAgICAgKiBAcGFyYW0gYXBwbGllciBBIHtAbGluayBWUk1Mb29rQXRBcHBsaWVyfVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGh1bWFub2lkLCBhcHBsaWVyKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgb3JpZ2luIG9mIExvb2tBdC4gUG9zaXRpb24gb2Zmc2V0IGZyb20gdGhlIGhlYWQgYm9uZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub2Zmc2V0RnJvbUhlYWRCb25lID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoaXMgaXMgdHJ1ZSwgdGhlIExvb2tBdCB3aWxsIGJlIHVwZGF0ZWQgYXV0b21hdGljYWxseSBieSBjYWxsaW5nIHtAbGluayB1cGRhdGV9LCB0b3dhcmRpbmcgdGhlIGRpcmVjdGlvbiB0byB0aGUge0BsaW5rIHRhcmdldH0uXG4gICAgICAgICAqIGB0cnVlYCBieSBkZWZhdWx0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbzoge0BsaW5rIHRhcmdldH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYXV0b1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZnJvbnQgZGlyZWN0aW9uIG9mIHRoZSBmYWNlLlxuICAgICAgICAgKiBJbnRlbmRlZCB0byBiZSB1c2VkIGZvciBWUk0gMC4wIGNvbXBhdCAoVlJNIDAuMCBtb2RlbHMgYXJlIGZhY2luZyBaLSBpbnN0ZWFkIG9mIForKS5cbiAgICAgICAgICogWW91IHVzdWFsbHkgZG9uJ3Qgd2FudCB0byB0b3VjaCB0aGlzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mYWNlRnJvbnQgPSBuZXcgVEhSRUUuVmVjdG9yMygwLjAsIDAuMCwgMS4wKTtcbiAgICAgICAgdGhpcy5odW1hbm9pZCA9IGh1bWFub2lkO1xuICAgICAgICB0aGlzLmFwcGxpZXIgPSBhcHBsaWVyO1xuICAgICAgICB0aGlzLl95YXcgPSAwLjA7XG4gICAgICAgIHRoaXMuX3BpdGNoID0gMC4wO1xuICAgICAgICB0aGlzLl9uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX3Jlc3RIZWFkV29ybGRRdWF0ZXJuaW9uID0gdGhpcy5nZXRMb29rQXRXb3JsZFF1YXRlcm5pb24obmV3IFRIUkVFLlF1YXRlcm5pb24oKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBpdHMgeWF3LXBpdGNoIGFuZ2xlcyBhcyBhbiBgRXVsZXJgLlxuICAgICAqIERvZXMgTk9UIGNvbnNpZGVyIHtAbGluayBmYWNlRnJvbnR9OyBpdCByZXR1cm5zIGBFdWxlcigwLCAwLCAwOyBcIllYWlwiKWAgYnkgZGVmYXVsdCByZWdhcmRsZXNzIG9mIHRoZSBmYWNlRnJvbnQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgZXVsZXJcbiAgICAgKi9cbiAgICBnZXRFdWxlcih0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldC5zZXQoVEhSRUUuTWF0aFV0aWxzLkRFRzJSQUQgKiB0aGlzLl9waXRjaCwgVEhSRUUuTWF0aFV0aWxzLkRFRzJSQUQgKiB0aGlzLl95YXcsIDAuMCwgJ1lYWicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3B5IHRoZSBnaXZlbiB7QGxpbmsgVlJNTG9va0F0fSBpbnRvIHRoaXMgb25lLlxuICAgICAqIHtAbGluayBodW1hbm9pZH0gbXVzdCBiZSBzYW1lIGFzIHRoZSBzb3VyY2Ugb25lLlxuICAgICAqIHtAbGluayBhcHBsaWVyfSB3aWxsIHJlZmVyZW5jZSB0aGUgc2FtZSBpbnN0YW5jZSBhcyB0aGUgc291cmNlIG9uZS5cbiAgICAgKiBAcGFyYW0gc291cmNlIFRoZSB7QGxpbmsgVlJNTG9va0F0fSB5b3Ugd2FudCB0byBjb3B5XG4gICAgICogQHJldHVybnMgdGhpc1xuICAgICAqL1xuICAgIGNvcHkoc291cmNlKSB7XG4gICAgICAgIGlmICh0aGlzLmh1bWFub2lkICE9PSBzb3VyY2UuaHVtYW5vaWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVlJNTG9va0F0OiBodW1hbm9pZCBtdXN0IGJlIHNhbWUgaW4gb3JkZXIgdG8gY29weScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub2Zmc2V0RnJvbUhlYWRCb25lLmNvcHkoc291cmNlLm9mZnNldEZyb21IZWFkQm9uZSk7XG4gICAgICAgIHRoaXMuYXBwbGllciA9IHNvdXJjZS5hcHBsaWVyO1xuICAgICAgICB0aGlzLmF1dG9VcGRhdGUgPSBzb3VyY2UuYXV0b1VwZGF0ZTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBzb3VyY2UudGFyZ2V0O1xuICAgICAgICB0aGlzLmZhY2VGcm9udC5jb3B5KHNvdXJjZS5mYWNlRnJvbnQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGNsb25lIG9mIHRoaXMge0BsaW5rIFZSTUxvb2tBdH0uXG4gICAgICogTm90ZSB0aGF0IHtAbGluayBodW1hbm9pZH0gYW5kIHtAbGluayBhcHBsaWVyfSB3aWxsIHJlZmVyZW5jZSB0aGUgc2FtZSBpbnN0YW5jZSBhcyB0aGlzIG9uZS5cbiAgICAgKiBAcmV0dXJucyBDb3BpZWQge0BsaW5rIFZSTUxvb2tBdH1cbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWUk1Mb29rQXQodGhpcy5odW1hbm9pZCwgdGhpcy5hcHBsaWVyKS5jb3B5KHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgbG9va0F0IGRpcmVjdGlvbiAoeWF3IGFuZCBwaXRjaCkgdG8gdGhlIGluaXRpYWwgZGlyZWN0aW9uLlxuICAgICAqL1xuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl95YXcgPSAwLjA7XG4gICAgICAgIHRoaXMuX3BpdGNoID0gMC4wO1xuICAgICAgICB0aGlzLl9uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBpdHMgbG9va0F0IHBvc2l0aW9uIGluIHdvcmxkIGNvb3JkaW5hdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IEEgdGFyZ2V0IGBUSFJFRS5WZWN0b3IzYFxuICAgICAqL1xuICAgIGdldExvb2tBdFdvcmxkUG9zaXRpb24odGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IGhlYWQgPSB0aGlzLmh1bWFub2lkLmdldFJhd0JvbmVOb2RlKCdoZWFkJyk7XG4gICAgICAgIHJldHVybiB0YXJnZXQuY29weSh0aGlzLm9mZnNldEZyb21IZWFkQm9uZSkuYXBwbHlNYXRyaXg0KGhlYWQubWF0cml4V29ybGQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgaXRzIGxvb2tBdCByb3RhdGlvbiBpbiB3b3JsZCBjb29yZGluYXRlLlxuICAgICAqIERvZXMgTk9UIGNvbnNpZGVyIHtAbGluayBmYWNlRnJvbnR9LlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCBBIHRhcmdldCBgVEhSRUUuUXVhdGVybmlvbmBcbiAgICAgKi9cbiAgICBnZXRMb29rQXRXb3JsZFF1YXRlcm5pb24odGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IGhlYWQgPSB0aGlzLmh1bWFub2lkLmdldFJhd0JvbmVOb2RlKCdoZWFkJyk7XG4gICAgICAgIHJldHVybiBnZXRXb3JsZFF1YXRlcm5pb25MaXRlKGhlYWQsIHRhcmdldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIHF1YXRlcm5pb24gdGhhdCByb3RhdGVzIHRoZSArWiB1bml0IHZlY3RvciBvZiB0aGUgaHVtYW5vaWQgSGVhZCB0byB0aGUge0BsaW5rIGZhY2VGcm9udH0gZGlyZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCBBIHRhcmdldCBgVEhSRUUuUXVhdGVybmlvbmBcbiAgICAgKi9cbiAgICBnZXRGYWNlRnJvbnRRdWF0ZXJuaW9uKHRhcmdldCkge1xuICAgICAgICBpZiAodGhpcy5mYWNlRnJvbnQuZGlzdGFuY2VUb1NxdWFyZWQoVkVDM19QT1NJVElWRV9aJDEpIDwgMC4wMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5jb3B5KHRoaXMuX3Jlc3RIZWFkV29ybGRRdWF0ZXJuaW9uKS5pbnZlcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBbZmFjZUZyb250QXppbXV0aCwgZmFjZUZyb250QWx0aXR1ZGVdID0gY2FsY0F6aW11dGhBbHRpdHVkZSh0aGlzLmZhY2VGcm9udCk7XG4gICAgICAgIF9ldWxlckEkMS5zZXQoMC4wLCAwLjUgKiBNYXRoLlBJICsgZmFjZUZyb250QXppbXV0aCwgZmFjZUZyb250QWx0aXR1ZGUsICdZWlgnKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldC5zZXRGcm9tRXVsZXIoX2V1bGVyQSQxKS5wcmVtdWx0aXBseShfcXVhdEQuY29weSh0aGlzLl9yZXN0SGVhZFdvcmxkUXVhdGVybmlvbikuaW52ZXJ0KCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgaXRzIExvb2tBdCBkaXJlY3Rpb24gaW4gd29ybGQgY29vcmRpbmF0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXJnZXQgQSB0YXJnZXQgYFRIUkVFLlZlY3RvcjNgXG4gICAgICovXG4gICAgZ2V0TG9va0F0V29ybGREaXJlY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuZ2V0TG9va0F0V29ybGRRdWF0ZXJuaW9uKF9xdWF0QiQxKTtcbiAgICAgICAgdGhpcy5nZXRGYWNlRnJvbnRRdWF0ZXJuaW9uKF9xdWF0Qyk7XG4gICAgICAgIHJldHVybiB0YXJnZXRcbiAgICAgICAgICAgIC5jb3B5KFZFQzNfUE9TSVRJVkVfWiQxKVxuICAgICAgICAgICAgLmFwcGx5UXVhdGVybmlvbihfcXVhdEIkMSlcbiAgICAgICAgICAgIC5hcHBseVF1YXRlcm5pb24oX3F1YXRDKVxuICAgICAgICAgICAgLmFwcGx5RXVsZXIodGhpcy5nZXRFdWxlcihfZXVsZXJBJDEpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGl0cyBsb29rQXQgdGFyZ2V0IHBvc2l0aW9uLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IGl0cyByZXN1bHQgd2lsbCBiZSBpbnN0YW50bHkgb3ZlcndyaXR0ZW4gaWYge0BsaW5rIFZSTUxvb2tBdEhlYWQuYXV0b1VwZGF0ZX0gaXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIElmIHlvdSB3YW50IHRvIHRyYWNrIGFuIG9iamVjdCBjb250aW51b3VzbHksIHlvdSBtaWdodCB3YW50IHRvIHVzZSB7QGxpbmsgdGFyZ2V0fSBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBvc2l0aW9uIEEgdGFyZ2V0IHBvc2l0aW9uLCBpbiB3b3JsZCBzcGFjZVxuICAgICAqL1xuICAgIGxvb2tBdChwb3NpdGlvbikge1xuICAgICAgICAvLyBMb29rIGF0IGRpcmVjdGlvbiBpbiBsb2NhbCBjb29yZGluYXRlXG4gICAgICAgIGNvbnN0IGhlYWRSb3REaWZmSW52ID0gX3F1YXRBJDFcbiAgICAgICAgICAgIC5jb3B5KHRoaXMuX3Jlc3RIZWFkV29ybGRRdWF0ZXJuaW9uKVxuICAgICAgICAgICAgLm11bHRpcGx5KHF1YXRJbnZlcnRDb21wYXQodGhpcy5nZXRMb29rQXRXb3JsZFF1YXRlcm5pb24oX3F1YXRCJDEpKSk7XG4gICAgICAgIGNvbnN0IGhlYWRQb3MgPSB0aGlzLmdldExvb2tBdFdvcmxkUG9zaXRpb24oX3YzQik7XG4gICAgICAgIGNvbnN0IGxvb2tBdERpciA9IF92M0MuY29weShwb3NpdGlvbikuc3ViKGhlYWRQb3MpLmFwcGx5UXVhdGVybmlvbihoZWFkUm90RGlmZkludikubm9ybWFsaXplKCk7XG4gICAgICAgIC8vIGNhbGN1bGF0ZSBhbmdsZXNcbiAgICAgICAgY29uc3QgW2F6aW11dGhGcm9tLCBhbHRpdHVkZUZyb21dID0gY2FsY0F6aW11dGhBbHRpdHVkZSh0aGlzLmZhY2VGcm9udCk7XG4gICAgICAgIGNvbnN0IFthemltdXRoVG8sIGFsdGl0dWRlVG9dID0gY2FsY0F6aW11dGhBbHRpdHVkZShsb29rQXREaXIpO1xuICAgICAgICBjb25zdCB5YXcgPSBzYW5pdGl6ZUFuZ2xlKGF6aW11dGhUbyAtIGF6aW11dGhGcm9tKTtcbiAgICAgICAgY29uc3QgcGl0Y2ggPSBzYW5pdGl6ZUFuZ2xlKGFsdGl0dWRlRnJvbSAtIGFsdGl0dWRlVG8pOyAvLyBzcGlubmluZyAoMSwgMCwgMCkgQ0NXIGFyb3VuZCBaIGF4aXMgbWFrZXMgdGhlIHZlY3RvciBsb29rIHVwLCB3aGlsZSBzcGlubmluZyAoMCwgMCwgMSkgQ0NXIGFyb3VuZCBYIGF4aXMgbWFrZXMgdGhlIHZlY3RvciBsb29rIGRvd25cbiAgICAgICAgLy8gYXBwbHkgYW5nbGVzXG4gICAgICAgIHRoaXMuX3lhdyA9IFRIUkVFLk1hdGhVdGlscy5SQUQyREVHICogeWF3O1xuICAgICAgICB0aGlzLl9waXRjaCA9IFRIUkVFLk1hdGhVdGlscy5SQUQyREVHICogcGl0Y2g7XG4gICAgICAgIHRoaXMuX25lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBWUk1Mb29rQXRIZWFkLlxuICAgICAqIElmIHtAbGluayBhdXRvVXBkYXRlfSBpcyBlbmFibGVkLCB0aGlzIHdpbGwgbWFrZSBpdCBsb29rIGF0IHRoZSB7QGxpbmsgdGFyZ2V0fS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZWx0YSBkZWx0YVRpbWUsIGl0IGlzbid0IHVzZWQgdGhvdWdoLiBZb3UgY2FuIHVzZSB0aGUgcGFyYW1ldGVyIGlmIHlvdSB3YW50IHRvIHVzZSB0aGlzIGluIHlvdXIgb3duIGV4dGVuZGVkIHtAbGluayBWUk1Mb29rQXR9LlxuICAgICAqL1xuICAgIHVwZGF0ZShkZWx0YSkge1xuICAgICAgICBpZiAodGhpcy50YXJnZXQgIT0gbnVsbCAmJiB0aGlzLmF1dG9VcGRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMubG9va0F0KHRoaXMudGFyZ2V0LmdldFdvcmxkUG9zaXRpb24oX3YzQSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9uZWVkc1VwZGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5fbmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuYXBwbGllci5hcHBseVlhd1BpdGNoKHRoaXMuX3lhdywgdGhpcy5fcGl0Y2gpO1xuICAgICAgICB9XG4gICAgfVxufVxuVlJNTG9va0F0LkVVTEVSX09SREVSID0gJ1lYWic7IC8vIHlhdy1waXRjaC1yb2xsXG5cbmNvbnN0IFZFQzNfUE9TSVRJVkVfWiA9IG5ldyBUSFJFRS5WZWN0b3IzKDAuMCwgMC4wLCAxLjApO1xuY29uc3QgX3F1YXRBID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbmNvbnN0IF9xdWF0QiA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG5jb25zdCBfZXVsZXJBID0gbmV3IFRIUkVFLkV1bGVyKDAuMCwgMC4wLCAwLjAsICdZWFonKTtcbi8qKlxuICogQSBjbGFzcyB0aGF0IGFwcGxpZXMgZXllIGdhemUgZGlyZWN0aW9ucyB0byBhIFZSTS5cbiAqIEl0IHdpbGwgYmUgdXNlZCBieSB7QGxpbmsgVlJNTG9va0F0fS5cbiAqL1xuY2xhc3MgVlJNTG9va0F0Qm9uZUFwcGxpZXIge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyB7QGxpbmsgVlJNTG9va0F0Qm9uZUFwcGxpZXJ9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGh1bWFub2lkIEEge0BsaW5rIFZSTUh1bWFub2lkfVxuICAgICAqIEBwYXJhbSByYW5nZU1hcEhvcml6b250YWxJbm5lciBBIHtAbGluayBWUk1Mb29rQXRSYW5nZU1hcH0gdXNlZCBmb3IgaW5uZXIgdHJhbnN2ZXJzZSBkaXJlY3Rpb25cbiAgICAgKiBAcGFyYW0gcmFuZ2VNYXBIb3Jpem9udGFsT3V0ZXIgQSB7QGxpbmsgVlJNTG9va0F0UmFuZ2VNYXB9IHVzZWQgZm9yIG91dGVyIHRyYW5zdmVyc2UgZGlyZWN0aW9uXG4gICAgICogQHBhcmFtIHJhbmdlTWFwVmVydGljYWxEb3duIEEge0BsaW5rIFZSTUxvb2tBdFJhbmdlTWFwfSB1c2VkIGZvciBkb3duIGRpcmVjdGlvblxuICAgICAqIEBwYXJhbSByYW5nZU1hcFZlcnRpY2FsVXAgQSB7QGxpbmsgVlJNTG9va0F0UmFuZ2VNYXB9IHVzZWQgZm9yIHVwIGRpcmVjdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGh1bWFub2lkLCByYW5nZU1hcEhvcml6b250YWxJbm5lciwgcmFuZ2VNYXBIb3Jpem9udGFsT3V0ZXIsIHJhbmdlTWFwVmVydGljYWxEb3duLCByYW5nZU1hcFZlcnRpY2FsVXApIHtcbiAgICAgICAgdGhpcy5odW1hbm9pZCA9IGh1bWFub2lkO1xuICAgICAgICB0aGlzLnJhbmdlTWFwSG9yaXpvbnRhbElubmVyID0gcmFuZ2VNYXBIb3Jpem9udGFsSW5uZXI7XG4gICAgICAgIHRoaXMucmFuZ2VNYXBIb3Jpem9udGFsT3V0ZXIgPSByYW5nZU1hcEhvcml6b250YWxPdXRlcjtcbiAgICAgICAgdGhpcy5yYW5nZU1hcFZlcnRpY2FsRG93biA9IHJhbmdlTWFwVmVydGljYWxEb3duO1xuICAgICAgICB0aGlzLnJhbmdlTWFwVmVydGljYWxVcCA9IHJhbmdlTWFwVmVydGljYWxVcDtcbiAgICAgICAgdGhpcy5mYWNlRnJvbnQgPSBuZXcgVEhSRUUuVmVjdG9yMygwLjAsIDAuMCwgMS4wKTtcbiAgICAgICAgLy8gc2V0IHJlc3QgcXVhdGVybmlvbnNcbiAgICAgICAgdGhpcy5fcmVzdFF1YXRMZWZ0RXllID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbiAgICAgICAgdGhpcy5fcmVzdFF1YXRSaWdodEV5ZSA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG4gICAgICAgIHRoaXMuX3Jlc3RMZWZ0RXllUGFyZW50V29ybGRRdWF0ID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbiAgICAgICAgdGhpcy5fcmVzdFJpZ2h0RXllUGFyZW50V29ybGRRdWF0ID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbiAgICAgICAgY29uc3QgbGVmdEV5ZSA9IHRoaXMuaHVtYW5vaWQuZ2V0UmF3Qm9uZU5vZGUoJ2xlZnRFeWUnKTtcbiAgICAgICAgY29uc3QgcmlnaHRFeWUgPSB0aGlzLmh1bWFub2lkLmdldFJhd0JvbmVOb2RlKCdyaWdodEV5ZScpO1xuICAgICAgICBpZiAobGVmdEV5ZSkge1xuICAgICAgICAgICAgdGhpcy5fcmVzdFF1YXRMZWZ0RXllLmNvcHkobGVmdEV5ZS5xdWF0ZXJuaW9uKTtcbiAgICAgICAgICAgIGdldFdvcmxkUXVhdGVybmlvbkxpdGUobGVmdEV5ZS5wYXJlbnQsIHRoaXMuX3Jlc3RMZWZ0RXllUGFyZW50V29ybGRRdWF0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmlnaHRFeWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc3RRdWF0UmlnaHRFeWUuY29weShyaWdodEV5ZS5xdWF0ZXJuaW9uKTtcbiAgICAgICAgICAgIGdldFdvcmxkUXVhdGVybmlvbkxpdGUocmlnaHRFeWUucGFyZW50LCB0aGlzLl9yZXN0UmlnaHRFeWVQYXJlbnRXb3JsZFF1YXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGx5IHRoZSBpbnB1dCBhbmdsZSB0byBpdHMgYXNzb2NpYXRlZCBWUk0gbW9kZWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geWF3IFJvdGF0aW9uIGFyb3VuZCBZIGF4aXMsIGluIGRlZ3JlZVxuICAgICAqIEBwYXJhbSBwaXRjaCBSb3RhdGlvbiBhcm91bmQgWCBheGlzLCBpbiBkZWdyZWVcbiAgICAgKi9cbiAgICBhcHBseVlhd1BpdGNoKHlhdywgcGl0Y2gpIHtcbiAgICAgICAgY29uc3QgbGVmdEV5ZSA9IHRoaXMuaHVtYW5vaWQuZ2V0UmF3Qm9uZU5vZGUoJ2xlZnRFeWUnKTtcbiAgICAgICAgY29uc3QgcmlnaHRFeWUgPSB0aGlzLmh1bWFub2lkLmdldFJhd0JvbmVOb2RlKCdyaWdodEV5ZScpO1xuICAgICAgICBjb25zdCBsZWZ0RXllTm9ybWFsaXplZCA9IHRoaXMuaHVtYW5vaWQuZ2V0Tm9ybWFsaXplZEJvbmVOb2RlKCdsZWZ0RXllJyk7XG4gICAgICAgIGNvbnN0IHJpZ2h0RXllTm9ybWFsaXplZCA9IHRoaXMuaHVtYW5vaWQuZ2V0Tm9ybWFsaXplZEJvbmVOb2RlKCdyaWdodEV5ZScpO1xuICAgICAgICAvLyBsZWZ0XG4gICAgICAgIGlmIChsZWZ0RXllKSB7XG4gICAgICAgICAgICBpZiAocGl0Y2ggPCAwLjApIHtcbiAgICAgICAgICAgICAgICBfZXVsZXJBLnggPSAtVEhSRUUuTWF0aFV0aWxzLkRFRzJSQUQgKiB0aGlzLnJhbmdlTWFwVmVydGljYWxEb3duLm1hcCgtcGl0Y2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgX2V1bGVyQS54ID0gVEhSRUUuTWF0aFV0aWxzLkRFRzJSQUQgKiB0aGlzLnJhbmdlTWFwVmVydGljYWxVcC5tYXAocGl0Y2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHlhdyA8IDAuMCkge1xuICAgICAgICAgICAgICAgIF9ldWxlckEueSA9IC1USFJFRS5NYXRoVXRpbHMuREVHMlJBRCAqIHRoaXMucmFuZ2VNYXBIb3Jpem9udGFsSW5uZXIubWFwKC15YXcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgX2V1bGVyQS55ID0gVEhSRUUuTWF0aFV0aWxzLkRFRzJSQUQgKiB0aGlzLnJhbmdlTWFwSG9yaXpvbnRhbE91dGVyLm1hcCh5YXcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3F1YXRBLnNldEZyb21FdWxlcihfZXVsZXJBKTtcbiAgICAgICAgICAgIHRoaXMuX2dldFdvcmxkRmFjZUZyb250UXVhdChfcXVhdEIpO1xuICAgICAgICAgICAgLy8gX3F1YXRCICogX3F1YXRBICogX3F1YXRCXi0xXG4gICAgICAgICAgICAvLyB3aGVyZSBfcXVhdEEgaXMgTG9va0F0IHJvdGF0aW9uXG4gICAgICAgICAgICAvLyBhbmQgX3F1YXRCIGlzIHdvcmxkRmFjZUZyb250UXVhdFxuICAgICAgICAgICAgbGVmdEV5ZU5vcm1hbGl6ZWQucXVhdGVybmlvbi5jb3B5KF9xdWF0QikubXVsdGlwbHkoX3F1YXRBKS5tdWx0aXBseShfcXVhdEIuaW52ZXJ0KCkpO1xuICAgICAgICAgICAgX3F1YXRBLmNvcHkodGhpcy5fcmVzdExlZnRFeWVQYXJlbnRXb3JsZFF1YXQpO1xuICAgICAgICAgICAgLy8gX3F1YXRBXi0xICogbGVmdEV5ZU5vcm1hbGl6ZWQucXVhdGVybmlvbiAqIF9xdWF0QSAqIHJlc3RRdWF0TGVmdEV5ZVxuICAgICAgICAgICAgLy8gd2hlcmUgX3F1YXRBIGlzIHJlc3RMZWZ0RXllUGFyZW50V29ybGRRdWF0XG4gICAgICAgICAgICBsZWZ0RXllLnF1YXRlcm5pb25cbiAgICAgICAgICAgICAgICAuY29weShsZWZ0RXllTm9ybWFsaXplZC5xdWF0ZXJuaW9uKVxuICAgICAgICAgICAgICAgIC5tdWx0aXBseShfcXVhdEEpXG4gICAgICAgICAgICAgICAgLnByZW11bHRpcGx5KF9xdWF0QS5pbnZlcnQoKSlcbiAgICAgICAgICAgICAgICAubXVsdGlwbHkodGhpcy5fcmVzdFF1YXRMZWZ0RXllKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByaWdodFxuICAgICAgICBpZiAocmlnaHRFeWUpIHtcbiAgICAgICAgICAgIGlmIChwaXRjaCA8IDAuMCkge1xuICAgICAgICAgICAgICAgIF9ldWxlckEueCA9IC1USFJFRS5NYXRoVXRpbHMuREVHMlJBRCAqIHRoaXMucmFuZ2VNYXBWZXJ0aWNhbERvd24ubWFwKC1waXRjaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfZXVsZXJBLnggPSBUSFJFRS5NYXRoVXRpbHMuREVHMlJBRCAqIHRoaXMucmFuZ2VNYXBWZXJ0aWNhbFVwLm1hcChwaXRjaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoeWF3IDwgMC4wKSB7XG4gICAgICAgICAgICAgICAgX2V1bGVyQS55ID0gLVRIUkVFLk1hdGhVdGlscy5ERUcyUkFEICogdGhpcy5yYW5nZU1hcEhvcml6b250YWxPdXRlci5tYXAoLXlhdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfZXVsZXJBLnkgPSBUSFJFRS5NYXRoVXRpbHMuREVHMlJBRCAqIHRoaXMucmFuZ2VNYXBIb3Jpem9udGFsSW5uZXIubWFwKHlhdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfcXVhdEEuc2V0RnJvbUV1bGVyKF9ldWxlckEpO1xuICAgICAgICAgICAgdGhpcy5fZ2V0V29ybGRGYWNlRnJvbnRRdWF0KF9xdWF0Qik7XG4gICAgICAgICAgICAvLyBfcXVhdEIgKiBfcXVhdEEgKiBfcXVhdEJeLTFcbiAgICAgICAgICAgIC8vIHdoZXJlIF9xdWF0QSBpcyBMb29rQXQgcm90YXRpb25cbiAgICAgICAgICAgIC8vIGFuZCBfcXVhdEIgaXMgd29ybGRGYWNlRnJvbnRRdWF0XG4gICAgICAgICAgICByaWdodEV5ZU5vcm1hbGl6ZWQucXVhdGVybmlvbi5jb3B5KF9xdWF0QikubXVsdGlwbHkoX3F1YXRBKS5tdWx0aXBseShfcXVhdEIuaW52ZXJ0KCkpO1xuICAgICAgICAgICAgX3F1YXRBLmNvcHkodGhpcy5fcmVzdFJpZ2h0RXllUGFyZW50V29ybGRRdWF0KTtcbiAgICAgICAgICAgIC8vIF9xdWF0QV4tMSAqIHJpZ2h0RXllTm9ybWFsaXplZC5xdWF0ZXJuaW9uICogX3F1YXRBICogcmVzdFF1YXRSaWdodEV5ZVxuICAgICAgICAgICAgLy8gd2hlcmUgX3F1YXRBIGlzIHJlc3RSaWdodEV5ZVBhcmVudFdvcmxkUXVhdFxuICAgICAgICAgICAgcmlnaHRFeWUucXVhdGVybmlvblxuICAgICAgICAgICAgICAgIC5jb3B5KHJpZ2h0RXllTm9ybWFsaXplZC5xdWF0ZXJuaW9uKVxuICAgICAgICAgICAgICAgIC5tdWx0aXBseShfcXVhdEEpXG4gICAgICAgICAgICAgICAgLnByZW11bHRpcGx5KF9xdWF0QS5pbnZlcnQoKSlcbiAgICAgICAgICAgICAgICAubXVsdGlwbHkodGhpcy5fcmVzdFF1YXRSaWdodEV5ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBhcHBseVlhd1BpdGNofSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGxvb2tBdChldWxlcikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1ZSTUxvb2tBdEJvbmVBcHBsaWVyOiBsb29rQXQoKSBpcyBkZXByZWNhdGVkLiB1c2UgYXBwbHkoKSBpbnN0ZWFkLicpO1xuICAgICAgICBjb25zdCB5YXcgPSBUSFJFRS5NYXRoVXRpbHMuUkFEMkRFRyAqIGV1bGVyLnk7XG4gICAgICAgIGNvbnN0IHBpdGNoID0gVEhSRUUuTWF0aFV0aWxzLlJBRDJERUcgKiBldWxlci54O1xuICAgICAgICB0aGlzLmFwcGx5WWF3UGl0Y2goeWF3LCBwaXRjaCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIHF1YXRlcm5pb24gdGhhdCByb3RhdGVzIHRoZSB3b3JsZC1zcGFjZSArWiB1bml0IHZlY3RvciB0byB0aGUge0BsaW5rIGZhY2VGcm9udH0gZGlyZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCBBIHRhcmdldCBgVEhSRUUuUXVhdGVybmlvbmBcbiAgICAgKi9cbiAgICBfZ2V0V29ybGRGYWNlRnJvbnRRdWF0KHRhcmdldCkge1xuICAgICAgICBpZiAodGhpcy5mYWNlRnJvbnQuZGlzdGFuY2VUb1NxdWFyZWQoVkVDM19QT1NJVElWRV9aKSA8IDAuMDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuaWRlbnRpdHkoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBbZmFjZUZyb250QXppbXV0aCwgZmFjZUZyb250QWx0aXR1ZGVdID0gY2FsY0F6aW11dGhBbHRpdHVkZSh0aGlzLmZhY2VGcm9udCk7XG4gICAgICAgIF9ldWxlckEuc2V0KDAuMCwgMC41ICogTWF0aC5QSSArIGZhY2VGcm9udEF6aW11dGgsIGZhY2VGcm9udEFsdGl0dWRlLCAnWVpYJyk7XG4gICAgICAgIHJldHVybiB0YXJnZXQuc2V0RnJvbUV1bGVyKF9ldWxlckEpO1xuICAgIH1cbn1cbi8qKlxuICogUmVwcmVzZW50IGl0cyB0eXBlIG9mIGFwcGxpZXIuXG4gKi9cblZSTUxvb2tBdEJvbmVBcHBsaWVyLnR5cGUgPSAnYm9uZSc7XG5cbi8qKlxuICogQSBjbGFzcyB0aGF0IGFwcGxpZXMgZXllIGdhemUgZGlyZWN0aW9ucyB0byBhIFZSTS5cbiAqIEl0IHdpbGwgYmUgdXNlZCBieSB7QGxpbmsgVlJNTG9va0F0fS5cbiAqL1xuY2xhc3MgVlJNTG9va0F0RXhwcmVzc2lvbkFwcGxpZXIge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyB7QGxpbmsgVlJNTG9va0F0RXhwcmVzc2lvbkFwcGxpZXJ9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV4cHJlc3Npb25zIEEge0BsaW5rIFZSTUV4cHJlc3Npb25NYW5hZ2VyfVxuICAgICAqIEBwYXJhbSByYW5nZU1hcEhvcml6b250YWxJbm5lciBBIHtAbGluayBWUk1Mb29rQXRSYW5nZU1hcH0gdXNlZCBmb3IgaW5uZXIgdHJhbnN2ZXJzZSBkaXJlY3Rpb25cbiAgICAgKiBAcGFyYW0gcmFuZ2VNYXBIb3Jpem9udGFsT3V0ZXIgQSB7QGxpbmsgVlJNTG9va0F0UmFuZ2VNYXB9IHVzZWQgZm9yIG91dGVyIHRyYW5zdmVyc2UgZGlyZWN0aW9uXG4gICAgICogQHBhcmFtIHJhbmdlTWFwVmVydGljYWxEb3duIEEge0BsaW5rIFZSTUxvb2tBdFJhbmdlTWFwfSB1c2VkIGZvciBkb3duIGRpcmVjdGlvblxuICAgICAqIEBwYXJhbSByYW5nZU1hcFZlcnRpY2FsVXAgQSB7QGxpbmsgVlJNTG9va0F0UmFuZ2VNYXB9IHVzZWQgZm9yIHVwIGRpcmVjdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGV4cHJlc3Npb25zLCByYW5nZU1hcEhvcml6b250YWxJbm5lciwgcmFuZ2VNYXBIb3Jpem9udGFsT3V0ZXIsIHJhbmdlTWFwVmVydGljYWxEb3duLCByYW5nZU1hcFZlcnRpY2FsVXApIHtcbiAgICAgICAgdGhpcy5leHByZXNzaW9ucyA9IGV4cHJlc3Npb25zO1xuICAgICAgICB0aGlzLnJhbmdlTWFwSG9yaXpvbnRhbElubmVyID0gcmFuZ2VNYXBIb3Jpem9udGFsSW5uZXI7XG4gICAgICAgIHRoaXMucmFuZ2VNYXBIb3Jpem9udGFsT3V0ZXIgPSByYW5nZU1hcEhvcml6b250YWxPdXRlcjtcbiAgICAgICAgdGhpcy5yYW5nZU1hcFZlcnRpY2FsRG93biA9IHJhbmdlTWFwVmVydGljYWxEb3duO1xuICAgICAgICB0aGlzLnJhbmdlTWFwVmVydGljYWxVcCA9IHJhbmdlTWFwVmVydGljYWxVcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbHkgdGhlIGlucHV0IGFuZ2xlIHRvIGl0cyBhc3NvY2lhdGVkIFZSTSBtb2RlbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB5YXcgUm90YXRpb24gYXJvdW5kIFkgYXhpcywgaW4gZGVncmVlXG4gICAgICogQHBhcmFtIHBpdGNoIFJvdGF0aW9uIGFyb3VuZCBYIGF4aXMsIGluIGRlZ3JlZVxuICAgICAqL1xuICAgIGFwcGx5WWF3UGl0Y2goeWF3LCBwaXRjaCkge1xuICAgICAgICBpZiAocGl0Y2ggPCAwLjApIHtcbiAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbnMuc2V0VmFsdWUoJ2xvb2tEb3duJywgMC4wKTtcbiAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbnMuc2V0VmFsdWUoJ2xvb2tVcCcsIHRoaXMucmFuZ2VNYXBWZXJ0aWNhbFVwLm1hcCgtcGl0Y2gpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbnMuc2V0VmFsdWUoJ2xvb2tVcCcsIDAuMCk7XG4gICAgICAgICAgICB0aGlzLmV4cHJlc3Npb25zLnNldFZhbHVlKCdsb29rRG93bicsIHRoaXMucmFuZ2VNYXBWZXJ0aWNhbERvd24ubWFwKHBpdGNoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHlhdyA8IDAuMCkge1xuICAgICAgICAgICAgdGhpcy5leHByZXNzaW9ucy5zZXRWYWx1ZSgnbG9va0xlZnQnLCAwLjApO1xuICAgICAgICAgICAgdGhpcy5leHByZXNzaW9ucy5zZXRWYWx1ZSgnbG9va1JpZ2h0JywgdGhpcy5yYW5nZU1hcEhvcml6b250YWxPdXRlci5tYXAoLXlhdykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5leHByZXNzaW9ucy5zZXRWYWx1ZSgnbG9va1JpZ2h0JywgMC4wKTtcbiAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbnMuc2V0VmFsdWUoJ2xvb2tMZWZ0JywgdGhpcy5yYW5nZU1hcEhvcml6b250YWxPdXRlci5tYXAoeWF3KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBhcHBseVlhd1BpdGNofSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGxvb2tBdChldWxlcikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1ZSTUxvb2tBdEJvbmVBcHBsaWVyOiBsb29rQXQoKSBpcyBkZXByZWNhdGVkLiB1c2UgYXBwbHkoKSBpbnN0ZWFkLicpO1xuICAgICAgICBjb25zdCB5YXcgPSBUSFJFRS5NYXRoVXRpbHMuUkFEMkRFRyAqIGV1bGVyLnk7XG4gICAgICAgIGNvbnN0IHBpdGNoID0gVEhSRUUuTWF0aFV0aWxzLlJBRDJERUcgKiBldWxlci54O1xuICAgICAgICB0aGlzLmFwcGx5WWF3UGl0Y2goeWF3LCBwaXRjaCk7XG4gICAgfVxufVxuLyoqXG4gKiBSZXByZXNlbnQgaXRzIHR5cGUgb2YgYXBwbGllci5cbiAqL1xuVlJNTG9va0F0RXhwcmVzc2lvbkFwcGxpZXIudHlwZSA9ICdleHByZXNzaW9uJztcblxuY2xhc3MgVlJNTG9va0F0UmFuZ2VNYXAge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyB7QGxpbmsgVlJNTG9va0F0UmFuZ2VNYXB9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGlucHV0TWF4VmFsdWUgVGhlIHtAbGluayBpbnB1dE1heFZhbHVlfSBvZiB0aGUgbWFwXG4gICAgICogQHBhcmFtIG91dHB1dFNjYWxlIFRoZSB7QGxpbmsgb3V0cHV0U2NhbGV9IG9mIHRoZSBtYXBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpbnB1dE1heFZhbHVlLCBvdXRwdXRTY2FsZSkge1xuICAgICAgICB0aGlzLmlucHV0TWF4VmFsdWUgPSBpbnB1dE1heFZhbHVlO1xuICAgICAgICB0aGlzLm91dHB1dFNjYWxlID0gb3V0cHV0U2NhbGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV2YWx1YXRlIGFuIGlucHV0IHZhbHVlIGFuZCBvdXRwdXQgYSBtYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHNyYyBUaGUgaW5wdXQgdmFsdWVcbiAgICAgKi9cbiAgICBtYXAoc3JjKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm91dHB1dFNjYWxlICogc2F0dXJhdGUoc3JjIC8gdGhpcy5pbnB1dE1heFZhbHVlKTtcbiAgICB9XG59XG5cbi8qKlxuICogUG9zc2libGUgc3BlYyB2ZXJzaW9ucyBpdCByZWNvZ25pemVzLlxuICovXG5jb25zdCBQT1NTSUJMRV9TUEVDX1ZFUlNJT05TJDEgPSBuZXcgU2V0KFsnMS4wJywgJzEuMC1iZXRhJ10pO1xuLyoqXG4gKiBUaGUgbWluaW11bSBwZXJtaXR0ZWQgdmFsdWUgZm9yIHtAbGluayBWMVZSTVNjaGVtYS5Mb29rQXRSYW5nZU1hcC5pbnB1dE1heFZhbHVlfS5cbiAqIElmIHRoZSBnaXZlbiB2YWx1ZSBpcyBzbWFsbGVyIHRoYW4gdGhpcywgdGhlIGxvYWRlciBzaG93cyBhIHdhcm5pbmcgYW5kIGNsYW1wcyB1cCB0aGUgdmFsdWUuXG4gKi9cbmNvbnN0IElOUFVUX01BWF9WQUxVRV9NSU5JTVVNID0gMC4wMTtcbi8qKlxuICogQSBwbHVnaW4gb2YgR0xURkxvYWRlciB0aGF0IGltcG9ydHMgYSB7QGxpbmsgVlJNTG9va0F0fSBmcm9tIGEgVlJNIGV4dGVuc2lvbiBvZiBhIEdMVEYuXG4gKi9cbmNsYXNzIFZSTUxvb2tBdExvYWRlclBsdWdpbiB7XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIC8vIFdlIHNob3VsZCB1c2UgdGhlIGV4dGVuc2lvbiBuYW1lIGluc3RlYWQgYnV0IHdlIGhhdmUgbXVsdGlwbGUgcGx1Z2lucyBmb3IgYW4gZXh0ZW5zaW9uLi4uXG4gICAgICAgIHJldHVybiAnVlJNTG9va0F0TG9hZGVyUGx1Z2luJztcbiAgICB9XG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgICAgICB0aGlzLmhlbHBlclJvb3QgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVscGVyUm9vdDtcbiAgICB9XG4gICAgYWZ0ZXJSb290KGdsdGYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHZybUh1bWFub2lkID0gZ2x0Zi51c2VyRGF0YS52cm1IdW1hbm9pZDtcbiAgICAgICAgICAgIC8vIGV4cGxpY2l0bHkgZGlzdGluZ3Vpc2ggbnVsbCBhbmQgdW5kZWZpbmVkXG4gICAgICAgICAgICAvLyBzaW5jZSB2cm1IdW1hbm9pZCBtaWdodCBiZSBudWxsIGFzIGEgcmVzdWx0XG4gICAgICAgICAgICBpZiAodnJtSHVtYW5vaWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2cm1IdW1hbm9pZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWUk1Mb29rQXRMb2FkZXJQbHVnaW46IHZybUh1bWFub2lkIGlzIHVuZGVmaW5lZC4gVlJNSHVtYW5vaWRMb2FkZXJQbHVnaW4gaGF2ZSB0byBiZSB1c2VkIGZpcnN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2cm1FeHByZXNzaW9uTWFuYWdlciA9IGdsdGYudXNlckRhdGEudnJtRXhwcmVzc2lvbk1hbmFnZXI7XG4gICAgICAgICAgICBpZiAodnJtRXhwcmVzc2lvbk1hbmFnZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2cm1FeHByZXNzaW9uTWFuYWdlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWUk1Mb29rQXRMb2FkZXJQbHVnaW46IHZybUV4cHJlc3Npb25NYW5hZ2VyIGlzIHVuZGVmaW5lZC4gVlJNRXhwcmVzc2lvbkxvYWRlclBsdWdpbiBoYXZlIHRvIGJlIHVzZWQgZmlyc3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdsdGYudXNlckRhdGEudnJtTG9va0F0ID0geWllbGQgdGhpcy5faW1wb3J0KGdsdGYsIHZybUh1bWFub2lkLCB2cm1FeHByZXNzaW9uTWFuYWdlcik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbXBvcnQgYSB7QGxpbmsgVlJNTG9va0F0fSBmcm9tIGEgVlJNLlxuICAgICAqXG4gICAgICogQHBhcmFtIGdsdGYgQSBwYXJzZWQgcmVzdWx0IG9mIEdMVEYgdGFrZW4gZnJvbSBHTFRGTG9hZGVyXG4gICAgICogQHBhcmFtIGh1bWFub2lkIEEge0BsaW5rIFZSTUh1bWFub2lkfSBpbnN0YW5jZSB0aGF0IHJlcHJlc2VudHMgdGhlIFZSTVxuICAgICAqIEBwYXJhbSBleHByZXNzaW9ucyBBIHtAbGluayBWUk1FeHByZXNzaW9uTWFuYWdlcn0gaW5zdGFuY2UgdGhhdCByZXByZXNlbnRzIHRoZSBWUk1cbiAgICAgKi9cbiAgICBfaW1wb3J0KGdsdGYsIGh1bWFub2lkLCBleHByZXNzaW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKGh1bWFub2lkID09IG51bGwgfHwgZXhwcmVzc2lvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdjFSZXN1bHQgPSB5aWVsZCB0aGlzLl92MUltcG9ydChnbHRmLCBodW1hbm9pZCwgZXhwcmVzc2lvbnMpO1xuICAgICAgICAgICAgaWYgKHYxUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYxUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdjBSZXN1bHQgPSB5aWVsZCB0aGlzLl92MEltcG9ydChnbHRmLCBodW1hbm9pZCwgZXhwcmVzc2lvbnMpO1xuICAgICAgICAgICAgaWYgKHYwUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYwUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfdjFJbXBvcnQoZ2x0ZiwgaHVtYW5vaWQsIGV4cHJlc3Npb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QganNvbiA9IHRoaXMucGFyc2VyLmpzb247XG4gICAgICAgICAgICAvLyBlYXJseSBhYm9ydCBpZiBpdCBkb2Vzbid0IHVzZSB2cm1cbiAgICAgICAgICAgIGNvbnN0IGlzVlJNVXNlZCA9ICgoX2EgPSBqc29uLmV4dGVuc2lvbnNVc2VkKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5kZXhPZignVlJNQ192cm0nKSkgIT09IC0xO1xuICAgICAgICAgICAgaWYgKCFpc1ZSTVVzZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IChfYiA9IGpzb24uZXh0ZW5zaW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iWydWUk1DX3ZybSddO1xuICAgICAgICAgICAgaWYgKCFleHRlbnNpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNwZWNWZXJzaW9uID0gZXh0ZW5zaW9uLnNwZWNWZXJzaW9uO1xuICAgICAgICAgICAgaWYgKCFQT1NTSUJMRV9TUEVDX1ZFUlNJT05TJDEuaGFzKHNwZWNWZXJzaW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVlJNTG9va0F0TG9hZGVyUGx1Z2luOiBVbmtub3duIFZSTUNfdnJtIHNwZWNWZXJzaW9uIFwiJHtzcGVjVmVyc2lvbn1cImApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2NoZW1hTG9va0F0ID0gZXh0ZW5zaW9uLmxvb2tBdDtcbiAgICAgICAgICAgIGlmICghc2NoZW1hTG9va0F0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0T3V0cHV0U2NhbGUgPSBzY2hlbWFMb29rQXQudHlwZSA9PT0gJ2V4cHJlc3Npb24nID8gMS4wIDogMTAuMDtcbiAgICAgICAgICAgIGNvbnN0IG1hcEhJID0gdGhpcy5fdjFJbXBvcnRSYW5nZU1hcChzY2hlbWFMb29rQXQucmFuZ2VNYXBIb3Jpem9udGFsSW5uZXIsIGRlZmF1bHRPdXRwdXRTY2FsZSk7XG4gICAgICAgICAgICBjb25zdCBtYXBITyA9IHRoaXMuX3YxSW1wb3J0UmFuZ2VNYXAoc2NoZW1hTG9va0F0LnJhbmdlTWFwSG9yaXpvbnRhbE91dGVyLCBkZWZhdWx0T3V0cHV0U2NhbGUpO1xuICAgICAgICAgICAgY29uc3QgbWFwVkQgPSB0aGlzLl92MUltcG9ydFJhbmdlTWFwKHNjaGVtYUxvb2tBdC5yYW5nZU1hcFZlcnRpY2FsRG93biwgZGVmYXVsdE91dHB1dFNjYWxlKTtcbiAgICAgICAgICAgIGNvbnN0IG1hcFZVID0gdGhpcy5fdjFJbXBvcnRSYW5nZU1hcChzY2hlbWFMb29rQXQucmFuZ2VNYXBWZXJ0aWNhbFVwLCBkZWZhdWx0T3V0cHV0U2NhbGUpO1xuICAgICAgICAgICAgbGV0IGFwcGxpZXI7XG4gICAgICAgICAgICBpZiAoc2NoZW1hTG9va0F0LnR5cGUgPT09ICdleHByZXNzaW9uJykge1xuICAgICAgICAgICAgICAgIGFwcGxpZXIgPSBuZXcgVlJNTG9va0F0RXhwcmVzc2lvbkFwcGxpZXIoZXhwcmVzc2lvbnMsIG1hcEhJLCBtYXBITywgbWFwVkQsIG1hcFZVKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFwcGxpZXIgPSBuZXcgVlJNTG9va0F0Qm9uZUFwcGxpZXIoaHVtYW5vaWQsIG1hcEhJLCBtYXBITywgbWFwVkQsIG1hcFZVKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvb2tBdCA9IHRoaXMuX2ltcG9ydExvb2tBdChodW1hbm9pZCwgYXBwbGllcik7XG4gICAgICAgICAgICBsb29rQXQub2Zmc2V0RnJvbUhlYWRCb25lLmZyb21BcnJheSgoX2MgPSBzY2hlbWFMb29rQXQub2Zmc2V0RnJvbUhlYWRCb25lKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBbMC4wLCAwLjA2LCAwLjBdKTtcbiAgICAgICAgICAgIHJldHVybiBsb29rQXQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfdjFJbXBvcnRSYW5nZU1hcChzY2hlbWFSYW5nZU1hcCwgZGVmYXVsdE91dHB1dFNjYWxlKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGxldCBpbnB1dE1heFZhbHVlID0gKF9hID0gc2NoZW1hUmFuZ2VNYXAgPT09IG51bGwgfHwgc2NoZW1hUmFuZ2VNYXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjaGVtYVJhbmdlTWFwLmlucHV0TWF4VmFsdWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDkwLjA7XG4gICAgICAgIGNvbnN0IG91dHB1dFNjYWxlID0gKF9iID0gc2NoZW1hUmFuZ2VNYXAgPT09IG51bGwgfHwgc2NoZW1hUmFuZ2VNYXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjaGVtYVJhbmdlTWFwLm91dHB1dFNjYWxlKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBkZWZhdWx0T3V0cHV0U2NhbGU7XG4gICAgICAgIC8vIEl0IG1pZ2h0IGNhdXNlIE5hTiB3aGVuIGBpbnB1dE1heFZhbHVlYCBpcyB0b28gc21hbGxcbiAgICAgICAgLy8gd2hpY2ggbWFrZXMgdGhlIG1lc2ggb2YgdGhlIGhlYWQgZGlzYXBwZWFyXG4gICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3BpeGl2L3RocmVlLXZybS9pc3N1ZXMvMTIwMVxuICAgICAgICBpZiAoaW5wdXRNYXhWYWx1ZSA8IElOUFVUX01BWF9WQUxVRV9NSU5JTVVNKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1ZSTUxvb2tBdExvYWRlclBsdWdpbjogaW5wdXRNYXhWYWx1ZSBvZiBhIHJhbmdlIG1hcCBpcyB0b28gc21hbGwuIENvbnNpZGVyIHJldmlld2luZyB0aGUgcmFuZ2UgbWFwIScpO1xuICAgICAgICAgICAgaW5wdXRNYXhWYWx1ZSA9IElOUFVUX01BWF9WQUxVRV9NSU5JTVVNO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVlJNTG9va0F0UmFuZ2VNYXAoaW5wdXRNYXhWYWx1ZSwgb3V0cHV0U2NhbGUpO1xuICAgIH1cbiAgICBfdjBJbXBvcnQoZ2x0ZiwgaHVtYW5vaWQsIGV4cHJlc3Npb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSB0aGlzLnBhcnNlci5qc29uO1xuICAgICAgICAgICAgLy8gZWFybHkgYWJvcnQgaWYgaXQgZG9lc24ndCB1c2UgdnJtXG4gICAgICAgICAgICBjb25zdCB2cm1FeHQgPSAoX2EgPSBqc29uLmV4dGVuc2lvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5WUk07XG4gICAgICAgICAgICBpZiAoIXZybUV4dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2NoZW1hRmlyc3RQZXJzb24gPSB2cm1FeHQuZmlyc3RQZXJzb247XG4gICAgICAgICAgICBpZiAoIXNjaGVtYUZpcnN0UGVyc29uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0T3V0cHV0U2NhbGUgPSBzY2hlbWFGaXJzdFBlcnNvbi5sb29rQXRUeXBlTmFtZSA9PT0gJ0JsZW5kU2hhcGUnID8gMS4wIDogMTAuMDtcbiAgICAgICAgICAgIGNvbnN0IG1hcEhJID0gdGhpcy5fdjBJbXBvcnREZWdyZWVNYXAoc2NoZW1hRmlyc3RQZXJzb24ubG9va0F0SG9yaXpvbnRhbElubmVyLCBkZWZhdWx0T3V0cHV0U2NhbGUpO1xuICAgICAgICAgICAgY29uc3QgbWFwSE8gPSB0aGlzLl92MEltcG9ydERlZ3JlZU1hcChzY2hlbWFGaXJzdFBlcnNvbi5sb29rQXRIb3Jpem9udGFsT3V0ZXIsIGRlZmF1bHRPdXRwdXRTY2FsZSk7XG4gICAgICAgICAgICBjb25zdCBtYXBWRCA9IHRoaXMuX3YwSW1wb3J0RGVncmVlTWFwKHNjaGVtYUZpcnN0UGVyc29uLmxvb2tBdFZlcnRpY2FsRG93biwgZGVmYXVsdE91dHB1dFNjYWxlKTtcbiAgICAgICAgICAgIGNvbnN0IG1hcFZVID0gdGhpcy5fdjBJbXBvcnREZWdyZWVNYXAoc2NoZW1hRmlyc3RQZXJzb24ubG9va0F0VmVydGljYWxVcCwgZGVmYXVsdE91dHB1dFNjYWxlKTtcbiAgICAgICAgICAgIGxldCBhcHBsaWVyO1xuICAgICAgICAgICAgaWYgKHNjaGVtYUZpcnN0UGVyc29uLmxvb2tBdFR5cGVOYW1lID09PSAnQmxlbmRTaGFwZScpIHtcbiAgICAgICAgICAgICAgICBhcHBsaWVyID0gbmV3IFZSTUxvb2tBdEV4cHJlc3Npb25BcHBsaWVyKGV4cHJlc3Npb25zLCBtYXBISSwgbWFwSE8sIG1hcFZELCBtYXBWVSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcHBsaWVyID0gbmV3IFZSTUxvb2tBdEJvbmVBcHBsaWVyKGh1bWFub2lkLCBtYXBISSwgbWFwSE8sIG1hcFZELCBtYXBWVSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb29rQXQgPSB0aGlzLl9pbXBvcnRMb29rQXQoaHVtYW5vaWQsIGFwcGxpZXIpO1xuICAgICAgICAgICAgaWYgKHNjaGVtYUZpcnN0UGVyc29uLmZpcnN0UGVyc29uQm9uZU9mZnNldCkge1xuICAgICAgICAgICAgICAgIGxvb2tBdC5vZmZzZXRGcm9tSGVhZEJvbmUuc2V0KChfYiA9IHNjaGVtYUZpcnN0UGVyc29uLmZpcnN0UGVyc29uQm9uZU9mZnNldC54KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwLjAsIChfYyA9IHNjaGVtYUZpcnN0UGVyc29uLmZpcnN0UGVyc29uQm9uZU9mZnNldC55KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAwLjA2LCAtKChfZCA9IHNjaGVtYUZpcnN0UGVyc29uLmZpcnN0UGVyc29uQm9uZU9mZnNldC56KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAwLjApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvb2tBdC5vZmZzZXRGcm9tSGVhZEJvbmUuc2V0KDAuMCwgMC4wNiwgMC4wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFZSTSAwLjAgYXJlIGZhY2luZyBaLSBpbnN0ZWFkIG9mIForXG4gICAgICAgICAgICBsb29rQXQuZmFjZUZyb250LnNldCgwLjAsIDAuMCwgLTEuMCk7XG4gICAgICAgICAgICBpZiAoYXBwbGllciBpbnN0YW5jZW9mIFZSTUxvb2tBdEJvbmVBcHBsaWVyKSB7XG4gICAgICAgICAgICAgICAgYXBwbGllci5mYWNlRnJvbnQuc2V0KDAuMCwgMC4wLCAtMS4wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsb29rQXQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfdjBJbXBvcnREZWdyZWVNYXAoc2NoZW1hRGVncmVlTWFwLCBkZWZhdWx0T3V0cHV0U2NhbGUpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgY3VydmUgPSBzY2hlbWFEZWdyZWVNYXAgPT09IG51bGwgfHwgc2NoZW1hRGVncmVlTWFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzY2hlbWFEZWdyZWVNYXAuY3VydmU7XG4gICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShjdXJ2ZSkgIT09ICdbMCwwLDAsMSwxLDEsMSwwXScpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQ3VydmVzIG9mIExvb2tBdERlZ3JlZU1hcCBkZWZpbmVkIGluIFZSTSAwLjAgYXJlIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgeFJhbmdlID0gKF9hID0gc2NoZW1hRGVncmVlTWFwID09PSBudWxsIHx8IHNjaGVtYURlZ3JlZU1hcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2NoZW1hRGVncmVlTWFwLnhSYW5nZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogOTAuMDtcbiAgICAgICAgY29uc3QgeVJhbmdlID0gKF9iID0gc2NoZW1hRGVncmVlTWFwID09PSBudWxsIHx8IHNjaGVtYURlZ3JlZU1hcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2NoZW1hRGVncmVlTWFwLnlSYW5nZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZGVmYXVsdE91dHB1dFNjYWxlO1xuICAgICAgICAvLyBJdCBtaWdodCBjYXVzZSBOYU4gd2hlbiBgeFJhbmdlYCBpcyB0b28gc21hbGxcbiAgICAgICAgLy8gd2hpY2ggbWFrZXMgdGhlIG1lc2ggb2YgdGhlIGhlYWQgZGlzYXBwZWFyXG4gICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3BpeGl2L3RocmVlLXZybS9pc3N1ZXMvMTIwMVxuICAgICAgICBpZiAoeFJhbmdlIDwgSU5QVVRfTUFYX1ZBTFVFX01JTklNVU0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignVlJNTG9va0F0TG9hZGVyUGx1Z2luOiB4UmFuZ2Ugb2YgYSBkZWdyZWUgbWFwIGlzIHRvbyBzbWFsbC4gQ29uc2lkZXIgcmV2aWV3aW5nIHRoZSBkZWdyZWUgbWFwIScpO1xuICAgICAgICAgICAgeFJhbmdlID0gSU5QVVRfTUFYX1ZBTFVFX01JTklNVU07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBWUk1Mb29rQXRSYW5nZU1hcCh4UmFuZ2UsIHlSYW5nZSk7XG4gICAgfVxuICAgIF9pbXBvcnRMb29rQXQoaHVtYW5vaWQsIGFwcGxpZXIpIHtcbiAgICAgICAgY29uc3QgbG9va0F0ID0gbmV3IFZSTUxvb2tBdChodW1hbm9pZCwgYXBwbGllcik7XG4gICAgICAgIGlmICh0aGlzLmhlbHBlclJvb3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGhlbHBlciA9IG5ldyBWUk1Mb29rQXRIZWxwZXIobG9va0F0KTtcbiAgICAgICAgICAgIHRoaXMuaGVscGVyUm9vdC5hZGQoaGVscGVyKTtcbiAgICAgICAgICAgIGhlbHBlci5yZW5kZXJPcmRlciA9IHRoaXMuaGVscGVyUm9vdC5yZW5kZXJPcmRlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9va0F0O1xuICAgIH1cbn1cblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4vKipcbiAqIFJlcHJlc2VudHMgYSB0eXBlIG9mIGFwcGxpZXIuXG4gKi9cbmNvbnN0IFZSTUxvb2tBdFR5cGVOYW1lID0ge1xuICAgIEJvbmU6ICdib25lJyxcbiAgICBFeHByZXNzaW9uOiAnZXhwcmVzc2lvbicsXG59O1xuXG4vKipcbiAqIFlvaW5rZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2Jsb2IvbWFzdGVyL2V4YW1wbGVzL2pzbS9sb2FkZXJzL0dMVEZMb2FkZXIuanNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwsIHBhdGgpIHtcbiAgICAvLyBJbnZhbGlkIFVSTFxuICAgIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJyB8fCB1cmwgPT09ICcnKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgLy8gSG9zdCBSZWxhdGl2ZSBVUkxcbiAgICBpZiAoL15odHRwcz86XFwvXFwvL2kudGVzdChwYXRoKSAmJiAvXlxcLy8udGVzdCh1cmwpKSB7XG4gICAgICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoLyheaHR0cHM/OlxcL1xcL1teL10rKS4qL2ksICckMScpO1xuICAgIH1cbiAgICAvLyBBYnNvbHV0ZSBVUkwgaHR0cDovLyxodHRwczovLywvL1xuICAgIGlmICgvXihodHRwcz86KT9cXC9cXC8vaS50ZXN0KHVybCkpXG4gICAgICAgIHJldHVybiB1cmw7XG4gICAgLy8gRGF0YSBVUklcbiAgICBpZiAoL15kYXRhOi4qLC4qJC9pLnRlc3QodXJsKSlcbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICAvLyBCbG9iIFVSTFxuICAgIGlmICgvXmJsb2I6LiokL2kudGVzdCh1cmwpKVxuICAgICAgICByZXR1cm4gdXJsO1xuICAgIC8vIFJlbGF0aXZlIFVSTFxuICAgIHJldHVybiBwYXRoICsgdXJsO1xufVxuXG4vKipcbiAqIFBvc3NpYmxlIHNwZWMgdmVyc2lvbnMgaXQgcmVjb2duaXplcy5cbiAqL1xuY29uc3QgUE9TU0lCTEVfU1BFQ19WRVJTSU9OUyA9IG5ldyBTZXQoWycxLjAnLCAnMS4wLWJldGEnXSk7XG4vKipcbiAqIEEgcGx1Z2luIG9mIEdMVEZMb2FkZXIgdGhhdCBpbXBvcnRzIGEge0BsaW5rIFZSTTFNZXRhfSBmcm9tIGEgVlJNIGV4dGVuc2lvbiBvZiBhIEdMVEYuXG4gKi9cbmNsYXNzIFZSTU1ldGFMb2FkZXJQbHVnaW4ge1xuICAgIGdldCBuYW1lKCkge1xuICAgICAgICAvLyBXZSBzaG91bGQgdXNlIHRoZSBleHRlbnNpb24gbmFtZSBpbnN0ZWFkIGJ1dCB3ZSBoYXZlIG11bHRpcGxlIHBsdWdpbnMgZm9yIGFuIGV4dGVuc2lvbi4uLlxuICAgICAgICByZXR1cm4gJ1ZSTU1ldGFMb2FkZXJQbHVnaW4nO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgICAgICB0aGlzLm5lZWRUaHVtYm5haWxJbWFnZSA9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5uZWVkVGh1bWJuYWlsSW1hZ2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRydWU7XG4gICAgICAgIHRoaXMuYWNjZXB0TGljZW5zZVVybHMgPSAoX2IgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWNjZXB0TGljZW5zZVVybHMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFsnaHR0cHM6Ly92cm0uZGV2L2xpY2Vuc2VzLzEuMC8nXTtcbiAgICAgICAgdGhpcy5hY2NlcHRWME1ldGEgPSAoX2MgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWNjZXB0VjBNZXRhKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiB0cnVlO1xuICAgIH1cbiAgICBhZnRlclJvb3QoZ2x0Zikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgZ2x0Zi51c2VyRGF0YS52cm1NZXRhID0geWllbGQgdGhpcy5faW1wb3J0KGdsdGYpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2ltcG9ydChnbHRmKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCB2MVJlc3VsdCA9IHlpZWxkIHRoaXMuX3YxSW1wb3J0KGdsdGYpO1xuICAgICAgICAgICAgaWYgKHYxUmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdjFSZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2MFJlc3VsdCA9IHlpZWxkIHRoaXMuX3YwSW1wb3J0KGdsdGYpO1xuICAgICAgICAgICAgaWYgKHYwUmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdjBSZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF92MUltcG9ydChnbHRmKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QganNvbiA9IHRoaXMucGFyc2VyLmpzb247XG4gICAgICAgICAgICAvLyBlYXJseSBhYm9ydCBpZiBpdCBkb2Vzbid0IHVzZSB2cm1cbiAgICAgICAgICAgIGNvbnN0IGlzVlJNVXNlZCA9ICgoX2EgPSBqc29uLmV4dGVuc2lvbnNVc2VkKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5kZXhPZignVlJNQ192cm0nKSkgIT09IC0xO1xuICAgICAgICAgICAgaWYgKCFpc1ZSTVVzZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IChfYiA9IGpzb24uZXh0ZW5zaW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iWydWUk1DX3ZybSddO1xuICAgICAgICAgICAgaWYgKGV4dGVuc2lvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzcGVjVmVyc2lvbiA9IGV4dGVuc2lvbi5zcGVjVmVyc2lvbjtcbiAgICAgICAgICAgIGlmICghUE9TU0lCTEVfU1BFQ19WRVJTSU9OUy5oYXMoc3BlY1ZlcnNpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBWUk1NZXRhTG9hZGVyUGx1Z2luOiBVbmtub3duIFZSTUNfdnJtIHNwZWNWZXJzaW9uIFwiJHtzcGVjVmVyc2lvbn1cImApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2NoZW1hTWV0YSA9IGV4dGVuc2lvbi5tZXRhO1xuICAgICAgICAgICAgaWYgKCFzY2hlbWFNZXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aHJvdyBhbiBlcnJvciBpZiBhY2NlcHRWME1ldGEgaXMgZmFsc2VcbiAgICAgICAgICAgIGNvbnN0IGxpY2Vuc2VVcmwgPSBzY2hlbWFNZXRhLmxpY2Vuc2VVcmw7XG4gICAgICAgICAgICBjb25zdCBhY2NlcHRMaWNlbnNlVXJsc1NldCA9IG5ldyBTZXQodGhpcy5hY2NlcHRMaWNlbnNlVXJscyk7XG4gICAgICAgICAgICBpZiAoIWFjY2VwdExpY2Vuc2VVcmxzU2V0LmhhcyhsaWNlbnNlVXJsKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVlJNTWV0YUxvYWRlclBsdWdpbjogVGhlIGxpY2Vuc2UgdXJsIFwiJHtsaWNlbnNlVXJsfVwiIGlzIG5vdCBhY2NlcHRlZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHRodW1ibmFpbEltYWdlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHRoaXMubmVlZFRodW1ibmFpbEltYWdlICYmIHNjaGVtYU1ldGEudGh1bWJuYWlsSW1hZ2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRodW1ibmFpbEltYWdlID0gKF9jID0gKHlpZWxkIHRoaXMuX2V4dHJhY3RHTFRGSW1hZ2Uoc2NoZW1hTWV0YS50aHVtYm5haWxJbWFnZSkpKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1ldGFWZXJzaW9uOiAnMScsXG4gICAgICAgICAgICAgICAgbmFtZTogc2NoZW1hTWV0YS5uYW1lLFxuICAgICAgICAgICAgICAgIHZlcnNpb246IHNjaGVtYU1ldGEudmVyc2lvbixcbiAgICAgICAgICAgICAgICBhdXRob3JzOiBzY2hlbWFNZXRhLmF1dGhvcnMsXG4gICAgICAgICAgICAgICAgY29weXJpZ2h0SW5mb3JtYXRpb246IHNjaGVtYU1ldGEuY29weXJpZ2h0SW5mb3JtYXRpb24sXG4gICAgICAgICAgICAgICAgY29udGFjdEluZm9ybWF0aW9uOiBzY2hlbWFNZXRhLmNvbnRhY3RJbmZvcm1hdGlvbixcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VzOiBzY2hlbWFNZXRhLnJlZmVyZW5jZXMsXG4gICAgICAgICAgICAgICAgdGhpcmRQYXJ0eUxpY2Vuc2VzOiBzY2hlbWFNZXRhLnRoaXJkUGFydHlMaWNlbnNlcyxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxJbWFnZSxcbiAgICAgICAgICAgICAgICBsaWNlbnNlVXJsOiBzY2hlbWFNZXRhLmxpY2Vuc2VVcmwsXG4gICAgICAgICAgICAgICAgYXZhdGFyUGVybWlzc2lvbjogc2NoZW1hTWV0YS5hdmF0YXJQZXJtaXNzaW9uLFxuICAgICAgICAgICAgICAgIGFsbG93RXhjZXNzaXZlbHlWaW9sZW50VXNhZ2U6IHNjaGVtYU1ldGEuYWxsb3dFeGNlc3NpdmVseVZpb2xlbnRVc2FnZSxcbiAgICAgICAgICAgICAgICBhbGxvd0V4Y2Vzc2l2ZWx5U2V4dWFsVXNhZ2U6IHNjaGVtYU1ldGEuYWxsb3dFeGNlc3NpdmVseVNleHVhbFVzYWdlLFxuICAgICAgICAgICAgICAgIGNvbW1lcmNpYWxVc2FnZTogc2NoZW1hTWV0YS5jb21tZXJjaWFsVXNhZ2UsXG4gICAgICAgICAgICAgICAgYWxsb3dQb2xpdGljYWxPclJlbGlnaW91c1VzYWdlOiBzY2hlbWFNZXRhLmFsbG93UG9saXRpY2FsT3JSZWxpZ2lvdXNVc2FnZSxcbiAgICAgICAgICAgICAgICBhbGxvd0FudGlzb2NpYWxPckhhdGVVc2FnZTogc2NoZW1hTWV0YS5hbGxvd0FudGlzb2NpYWxPckhhdGVVc2FnZSxcbiAgICAgICAgICAgICAgICBjcmVkaXROb3RhdGlvbjogc2NoZW1hTWV0YS5jcmVkaXROb3RhdGlvbixcbiAgICAgICAgICAgICAgICBhbGxvd1JlZGlzdHJpYnV0aW9uOiBzY2hlbWFNZXRhLmFsbG93UmVkaXN0cmlidXRpb24sXG4gICAgICAgICAgICAgICAgbW9kaWZpY2F0aW9uOiBzY2hlbWFNZXRhLm1vZGlmaWNhdGlvbixcbiAgICAgICAgICAgICAgICBvdGhlckxpY2Vuc2VVcmw6IHNjaGVtYU1ldGEub3RoZXJMaWNlbnNlVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF92MEltcG9ydChnbHRmKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSB0aGlzLnBhcnNlci5qc29uO1xuICAgICAgICAgICAgLy8gZWFybHkgYWJvcnQgaWYgaXQgZG9lc24ndCB1c2UgdnJtXG4gICAgICAgICAgICBjb25zdCB2cm1FeHQgPSAoX2EgPSBqc29uLmV4dGVuc2lvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5WUk07XG4gICAgICAgICAgICBpZiAoIXZybUV4dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2NoZW1hTWV0YSA9IHZybUV4dC5tZXRhO1xuICAgICAgICAgICAgaWYgKCFzY2hlbWFNZXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aHJvdyBhbiBlcnJvciBpZiBhY2NlcHRWME1ldGEgaXMgZmFsc2VcbiAgICAgICAgICAgIGlmICghdGhpcy5hY2NlcHRWME1ldGEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZSTU1ldGFMb2FkZXJQbHVnaW46IEF0dGVtcHRlZCB0byBsb2FkIFZSTTAuMCBtZXRhIGJ1dCBhY2NlcHRWME1ldGEgaXMgZmFsc2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGxvYWQgdGh1bWJuYWlsIHRleHR1cmVcbiAgICAgICAgICAgIGxldCB0ZXh0dXJlO1xuICAgICAgICAgICAgaWYgKHRoaXMubmVlZFRodW1ibmFpbEltYWdlICYmIHNjaGVtYU1ldGEudGV4dHVyZSAhPSBudWxsICYmIHNjaGVtYU1ldGEudGV4dHVyZSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlID0geWllbGQgdGhpcy5wYXJzZXIuZ2V0RGVwZW5kZW5jeSgndGV4dHVyZScsIHNjaGVtYU1ldGEudGV4dHVyZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1ldGFWZXJzaW9uOiAnMCcsXG4gICAgICAgICAgICAgICAgYWxsb3dlZFVzZXJOYW1lOiBzY2hlbWFNZXRhLmFsbG93ZWRVc2VyTmFtZSxcbiAgICAgICAgICAgICAgICBhdXRob3I6IHNjaGVtYU1ldGEuYXV0aG9yLFxuICAgICAgICAgICAgICAgIGNvbW1lcmNpYWxVc3NhZ2VOYW1lOiBzY2hlbWFNZXRhLmNvbW1lcmNpYWxVc3NhZ2VOYW1lLFxuICAgICAgICAgICAgICAgIGNvbnRhY3RJbmZvcm1hdGlvbjogc2NoZW1hTWV0YS5jb250YWN0SW5mb3JtYXRpb24sXG4gICAgICAgICAgICAgICAgbGljZW5zZU5hbWU6IHNjaGVtYU1ldGEubGljZW5zZU5hbWUsXG4gICAgICAgICAgICAgICAgb3RoZXJMaWNlbnNlVXJsOiBzY2hlbWFNZXRhLm90aGVyTGljZW5zZVVybCxcbiAgICAgICAgICAgICAgICBvdGhlclBlcm1pc3Npb25Vcmw6IHNjaGVtYU1ldGEub3RoZXJQZXJtaXNzaW9uVXJsLFxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZTogc2NoZW1hTWV0YS5yZWZlcmVuY2UsXG4gICAgICAgICAgICAgICAgc2V4dWFsVXNzYWdlTmFtZTogc2NoZW1hTWV0YS5zZXh1YWxVc3NhZ2VOYW1lLFxuICAgICAgICAgICAgICAgIHRleHR1cmU6IHRleHR1cmUgIT09IG51bGwgJiYgdGV4dHVyZSAhPT0gdm9pZCAwID8gdGV4dHVyZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB0aXRsZTogc2NoZW1hTWV0YS50aXRsZSxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiBzY2hlbWFNZXRhLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgdmlvbGVudFVzc2FnZU5hbWU6IHNjaGVtYU1ldGEudmlvbGVudFVzc2FnZU5hbWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2V4dHJhY3RHTFRGSW1hZ2UoaW5kZXgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QganNvbiA9IHRoaXMucGFyc2VyLmpzb247XG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSAoX2EgPSBqc29uLmltYWdlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChzb3VyY2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVlJNTWV0YUxvYWRlclBsdWdpbjogQXR0ZW1wdCB0byB1c2UgaW1hZ2VzWyR7aW5kZXh9XSBvZiBnbFRGIGFzIGEgdGh1bWJuYWlsIGJ1dCB0aGUgaW1hZ2UgZG9lc24ndCBleGlzdGApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVmOiBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2Jsb2IvcjEyNC9leGFtcGxlcy9qc20vbG9hZGVycy9HTFRGTG9hZGVyLmpzI0wyNDY3XG4gICAgICAgICAgICAvLyBgc291cmNlLnVyaWAgbWlnaHQgYmUgYSByZWZlcmVuY2UgdG8gYSBmaWxlXG4gICAgICAgICAgICBsZXQgc291cmNlVVJJID0gc291cmNlLnVyaTtcbiAgICAgICAgICAgIC8vIExvYWQgdGhlIGJpbmFyeSBhcyBhIGJsb2JcbiAgICAgICAgICAgIGlmIChzb3VyY2UuYnVmZmVyVmlldyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyVmlldyA9IHlpZWxkIHRoaXMucGFyc2VyLmdldERlcGVuZGVuY3koJ2J1ZmZlclZpZXcnLCBzb3VyY2UuYnVmZmVyVmlldyk7XG4gICAgICAgICAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtidWZmZXJWaWV3XSwgeyB0eXBlOiBzb3VyY2UubWltZVR5cGUgfSk7XG4gICAgICAgICAgICAgICAgc291cmNlVVJJID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzb3VyY2VVUkkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVlJNTWV0YUxvYWRlclBsdWdpbjogQXR0ZW1wdCB0byB1c2UgaW1hZ2VzWyR7aW5kZXh9XSBvZiBnbFRGIGFzIGEgdGh1bWJuYWlsIGJ1dCB0aGUgaW1hZ2UgY291bGRuJ3QgbG9hZCBwcm9wZXJseWApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9hZGVyID0gbmV3IFRIUkVFLkltYWdlTG9hZGVyKCk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgbG9hZGVyLmxvYWRBc3luYyhyZXNvbHZlVVJMKHNvdXJjZVVSSSwgdGhpcy5wYXJzZXIub3B0aW9ucy5wYXRoKSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdWUk1NZXRhTG9hZGVyUGx1Z2luOiBGYWlsZWQgdG8gbG9hZCBhIHRodW1ibmFpbCBpbWFnZScpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIGNsYXNzIHRoYXQgcmVwcmVzZW50cyBhIHNpbmdsZSBWUk0gbW9kZWwuXG4gKiBUaGlzIGNsYXNzIG9ubHkgaW5jbHVkZXMgY29yZSBzcGVjIG9mIHRoZSBWUk0gKGBWUk1DX3ZybWApLlxuICovXG5jbGFzcyBWUk1Db3JlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgVlJNIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhcmFtcyBbW1ZSTVBhcmFtZXRlcnNdXSB0aGF0IHJlcHJlc2VudHMgY29tcG9uZW50cyBvZiB0aGUgVlJNXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgICAgIHRoaXMuc2NlbmUgPSBwYXJhbXMuc2NlbmU7XG4gICAgICAgIHRoaXMubWV0YSA9IHBhcmFtcy5tZXRhO1xuICAgICAgICB0aGlzLmh1bWFub2lkID0gcGFyYW1zLmh1bWFub2lkO1xuICAgICAgICB0aGlzLmV4cHJlc3Npb25NYW5hZ2VyID0gcGFyYW1zLmV4cHJlc3Npb25NYW5hZ2VyO1xuICAgICAgICB0aGlzLmZpcnN0UGVyc29uID0gcGFyYW1zLmZpcnN0UGVyc29uO1xuICAgICAgICB0aGlzLmxvb2tBdCA9IHBhcmFtcy5sb29rQXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICoqWW91IG5lZWQgdG8gY2FsbCB0aGlzIG9uIHlvdXIgdXBkYXRlIGxvb3AuKipcbiAgICAgKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gdXBkYXRlcyBldmVyeSBWUk0gY29tcG9uZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZWx0YSBkZWx0YVRpbWVcbiAgICAgKi9cbiAgICB1cGRhdGUoZGVsdGEpIHtcbiAgICAgICAgdGhpcy5odW1hbm9pZC51cGRhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMubG9va0F0KSB7XG4gICAgICAgICAgICB0aGlzLmxvb2tBdC51cGRhdGUoZGVsdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4cHJlc3Npb25NYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLmV4cHJlc3Npb25NYW5hZ2VyLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBWUk1Db3JlTG9hZGVyUGx1Z2luIHtcbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgLy8gV2Ugc2hvdWxkIHVzZSB0aGUgZXh0ZW5zaW9uIG5hbWUgaW5zdGVhZCBidXQgd2UgaGF2ZSBtdWx0aXBsZSBwbHVnaW5zIGZvciBhbiBleHRlbnNpb24uLi5cbiAgICAgICAgcmV0dXJuICdWUk1DX3ZybSc7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICAgICAgY29uc3QgaGVscGVyUm9vdCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5oZWxwZXJSb290O1xuICAgICAgICBjb25zdCBhdXRvVXBkYXRlSHVtYW5Cb25lcyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hdXRvVXBkYXRlSHVtYW5Cb25lcztcbiAgICAgICAgdGhpcy5leHByZXNzaW9uUGx1Z2luID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmV4cHJlc3Npb25QbHVnaW4pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5ldyBWUk1FeHByZXNzaW9uTG9hZGVyUGx1Z2luKHBhcnNlcik7XG4gICAgICAgIHRoaXMuZmlyc3RQZXJzb25QbHVnaW4gPSAoX2IgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RQZXJzb25QbHVnaW4pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG5ldyBWUk1GaXJzdFBlcnNvbkxvYWRlclBsdWdpbihwYXJzZXIpO1xuICAgICAgICB0aGlzLmh1bWFub2lkUGx1Z2luID1cbiAgICAgICAgICAgIChfYyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5odW1hbm9pZFBsdWdpbikgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogbmV3IFZSTUh1bWFub2lkTG9hZGVyUGx1Z2luKHBhcnNlciwgeyBoZWxwZXJSb290LCBhdXRvVXBkYXRlSHVtYW5Cb25lcyB9KTtcbiAgICAgICAgdGhpcy5sb29rQXRQbHVnaW4gPSAoX2QgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9va0F0UGx1Z2luKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBuZXcgVlJNTG9va0F0TG9hZGVyUGx1Z2luKHBhcnNlciwgeyBoZWxwZXJSb290IH0pO1xuICAgICAgICB0aGlzLm1ldGFQbHVnaW4gPSAoX2UgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWV0YVBsdWdpbikgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogbmV3IFZSTU1ldGFMb2FkZXJQbHVnaW4ocGFyc2VyKTtcbiAgICB9XG4gICAgYWZ0ZXJSb290KGdsdGYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMubWV0YVBsdWdpbi5hZnRlclJvb3QoZ2x0Zik7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmh1bWFub2lkUGx1Z2luLmFmdGVyUm9vdChnbHRmKTtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZXhwcmVzc2lvblBsdWdpbi5hZnRlclJvb3QoZ2x0Zik7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmxvb2tBdFBsdWdpbi5hZnRlclJvb3QoZ2x0Zik7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmZpcnN0UGVyc29uUGx1Z2luLmFmdGVyUm9vdChnbHRmKTtcbiAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBnbHRmLnVzZXJEYXRhLnZybU1ldGE7XG4gICAgICAgICAgICBjb25zdCBodW1hbm9pZCA9IGdsdGYudXNlckRhdGEudnJtSHVtYW5vaWQ7XG4gICAgICAgICAgICAvLyBtZXRhIGFuZCBodW1hbm9pZCBhcmUgcmVxdWlyZWQgdG8gYmUgYSBWUk0uXG4gICAgICAgICAgICAvLyBEb24ndCBjcmVhdGUgVlJNIGlmIHRoZXkgYXJlIG51bGxcbiAgICAgICAgICAgIGlmIChtZXRhICYmIGh1bWFub2lkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdnJtQ29yZSA9IG5ldyBWUk1Db3JlKHtcbiAgICAgICAgICAgICAgICAgICAgc2NlbmU6IGdsdGYuc2NlbmUsXG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb25NYW5hZ2VyOiBnbHRmLnVzZXJEYXRhLnZybUV4cHJlc3Npb25NYW5hZ2VyLFxuICAgICAgICAgICAgICAgICAgICBmaXJzdFBlcnNvbjogZ2x0Zi51c2VyRGF0YS52cm1GaXJzdFBlcnNvbixcbiAgICAgICAgICAgICAgICAgICAgaHVtYW5vaWQsXG4gICAgICAgICAgICAgICAgICAgIGxvb2tBdDogZ2x0Zi51c2VyRGF0YS52cm1Mb29rQXQsXG4gICAgICAgICAgICAgICAgICAgIG1ldGEsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZ2x0Zi51c2VyRGF0YS52cm1Db3JlID0gdnJtQ29yZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBWUk1Db3JlLCBWUk1Db3JlTG9hZGVyUGx1Z2luLCBWUk1FeHByZXNzaW9uLCBWUk1FeHByZXNzaW9uTG9hZGVyUGx1Z2luLCBWUk1FeHByZXNzaW9uTWFuYWdlciwgVlJNRXhwcmVzc2lvbk1hdGVyaWFsQ29sb3JUeXBlLCBWUk1FeHByZXNzaW9uT3ZlcnJpZGVUeXBlLCBWUk1FeHByZXNzaW9uUHJlc2V0TmFtZSwgVlJNRmlyc3RQZXJzb24sIFZSTUZpcnN0UGVyc29uTG9hZGVyUGx1Z2luLCBWUk1GaXJzdFBlcnNvbk1lc2hBbm5vdGF0aW9uVHlwZSwgVlJNSHVtYW5Cb25lTGlzdCwgVlJNSHVtYW5Cb25lTmFtZSwgVlJNSHVtYW5Cb25lUGFyZW50TWFwLCBWUk1IdW1hbm9pZCwgVlJNSHVtYW5vaWRIZWxwZXIsIFZSTUh1bWFub2lkTG9hZGVyUGx1Z2luLCBWUk1Mb29rQXQsIFZSTUxvb2tBdEJvbmVBcHBsaWVyLCBWUk1Mb29rQXRFeHByZXNzaW9uQXBwbGllciwgVlJNTG9va0F0SGVscGVyLCBWUk1Mb29rQXRMb2FkZXJQbHVnaW4sIFZSTUxvb2tBdFJhbmdlTWFwLCBWUk1Mb29rQXRUeXBlTmFtZSwgVlJNTWV0YUxvYWRlclBsdWdpbiwgVlJNUmVxdWlyZWRIdW1hbkJvbmVOYW1lIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHaHlaV1V0ZG5KdExXTnZjbVV1Ylc5a2RXeGxMbXB6SWl3aWMyOTFjbU5sY3lJNld5SXVMaTl6Y21NdlpYaHdjbVZ6YzJsdmJuTXZWbEpOUlhod2NtVnpjMmx2Ymk1MGN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5MGMyeHBZaTkwYzJ4cFlpNWxjell1YW5NaUxDSXVMaTl6Y21NdmRYUnBiSE12WjJ4MFprVjRkSEpoWTNSUWNtbHRhWFJwZG1WelJuSnZiVTV2WkdVdWRITWlMQ0l1TGk5emNtTXZkWFJwYkhNdloyeDBaa2RsZEVGemMyOWphV0YwWldSTllYUmxjbWxoYkVsdVpHVjRMblJ6SWl3aUxpNHZjM0pqTDJWNGNISmxjM05wYjI1ekwxWlNUVVY0Y0hKbGMzTnBiMjVRY21WelpYUk9ZVzFsTG5Seklpd2lMaTR2YzNKakwzVjBhV3h6TDNOaGRIVnlZWFJsTG5Seklpd2lMaTR2YzNKakwyVjRjSEpsYzNOcGIyNXpMMVpTVFVWNGNISmxjM05wYjI1TllXNWhaMlZ5TG5Seklpd2lMaTR2YzNKakwyVjRjSEpsYzNOcGIyNXpMMVpTVFVWNGNISmxjM05wYjI1TllYUmxjbWxoYkVOdmJHOXlWSGx3WlM1MGN5SXNJaTR1TDNOeVl5OWxlSEJ5WlhOemFXOXVjeTlXVWsxRmVIQnlaWE56YVc5dVRXRjBaWEpwWVd4RGIyeHZja0pwYm1RdWRITWlMQ0l1TGk5emNtTXZaWGh3Y21WemMybHZibk12VmxKTlJYaHdjbVZ6YzJsdmJrMXZjbkJvVkdGeVoyVjBRbWx1WkM1MGN5SXNJaTR1TDNOeVl5OWxlSEJ5WlhOemFXOXVjeTlXVWsxRmVIQnlaWE56YVc5dVZHVjRkSFZ5WlZSeVlXNXpabTl5YlVKcGJtUXVkSE1pTENJdUxpOXpjbU12Wlhod2NtVnpjMmx2Ym5NdlZsSk5SWGh3Y21WemMybHZia3h2WVdSbGNsQnNkV2RwYmk1MGN5SXNJaTR1TDNOeVl5OWxlSEJ5WlhOemFXOXVjeTlXVWsxRmVIQnlaWE56YVc5dVQzWmxjbkpwWkdWVWVYQmxMblJ6SWl3aUxpNHZjM0pqTDJacGNuTjBVR1Z5YzI5dUwxWlNUVVpwY25OMFVHVnljMjl1TG5Seklpd2lMaTR2YzNKakwyWnBjbk4wVUdWeWMyOXVMMVpTVFVacGNuTjBVR1Z5YzI5dVRHOWhaR1Z5VUd4MVoybHVMblJ6SWl3aUxpNHZjM0pqTDJacGNuTjBVR1Z5YzI5dUwxWlNUVVpwY25OMFVHVnljMjl1VFdWemFFRnVibTkwWVhScGIyNVVlWEJsTG5Seklpd2lMaTR2YzNKakwyaDFiV0Z1YjJsa0wyaGxiSEJsY25NdlZsSk5TSFZ0WVc1dmFXUklaV3h3WlhJdWRITWlMQ0l1TGk5emNtTXZhSFZ0WVc1dmFXUXZWbEpOU0hWdFlXNUNiMjVsVEdsemRDNTBjeUlzSWk0dUwzTnlZeTlvZFcxaGJtOXBaQzlXVWsxSWRXMWhia0p2Ym1WT1lXMWxMblJ6SWl3aUxpNHZjM0pqTDJoMWJXRnViMmxrTDFaU1RVaDFiV0Z1UW05dVpWQmhjbVZ1ZEUxaGNDNTBjeUlzSWk0dUwzTnlZeTkxZEdsc2N5OXhkV0YwU1c1MlpYSjBRMjl0Y0dGMExuUnpJaXdpTGk0dmMzSmpMMmgxYldGdWIybGtMMVpTVFZKcFp5NTBjeUlzSWk0dUwzTnlZeTlvZFcxaGJtOXBaQzlXVWsxSWRXMWhibTlwWkZKcFp5NTBjeUlzSWk0dUwzTnlZeTlvZFcxaGJtOXBaQzlXVWsxSWRXMWhibTlwWkM1MGN5SXNJaTR1TDNOeVl5OW9kVzFoYm05cFpDOVdVazFTWlhGMWFYSmxaRWgxYldGdVFtOXVaVTVoYldVdWRITWlMQ0l1TGk5emNtTXZhSFZ0WVc1dmFXUXZWbEpOU0hWdFlXNXZhV1JNYjJGa1pYSlFiSFZuYVc0dWRITWlMQ0l1TGk5emNtTXZiRzl2YTBGMEwyaGxiSEJsY25NdmRYUnBiSE12Um1GdVFuVm1abVZ5UjJWdmJXVjBjbmt1ZEhNaUxDSXVMaTl6Y21NdmJHOXZhMEYwTDJobGJIQmxjbk12ZFhScGJITXZUR2x1WlVGdVpGTndhR1Z5WlVKMVptWmxja2RsYjIxbGRISjVMblJ6SWl3aUxpNHZjM0pqTDJ4dmIydEJkQzlvWld4d1pYSnpMMVpTVFV4dmIydEJkRWhsYkhCbGNpNTBjeUlzSWk0dUwzTnlZeTkxZEdsc2N5OW5aWFJYYjNKc1pGRjFZWFJsY201cGIyNU1hWFJsTG5Seklpd2lMaTR2YzNKakwyeHZiMnRCZEM5MWRHbHNjeTlqWVd4alFYcHBiWFYwYUVGc2RHbDBkV1JsTG5Seklpd2lMaTR2YzNKakwyeHZiMnRCZEM5MWRHbHNjeTl6WVc1cGRHbDZaVUZ1WjJ4bExuUnpJaXdpTGk0dmMzSmpMMnh2YjJ0QmRDOVdVazFNYjI5clFYUXVkSE1pTENJdUxpOXpjbU12Ykc5dmEwRjBMMVpTVFV4dmIydEJkRUp2Ym1WQmNIQnNhV1Z5TG5Seklpd2lMaTR2YzNKakwyeHZiMnRCZEM5V1VrMU1iMjlyUVhSRmVIQnlaWE56YVc5dVFYQndiR2xsY2k1MGN5SXNJaTR1TDNOeVl5OXNiMjlyUVhRdlZsSk5URzl2YTBGMFVtRnVaMlZOWVhBdWRITWlMQ0l1TGk5emNtTXZiRzl2YTBGMEwxWlNUVXh2YjJ0QmRFeHZZV1JsY2xCc2RXZHBiaTUwY3lJc0lpNHVMM055WXk5c2IyOXJRWFF2VmxKTlRHOXZhMEYwVkhsd1pVNWhiV1V1ZEhNaUxDSXVMaTl6Y21NdmRYUnBiSE12Y21WemIyeDJaVlZTVEM1MGN5SXNJaTR1TDNOeVl5OXRaWFJoTDFaU1RVMWxkR0ZNYjJGa1pYSlFiSFZuYVc0dWRITWlMQ0l1TGk5emNtTXZWbEpOUTI5eVpTNTBjeUlzSWk0dUwzTnlZeTlXVWsxRGIzSmxURzloWkdWeVVHeDFaMmx1TG5SeklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQXFJR0Z6SUZSSVVrVkZJR1p5YjIwZ0ozUm9jbVZsSnp0Y2JtbHRjRzl5ZENCN0lGWlNUVVY0Y0hKbGMzTnBiMjVDYVc1a0lIMGdabkp2YlNBbkxpOVdVazFGZUhCeVpYTnphVzl1UW1sdVpDYzdYRzVwYlhCdmNuUWdkSGx3WlNCN0lGWlNUVVY0Y0hKbGMzTnBiMjVQZG1WeWNtbGtaVlI1Y0dVZ2ZTQm1jbTl0SUNjdUwxWlNUVVY0Y0hKbGMzTnBiMjVQZG1WeWNtbGtaVlI1Y0dVbk8xeHVYRzR2THlCaGJtbHRZWFJwYjI1TmFYaGxjaURqZ2E3bm02UG9wcGJscjc3b3NhSGpnYS9qZ0lGVFkyVnVaU0RqZ2E3a3VLM2pnYXZsaGFYamdhUGpnYWJqZ1lUamdvdmx2NFhvcG9IamdZempnWUxqZ292amdJSmNiaTh2SU9PQm5lT0JydU9CbitPQ2dlT0FnZWlocU9la3V1T0NxdU9EbHVPQ3VPT0NwK09DcitPRGlPT0JwK09CcitPQnF1T0JoT09Ca2VPQ2pPT0JxZU9BZ1U5aWFtVmpkRE5FSU9PQ2t1ZTJtZWFKditPQmwrT0JwaUJUWTJWdVpTRGpnYXZtaXBYbGhhWGpnYWZqZ1kzamdvdmpnb2pqZ1liamdhdmpnWm5qZ292amdJSmNibVY0Y0c5eWRDQmpiR0Z6Y3lCV1VrMUZlSEJ5WlhOemFXOXVJR1Y0ZEdWdVpITWdWRWhTUlVVdVQySnFaV04wTTBRZ2UxeHVJQ0F2S2lwY2JpQWdJQ29nVG1GdFpTQnZaaUIwYUdseklHVjRjSEpsYzNOcGIyNHVYRzRnSUNBcUlFUnBjM1JwYm1kMWFYTm9aV1FnZDJsMGFDQmdibUZ0WldBZ2MybHVZMlVnWUc1aGJXVmdJSGRwYkd3Z1ltVWdZMjl1Wm14cFkzUmxaQ0IzYVhSb0lFOWlhbVZqZERORUxseHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklHVjRjSEpsYzNOcGIyNU9ZVzFsT2lCemRISnBibWM3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJvWlNCamRYSnlaVzUwSUhkbGFXZG9kQ0J2WmlCMGFHVWdaWGh3Y21WemMybHZiaTVjYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUIzWldsbmFIUWdQU0F3TGpBN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVsdWRHVnljSEpsZENCMllXeDFaWE1nWjNKbFlYUmxjaUIwYUdGdUlEQXVOU0JoY3lBeExqQXNJRzl5ZEdobGNuZHBjMlVnTUM0d0xseHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklHbHpRbWx1WVhKNUlEMGdabUZzYzJVN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZOd1pXTnBabmtnYUc5M0lIUm9aU0JsZUhCeVpYTnphVzl1SUc5MlpYSnlhV1JsY3lCaWJHbHVheUJsZUhCeVpYTnphVzl1Y3k1Y2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCdmRtVnljbWxrWlVKc2FXNXJPaUJXVWsxRmVIQnlaWE56YVc5dVQzWmxjbkpwWkdWVWVYQmxJRDBnSjI1dmJtVW5PMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRjR1ZqYVdaNUlHaHZkeUIwYUdVZ1pYaHdjbVZ6YzJsdmJpQnZkbVZ5Y21sa1pYTWdiRzl2YTBGMElHVjRjSEpsYzNOcGIyNXpMbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJRzkyWlhKeWFXUmxURzl2YTBGME9pQldVazFGZUhCeVpYTnphVzl1VDNabGNuSnBaR1ZVZVhCbElEMGdKMjV2Ym1Vbk8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCVGNHVmphV1o1SUdodmR5QjBhR1VnWlhod2NtVnpjMmx2YmlCdmRtVnljbWxrWlhNZ2JXOTFkR2dnWlhod2NtVnpjMmx2Ym5NdVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ2IzWmxjbkpwWkdWTmIzVjBhRG9nVmxKTlJYaHdjbVZ6YzJsdmJrOTJaWEp5YVdSbFZIbHdaU0E5SUNkdWIyNWxKenRjYmx4dUlDQndjbWwyWVhSbElGOWlhVzVrY3pvZ1ZsSk5SWGh3Y21WemMybHZia0pwYm1SYlhTQTlJRnRkTzF4dVhHNGdJRzkyWlhKeWFXUmxJSEpsWVdSdmJteDVJSFI1Y0dVNklITjBjbWx1WnlCOElDZFdVazFGZUhCeVpYTnphVzl1Snp0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUVNCMllXeDFaU0J5WlhCeVpYTmxiblJ6SUdodmR5QnRkV05vSUdsMElITm9iM1ZzWkNCdmRtVnljbWxrWlNCaWJHbHVheUJsZUhCeVpYTnphVzl1Y3k1Y2JpQWdJQ29nWURBdU1HQWdQVDBnYm04Z2IzWmxjbkpwWkdVZ1lYUWdZV3hzTENCZ01TNHdZQ0E5UFNCamIyMXdiR1YwWld4NUlHSnNiMk5ySUhSb1pTQmxlSEJ5WlhOemFXOXVjeTVjYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUJuWlhRZ2IzWmxjbkpwWkdWQ2JHbHVhMEZ0YjNWdWRDZ3BPaUJ1ZFcxaVpYSWdlMXh1SUNBZ0lHbG1JQ2gwYUdsekxtOTJaWEp5YVdSbFFteHBibXNnUFQwOUlDZGliRzlqYXljcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlBd0xqQWdQQ0IwYUdsekxuZGxhV2RvZENBL0lERXVNQ0E2SURBdU1EdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11YjNabGNuSnBaR1ZDYkdsdWF5QTlQVDBnSjJKc1pXNWtKeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWQyVnBaMmgwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z01DNHdPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCSUhaaGJIVmxJSEpsY0hKbGMyVnVkSE1nYUc5M0lHMTFZMmdnYVhRZ2MyaHZkV3hrSUc5MlpYSnlhV1JsSUd4dmIydEJkQ0JsZUhCeVpYTnphVzl1Y3k1Y2JpQWdJQ29nWURBdU1HQWdQVDBnYm04Z2IzWmxjbkpwWkdVZ1lYUWdZV3hzTENCZ01TNHdZQ0E5UFNCamIyMXdiR1YwWld4NUlHSnNiMk5ySUhSb1pTQmxlSEJ5WlhOemFXOXVjeTVjYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUJuWlhRZ2IzWmxjbkpwWkdWTWIyOXJRWFJCYlc5MWJuUW9LVG9nYm5WdFltVnlJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NXZkbVZ5Y21sa1pVeHZiMnRCZENBOVBUMGdKMkpzYjJOckp5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlEQXVNQ0E4SUhSb2FYTXVkMlZwWjJoMElEOGdNUzR3SURvZ01DNHdPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1dmRtVnljbWxrWlV4dmIydEJkQ0E5UFQwZ0oySnNaVzVrSnlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkMlZwWjJoME8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdNQzR3TzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQklIWmhiSFZsSUhKbGNISmxjMlZ1ZEhNZ2FHOTNJRzExWTJnZ2FYUWdjMmh2ZFd4a0lHOTJaWEp5YVdSbElHMXZkWFJvSUdWNGNISmxjM05wYjI1ekxseHVJQ0FnS2lCZ01DNHdZQ0E5UFNCdWJ5QnZkbVZ5Y21sa1pTQmhkQ0JoYkd3c0lHQXhMakJnSUQwOUlHTnZiWEJzWlhSbGJIa2dZbXh2WTJzZ2RHaGxJR1Y0Y0hKbGMzTnBiMjV6TGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUdkbGRDQnZkbVZ5Y21sa1pVMXZkWFJvUVcxdmRXNTBLQ2s2SUc1MWJXSmxjaUI3WEc0Z0lDQWdhV1lnS0hSb2FYTXViM1psY25KcFpHVk5iM1YwYUNBOVBUMGdKMkpzYjJOckp5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlEQXVNQ0E4SUhSb2FYTXVkMlZwWjJoMElEOGdNUzR3SURvZ01DNHdPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1dmRtVnljbWxrWlUxdmRYUm9JRDA5UFNBbllteGxibVFuS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTNaV2xuYUhRN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQXdMakE3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWTI5dWMzUnlkV04wYjNJb1pYaHdjbVZ6YzJsdmJrNWhiV1U2SUhOMGNtbHVaeWtnZTF4dUlDQWdJSE4xY0dWeUtDazdYRzVjYmlBZ0lDQjBhR2x6TG01aGJXVWdQU0JnVmxKTlJYaHdjbVZ6YzJsdmJsOGtlMlY0Y0hKbGMzTnBiMjVPWVcxbGZXQTdYRzRnSUNBZ2RHaHBjeTVsZUhCeVpYTnphVzl1VG1GdFpTQTlJR1Y0Y0hKbGMzTnBiMjVPWVcxbE8xeHVYRzRnSUNBZ0x5OGdkSEpoZG1WeWMyVWc1cG1DNDRHdTVwV1I1cmlJNW9tTDVxNjE0NEdvNDRHWDQ0R21JRTlpYW1WamRETkVJT09CcCtPQnIrT0JxdU9CaE9PQmsrT0JxT09Da3VhWWp1ZWt1dU9CbCtPQnB1T0JpdU9CajF4dUlDQWdJSFJvYVhNdWRIbHdaU0E5SUNkV1VrMUZlSEJ5WlhOemFXOXVKenRjYmx4dUlDQWdJQzh2SU9paHFPZWt1dWVicnVlYWhPT0JydU9DcXVPRGx1T0N1T09DcCtPQ3IrT0RpT09CcCtPQnIrT0JxdU9CaE9PQnJ1T0JwK09BZ2VpeW9PaU50K2k3dmVhNG0rT0JydU9CbitPQ2dlT0JxeUIyYVhOcFlteGxJT09Da2lCbVlXeHpaU0RqZ2F2amdaZmpnYWJqZ1lyamdZL2pnSUpjYmlBZ0lDQXZMeURqZ1pQamdvempnYXZqZ29qamdvcmpnSUhqZ1pQamdhN2pncVRqZzdQamdybmpnci9qZzdQamdybmpnYXZscjc3amdabmpnb3ZtcjQ3amc1WGpnNnpqZzd6amc2RGpnYTRnYldGMGNtbDRJT2lIcXVXTGxlaW9pT2V1bCtPQ2t1ZWNnZWVWcGVPQnArT0JqZU9DaStPQWdseHVJQ0FnSUhSb2FYTXVkbWx6YVdKc1pTQTlJR1poYkhObE8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklHRmtaRUpwYm1Rb1ltbHVaRG9nVmxKTlJYaHdjbVZ6YzJsdmJrSnBibVFwT2lCMmIybGtJSHRjYmlBZ0lDQjBhR2x6TGw5aWFXNWtjeTV3ZFhOb0tHSnBibVFwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRndjR3g1SUhkbGFXZG9kQ0IwYnlCbGRtVnllU0JoYzNOcFoyNWxaQ0JpYkdWdVpDQnphR0Z3WlhNdVhHNGdJQ0FxSUZOb2IzVnNaQ0JpWlNCallXeHNaV1FnWlhabGNua2dabkpoYldVdVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ1lYQndiSGxYWldsbmFIUW9iM0IwYVc5dWN6ODZJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJOZFd4MGFYQnNhV1Z6SUdFZ2RtRnNkV1VnZEc4Z2FYUnpJSGRsYVdkb2RDQjBieUJoY0hCc2VTNWNiaUFnSUNBZ0tpQkpiblJsYm1SbFpDQjBieUJpWlNCMWMyVmtJR1p2Y2lCdmRtVnljbWxrYVc1bklHRnVJR1Y0Y0hKbGMzTnBiMjRnZDJWcFoyaDBJR0o1SUdGdWIzUm9aWElnWlhod2NtVnpjMmx2Ymk1Y2JpQWdJQ0FnS2lCVFpXVWdZV3h6YnpvZ2UwQnNhVzVySUc5MlpYSnlhV1JsUW14cGJtdDlMQ0I3UUd4cGJtc2diM1psY25KcFpHVk1iMjlyUVhSOUxDQjdRR3hwYm1zZ2IzWmxjbkpwWkdWTmIzVjBhSDFjYmlBZ0lDQWdLaTljYmlBZ0lDQnRkV3gwYVhCc2FXVnlQem9nYm5WdFltVnlPMXh1SUNCOUtUb2dkbTlwWkNCN1hHNGdJQ0FnYkdWMElHRmpkSFZoYkZkbGFXZG9kQ0E5SUhSb2FYTXVhWE5DYVc1aGNua2dQeUFvZEdocGN5NTNaV2xuYUhRZ1BEMGdNQzQxSUQ4Z01DNHdJRG9nTVM0d0tTQTZJSFJvYVhNdWQyVnBaMmgwTzF4dUlDQWdJR0ZqZEhWaGJGZGxhV2RvZENBcVBTQnZjSFJwYjI1elB5NXRkV3gwYVhCc2FXVnlJRDgvSURFdU1EdGNibHh1SUNBZ0lIUm9hWE11WDJKcGJtUnpMbVp2Y2tWaFkyZ29LR0pwYm1RcElEMCtJR0pwYm1RdVlYQndiSGxYWldsbmFIUW9ZV04wZFdGc1YyVnBaMmgwS1NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMnhsWVhJZ2NISmxkbWx2ZFhOc2VTQmhjM05wWjI1bFpDQmliR1Z1WkNCemFHRndaWE11WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nWTJ4bFlYSkJjSEJzYVdWa1YyVnBaMmgwS0NrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdVgySnBibVJ6TG1admNrVmhZMmdvS0dKcGJtUXBJRDArSUdKcGJtUXVZMnhsWVhKQmNIQnNhV1ZrVjJWcFoyaDBLQ2twTzF4dUlDQjlYRzU5WEc0aUxDSXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhISmNia052Y0hseWFXZG9kQ0FvWXlrZ1RXbGpjbTl6YjJaMElFTnZjbkJ2Y21GMGFXOXVMbHh5WEc1Y2NseHVVR1Z5YldsemMybHZiaUIwYnlCMWMyVXNJR052Y0hrc0lHMXZaR2xtZVN3Z1lXNWtMMjl5SUdScGMzUnlhV0oxZEdVZ2RHaHBjeUJ6YjJaMGQyRnlaU0JtYjNJZ1lXNTVYSEpjYm5CMWNuQnZjMlVnZDJsMGFDQnZjaUIzYVhSb2IzVjBJR1psWlNCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkM1Y2NseHVYSEpjYmxSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lnUVU1RUlGUklSU0JCVlZSSVQxSWdSRWxUUTB4QlNVMVRJRUZNVENCWFFWSlNRVTVVU1VWVElGZEpWRWhjY2x4dVVrVkhRVkpFSUZSUElGUklTVk1nVTA5R1ZGZEJVa1VnU1U1RFRGVkVTVTVISUVGTVRDQkpUVkJNU1VWRUlGZEJVbEpCVGxSSlJWTWdUMFlnVFVWU1EwaEJUbFJCUWtsTVNWUlpYSEpjYmtGT1JDQkdTVlJPUlZOVExpQkpUaUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVVnUVZWVVNFOVNJRUpGSUV4SlFVSk1SU0JHVDFJZ1FVNVpJRk5RUlVOSlFVd3NJRVJKVWtWRFZDeGNjbHh1U1U1RVNWSkZRMVFzSUU5U0lFTlBUbE5GVVZWRlRsUkpRVXdnUkVGTlFVZEZVeUJQVWlCQlRsa2dSRUZOUVVkRlV5QlhTRUZVVTA5RlZrVlNJRkpGVTFWTVZFbE9SeUJHVWs5TlhISmNia3hQVTFNZ1QwWWdWVk5GTENCRVFWUkJJRTlTSUZCU1QwWkpWRk1zSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JPUlVkTVNVZEZUa05GSUU5U1hISmNiazlVU0VWU0lGUlBVbFJKVDFWVElFRkRWRWxQVGl3Z1FWSkpVMGxPUnlCUFZWUWdUMFlnVDFJZ1NVNGdRMDlPVGtWRFZFbFBUaUJYU1ZSSUlGUklSU0JWVTBVZ1QxSmNjbHh1VUVWU1JrOVNUVUZPUTBVZ1QwWWdWRWhKVXlCVFQwWlVWMEZTUlM1Y2NseHVLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvZ0tpOWNjbHh1THlvZ1oyeHZZbUZzSUZKbFpteGxZM1FzSUZCeWIyMXBjMlVnS2k5Y2NseHVYSEpjYm5aaGNpQmxlSFJsYm1SVGRHRjBhV056SUQwZ1puVnVZM1JwYjI0b1pDd2dZaWtnZTF4eVhHNGdJQ0FnWlhoMFpXNWtVM1JoZEdsamN5QTlJRTlpYW1WamRDNXpaWFJRY205MGIzUjVjR1ZQWmlCOGZGeHlYRzRnSUNBZ0lDQWdJQ2g3SUY5ZmNISnZkRzlmWHpvZ1cxMGdmU0JwYm5OMFlXNWpaVzltSUVGeWNtRjVJQ1ltSUdaMWJtTjBhVzl1SUNoa0xDQmlLU0I3SUdRdVgxOXdjbTkwYjE5ZklEMGdZanNnZlNrZ2ZIeGNjbHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUFvWkN3Z1lpa2dleUJtYjNJZ0tIWmhjaUJ3SUdsdUlHSXBJR2xtSUNoUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b1lpd2djQ2twSUdSYmNGMGdQU0JpVzNCZE95QjlPMXh5WEc0Z0lDQWdjbVYwZFhKdUlHVjRkR1Z1WkZOMFlYUnBZM01vWkN3Z1lpazdYSEpjYm4wN1hISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5bGVIUmxibVJ6S0dRc0lHSXBJSHRjY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnWWlBaFBUMGdYQ0ptZFc1amRHbHZibHdpSUNZbUlHSWdJVDA5SUc1MWJHd3BYSEpjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrTnNZWE56SUdWNGRHVnVaSE1nZG1Gc2RXVWdYQ0lnS3lCVGRISnBibWNvWWlrZ0t5QmNJaUJwY3lCdWIzUWdZU0JqYjI1emRISjFZM1J2Y2lCdmNpQnVkV3hzWENJcE8xeHlYRzRnSUNBZ1pYaDBaVzVrVTNSaGRHbGpjeWhrTENCaUtUdGNjbHh1SUNBZ0lHWjFibU4wYVc5dUlGOWZLQ2tnZXlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5SUQwZ1pEc2dmVnh5WEc0Z0lDQWdaQzV3Y205MGIzUjVjR1VnUFNCaUlEMDlQU0J1ZFd4c0lEOGdUMkpxWldOMExtTnlaV0YwWlNoaUtTQTZJQ2hmWHk1d2NtOTBiM1I1Y0dVZ1BTQmlMbkJ5YjNSdmRIbHdaU3dnYm1WM0lGOWZLQ2twTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ2RtRnlJRjlmWVhOemFXZHVJRDBnWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnSUNCZlgyRnpjMmxuYmlBOUlFOWlhbVZqZEM1aGMzTnBaMjRnZkh3Z1puVnVZM1JwYjI0Z1gxOWhjM05wWjI0b2RDa2dlMXh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhNc0lHa2dQU0F4TENCdUlEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFEc2dhU0E4SUc0N0lHa3JLeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6SUQwZ1lYSm5kVzFsYm5SelcybGRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQndJR2x1SUhNcElHbG1JQ2hQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvY3l3Z2NDa3BJSFJiY0YwZ1BTQnpXM0JkTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkRHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQmZYMkZ6YzJsbmJpNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXlaWE4wS0hNc0lHVXBJSHRjY2x4dUlDQWdJSFpoY2lCMElEMGdlMzA3WEhKY2JpQWdJQ0JtYjNJZ0tIWmhjaUJ3SUdsdUlITXBJR2xtSUNoUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b2N5d2djQ2tnSmlZZ1pTNXBibVJsZUU5bUtIQXBJRHdnTUNsY2NseHVJQ0FnSUNBZ0lDQjBXM0JkSUQwZ2MxdHdYVHRjY2x4dUlDQWdJR2xtSUNoeklDRTlJRzUxYkd3Z0ppWWdkSGx3Wlc5bUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpbGNjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2djQ0E5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVWTjViV0p2YkhNb2N5azdJR2tnUENCd0xteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobExtbHVaR1Y0VDJZb2NGdHBYU2tnUENBd0lDWW1JRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVjSEp2Y0dWeWRIbEpjMFZ1ZFcxbGNtRmliR1V1WTJGc2JDaHpMQ0J3VzJsZEtTbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJiY0Z0cFhWMGdQU0J6VzNCYmFWMWRPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUhKbGRIVnliaUIwTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOWtaV052Y21GMFpTaGtaV052Y21GMGIzSnpMQ0IwWVhKblpYUXNJR3RsZVN3Z1pHVnpZeWtnZTF4eVhHNGdJQ0FnZG1GeUlHTWdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9MQ0J5SUQwZ1l5QThJRE1nUHlCMFlYSm5aWFFnT2lCa1pYTmpJRDA5UFNCdWRXeHNJRDhnWkdWell5QTlJRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJb2RHRnlaMlYwTENCclpYa3BJRG9nWkdWell5d2daRHRjY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnVW1WbWJHVmpkQ0E5UFQwZ1hDSnZZbXBsWTNSY0lpQW1KaUIwZVhCbGIyWWdVbVZtYkdWamRDNWtaV052Y21GMFpTQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUtTQnlJRDBnVW1WbWJHVmpkQzVrWldOdmNtRjBaU2hrWldOdmNtRjBiM0p6TENCMFlYSm5aWFFzSUd0bGVTd2daR1Z6WXlrN1hISmNiaUFnSUNCbGJITmxJR1p2Y2lBb2RtRnlJR2tnUFNCa1pXTnZjbUYwYjNKekxteGxibWQwYUNBdElERTdJR2tnUGowZ01Ec2dhUzB0S1NCcFppQW9aQ0E5SUdSbFkyOXlZWFJ2Y25OYmFWMHBJSElnUFNBb1l5QThJRE1nUHlCa0tISXBJRG9nWXlBK0lETWdQeUJrS0hSaGNtZGxkQ3dnYTJWNUxDQnlLU0E2SUdRb2RHRnlaMlYwTENCclpYa3BLU0I4ZkNCeU8xeHlYRzRnSUNBZ2NtVjBkWEp1SUdNZ1BpQXpJQ1ltSUhJZ0ppWWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSaGNtZGxkQ3dnYTJWNUxDQnlLU3dnY2p0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZjR0Z5WVcwb2NHRnlZVzFKYm1SbGVDd2daR1ZqYjNKaGRHOXlLU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLSFJoY21kbGRDd2dhMlY1S1NCN0lHUmxZMjl5WVhSdmNpaDBZWEpuWlhRc0lHdGxlU3dnY0dGeVlXMUpibVJsZUNrN0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWlhORVpXTnZjbUYwWlNoamRHOXlMQ0JrWlhOamNtbHdkRzl5U1c0c0lHUmxZMjl5WVhSdmNuTXNJR052Ym5SbGVIUkpiaXdnYVc1cGRHbGhiR2w2WlhKekxDQmxlSFJ5WVVsdWFYUnBZV3hwZW1WeWN5a2dlMXh5WEc0Z0lDQWdablZ1WTNScGIyNGdZV05qWlhCMEtHWXBJSHNnYVdZZ0tHWWdJVDA5SUhadmFXUWdNQ0FtSmlCMGVYQmxiMllnWmlBaFBUMGdYQ0ptZFc1amRHbHZibHdpS1NCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lSblZ1WTNScGIyNGdaWGh3WldOMFpXUmNJaWs3SUhKbGRIVnliaUJtT3lCOVhISmNiaUFnSUNCMllYSWdhMmx1WkNBOUlHTnZiblJsZUhSSmJpNXJhVzVrTENCclpYa2dQU0JyYVc1a0lEMDlQU0JjSW1kbGRIUmxjbHdpSUQ4Z1hDSm5aWFJjSWlBNklHdHBibVFnUFQwOUlGd2ljMlYwZEdWeVhDSWdQeUJjSW5ObGRGd2lJRG9nWENKMllXeDFaVndpTzF4eVhHNGdJQ0FnZG1GeUlIUmhjbWRsZENBOUlDRmtaWE5qY21sd2RHOXlTVzRnSmlZZ1kzUnZjaUEvSUdOdmJuUmxlSFJKYmx0Y0luTjBZWFJwWTF3aVhTQS9JR04wYjNJZ09pQmpkRzl5TG5CeWIzUnZkSGx3WlNBNklHNTFiR3c3WEhKY2JpQWdJQ0IyWVhJZ1pHVnpZM0pwY0hSdmNpQTlJR1JsYzJOeWFYQjBiM0pKYmlCOGZDQW9kR0Z5WjJWMElEOGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2loMFlYSm5aWFFzSUdOdmJuUmxlSFJKYmk1dVlXMWxLU0E2SUh0OUtUdGNjbHh1SUNBZ0lIWmhjaUJmTENCa2IyNWxJRDBnWm1Gc2MyVTdYSEpjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnWkdWamIzSmhkRzl5Y3k1c1pXNW5kR2dnTFNBeE95QnBJRDQ5SURBN0lHa3RMU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJqYjI1MFpYaDBJRDBnZTMwN1hISmNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdjQ0JwYmlCamIyNTBaWGgwU1c0cElHTnZiblJsZUhSYmNGMGdQU0J3SUQwOVBTQmNJbUZqWTJWemMxd2lJRDhnZTMwZ09pQmpiMjUwWlhoMFNXNWJjRjA3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2NDQnBiaUJqYjI1MFpYaDBTVzR1WVdOalpYTnpLU0JqYjI1MFpYaDBMbUZqWTJWemMxdHdYU0E5SUdOdmJuUmxlSFJKYmk1aFkyTmxjM05iY0YwN1hISmNiaUFnSUNBZ0lDQWdZMjl1ZEdWNGRDNWhaR1JKYm1sMGFXRnNhWHBsY2lBOUlHWjFibU4wYVc5dUlDaG1LU0I3SUdsbUlDaGtiMjVsS1NCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lRMkZ1Ym05MElHRmtaQ0JwYm1sMGFXRnNhWHBsY25NZ1lXWjBaWElnWkdWamIzSmhkR2x2YmlCb1lYTWdZMjl0Y0d4bGRHVmtYQ0lwT3lCbGVIUnlZVWx1YVhScFlXeHBlbVZ5Y3k1d2RYTm9LR0ZqWTJWd2RDaG1JSHg4SUc1MWJHd3BLVHNnZlR0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnY21WemRXeDBJRDBnS0RBc0lHUmxZMjl5WVhSdmNuTmJhVjBwS0d0cGJtUWdQVDA5SUZ3aVlXTmpaWE56YjNKY0lpQS9JSHNnWjJWME9pQmtaWE5qY21sd2RHOXlMbWRsZEN3Z2MyVjBPaUJrWlhOamNtbHdkRzl5TG5ObGRDQjlJRG9nWkdWelkzSnBjSFJ2Y2x0clpYbGRMQ0JqYjI1MFpYaDBLVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9hMmx1WkNBOVBUMGdYQ0poWTJObGMzTnZjbHdpS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaWE4xYkhRZ1BUMDlJSFp2YVdRZ01Da2dZMjl1ZEdsdWRXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhOMWJIUWdQVDA5SUc1MWJHd2dmSHdnZEhsd1pXOW1JSEpsYzNWc2RDQWhQVDBnWENKdlltcGxZM1JjSWlrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJazlpYW1WamRDQmxlSEJsWTNSbFpGd2lLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Y4Z1BTQmhZMk5sY0hRb2NtVnpkV3gwTG1kbGRDa3BJR1JsYzJOeWFYQjBiM0l1WjJWMElEMGdYenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Y4Z1BTQmhZMk5sY0hRb2NtVnpkV3gwTG5ObGRDa3BJR1JsYzJOeWFYQjBiM0l1YzJWMElEMGdYenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Y4Z1BTQmhZMk5sY0hRb2NtVnpkV3gwTG1sdWFYUXBLU0JwYm1sMGFXRnNhWHBsY25NdWNIVnphQ2hmS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWld4elpTQnBaaUFvWHlBOUlHRmpZMlZ3ZENoeVpYTjFiSFFwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHJhVzVrSUQwOVBTQmNJbVpwWld4a1hDSXBJR2x1YVhScFlXeHBlbVZ5Y3k1d2RYTm9LRjhwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHUmxjMk55YVhCMGIzSmJhMlY1WFNBOUlGODdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnYVdZZ0tIUmhjbWRsZENrZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSFJoY21kbGRDd2dZMjl1ZEdWNGRFbHVMbTVoYldVc0lHUmxjMk55YVhCMGIzSXBPMXh5WEc0Z0lDQWdaRzl1WlNBOUlIUnlkV1U3WEhKY2JuMDdYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXlkVzVKYm1sMGFXRnNhWHBsY25Nb2RHaHBjMEZ5Wnl3Z2FXNXBkR2xoYkdsNlpYSnpMQ0IyWVd4MVpTa2dlMXh5WEc0Z0lDQWdkbUZ5SUhWelpWWmhiSFZsSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lESTdYSEpjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR2x1YVhScFlXeHBlbVZ5Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGJIVmxJRDBnZFhObFZtRnNkV1VnUHlCcGJtbDBhV0ZzYVhwbGNuTmJhVjB1WTJGc2JDaDBhR2x6UVhKbkxDQjJZV3gxWlNrZ09pQnBibWwwYVdGc2FYcGxjbk5iYVYwdVkyRnNiQ2gwYUdselFYSm5LVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQjFjMlZXWVd4MVpTQS9JSFpoYkhWbElEb2dkbTlwWkNBd08xeHlYRzU5TzF4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmY0hKdmNFdGxlU2g0S1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEhsd1pXOW1JSGdnUFQwOUlGd2ljM2x0WW05c1hDSWdQeUI0SURvZ1hDSmNJaTVqYjI1allYUW9lQ2s3WEhKY2JuMDdYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXpaWFJHZFc1amRHbHZiazVoYldVb1ppd2dibUZ0WlN3Z2NISmxabWw0S1NCN1hISmNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHNWhiV1VnUFQwOUlGd2ljM2x0WW05c1hDSXBJRzVoYldVZ1BTQnVZVzFsTG1SbGMyTnlhWEIwYVc5dUlEOGdYQ0piWENJdVkyOXVZMkYwS0c1aGJXVXVaR1Z6WTNKcGNIUnBiMjRzSUZ3aVhWd2lLU0E2SUZ3aVhDSTdYSEpjYmlBZ0lDQnlaWFIxY200Z1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1lzSUZ3aWJtRnRaVndpTENCN0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTd2dkbUZzZFdVNklIQnlaV1pwZUNBL0lGd2lYQ0l1WTI5dVkyRjBLSEJ5WldacGVDd2dYQ0lnWENJc0lHNWhiV1VwSURvZ2JtRnRaU0I5S1R0Y2NseHVmVHRjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMjFsZEdGa1lYUmhLRzFsZEdGa1lYUmhTMlY1TENCdFpYUmhaR0YwWVZaaGJIVmxLU0I3WEhKY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUZKbFpteGxZM1FnUFQwOUlGd2liMkpxWldOMFhDSWdKaVlnZEhsd1pXOW1JRkpsWm14bFkzUXViV1YwWVdSaGRHRWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa2djbVYwZFhKdUlGSmxabXhsWTNRdWJXVjBZV1JoZEdFb2JXVjBZV1JoZEdGTFpYa3NJRzFsZEdGa1lYUmhWbUZzZFdVcE8xeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTloZDJGcGRHVnlLSFJvYVhOQmNtY3NJRjloY21kMWJXVnVkSE1zSUZBc0lHZGxibVZ5WVhSdmNpa2dlMXh5WEc0Z0lDQWdablZ1WTNScGIyNGdZV1J2Y0hRb2RtRnNkV1VwSUhzZ2NtVjBkWEp1SUhaaGJIVmxJR2x1YzNSaGJtTmxiMllnVUNBL0lIWmhiSFZsSURvZ2JtVjNJRkFvWm5WdVkzUnBiMjRnS0hKbGMyOXNkbVVwSUhzZ2NtVnpiMngyWlNoMllXeDFaU2s3SUgwcE95QjlYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJQ2hRSUh4OElDaFFJRDBnVUhKdmJXbHpaU2twS0daMWJtTjBhVzl1SUNoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQm1kV3htYVd4c1pXUW9kbUZzZFdVcElIc2dkSEo1SUhzZ2MzUmxjQ2huWlc1bGNtRjBiM0l1Ym1WNGRDaDJZV3gxWlNrcE95QjlJR05oZEdOb0lDaGxLU0I3SUhKbGFtVmpkQ2hsS1RzZ2ZTQjlYSEpjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnY21WcVpXTjBaV1FvZG1Gc2RXVXBJSHNnZEhKNUlIc2djM1JsY0NoblpXNWxjbUYwYjNKYlhDSjBhSEp2ZDF3aVhTaDJZV3gxWlNrcE95QjlJR05oZEdOb0lDaGxLU0I3SUhKbGFtVmpkQ2hsS1RzZ2ZTQjlYSEpjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYzNSbGNDaHlaWE4xYkhRcElIc2djbVZ6ZFd4MExtUnZibVVnUHlCeVpYTnZiSFpsS0hKbGMzVnNkQzUyWVd4MVpTa2dPaUJoWkc5d2RDaHlaWE4xYkhRdWRtRnNkV1VwTG5Sb1pXNG9ablZzWm1sc2JHVmtMQ0J5WldwbFkzUmxaQ2s3SUgxY2NseHVJQ0FnSUNBZ0lDQnpkR1Z3S0NoblpXNWxjbUYwYjNJZ1BTQm5aVzVsY21GMGIzSXVZWEJ3Ykhrb2RHaHBjMEZ5Wnl3Z1gyRnlaM1Z0Wlc1MGN5QjhmQ0JiWFNrcExtNWxlSFFvS1NrN1hISmNiaUFnSUNCOUtUdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWjJWdVpYSmhkRzl5S0hSb2FYTkJjbWNzSUdKdlpIa3BJSHRjY2x4dUlDQWdJSFpoY2lCZklEMGdleUJzWVdKbGJEb2dNQ3dnYzJWdWREb2dablZ1WTNScGIyNG9LU0I3SUdsbUlDaDBXekJkSUNZZ01Ta2dkR2h5YjNjZ2RGc3hYVHNnY21WMGRYSnVJSFJiTVYwN0lIMHNJSFJ5ZVhNNklGdGRMQ0J2Y0hNNklGdGRJSDBzSUdZc0lIa3NJSFFzSUdjN1hISmNiaUFnSUNCeVpYUjFjbTRnWnlBOUlIc2dibVY0ZERvZ2RtVnlZaWd3S1N3Z1hDSjBhSEp2ZDF3aU9pQjJaWEppS0RFcExDQmNJbkpsZEhWeWJsd2lPaUIyWlhKaUtESXBJSDBzSUhSNWNHVnZaaUJUZVcxaWIyd2dQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUFvWjF0VGVXMWliMnd1YVhSbGNtRjBiM0pkSUQwZ1puVnVZM1JwYjI0b0tTQjdJSEpsZEhWeWJpQjBhR2x6T3lCOUtTd2daenRjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSFpsY21Jb2Jpa2dleUJ5WlhSMWNtNGdablZ1WTNScGIyNGdLSFlwSUhzZ2NtVjBkWEp1SUhOMFpYQW9XMjRzSUhaZEtUc2dmVHNnZlZ4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnYzNSbGNDaHZjQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2htS1NCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lSMlZ1WlhKaGRHOXlJR2x6SUdGc2NtVmhaSGtnWlhobFkzVjBhVzVuTGx3aUtUdGNjbHh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9aeUFtSmlBb1p5QTlJREFzSUc5d1d6QmRJQ1ltSUNoZklEMGdNQ2twTENCZktTQjBjbmtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ppQTlJREVzSUhrZ0ppWWdLSFFnUFNCdmNGc3dYU0FtSURJZ1B5QjVXMXdpY21WMGRYSnVYQ0pkSURvZ2IzQmJNRjBnUHlCNVcxd2lkR2h5YjNkY0lsMGdmSHdnS0NoMElEMGdlVnRjSW5KbGRIVnlibHdpWFNrZ0ppWWdkQzVqWVd4c0tIa3BMQ0F3S1NBNklIa3VibVY0ZENrZ0ppWWdJU2gwSUQwZ2RDNWpZV3hzS0hrc0lHOXdXekZkS1NrdVpHOXVaU2tnY21WMGRYSnVJSFE3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoNUlEMGdNQ3dnZENrZ2IzQWdQU0JiYjNCYk1GMGdKaUF5TENCMExuWmhiSFZsWFR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2h2Y0Zzd1hTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXdPaUJqWVhObElERTZJSFFnUFNCdmNEc2dZbkpsWVdzN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURRNklGOHViR0ZpWld3ckt6c2djbVYwZFhKdUlIc2dkbUZzZFdVNklHOXdXekZkTENCa2IyNWxPaUJtWVd4elpTQjlPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQTFPaUJmTG14aFltVnNLeXM3SUhrZ1BTQnZjRnN4WFRzZ2IzQWdQU0JiTUYwN0lHTnZiblJwYm5WbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBM09pQnZjQ0E5SUY4dWIzQnpMbkJ2Y0NncE95QmZMblJ5ZVhNdWNHOXdLQ2s3SUdOdmJuUnBiblZsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lTaDBJRDBnWHk1MGNubHpMQ0IwSUQwZ2RDNXNaVzVuZEdnZ1BpQXdJQ1ltSUhSYmRDNXNaVzVuZEdnZ0xTQXhYU2tnSmlZZ0tHOXdXekJkSUQwOVBTQTJJSHg4SUc5d1d6QmRJRDA5UFNBeUtTa2dleUJmSUQwZ01Ec2dZMjl1ZEdsdWRXVTdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYjNCYk1GMGdQVDA5SURNZ0ppWWdLQ0YwSUh4OElDaHZjRnN4WFNBK0lIUmJNRjBnSmlZZ2IzQmJNVjBnUENCMFd6TmRLU2twSUhzZ1h5NXNZV0psYkNBOUlHOXdXekZkT3lCaWNtVmhhenNnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodmNGc3dYU0E5UFQwZ05pQW1KaUJmTG14aFltVnNJRHdnZEZzeFhTa2dleUJmTG14aFltVnNJRDBnZEZzeFhUc2dkQ0E5SUc5d095QmljbVZoYXpzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBJQ1ltSUY4dWJHRmlaV3dnUENCMFd6SmRLU0I3SUY4dWJHRmlaV3dnUFNCMFd6SmRPeUJmTG05d2N5NXdkWE5vS0c5d0tUc2dZbkpsWVdzN0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kRnN5WFNrZ1h5NXZjSE11Y0c5d0tDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1h5NTBjbmx6TG5CdmNDZ3BPeUJqYjI1MGFXNTFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZjQ0E5SUdKdlpIa3VZMkZzYkNoMGFHbHpRWEpuTENCZktUdGNjbHh1SUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN0lHOXdJRDBnV3pZc0lHVmRPeUI1SUQwZ01Ec2dmU0JtYVc1aGJHeDVJSHNnWmlBOUlIUWdQU0F3T3lCOVhISmNiaUFnSUNBZ0lDQWdhV1lnS0c5d1d6QmRJQ1lnTlNrZ2RHaHliM2NnYjNCYk1WMDdJSEpsZEhWeWJpQjdJSFpoYkhWbE9pQnZjRnN3WFNBL0lHOXdXekZkSURvZ2RtOXBaQ0F3TENCa2IyNWxPaUIwY25WbElIMDdYSEpjYmlBZ0lDQjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0IyWVhJZ1gxOWpjbVZoZEdWQ2FXNWthVzVuSUQwZ1QySnFaV04wTG1OeVpXRjBaU0EvSUNobWRXNWpkR2x2YmlodkxDQnRMQ0JyTENCck1pa2dlMXh5WEc0Z0lDQWdhV1lnS0dzeUlEMDlQU0IxYm1SbFptbHVaV1FwSUdzeUlEMGdhenRjY2x4dUlDQWdJSFpoY2lCa1pYTmpJRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaHRMQ0JyS1R0Y2NseHVJQ0FnSUdsbUlDZ2haR1Z6WXlCOGZDQW9YQ0puWlhSY0lpQnBiaUJrWlhOaklEOGdJVzB1WDE5bGMwMXZaSFZzWlNBNklHUmxjMk11ZDNKcGRHRmliR1VnZkh3Z1pHVnpZeTVqYjI1bWFXZDFjbUZpYkdVcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnWkdWell5QTlJSHNnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3dnWjJWME9pQm1kVzVqZEdsdmJpZ3BJSHNnY21WMGRYSnVJRzFiYTEwN0lIMGdmVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNodkxDQnJNaXdnWkdWell5azdYSEpjYm4wcElEb2dLR1oxYm1OMGFXOXVLRzhzSUcwc0lHc3NJR3N5S1NCN1hISmNiaUFnSUNCcFppQW9heklnUFQwOUlIVnVaR1ZtYVc1bFpDa2dheklnUFNCck8xeHlYRzRnSUNBZ2IxdHJNbDBnUFNCdFcydGRPMXh5WEc1OUtUdGNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyVjRjRzl5ZEZOMFlYSW9iU3dnYnlrZ2UxeHlYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2NDQnBiaUJ0S1NCcFppQW9jQ0FoUFQwZ1hDSmtaV1poZFd4MFhDSWdKaVlnSVU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNodkxDQndLU2tnWDE5amNtVmhkR1ZDYVc1a2FXNW5LRzhzSUcwc0lIQXBPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5MllXeDFaWE1vYnlrZ2UxeHlYRzRnSUNBZ2RtRnlJSE1nUFNCMGVYQmxiMllnVTNsdFltOXNJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdKaVlnVTNsdFltOXNMbWwwWlhKaGRHOXlMQ0J0SUQwZ2N5QW1KaUJ2VzNOZExDQnBJRDBnTUR0Y2NseHVJQ0FnSUdsbUlDaHRLU0J5WlhSMWNtNGdiUzVqWVd4c0tHOHBPMXh5WEc0Z0lDQWdhV1lnS0c4Z0ppWWdkSGx3Wlc5bUlHOHViR1Z1WjNSb0lEMDlQU0JjSW01MWJXSmxjbHdpS1NCeVpYUjFjbTRnZTF4eVhHNGdJQ0FnSUNBZ0lHNWxlSFE2SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzhnSmlZZ2FTQStQU0J2TG14bGJtZDBhQ2tnYnlBOUlIWnZhV1FnTUR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSHNnZG1Gc2RXVTZJRzhnSmlZZ2IxdHBLeXRkTENCa2IyNWxPaUFoYnlCOU8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDA3WEhKY2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0hNZ1B5QmNJazlpYW1WamRDQnBjeUJ1YjNRZ2FYUmxjbUZpYkdVdVhDSWdPaUJjSWxONWJXSnZiQzVwZEdWeVlYUnZjaUJwY3lCdWIzUWdaR1ZtYVc1bFpDNWNJaWs3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgzSmxZV1FvYnl3Z2Jpa2dlMXh5WEc0Z0lDQWdkbUZ5SUcwZ1BTQjBlWEJsYjJZZ1UzbHRZbTlzSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnSmlZZ2IxdFRlVzFpYjJ3dWFYUmxjbUYwYjNKZE8xeHlYRzRnSUNBZ2FXWWdLQ0Z0S1NCeVpYUjFjbTRnYnp0Y2NseHVJQ0FnSUhaaGNpQnBJRDBnYlM1allXeHNLRzhwTENCeUxDQmhjaUE5SUZ0ZExDQmxPMXh5WEc0Z0lDQWdkSEo1SUh0Y2NseHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb0tHNGdQVDA5SUhadmFXUWdNQ0I4ZkNCdUxTMGdQaUF3S1NBbUppQWhLSElnUFNCcExtNWxlSFFvS1NrdVpHOXVaU2tnWVhJdWNIVnphQ2h5TG5aaGJIVmxLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJR05oZEdOb0lDaGxjbkp2Y2lrZ2V5QmxJRDBnZXlCbGNuSnZjam9nWlhKeWIzSWdmVHNnZlZ4eVhHNGdJQ0FnWm1sdVlXeHNlU0I3WEhKY2JpQWdJQ0FnSUNBZ2RISjVJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hJZ0ppWWdJWEl1Wkc5dVpTQW1KaUFvYlNBOUlHbGJYQ0p5WlhSMWNtNWNJbDBwS1NCdExtTmhiR3dvYVNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdacGJtRnNiSGtnZXlCcFppQW9aU2tnZEdoeWIzY2daUzVsY25KdmNqc2dmVnh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlHRnlPMXh5WEc1OVhISmNibHh5WEc0dktpb2dRR1JsY0hKbFkyRjBaV1FnS2k5Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZjM0J5WldGa0tDa2dlMXh5WEc0Z0lDQWdabTl5SUNoMllYSWdZWElnUFNCYlhTd2dhU0E5SURBN0lHa2dQQ0JoY21kMWJXVnVkSE11YkdWdVozUm9PeUJwS3lzcFhISmNiaUFnSUNBZ0lDQWdZWElnUFNCaGNpNWpiMjVqWVhRb1gxOXlaV0ZrS0dGeVozVnRaVzUwYzF0cFhTa3BPMXh5WEc0Z0lDQWdjbVYwZFhKdUlHRnlPMXh5WEc1OVhISmNibHh5WEc0dktpb2dRR1JsY0hKbFkyRjBaV1FnS2k5Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZjM0J5WldGa1FYSnlZWGx6S0NrZ2UxeHlYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2N5QTlJREFzSUdrZ1BTQXdMQ0JwYkNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lHa2dQQ0JwYkRzZ2FTc3JLU0J6SUNzOUlHRnlaM1Z0Wlc1MGMxdHBYUzVzWlc1bmRHZzdYSEpjYmlBZ0lDQm1iM0lnS0haaGNpQnlJRDBnUVhKeVlYa29jeWtzSUdzZ1BTQXdMQ0JwSUQwZ01Ec2dhU0E4SUdsc095QnBLeXNwWEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ1lTQTlJR0Z5WjNWdFpXNTBjMXRwWFN3Z2FpQTlJREFzSUdwc0lEMGdZUzVzWlc1bmRHZzdJR29nUENCcWJEc2dhaXNyTENCckt5c3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmJhMTBnUFNCaFcycGRPMXh5WEc0Z0lDQWdjbVYwZFhKdUlISTdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDNOd2NtVmhaRUZ5Y21GNUtIUnZMQ0JtY205dExDQndZV05yS1NCN1hISmNiaUFnSUNCcFppQW9jR0ZqYXlCOGZDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lEMDlQU0F5S1NCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYkNBOUlHWnliMjB1YkdWdVozUm9MQ0JoY2pzZ2FTQThJR3c3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGhjaUI4ZkNBaEtHa2dhVzRnWm5KdmJTa3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGaGNpa2dZWElnUFNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNobWNtOXRMQ0F3TENCcEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSmJhVjBnUFNCbWNtOXRXMmxkTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCMGJ5NWpiMjVqWVhRb1lYSWdmSHdnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk5zYVdObExtTmhiR3dvWm5KdmJTa3BPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5aGQyRnBkQ2gyS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5QnBibk4wWVc1alpXOW1JRjlmWVhkaGFYUWdQeUFvZEdocGN5NTJJRDBnZGl3Z2RHaHBjeWtnT2lCdVpYY2dYMTloZDJGcGRDaDJLVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZllYTjVibU5IWlc1bGNtRjBiM0lvZEdocGMwRnlaeXdnWDJGeVozVnRaVzUwY3l3Z1oyVnVaWEpoZEc5eUtTQjdYSEpjYmlBZ0lDQnBaaUFvSVZONWJXSnZiQzVoYzNsdVkwbDBaWEpoZEc5eUtTQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpVTNsdFltOXNMbUZ6ZVc1alNYUmxjbUYwYjNJZ2FYTWdibTkwSUdSbFptbHVaV1F1WENJcE8xeHlYRzRnSUNBZ2RtRnlJR2NnUFNCblpXNWxjbUYwYjNJdVlYQndiSGtvZEdocGMwRnlaeXdnWDJGeVozVnRaVzUwY3lCOGZDQmJYU2tzSUdrc0lIRWdQU0JiWFR0Y2NseHVJQ0FnSUhKbGRIVnliaUJwSUQwZ2UzMHNJSFpsY21Jb1hDSnVaWGgwWENJcExDQjJaWEppS0Z3aWRHaHliM2RjSWlrc0lIWmxjbUlvWENKeVpYUjFjbTVjSWlrc0lHbGJVM2x0WW05c0xtRnplVzVqU1hSbGNtRjBiM0pkSUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdkR2hwY3pzZ2ZTd2dhVHRjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSFpsY21Jb2Jpa2dleUJwWmlBb1oxdHVYU2tnYVZ0dVhTQTlJR1oxYm1OMGFXOXVJQ2gyS1NCN0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpQW9ZU3dnWWlrZ2V5QnhMbkIxYzJnb1cyNHNJSFlzSUdFc0lHSmRLU0ErSURFZ2ZId2djbVZ6ZFcxbEtHNHNJSFlwT3lCOUtUc2dmVHNnZlZ4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnY21WemRXMWxLRzRzSUhZcElIc2dkSEo1SUhzZ2MzUmxjQ2huVzI1ZEtIWXBLVHNnZlNCallYUmphQ0FvWlNrZ2V5QnpaWFIwYkdVb2NWc3dYVnN6WFN3Z1pTazdJSDBnZlZ4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnYzNSbGNDaHlLU0I3SUhJdWRtRnNkV1VnYVc1emRHRnVZMlZ2WmlCZlgyRjNZV2wwSUQ4Z1VISnZiV2x6WlM1eVpYTnZiSFpsS0hJdWRtRnNkV1V1ZGlrdWRHaGxiaWhtZFd4bWFXeHNMQ0J5WldwbFkzUXBJRG9nYzJWMGRHeGxLSEZiTUYxYk1sMHNJSElwT3lCOVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCbWRXeG1hV3hzS0haaGJIVmxLU0I3SUhKbGMzVnRaU2hjSW01bGVIUmNJaXdnZG1Gc2RXVXBPeUI5WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJ5WldwbFkzUW9kbUZzZFdVcElIc2djbVZ6ZFcxbEtGd2lkR2h5YjNkY0lpd2dkbUZzZFdVcE95QjlYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQnpaWFIwYkdVb1ppd2dkaWtnZXlCcFppQW9aaWgyS1N3Z2NTNXphR2xtZENncExDQnhMbXhsYm1kMGFDa2djbVZ6ZFcxbEtIRmJNRjFiTUYwc0lIRmJNRjFiTVYwcE95QjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJGemVXNWpSR1ZzWldkaGRHOXlLRzhwSUh0Y2NseHVJQ0FnSUhaaGNpQnBMQ0J3TzF4eVhHNGdJQ0FnY21WMGRYSnVJR2tnUFNCN2ZTd2dkbVZ5WWloY0ltNWxlSFJjSWlrc0lIWmxjbUlvWENKMGFISnZkMXdpTENCbWRXNWpkR2x2YmlBb1pTa2dleUIwYUhKdmR5QmxPeUI5S1N3Z2RtVnlZaWhjSW5KbGRIVnlibHdpS1N3Z2FWdFRlVzFpYjJ3dWFYUmxjbUYwYjNKZElEMGdablZ1WTNScGIyNGdLQ2tnZXlCeVpYUjFjbTRnZEdocGN6c2dmU3dnYVR0Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUhabGNtSW9iaXdnWmlrZ2V5QnBXMjVkSUQwZ2IxdHVYU0EvSUdaMWJtTjBhVzl1SUNoMktTQjdJSEpsZEhWeWJpQW9jQ0E5SUNGd0tTQS9JSHNnZG1Gc2RXVTZJRjlmWVhkaGFYUW9iMXR1WFNoMktTa3NJR1J2Ym1VNklHWmhiSE5sSUgwZ09pQm1JRDhnWmloMktTQTZJSFk3SUgwZ09pQm1PeUI5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyRnplVzVqVm1Gc2RXVnpLRzhwSUh0Y2NseHVJQ0FnSUdsbUlDZ2hVM2x0WW05c0xtRnplVzVqU1hSbGNtRjBiM0lwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSlRlVzFpYjJ3dVlYTjVibU5KZEdWeVlYUnZjaUJwY3lCdWIzUWdaR1ZtYVc1bFpDNWNJaWs3WEhKY2JpQWdJQ0IyWVhJZ2JTQTlJRzliVTNsdFltOXNMbUZ6ZVc1alNYUmxjbUYwYjNKZExDQnBPMXh5WEc0Z0lDQWdjbVYwZFhKdUlHMGdQeUJ0TG1OaGJHd29ieWtnT2lBb2J5QTlJSFI1Y0dWdlppQmZYM1poYkhWbGN5QTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlEOGdYMTkyWVd4MVpYTW9ieWtnT2lCdlcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwb0tTd2dhU0E5SUh0OUxDQjJaWEppS0Z3aWJtVjRkRndpS1N3Z2RtVnlZaWhjSW5Sb2NtOTNYQ0lwTENCMlpYSmlLRndpY21WMGRYSnVYQ0lwTENCcFcxTjViV0p2YkM1aGMzbHVZMGwwWlhKaGRHOXlYU0E5SUdaMWJtTjBhVzl1SUNncElIc2djbVYwZFhKdUlIUm9hWE03SUgwc0lHa3BPMXh5WEc0Z0lDQWdablZ1WTNScGIyNGdkbVZ5WWlodUtTQjdJR2xiYmwwZ1BTQnZXMjVkSUNZbUlHWjFibU4wYVc5dUlDaDJLU0I3SUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmlBb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN0lIWWdQU0J2VzI1ZEtIWXBMQ0J6WlhSMGJHVW9jbVZ6YjJ4MlpTd2djbVZxWldOMExDQjJMbVJ2Ym1Vc0lIWXVkbUZzZFdVcE95QjlLVHNnZlRzZ2ZWeHlYRzRnSUNBZ1puVnVZM1JwYjI0Z2MyVjBkR3hsS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ3dnWkN3Z2Rpa2dleUJRY205dGFYTmxMbkpsYzI5c2RtVW9kaWt1ZEdobGJpaG1kVzVqZEdsdmJpaDJLU0I3SUhKbGMyOXNkbVVvZXlCMllXeDFaVG9nZGl3Z1pHOXVaVG9nWkNCOUtUc2dmU3dnY21WcVpXTjBLVHNnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXRZV3RsVkdWdGNHeGhkR1ZQWW1wbFkzUW9ZMjl2YTJWa0xDQnlZWGNwSUh0Y2NseHVJQ0FnSUdsbUlDaFBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtwSUhzZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR052YjJ0bFpDd2dYQ0p5WVhkY0lpd2dleUIyWVd4MVpUb2djbUYzSUgwcE95QjlJR1ZzYzJVZ2V5QmpiMjlyWldRdWNtRjNJRDBnY21GM095QjlYSEpjYmlBZ0lDQnlaWFIxY200Z1kyOXZhMlZrTzF4eVhHNTlPMXh5WEc1Y2NseHVkbUZ5SUY5ZmMyVjBUVzlrZFd4bFJHVm1ZWFZzZENBOUlFOWlhbVZqZEM1amNtVmhkR1VnUHlBb1puVnVZM1JwYjI0b2J5d2dkaWtnZTF4eVhHNGdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHOHNJRndpWkdWbVlYVnNkRndpTENCN0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc0lIWmhiSFZsT2lCMklIMHBPMXh5WEc1OUtTQTZJR1oxYm1OMGFXOXVLRzhzSUhZcElIdGNjbHh1SUNBZ0lHOWJYQ0prWldaaGRXeDBYQ0pkSUQwZ2RqdGNjbHh1ZlR0Y2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJsdGNHOXlkRk4wWVhJb2JXOWtLU0I3WEhKY2JpQWdJQ0JwWmlBb2JXOWtJQ1ltSUcxdlpDNWZYMlZ6VFc5a2RXeGxLU0J5WlhSMWNtNGdiVzlrTzF4eVhHNGdJQ0FnZG1GeUlISmxjM1ZzZENBOUlIdDlPMXh5WEc0Z0lDQWdhV1lnS0cxdlpDQWhQU0J1ZFd4c0tTQm1iM0lnS0haaGNpQnJJR2x1SUcxdlpDa2dhV1lnS0dzZ0lUMDlJRndpWkdWbVlYVnNkRndpSUNZbUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHRiMlFzSUdzcEtTQmZYMk55WldGMFpVSnBibVJwYm1jb2NtVnpkV3gwTENCdGIyUXNJR3NwTzF4eVhHNGdJQ0FnWDE5elpYUk5iMlIxYkdWRVpXWmhkV3gwS0hKbGMzVnNkQ3dnYlc5a0tUdGNjbHh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgybHRjRzl5ZEVSbFptRjFiSFFvYlc5a0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z0tHMXZaQ0FtSmlCdGIyUXVYMTlsYzAxdlpIVnNaU2tnUHlCdGIyUWdPaUI3SUdSbFptRjFiSFE2SUcxdlpDQjlPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5amJHRnpjMUJ5YVhaaGRHVkdhV1ZzWkVkbGRDaHlaV05sYVhabGNpd2djM1JoZEdVc0lHdHBibVFzSUdZcElIdGNjbHh1SUNBZ0lHbG1JQ2hyYVc1a0lEMDlQU0JjSW1GY0lpQW1KaUFoWmlrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJbEJ5YVhaaGRHVWdZV05qWlhOemIzSWdkMkZ6SUdSbFptbHVaV1FnZDJsMGFHOTFkQ0JoSUdkbGRIUmxjbHdpS1R0Y2NseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2MzUmhkR1VnUFQwOUlGd2lablZ1WTNScGIyNWNJaUEvSUhKbFkyVnBkbVZ5SUNFOVBTQnpkR0YwWlNCOGZDQWhaaUE2SUNGemRHRjBaUzVvWVhNb2NtVmpaV2wyWlhJcEtTQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpUTJGdWJtOTBJSEpsWVdRZ2NISnBkbUYwWlNCdFpXMWlaWElnWm5KdmJTQmhiaUJ2WW1wbFkzUWdkMmh2YzJVZ1kyeGhjM01nWkdsa0lHNXZkQ0JrWldOc1lYSmxJR2wwWENJcE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUd0cGJtUWdQVDA5SUZ3aWJWd2lJRDhnWmlBNklHdHBibVFnUFQwOUlGd2lZVndpSUQ4Z1ppNWpZV3hzS0hKbFkyVnBkbVZ5S1NBNklHWWdQeUJtTG5aaGJIVmxJRG9nYzNSaGRHVXVaMlYwS0hKbFkyVnBkbVZ5S1R0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZZMnhoYzNOUWNtbDJZWFJsUm1sbGJHUlRaWFFvY21WalpXbDJaWElzSUhOMFlYUmxMQ0IyWVd4MVpTd2dhMmx1WkN3Z1ppa2dlMXh5WEc0Z0lDQWdhV1lnS0d0cGJtUWdQVDA5SUZ3aWJWd2lLU0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVVISnBkbUYwWlNCdFpYUm9iMlFnYVhNZ2JtOTBJSGR5YVhSaFlteGxYQ0lwTzF4eVhHNGdJQ0FnYVdZZ0tHdHBibVFnUFQwOUlGd2lZVndpSUNZbUlDRm1LU0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVVISnBkbUYwWlNCaFkyTmxjM052Y2lCM1lYTWdaR1ZtYVc1bFpDQjNhWFJvYjNWMElHRWdjMlYwZEdWeVhDSXBPMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ6ZEdGMFpTQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlEOGdjbVZqWldsMlpYSWdJVDA5SUhOMFlYUmxJSHg4SUNGbUlEb2dJWE4wWVhSbExtaGhjeWh5WldObGFYWmxjaWtwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkRZVzV1YjNRZ2QzSnBkR1VnY0hKcGRtRjBaU0J0WlcxaVpYSWdkRzhnWVc0Z2IySnFaV04wSUhkb2IzTmxJR05zWVhOeklHUnBaQ0J1YjNRZ1pHVmpiR0Z5WlNCcGRGd2lLVHRjY2x4dUlDQWdJSEpsZEhWeWJpQW9hMmx1WkNBOVBUMGdYQ0poWENJZ1B5Qm1MbU5oYkd3b2NtVmpaV2wyWlhJc0lIWmhiSFZsS1NBNklHWWdQeUJtTG5aaGJIVmxJRDBnZG1Gc2RXVWdPaUJ6ZEdGMFpTNXpaWFFvY21WalpXbDJaWElzSUhaaGJIVmxLU2tzSUhaaGJIVmxPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5amJHRnpjMUJ5YVhaaGRHVkdhV1ZzWkVsdUtITjBZWFJsTENCeVpXTmxhWFpsY2lrZ2UxeHlYRzRnSUNBZ2FXWWdLSEpsWTJWcGRtVnlJRDA5UFNCdWRXeHNJSHg4SUNoMGVYQmxiMllnY21WalpXbDJaWElnSVQwOUlGd2liMkpxWldOMFhDSWdKaVlnZEhsd1pXOW1JSEpsWTJWcGRtVnlJQ0U5UFNCY0ltWjFibU4wYVc5dVhDSXBLU0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVEyRnVibTkwSUhWelpTQW5hVzRuSUc5d1pYSmhkRzl5SUc5dUlHNXZiaTF2WW1wbFkzUmNJaWs3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlITjBZWFJsSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnUHlCeVpXTmxhWFpsY2lBOVBUMGdjM1JoZEdVZ09pQnpkR0YwWlM1b1lYTW9jbVZqWldsMlpYSXBPMXh5WEc1OVhISmNiaUlzSW1sdGNHOXlkQ0IwZVhCbElIc2dSMHhVUmlCOUlHWnliMjBnSjNSb2NtVmxMMlY0WVcxd2JHVnpMMnB6YlM5c2IyRmtaWEp6TDBkTVZFWk1iMkZrWlhJdWFuTW5PMXh1YVcxd2IzSjBJSHNnUjB4VVJpQmhjeUJIVEZSR1UyTm9aVzFoSUgwZ1puSnZiU0FuUUdkc2RHWXRkSEpoYm5ObWIzSnRMMk52Y21Vbk8xeHVYRzVtZFc1amRHbHZiaUJsZUhSeVlXTjBVSEpwYldsMGFYWmxjMGx1ZEdWeWJtRnNLR2RzZEdZNklFZE1WRVlzSUc1dlpHVkpibVJsZURvZ2JuVnRZbVZ5TENCdWIyUmxPaUJVU0ZKRlJTNVBZbXBsWTNRelJDazZJRlJJVWtWRkxrMWxjMmhiWFNCOElHNTFiR3dnZTF4dUlDQmpiMjV6ZENCcWMyOXVJRDBnWjJ4MFppNXdZWEp6WlhJdWFuTnZiaUJoY3lCSFRGUkdVMk5vWlcxaExrbEhURlJHTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJNWlhRbmN5QnNhWE4wSUhWd0lHVjJaWEo1SUhCdmMzTnBZbXhsSUhCaGRIUmxjbTV6SUhSb1lYUWdjR0Z5YzJWa0lHZHNkR1lnYm05a1pYTWdkMmwwYUNCaElHMWxjMmdnWTJGdUlHaGhkbVVzTEN4Y2JpQWdJQ3BjYmlBZ0lDb2dYQ0lxWENJZ2FXNWthV05oZEdWeklIUm9ZWFFnZEdodmMyVWdiV1Z6YUdWeklITm9iM1ZzWkNCaVpTQnNhWE4wWldRZ2RYQWdkWE5wYm1jZ2RHaHBjeUJtZFc1amRHbHZibHh1SUNBZ0tseHVJQ0FnS2lBakl5TWdRU0J1YjJSbElIZHBkR2dnWVNBb2JXVnphQ3dnWVNCemFXZHViR1VnY0hKcGJXbDBhWFpsS1Z4dUlDQWdLbHh1SUNBZ0tpQXRJR0JVU0ZKRlJTNU5aWE5vWURvZ1ZHaGxJRzl1YkhrZ2NISnBiV2wwYVhabElHOW1JSFJvWlNCdFpYTm9JQ3BjYmlBZ0lDcGNiaUFnSUNvZ0l5TWpJRUVnYm05a1pTQjNhWFJvSUdFZ0tHMWxjMmdzSUcxMWJIUnBjR3hsSUhCeWFXMXBkR2wyWlhNcFhHNGdJQ0FxWEc0Z0lDQXFJQzBnWUZSSVVrVkZMa2R5YjNWd1lEb2dWR2hsSUhKdmIzUWdiMllnZEdobElHMWxjMmhjYmlBZ0lDb2dJQ0F0SUdCVVNGSkZSUzVOWlhOb1lEb2dRU0J3Y21sdGFYUnBkbVVnYjJZZ2RHaGxJRzFsYzJnZ0tseHVJQ0FnS2lBZ0lDMGdZRlJJVWtWRkxrMWxjMmhnT2lCQklIQnlhVzFwZEdsMlpTQnZaaUIwYUdVZ2JXVnphQ0FvTWlrZ0tseHVJQ0FnS2x4dUlDQWdLaUFqSXlNZ1FTQnViMlJsSUhkcGRHZ2dZU0FvYldWemFDd2diWFZzZEdsd2JHVWdjSEpwYldsMGFYWmxjeWtnUVU1RUlDaGhJR05vYVd4a0lIZHBkR2dnWVNCdFpYTm9MQ0JoSUhOcGJtZHNaU0J3Y21sdGFYUnBkbVVwWEc0Z0lDQXFYRzRnSUNBcUlDMGdZRlJJVWtWRkxrZHliM1Z3WURvZ1ZHaGxJSEp2YjNRZ2IyWWdkR2hsSUcxbGMyaGNiaUFnSUNvZ0lDQXRJR0JVU0ZKRlJTNU5aWE5vWURvZ1FTQndjbWx0YVhScGRtVWdiMllnZEdobElHMWxjMmdnS2x4dUlDQWdLaUFnSUMwZ1lGUklVa1ZGTGsxbGMyaGdPaUJCSUhCeWFXMXBkR2wyWlNCdlppQjBhR1VnYldWemFDQW9NaWtnS2x4dUlDQWdLaUFnSUMwZ1lGUklVa1ZGTGsxbGMyaGdPaUJCSUhCeWFXMXBkR2wyWlNCdlppQmhJRTFGVTBnZ1QwWWdWRWhGSUVOSVNVeEVYRzRnSUNBcVhHNGdJQ0FxSUNNakl5QkJJRzV2WkdVZ2QybDBhQ0JoSUNodFpYTm9MQ0J0ZFd4MGFYQnNaU0J3Y21sdGFYUnBkbVZ6S1NCQlRrUWdLR0VnWTJocGJHUWdkMmwwYUNCaElHMWxjMmdzSUcxMWJIUnBjR3hsSUhCeWFXMXBkR2wyWlhNcFhHNGdJQ0FxWEc0Z0lDQXFJQzBnWUZSSVVrVkZMa2R5YjNWd1lEb2dWR2hsSUhKdmIzUWdiMllnZEdobElHMWxjMmhjYmlBZ0lDb2dJQ0F0SUdCVVNGSkZSUzVOWlhOb1lEb2dRU0J3Y21sdGFYUnBkbVVnYjJZZ2RHaGxJRzFsYzJnZ0tseHVJQ0FnS2lBZ0lDMGdZRlJJVWtWRkxrMWxjMmhnT2lCQklIQnlhVzFwZEdsMlpTQnZaaUIwYUdVZ2JXVnphQ0FvTWlrZ0tseHVJQ0FnS2lBZ0lDMGdZRlJJVWtWRkxrZHliM1Z3WURvZ1ZHaGxJSEp2YjNRZ2IyWWdZU0JOUlZOSUlFOUdJRlJJUlNCRFNFbE1SRnh1SUNBZ0tpQWdJQ0FnTFNCZ1ZFaFNSVVV1VFdWemFHQTZJRUVnY0hKcGJXbDBhWFpsSUc5bUlIUm9aU0J0WlhOb0lHOW1JSFJvWlNCamFHbHNaRnh1SUNBZ0tpQWdJQ0FnTFNCZ1ZFaFNSVVV1VFdWemFHQTZJRUVnY0hKcGJXbDBhWFpsSUc5bUlIUm9aU0J0WlhOb0lHOW1JSFJvWlNCamFHbHNaQ0FvTWlsY2JpQWdJQ3BjYmlBZ0lDb2dJeU1qSUVFZ2JtOWtaU0IzYVhSb0lHRWdLRzFsYzJnc0lHMTFiSFJwY0d4bElIQnlhVzFwZEdsMlpYTXBJRUpWVkNCMGFHVWdibTlrWlNCcGN5QmhJR0p2Ym1WY2JpQWdJQ3BjYmlBZ0lDb2dMU0JnVkVoU1JVVXVRbTl1WldBNklGUm9aU0J5YjI5MElHOW1JSFJvWlNCdWIyUmxMQ0JoY3lCaElHSnZibVZjYmlBZ0lDb2dJQ0F0SUdCVVNGSkZSUzVIY205MWNHQTZJRlJvWlNCeWIyOTBJRzltSUhSb1pTQnRaWE5vWEc0Z0lDQXFJQ0FnSUNBdElHQlVTRkpGUlM1TlpYTm9ZRG9nUVNCd2NtbHRhWFJwZG1VZ2IyWWdkR2hsSUcxbGMyZ2dLbHh1SUNBZ0tpQWdJQ0FnTFNCZ1ZFaFNSVVV1VFdWemFHQTZJRUVnY0hKcGJXbDBhWFpsSUc5bUlIUm9aU0J0WlhOb0lDZ3lLU0FxWEc0Z0lDQXFYRzRnSUNBcUlDTWpJeUJCSUc1dlpHVWdkMmwwYUNCaElDaHRaWE5vTENCdGRXeDBhWEJzWlNCd2NtbHRhWFJwZG1WektTQkJUa1FnS0dFZ1kyaHBiR1FnZDJsMGFDQmhJRzFsYzJnc0lHMTFiSFJwY0d4bElIQnlhVzFwZEdsMlpYTXBJRUpWVkNCMGFHVWdibTlrWlNCcGN5QmhJR0p2Ym1WY2JpQWdJQ3BjYmlBZ0lDb2dMU0JnVkVoU1JVVXVRbTl1WldBNklGUm9aU0J5YjI5MElHOW1JSFJvWlNCdWIyUmxMQ0JoY3lCaElHSnZibVZjYmlBZ0lDb2dJQ0F0SUdCVVNGSkZSUzVIY205MWNHQTZJRlJvWlNCeWIyOTBJRzltSUhSb1pTQnRaWE5vWEc0Z0lDQXFJQ0FnSUNBdElHQlVTRkpGUlM1TlpYTm9ZRG9nUVNCd2NtbHRhWFJwZG1VZ2IyWWdkR2hsSUcxbGMyZ2dLbHh1SUNBZ0tpQWdJQ0FnTFNCZ1ZFaFNSVVV1VFdWemFHQTZJRUVnY0hKcGJXbDBhWFpsSUc5bUlIUm9aU0J0WlhOb0lDZ3lLU0FxWEc0Z0lDQXFJQ0FnTFNCZ1ZFaFNSVVV1UjNKdmRYQmdPaUJVYUdVZ2NtOXZkQ0J2WmlCaElFMUZVMGdnVDBZZ1ZFaEZJRU5JU1V4RVhHNGdJQ0FxSUNBZ0lDQXRJR0JVU0ZKRlJTNU5aWE5vWURvZ1FTQndjbWx0YVhScGRtVWdiMllnZEdobElHMWxjMmdnYjJZZ2RHaGxJR05vYVd4a1hHNGdJQ0FxSUNBZ0lDQXRJR0JVU0ZKRlJTNU5aWE5vWURvZ1FTQndjbWx0YVhScGRtVWdiMllnZEdobElHMWxjMmdnYjJZZ2RHaGxJR05vYVd4a0lDZ3lLVnh1SUNBZ0tseHVJQ0FnS2lBdUxpNUpJSGRwYkd3Z2RHRnJaU0JoSUhOMGNtRjBaV2Q1SUhSb1lYUWdkSEpoZG1WeWMyVnpJSFJvWlNCeWIyOTBJRzltSUhSb1pTQnViMlJsSUdGdVpDQjBZV3RsSUdacGNuTjBJQ2h3Y21sdGFYUnBkbVZEYjNWdWRDa2diV1Z6YUdWekxseHVJQ0FnS2k5Y2JseHVJQ0F2THlCTllXdGxJSE4xY21VZ2RHaGhkQ0IwYUdVZ2JtOWtaU0JvWVhNZ1lTQnRaWE5vWEc0Z0lHTnZibk4wSUhOamFHVnRZVTV2WkdVZ1BTQnFjMjl1TG01dlpHVnpQeTViYm05a1pVbHVaR1Y0WFR0Y2JpQWdhV1lnS0hOamFHVnRZVTV2WkdVZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGdaWGgwY21GamRGQnlhVzFwZEdsMlpYTkpiblJsY201aGJEb2dRWFIwWlcxd2RDQjBieUIxYzJVZ2JtOWtaWE5iSkh0dWIyUmxTVzVrWlhoOVhTQnZaaUJuYkZSR0lHSjFkQ0IwYUdVZ2JtOWtaU0JrYjJWemJpZDBJR1Y0YVhOMFlDazdYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0JqYjI1emRDQnRaWE5vU1c1a1pYZ2dQU0J6WTJobGJXRk9iMlJsTG0xbGMyZzdYRzRnSUdsbUlDaHRaWE5vU1c1a1pYZ2dQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNCOVhHNWNiaUFnTHk4Z1NHOTNJRzFoYm5rZ2NISnBiV2wwYVhabGN5QjBhR1VnYldWemFDQm9ZWE0vWEc0Z0lHTnZibk4wSUhOamFHVnRZVTFsYzJnZ1BTQnFjMjl1TG0xbGMyaGxjejh1VzIxbGMyaEpibVJsZUYwN1hHNGdJR2xtSUNoelkyaGxiV0ZOWlhOb0lEMDlJRzUxYkd3cElIdGNiaUFnSUNCamIyNXpiMnhsTG5kaGNtNG9ZR1Y0ZEhKaFkzUlFjbWx0YVhScGRtVnpTVzUwWlhKdVlXdzZJRUYwZEdWdGNIUWdkRzhnZFhObElHMWxjMmhsYzFza2UyMWxjMmhKYm1SbGVIMWRJRzltSUdkc1ZFWWdZblYwSUhSb1pTQnRaWE5vSUdSdlpYTnVKM1FnWlhocGMzUmdLVHRjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ2ZWeHVYRzRnSUdOdmJuTjBJSEJ5YVcxcGRHbDJaVU52ZFc1MElEMGdjMk5vWlcxaFRXVnphQzV3Y21sdGFYUnBkbVZ6TG14bGJtZDBhRHRjYmx4dUlDQXZMeUJVY21GMlpYSnpaU0IwYUdVZ2JtOWtaU0JoYm1RZ2RHRnJaU0JtYVhKemRDQW9jSEpwYldsMGFYWmxRMjkxYm5RcElHMWxjMmhsYzF4dUlDQmpiMjV6ZENCd2NtbHRhWFJwZG1Wek9pQlVTRkpGUlM1TlpYTm9XMTBnUFNCYlhUdGNiaUFnYm05a1pTNTBjbUYyWlhKelpTZ29iMkpxWldOMEtTQTlQaUI3WEc0Z0lDQWdhV1lnS0hCeWFXMXBkR2wyWlhNdWJHVnVaM1JvSUR3Z2NISnBiV2wwYVhabFEyOTFiblFwSUh0Y2JpQWdJQ0FnSUdsbUlDZ29iMkpxWldOMElHRnpJR0Z1ZVNrdWFYTk5aWE5vS1NCN1hHNGdJQ0FnSUNBZ0lIQnlhVzFwZEdsMlpYTXVjSFZ6YUNodlltcGxZM1FnWVhNZ1ZFaFNSVVV1VFdWemFDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JseHVJQ0J5WlhSMWNtNGdjSEpwYldsMGFYWmxjenRjYm4xY2JseHVMeW9xWEc0Z0tpQkZlSFJ5WVdOMElIQnlhVzFwZEdsMlpYTWdLQ0JnVkVoU1JVVXVUV1Z6YUZ0ZFlDQXBJRzltSUdFZ2JtOWtaU0JtY205dElHRWdiRzloWkdWa0lFZE1WRVl1WEc0Z0tpQlVhR1VnYldGcGJpQndkWEp3YjNObElHOW1JSFJvYVhNZ1puVnVZM1JwYjI0Z2FYTWdkRzhnWkdsemRHbHVaM1ZwYzJnZ2NISnBiV2wwYVhabGN5QmhibVFnWTJocGJHUnlaVzRnWm5KdmJTQmhJRzV2WkdVZ2RHaGhkQ0JvWVhNZ1ltOTBhQ0J0WlhOb1pYTWdZVzVrSUdOb2FXeGtjbVZ1TGx4dUlDcGNiaUFxSUVsMElIVjBhV3hwZW1WeklIUm9aU0JpWldoaGRtbHZjaUIwYUdGMElFZE1WRVpNYjJGa1pYSWdZV1JrY3lCdFpYTm9JSEJ5YVcxcGRHbDJaWE1nZEc4Z2RHaGxJRzV2WkdVZ2IySnFaV04wSUNnZ1lGUklVa1ZGTGtkeWIzVndZQ0FwSUdacGNuTjBJSFJvWlc0Z1lXUmtjeUJwZEhNZ1kyaHBiR1J5Wlc0dVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUdkc2RHWWdRU0JIVEZSR0lHOWlhbVZqZENCMFlXdGxiaUJtY205dElFZE1WRVpNYjJGa1pYSmNiaUFxSUVCd1lYSmhiU0J1YjJSbFNXNWtaWGdnVkdobElHbHVaR1Y0SUc5bUlIUm9aU0J1YjJSbFhHNGdLaTljYm1WNGNHOXlkQ0JoYzNsdVl5Qm1kVzVqZEdsdmJpQm5iSFJtUlhoMGNtRmpkRkJ5YVcxcGRHbDJaWE5HY205dFRtOWtaU2huYkhSbU9pQkhURlJHTENCdWIyUmxTVzVrWlhnNklHNTFiV0psY2lrNklGQnliMjFwYzJVOFZFaFNSVVV1VFdWemFGdGRJSHdnYm5Wc2JENGdlMXh1SUNCamIyNXpkQ0J1YjJSbE9pQlVTRkpGUlM1UFltcGxZM1F6UkNBOUlHRjNZV2wwSUdkc2RHWXVjR0Z5YzJWeUxtZGxkRVJsY0dWdVpHVnVZM2tvSjI1dlpHVW5MQ0J1YjJSbFNXNWtaWGdwTzF4dUlDQnlaWFIxY200Z1pYaDBjbUZqZEZCeWFXMXBkR2wyWlhOSmJuUmxjbTVoYkNobmJIUm1MQ0J1YjJSbFNXNWtaWGdzSUc1dlpHVXBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFVjRkSEpoWTNRZ2NISnBiV2wwYVhabGN5QW9JR0JVU0ZKRlJTNU5aWE5vVzExZ0lDa2diMllnYm05a1pYTWdabkp2YlNCaElHeHZZV1JsWkNCSFRGUkdMbHh1SUNvZ1UyVmxJSHRBYkdsdWF5Qm5iSFJtUlhoMGNtRmpkRkJ5YVcxcGRHbDJaWE5HY205dFRtOWtaWDBnWm05eUlHMXZjbVVnWkdWMFlXbHNjeTVjYmlBcVhHNGdLaUJKZENCeVpYUjFjbTV6SUdFZ2JXRndJR1p5YjIwZ2JtOWtaU0JwYm1SbGVDQjBieUJsZUhSeVlXTjBhVzl1SUhKbGMzVnNkQzVjYmlBcUlFbG1JR0VnYm05a1pTQmtiMlZ6SUc1dmRDQm9ZWFpsSUdFZ2JXVnphQ3dnZEdobElHVnVkSEo1SUdadmNpQjBhR1VnYm05a1pTQjNhV3hzSUc1dmRDQmlaU0J3ZFhRZ2FXNGdkR2hsSUhKbGRIVnlibWx1WnlCdFlYQXVYRzRnS2x4dUlDb2dRSEJoY21GdElHZHNkR1lnUVNCSFRGUkdJRzlpYW1WamRDQjBZV3RsYmlCbWNtOXRJRWRNVkVaTWIyRmtaWEpjYmlBcUwxeHVaWGh3YjNKMElHRnplVzVqSUdaMWJtTjBhVzl1SUdkc2RHWkZlSFJ5WVdOMFVISnBiV2wwYVhabGMwWnliMjFPYjJSbGN5aG5iSFJtT2lCSFRGUkdLVG9nVUhKdmJXbHpaVHhOWVhBOGJuVnRZbVZ5TENCVVNGSkZSUzVOWlhOb1cxMCtQaUI3WEc0Z0lHTnZibk4wSUc1dlpHVnpPaUJVU0ZKRlJTNVBZbXBsWTNRelJGdGRJRDBnWVhkaGFYUWdaMngwWmk1d1lYSnpaWEl1WjJWMFJHVndaVzVrWlc1amFXVnpLQ2R1YjJSbEp5azdYRzRnSUdOdmJuTjBJRzFoY0NBOUlHNWxkeUJOWVhBOGJuVnRZbVZ5TENCVVNGSkZSUzVOWlhOb1cxMCtLQ2s3WEc1Y2JpQWdibTlrWlhNdVptOXlSV0ZqYUNnb2JtOWtaU3dnYVc1a1pYZ3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnlaWE4xYkhRZ1BTQmxlSFJ5WVdOMFVISnBiV2wwYVhabGMwbHVkR1Z5Ym1Gc0tHZHNkR1lzSUdsdVpHVjRMQ0J1YjJSbEtUdGNiaUFnSUNCcFppQW9jbVZ6ZFd4MElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lHMWhjQzV6WlhRb2FXNWtaWGdzSUhKbGMzVnNkQ2s3WEc0Z0lDQWdmVnh1SUNCOUtUdGNibHh1SUNCeVpYUjFjbTRnYldGd08xeHVmVnh1SWl3aWFXMXdiM0owSUNvZ1lYTWdWRWhTUlVVZ1puSnZiU0FuZEdoeVpXVW5PMXh1YVcxd2IzSjBJSHNnUjB4VVJsQmhjbk5sY2lCOUlHWnliMjBnSjNSb2NtVmxMMlY0WVcxd2JHVnpMMnB6YlM5c2IyRmtaWEp6TDBkTVZFWk1iMkZrWlhJdWFuTW5PMXh1WEc0dktpcGNiaUFxSUVkbGRDQmhJRzFoZEdWeWFXRnNJR1JsWm1sdWFYUnBiMjRnYVc1a1pYZ2diMllnWjJ4VVJpQm1jbTl0SUdGemMyOWphV0YwWldRZ2JXRjBaWEpwWVd3dVhHNGdLaUJKZENkeklHSmhjMmxqWVd4c2VTQmhJR052YldGMElHTnZaR1VnWW1WMGQyVmxiaUJVYUhKbFpTNXFjeUJ5TVRNeklHOXlJR0ZpYjNabElHRnVaQ0J3Y21WMmFXOTFjeUIyWlhKemFXOXVjeTVjYmlBcUlFQndZWEpoYlNCd1lYSnpaWElnUjB4VVJsQmhjbk5sY2x4dUlDb2dRSEJoY21GdElHMWhkR1Z5YVdGc0lFRWdiV0YwWlhKcFlXd2diMllnWjJ4MFpseHVJQ29nUUhKbGRIVnlibk1nVFdGMFpYSnBZV3dnWkdWbWFXNXBkR2x2YmlCcGJtUmxlQ0J2WmlCbmJGUkdYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCbmJIUm1SMlYwUVhOemIyTnBZWFJsWkUxaGRHVnlhV0ZzU1c1a1pYZ29jR0Z5YzJWeU9pQkhURlJHVUdGeWMyVnlMQ0J0WVhSbGNtbGhiRG9nVkVoU1JVVXVUV0YwWlhKcFlXd3BPaUJ1ZFcxaVpYSWdmQ0J1ZFd4c0lIdGNiaUFnWTI5dWMzUWdkR2h5WldWU1pYWnBjMmx2YmlBOUlIQmhjbk5sU1c1MEtGUklVa1ZGTGxKRlZrbFRTVTlPTENBeE1DazdYRzVjYmlBZ2JHVjBJR2x1WkdWNE9pQnVkVzFpWlhJZ2ZDQnVkV3hzSUQwZ2JuVnNiRHRjYmx4dUlDQnBaaUFvZEdoeVpXVlNaWFpwYzJsdmJpQStQU0F4TXpNcElIdGNiaUFnSUNCcGJtUmxlQ0E5SUhCaGNuTmxjaTVoYzNOdlkybGhkR2x2Ym5NdVoyVjBLRzFoZEdWeWFXRnNLVDh1YldGMFpYSnBZV3h6SUQ4L0lHNTFiR3c3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnTHk4Z1EwOU5VRUZVT2lCemRISjFZM1IxY21VZ2IyWWdZSEJoY25ObGNpNWhjM052WTJsaGRHbHZibk5nSUdoaGN5QmlaV1Z1SUdOb1lXNW5aV1FnUUNCeU1UTXpYRzRnSUNBZ0x5OGdVMlZsT2lCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmJYSmtiMjlpTDNSb2NtVmxMbXB6TDNCMWJHd3ZNakUzTXpkY2JpQWdJQ0F2THlCU1pXWTZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzkwYUhKbFpTMTBlWEJsY3k5MGFISmxaUzEwY3kxMGVYQmxjeTlqYjIxdGFYUXZOVEkwTmpZM05tVTBOemxpTmpGaE9XWm1NbVJpTnpGa1pqUXhNVGxtTm1ZeE5EWXlOVGd3WkZ4dUlDQWdJSFI1Y0dVZ1IweFVSbEpsWm1WeVpXNWpaVkJ5WlRFek15QTlJSHRjYmlBZ0lDQWdJSFI1Y0dVNklDZHRZWFJsY21saGJITW5JSHdnSjI1dlpHVnpKeUI4SUNkMFpYaDBkWEpsY3ljZ2ZDQW5iV1Z6YUdWekp6dGNiaUFnSUNBZ0lHbHVaR1Y0T2lCdWRXMWlaWEk3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSFI1Y0dVZ1IweFVSa0Z6YzI5amFXRjBhVzl1YzFCeVpURXpNeUE5SUUxaGNEeFVTRkpGUlM1UFltcGxZM1F6UkNCOElGUklVa1ZGTGsxaGRHVnlhV0ZzSUh3Z1ZFaFNSVVV1VkdWNGRIVnlaU3dnUjB4VVJsSmxabVZ5Wlc1alpWQnlaVEV6TXo0N1hHNWNiaUFnSUNCamIyNXpkQ0JoYzNOdlkybGhkR2x2Ym5NZ1BTQndZWEp6WlhJdVlYTnpiMk5wWVhScGIyNXpJR0Z6SUVkTVZFWkJjM052WTJsaGRHbHZibk5RY21VeE16TTdYRzVjYmlBZ0lDQmpiMjV6ZENCeVpXWmxjbVZ1WTJVZ1BTQmhjM052WTJsaGRHbHZibk11WjJWMEtHMWhkR1Z5YVdGc0tUdGNibHh1SUNBZ0lHbG1JQ2h5WldabGNtVnVZMlUvTG5SNWNHVWdQVDA5SUNkdFlYUmxjbWxoYkhNbktTQjdYRzRnSUNBZ0lDQnBibVJsZUNBOUlISmxabVZ5Wlc1alpTNXBibVJsZUR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYVc1a1pYZzdYRzU5WEc0aUxDSXZLaUJsYzJ4cGJuUXRaR2x6WVdKc1pTQkFkSGx3WlhOamNtbHdkQzFsYzJ4cGJuUXZibUZ0YVc1bkxXTnZiblpsYm5ScGIyNGdLaTljYmx4dVpYaHdiM0owSUdOdmJuTjBJRlpTVFVWNGNISmxjM05wYjI1UWNtVnpaWFJPWVcxbElEMGdlMXh1SUNCQllUb2dKMkZoSnl4Y2JpQWdTV2c2SUNkcGFDY3NYRzRnSUU5MU9pQW5iM1VuTEZ4dUlDQkZaVG9nSjJWbEp5eGNiaUFnVDJnNklDZHZhQ2NzWEc0Z0lFSnNhVzVyT2lBbllteHBibXNuTEZ4dUlDQklZWEJ3ZVRvZ0oyaGhjSEI1Snl4Y2JpQWdRVzVuY25rNklDZGhibWR5ZVNjc1hHNGdJRk5oWkRvZ0ozTmhaQ2NzWEc0Z0lGSmxiR0Y0WldRNklDZHlaV3hoZUdWa0p5eGNiaUFnVEc5dmExVndPaUFuYkc5dmExVndKeXhjYmlBZ1UzVnljSEpwYzJWa09pQW5jM1Z5Y0hKcGMyVmtKeXhjYmlBZ1RHOXZhMFJ2ZDI0NklDZHNiMjlyUkc5M2JpY3NYRzRnSUV4dmIydE1aV1owT2lBbmJHOXZhMHhsWm5RbkxGeHVJQ0JNYjI5clVtbG5hSFE2SUNkc2IyOXJVbWxuYUhRbkxGeHVJQ0JDYkdsdWEweGxablE2SUNkaWJHbHVhMHhsWm5RbkxGeHVJQ0JDYkdsdWExSnBaMmgwT2lBbllteHBibXRTYVdkb2RDY3NYRzRnSUU1bGRYUnlZV3c2SUNkdVpYVjBjbUZzSnl4Y2JuMGdZWE1nWTI5dWMzUTdYRzVjYm1WNGNHOXlkQ0IwZVhCbElGWlNUVVY0Y0hKbGMzTnBiMjVRY21WelpYUk9ZVzFsSUQwZ2RIbHdaVzltSUZaU1RVVjRjSEpsYzNOcGIyNVFjbVZ6WlhST1lXMWxXMnRsZVc5bUlIUjVjR1Z2WmlCV1VrMUZlSEJ5WlhOemFXOXVVSEpsYzJWMFRtRnRaVjA3WEc0aUxDSXZLaXBjYmlBcUlFTnNZVzF3SUhSb1pTQnBibkIxZENCMllXeDFaU0IzYVhSb2FXNGdXekF1TUNBdElERXVNRjB1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSFpoYkhWbElGUm9aU0JwYm5CMWRDQjJZV3gxWlZ4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjMkYwZFhKaGRHVW9kbUZzZFdVNklHNTFiV0psY2lrNklHNTFiV0psY2lCN1hHNGdJSEpsZEhWeWJpQk5ZWFJvTG0xaGVDaE5ZWFJvTG0xcGJpaDJZV3gxWlN3Z01TNHdLU3dnTUM0d0tUdGNibjFjYmlJc0ltbHRjRzl5ZENCN0lGWlNUVVY0Y0hKbGMzTnBiMjVRY21WelpYUk9ZVzFsSUgwZ1puSnZiU0FuTGk5V1VrMUZlSEJ5WlhOemFXOXVVSEpsYzJWMFRtRnRaU2M3WEc1cGJYQnZjblFnZXlCellYUjFjbUYwWlNCOUlHWnliMjBnSnk0dUwzVjBhV3h6TDNOaGRIVnlZWFJsSnp0Y2JtbHRjRzl5ZENCMGVYQmxJSHNnVmxKTlJYaHdjbVZ6YzJsdmJpQjlJR1p5YjIwZ0p5NHZWbEpOUlhod2NtVnpjMmx2YmljN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCV1VrMUZlSEJ5WlhOemFXOXVUV0Z1WVdkbGNpQjdYRzRnSUM4cUtseHVJQ0FnS2lCQklITmxkQ0J2WmlCdVlXMWxJRzl5SUhCeVpYTmxkQ0J1WVcxbElHOW1JR1Y0Y0hKbGMzTnBiMjV6SUhSb1lYUWdkMmxzYkNCaVpTQnZkbVZ5Y21sa1pHVnVJR0o1SUh0QWJHbHVheUJXVWsxRmVIQnlaWE56YVc5dUxtOTJaWEp5YVdSbFFteHBibXQ5TGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUdKc2FXNXJSWGh3Y21WemMybHZiazVoYldWeklEMGdXeWRpYkdsdWF5Y3NJQ2RpYkdsdWEweGxablFuTENBbllteHBibXRTYVdkb2RDZGRPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJJSE5sZENCdlppQnVZVzFsSUc5eUlIQnlaWE5sZENCdVlXMWxJRzltSUdWNGNISmxjM05wYjI1eklIUm9ZWFFnZDJsc2JDQmlaU0J2ZG1WeWNtbGtaR1Z1SUdKNUlIdEFiR2x1YXlCV1VrMUZlSEJ5WlhOemFXOXVMbTkyWlhKeWFXUmxURzl2YTBGMGZTNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QnNiMjlyUVhSRmVIQnlaWE56YVc5dVRtRnRaWE1nUFNCYkoyeHZiMnRNWldaMEp5d2dKMnh2YjJ0U2FXZG9kQ2NzSUNkc2IyOXJWWEFuTENBbmJHOXZhMFJ2ZDI0blhUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1FTQnpaWFFnYjJZZ2JtRnRaU0J2Y2lCd2NtVnpaWFFnYm1GdFpTQnZaaUJsZUhCeVpYTnphVzl1Y3lCMGFHRjBJSGRwYkd3Z1ltVWdiM1psY25KcFpHUmxiaUJpZVNCN1FHeHBibXNnVmxKTlJYaHdjbVZ6YzJsdmJpNXZkbVZ5Y21sa1pVMXZkWFJvZlM1Y2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCdGIzVjBhRVY0Y0hKbGMzTnBiMjVPWVcxbGN5QTlJRnNuWVdFbkxDQW5aV1VuTENBbmFXZ25MQ0FuYjJnbkxDQW5iM1VuWFR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUVNCelpYUWdiMllnZTBCc2FXNXJJRlpTVFVWNGNISmxjM05wYjI1OUxseHVJQ0FnS2lCWGFHVnVJSGx2ZFNCM1lXNTBJSFJ2SUhKbFoybHpkR1Z5SUdWNGNISmxjM05wYjI1ekxDQjFjMlVnZTBCc2FXNXJJSEpsWjJsemRHVnlSWGh3Y21WemMybHZibjFjYmlBZ0lDb3ZYRzRnSUhCeWFYWmhkR1VnWDJWNGNISmxjM05wYjI1ek9pQldVazFGZUhCeVpYTnphVzl1VzEwZ1BTQmJYVHRjYmlBZ2NIVmliR2xqSUdkbGRDQmxlSEJ5WlhOemFXOXVjeWdwT2lCV1VrMUZlSEJ5WlhOemFXOXVXMTBnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5bGVIQnlaWE56YVc5dWN5NWpiMjVqWVhRb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCSUcxaGNDQm1jbTl0SUc1aGJXVWdkRzhnWlhod2NtVnpjMmx2Ymk1Y2JpQWdJQ292WEc0Z0lIQnlhWFpoZEdVZ1gyVjRjSEpsYzNOcGIyNU5ZWEE2SUhzZ1cyNWhiV1U2SUhOMGNtbHVaMTA2SUZaU1RVVjRjSEpsYzNOcGIyNGdmU0E5SUh0OU8xeHVJQ0J3ZFdKc2FXTWdaMlYwSUdWNGNISmxjM05wYjI1TllYQW9LVG9nZXlCYmJtRnRaVG9nYzNSeWFXNW5YVG9nVmxKTlJYaHdjbVZ6YzJsdmJpQjlJSHRjYmlBZ0lDQnlaWFIxY200Z1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z2RHaHBjeTVmWlhod2NtVnpjMmx2YmsxaGNDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVNCdFlYQWdabkp2YlNCdVlXMWxJSFJ2SUdWNGNISmxjM05wYjI0c0lHSjFkQ0JsZUdOc2RXUnBibWNnWTNWemRHOXRJR1Y0Y0hKbGMzTnBiMjV6TGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUdkbGRDQndjbVZ6WlhSRmVIQnlaWE56YVc5dVRXRndLQ2s2SUhzZ1cyNWhiV1VnYVc0Z1ZsSk5SWGh3Y21WemMybHZibEJ5WlhObGRFNWhiV1ZkUHpvZ1ZsSk5SWGh3Y21WemMybHZiaUI5SUh0Y2JpQWdJQ0JqYjI1emRDQnlaWE4xYkhRNklIc2dXMjVoYldVZ2FXNGdWbEpOUlhod2NtVnpjMmx2YmxCeVpYTmxkRTVoYldWZFB6b2dWbEpOUlhod2NtVnpjMmx2YmlCOUlEMGdlMzA3WEc1Y2JpQWdJQ0JqYjI1emRDQndjbVZ6WlhST1lXMWxVMlYwSUQwZ2JtVjNJRk5sZER4emRISnBibWMrS0U5aWFtVmpkQzUyWVd4MVpYTW9WbEpOUlhod2NtVnpjMmx2YmxCeVpYTmxkRTVoYldVcEtUdGNibHh1SUNBZ0lFOWlhbVZqZEM1bGJuUnlhV1Z6S0hSb2FYTXVYMlY0Y0hKbGMzTnBiMjVOWVhBcExtWnZja1ZoWTJnb0tGdHVZVzFsTENCbGVIQnlaWE56YVc5dVhTa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tIQnlaWE5sZEU1aGJXVlRaWFF1YUdGektHNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lISmxjM1ZzZEZ0dVlXMWxJR0Z6SUZaU1RVVjRjSEpsYzNOcGIyNVFjbVZ6WlhST1lXMWxYU0E5SUdWNGNISmxjM05wYjI0N1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVFZ2JXRndJR1p5YjIwZ2JtRnRaU0IwYnlCbGVIQnlaWE56YVc5dUxDQmlkWFFnWlhoamJIVmthVzVuSUhCeVpYTmxkQ0JsZUhCeVpYTnphVzl1Y3k1Y2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCblpYUWdZM1Z6ZEc5dFJYaHdjbVZ6YzJsdmJrMWhjQ2dwT2lCN0lGdHVZVzFsT2lCemRISnBibWRkT2lCV1VrMUZlSEJ5WlhOemFXOXVJSDBnZTF4dUlDQWdJR052Ym5OMElISmxjM1ZzZERvZ2V5QmJibUZ0WlRvZ2MzUnlhVzVuWFRvZ1ZsSk5SWGh3Y21WemMybHZiaUI5SUQwZ2UzMDdYRzVjYmlBZ0lDQmpiMjV6ZENCd2NtVnpaWFJPWVcxbFUyVjBJRDBnYm1WM0lGTmxkRHh6ZEhKcGJtYytLRTlpYW1WamRDNTJZV3gxWlhNb1ZsSk5SWGh3Y21WemMybHZibEJ5WlhObGRFNWhiV1VwS1R0Y2JseHVJQ0FnSUU5aWFtVmpkQzVsYm5SeWFXVnpLSFJvYVhNdVgyVjRjSEpsYzNOcGIyNU5ZWEFwTG1admNrVmhZMmdvS0Z0dVlXMWxMQ0JsZUhCeVpYTnphVzl1WFNrZ1BUNGdlMXh1SUNBZ0lDQWdhV1lnS0NGd2NtVnpaWFJPWVcxbFUyVjBMbWhoY3lodVlXMWxLU2tnZTF4dUlDQWdJQ0FnSUNCeVpYTjFiSFJiYm1GdFpWMGdQU0JsZUhCeVpYTnphVzl1TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEY21WaGRHVWdZU0J1WlhjZ2UwQnNhVzVySUZaU1RVVjRjSEpsYzNOcGIyNU5ZVzVoWjJWeWZTNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0F2THlCa2J5QnViM1JvYVc1blhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMjl3ZVNCMGFHVWdaMmwyWlc0Z2UwQnNhVzVySUZaU1RVVjRjSEpsYzNOcGIyNU5ZVzVoWjJWeWZTQnBiblJ2SUhSb2FYTWdiMjVsTGx4dUlDQWdLaUJBY0dGeVlXMGdjMjkxY21ObElGUm9aU0I3UUd4cGJtc2dWbEpOUlhod2NtVnpjMmx2YmsxaGJtRm5aWEo5SUhsdmRTQjNZVzUwSUhSdklHTnZjSGxjYmlBZ0lDb2dRSEpsZEhWeWJuTWdkR2hwYzF4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUdOdmNIa29jMjkxY21ObE9pQldVazFGZUhCeVpYTnphVzl1VFdGdVlXZGxjaWs2SUhSb2FYTWdlMXh1SUNBZ0lDOHZJR1pwY25OMElIVnVjbVZuYVhOMFpYSWdZV3hzSUhSb1pTQmxlSEJ5WlhOemFXOXVJR2wwSUdoaGMxeHVJQ0FnSUdOdmJuTjBJR1Y0Y0hKbGMzTnBiMjV6SUQwZ2RHaHBjeTVmWlhod2NtVnpjMmx2Ym5NdVkyOXVZMkYwS0NrN1hHNGdJQ0FnWlhod2NtVnpjMmx2Ym5NdVptOXlSV0ZqYUNnb1pYaHdjbVZ6YzJsdmJpa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGN5NTFibkpsWjJsemRHVnlSWGh3Y21WemMybHZiaWhsZUhCeVpYTnphVzl1S1R0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUM4dklIUm9aVzRnY21WbmFYTjBaWElnWVd4c0lIUm9aU0JsZUhCeVpYTnphVzl1SUc5bUlIUm9aU0J6YjNWeVkyVmNiaUFnSUNCemIzVnlZMlV1WDJWNGNISmxjM05wYjI1ekxtWnZja1ZoWTJnb0tHVjRjSEpsYzNOcGIyNHBJRDArSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjbVZuYVhOMFpYSkZlSEJ5WlhOemFXOXVLR1Y0Y0hKbGMzTnBiMjRwTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnTHk4Z1kyOXdlU0J5WlcxaGFXNXBibWNnYldWdFltVnljMXh1SUNBZ0lIUm9hWE11WW14cGJtdEZlSEJ5WlhOemFXOXVUbUZ0WlhNZ1BTQnpiM1Z5WTJVdVlteHBibXRGZUhCeVpYTnphVzl1VG1GdFpYTXVZMjl1WTJGMEtDazdYRzRnSUNBZ2RHaHBjeTVzYjI5clFYUkZlSEJ5WlhOemFXOXVUbUZ0WlhNZ1BTQnpiM1Z5WTJVdWJHOXZhMEYwUlhod2NtVnpjMmx2Yms1aGJXVnpMbU52Ym1OaGRDZ3BPMXh1SUNBZ0lIUm9hWE11Ylc5MWRHaEZlSEJ5WlhOemFXOXVUbUZ0WlhNZ1BTQnpiM1Z5WTJVdWJXOTFkR2hGZUhCeVpYTnphVzl1VG1GdFpYTXVZMjl1WTJGMEtDazdYRzVjYmlBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pYUjFjbTV6SUdFZ1kyeHZibVVnYjJZZ2RHaHBjeUI3UUd4cGJtc2dWbEpOUlhod2NtVnpjMmx2YmsxaGJtRm5aWEo5TGx4dUlDQWdLaUJBY21WMGRYSnVjeUJEYjNCcFpXUWdlMEJzYVc1cklGWlNUVVY0Y0hKbGMzTnBiMjVOWVc1aFoyVnlmVnh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJR05zYjI1bEtDazZJRlpTVFVWNGNISmxjM05wYjI1TllXNWhaMlZ5SUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZaU1RVVjRjSEpsYzNOcGIyNU5ZVzVoWjJWeUtDa3VZMjl3ZVNoMGFHbHpLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pYUjFjbTRnWVNCeVpXZHBjM1JsY21Wa0lHVjRjSEpsYzNOcGIyNHVYRzRnSUNBcUlFbG1JR2wwSUdOaGJtNXZkQ0JtYVc1a0lHRnVJR1Y0Y0hKbGMzTnBiMjRzSUdsMElIZHBiR3dnY21WMGRYSnVJR0J1ZFd4c1lDQnBibk4wWldGa0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdibUZ0WlNCT1lXMWxJRzl5SUhCeVpYTmxkQ0J1WVcxbElHOW1JSFJvWlNCbGVIQnlaWE56YVc5dVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ1oyVjBSWGh3Y21WemMybHZiaWh1WVcxbE9pQldVazFGZUhCeVpYTnphVzl1VUhKbGMyVjBUbUZ0WlNCOElITjBjbWx1WnlrNklGWlNUVVY0Y0hKbGMzTnBiMjRnZkNCdWRXeHNJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWlhod2NtVnpjMmx2YmsxaGNGdHVZVzFsWFNBL1B5QnVkV3hzTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxaMmx6ZEdWeUlHRnVJR1Y0Y0hKbGMzTnBiMjR1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCbGVIQnlaWE56YVc5dUlIdEFiR2x1YXlCV1VrMUZlSEJ5WlhOemFXOXVmU0IwYUdGMElHUmxjMk55YVdKbGN5QjBhR1VnWlhod2NtVnpjMmx2Ymx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUhKbFoybHpkR1Z5Ulhod2NtVnpjMmx2YmlobGVIQnlaWE56YVc5dU9pQldVazFGZUhCeVpYTnphVzl1S1RvZ2RtOXBaQ0I3WEc0Z0lDQWdkR2hwY3k1ZlpYaHdjbVZ6YzJsdmJuTXVjSFZ6YUNobGVIQnlaWE56YVc5dUtUdGNiaUFnSUNCMGFHbHpMbDlsZUhCeVpYTnphVzl1VFdGd1cyVjRjSEpsYzNOcGIyNHVaWGh3Y21WemMybHZiazVoYldWZElEMGdaWGh3Y21WemMybHZianRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVmJuSmxaMmx6ZEdWeUlHRnVJR1Y0Y0hKbGMzTnBiMjR1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCbGVIQnlaWE56YVc5dUlGUm9aU0JsZUhCeVpYTnphVzl1SUhsdmRTQjNZVzUwSUhSdklIVnVjbVZuYVhOMFpYSmNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QjFibkpsWjJsemRHVnlSWGh3Y21WemMybHZiaWhsZUhCeVpYTnphVzl1T2lCV1VrMUZlSEJ5WlhOemFXOXVLVG9nZG05cFpDQjdYRzRnSUNBZ1kyOXVjM1FnYVc1a1pYZ2dQU0IwYUdsekxsOWxlSEJ5WlhOemFXOXVjeTVwYm1SbGVFOW1LR1Y0Y0hKbGMzTnBiMjRwTzF4dUlDQWdJR2xtSUNocGJtUmxlQ0E5UFQwZ0xURXBJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnblZsSk5SWGh3Y21WemMybHZiazFoYm1GblpYSTZJRlJvWlNCemNHVmphV1pwWldRZ1pYaHdjbVZ6YzJsdmJuTWdhWE1nYm05MElISmxaMmx6ZEdWeVpXUW5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TGw5bGVIQnlaWE56YVc5dWN5NXpjR3hwWTJVb2FXNWtaWGdzSURFcE8xeHVJQ0FnSUdSbGJHVjBaU0IwYUdsekxsOWxlSEJ5WlhOemFXOXVUV0Z3VzJWNGNISmxjM05wYjI0dVpYaHdjbVZ6YzJsdmJrNWhiV1ZkTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFZGxkQ0IwYUdVZ1kzVnljbVZ1ZENCM1pXbG5hSFFnYjJZZ2RHaGxJSE53WldOcFptbGxaQ0JsZUhCeVpYTnphVzl1TGx4dUlDQWdLaUJKWmlCcGRDQmtiMlZ6YmlkMElHaGhkbVVnWVc0Z1pYaHdjbVZ6YzJsdmJpQnZaaUJuYVhabGJpQnVZVzFsTENCcGRDQjNhV3hzSUhKbGRIVnliaUJnYm5Wc2JHQWdhVzV6ZEdWaFpDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJRzVoYldVZ1RtRnRaU0J2WmlCMGFHVWdaWGh3Y21WemMybHZibHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJR2RsZEZaaGJIVmxLRzVoYldVNklGWlNUVVY0Y0hKbGMzTnBiMjVRY21WelpYUk9ZVzFsSUh3Z2MzUnlhVzVuS1RvZ2JuVnRZbVZ5SUh3Z2JuVnNiQ0I3WEc0Z0lDQWdZMjl1YzNRZ1pYaHdjbVZ6YzJsdmJpQTlJSFJvYVhNdVoyVjBSWGh3Y21WemMybHZiaWh1WVcxbEtUdGNiaUFnSUNCeVpYUjFjbTRnWlhod2NtVnpjMmx2Ymo4dWQyVnBaMmgwSUQ4L0lHNTFiR3c3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVjBJR0VnZDJWcFoyaDBJSFJ2SUhSb1pTQnpjR1ZqYVdacFpXUWdaWGh3Y21WemMybHZiaTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUc1aGJXVWdUbUZ0WlNCdlppQjBhR1VnWlhod2NtVnpjMmx2Ymx4dUlDQWdLaUJBY0dGeVlXMGdkMlZwWjJoMElGZGxhV2RvZEZ4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUhObGRGWmhiSFZsS0c1aGJXVTZJRlpTVFVWNGNISmxjM05wYjI1UWNtVnpaWFJPWVcxbElId2djM1J5YVc1bkxDQjNaV2xuYUhRNklHNTFiV0psY2lrNklIWnZhV1FnZTF4dUlDQWdJR052Ym5OMElHVjRjSEpsYzNOcGIyNGdQU0IwYUdsekxtZGxkRVY0Y0hKbGMzTnBiMjRvYm1GdFpTazdYRzRnSUNBZ2FXWWdLR1Y0Y0hKbGMzTnBiMjRwSUh0Y2JpQWdJQ0FnSUdWNGNISmxjM05wYjI0dWQyVnBaMmgwSUQwZ2MyRjBkWEpoZEdVb2QyVnBaMmgwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1IyVjBJR0VnZEhKaFkyc2dibUZ0WlNCdlppQnpjR1ZqYVdacFpXUWdaWGh3Y21WemMybHZiaTVjYmlBZ0lDb2dWR2hwY3lCMGNtRmpheUJ1WVcxbElHbHpJRzVsWldSbFpDQjBieUJ0WVc1cGNIVnNZWFJsSUdsMGN5QmxlSEJ5WlhOemFXOXVJSFpwWVNCclpYbG1jbUZ0WlNCaGJtbHRZWFJwYjI1ekxseHVJQ0FnS2x4dUlDQWdLaUJBWlhoaGJYQnNaU0JOWVc1cGNIVnNZWFJsSUdGdUlHVjRjSEpsYzNOcGIyNGdkWE5wYm1jZ2EyVjVabkpoYldVZ1lXNXBiV0YwYVc5dVhHNGdJQ0FxSUdCZ1lHcHpYRzRnSUNBcUlHTnZibk4wSUhSeVlXTnJUbUZ0WlNBOUlIWnliUzVsZUhCeVpYTnphVzl1VFdGdVlXZGxjaTVuWlhSRmVIQnlaWE56YVc5dVZISmhZMnRPWVcxbEtDQW5ZbXhwYm1zbklDazdYRzRnSUNBcUlHTnZibk4wSUhSeVlXTnJJRDBnYm1WM0lGUklVa1ZGTGs1MWJXSmxja3RsZVdaeVlXMWxWSEpoWTJzb1hHNGdJQ0FxSUNBZ2JtRnRaU3hjYmlBZ0lDb2dJQ0JiSURBdU1Dd2dNQzQxTENBeExqQWdYU3dnTHk4Z2RHbHRaWE5jYmlBZ0lDb2dJQ0JiSURBdU1Dd2dNUzR3TENBd0xqQWdYU0F2THlCMllXeDFaWE5jYmlBZ0lDb2dLVHRjYmlBZ0lDcGNiaUFnSUNvZ1kyOXVjM1FnWTJ4cGNDQTlJRzVsZHlCVVNGSkZSUzVCYm1sdFlYUnBiMjVEYkdsd0tGeHVJQ0FnS2lBZ0lDZGliR2x1YXljc0lDOHZJRzVoYldWY2JpQWdJQ29nSUNBeExqQXNJQzh2SUdSMWNtRjBhVzl1WEc0Z0lDQXFJQ0FnV3lCMGNtRmpheUJkSUM4dklIUnlZV05yYzF4dUlDQWdLaUFwTzF4dUlDQWdLbHh1SUNBZ0tpQmpiMjV6ZENCdGFYaGxjaUE5SUc1bGR5QlVTRkpGUlM1QmJtbHRZWFJwYjI1TmFYaGxjaWdnZG5KdExuTmpaVzVsSUNrN1hHNGdJQ0FxSUdOdmJuTjBJR0ZqZEdsdmJpQTlJRzFwZUdWeUxtTnNhWEJCWTNScGIyNG9JR05zYVhBZ0tUdGNiaUFnSUNvZ1lXTjBhVzl1TG5Cc1lYa29LVHRjYmlBZ0lDb2dZR0JnWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCdVlXMWxJRTVoYldVZ2IyWWdkR2hsSUdWNGNISmxjM05wYjI1Y2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCblpYUkZlSEJ5WlhOemFXOXVWSEpoWTJ0T1lXMWxLRzVoYldVNklGWlNUVVY0Y0hKbGMzTnBiMjVRY21WelpYUk9ZVzFsSUh3Z2MzUnlhVzVuS1RvZ2MzUnlhVzVuSUh3Z2JuVnNiQ0I3WEc0Z0lDQWdZMjl1YzNRZ1pYaHdjbVZ6YzJsdmJpQTlJSFJvYVhNdVoyVjBSWGh3Y21WemMybHZiaWh1WVcxbEtUdGNiaUFnSUNCeVpYUjFjbTRnWlhod2NtVnpjMmx2YmlBL0lHQWtlMlY0Y0hKbGMzTnBiMjR1Ym1GdFpYMHVkMlZwWjJoMFlDQTZJRzUxYkd3N1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWWEJrWVhSbElHVjJaWEo1SUdWNGNISmxjM05wYjI1ekxseHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklIVndaR0YwWlNncE9pQjJiMmxrSUh0Y2JpQWdJQ0F2THlCelpXVWdhRzkzSUcxMVkyZ2dkMlVnYzJodmRXeGtJRzkyWlhKeWFXUmxJR05sY25SaGFXNGdaWGh3Y21WemMybHZibk5jYmlBZ0lDQmpiMjV6ZENCM1pXbG5hSFJOZFd4MGFYQnNhV1Z5Y3lBOUlIUm9hWE11WDJOaGJHTjFiR0YwWlZkbGFXZG9kRTExYkhScGNHeHBaWEp6S0NrN1hHNWNiaUFnSUNBdkx5QnlaWE5sZENCbGVIQnlaWE56YVc5dUlHSnBibVJ6SUdacGNuTjBYRzRnSUNBZ2RHaHBjeTVmWlhod2NtVnpjMmx2Ym5NdVptOXlSV0ZqYUNnb1pYaHdjbVZ6YzJsdmJpa2dQVDRnZTF4dUlDQWdJQ0FnWlhod2NtVnpjMmx2Ymk1amJHVmhja0Z3Y0d4cFpXUlhaV2xuYUhRb0tUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lDOHZJSFJvWlc0Z1lYQndiSGtnWW1sdVpITmNiaUFnSUNCMGFHbHpMbDlsZUhCeVpYTnphVzl1Y3k1bWIzSkZZV05vS0NobGVIQnlaWE56YVc5dUtTQTlQaUI3WEc0Z0lDQWdJQ0JzWlhRZ2JYVnNkR2x3YkdsbGNpQTlJREV1TUR0Y2JpQWdJQ0FnSUdOdmJuTjBJRzVoYldVZ1BTQmxlSEJ5WlhOemFXOXVMbVY0Y0hKbGMzTnBiMjVPWVcxbE8xeHVYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWliR2x1YTBWNGNISmxjM05wYjI1T1lXMWxjeTVwYm1SbGVFOW1LRzVoYldVcElDRTlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ0lDQnRkV3gwYVhCc2FXVnlJQ285SUhkbGFXZG9kRTExYkhScGNHeHBaWEp6TG1Kc2FXNXJPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTVzYjI5clFYUkZlSEJ5WlhOemFXOXVUbUZ0WlhNdWFXNWtaWGhQWmlodVlXMWxLU0FoUFQwZ0xURXBJSHRjYmlBZ0lDQWdJQ0FnYlhWc2RHbHdiR2xsY2lBcVBTQjNaV2xuYUhSTmRXeDBhWEJzYVdWeWN5NXNiMjlyUVhRN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtMXZkWFJvUlhod2NtVnpjMmx2Yms1aGJXVnpMbWx1WkdWNFQyWW9ibUZ0WlNrZ0lUMDlJQzB4S1NCN1hHNGdJQ0FnSUNBZ0lHMTFiSFJwY0d4cFpYSWdLajBnZDJWcFoyaDBUWFZzZEdsd2JHbGxjbk11Ylc5MWRHZzdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR1Y0Y0hKbGMzTnBiMjR1WVhCd2JIbFhaV2xuYUhRb2V5QnRkV3gwYVhCc2FXVnlJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTmhiR04xYkdGMFpTQnpkVzBnYjJZZ2IzWmxjbkpwWkdVZ1lXMXZkVzUwY3lCMGJ5QnpaV1VnYUc5M0lHMTFZMmdnZDJVZ2MyaHZkV3hrSUcxMWJIUnBjR3g1SUhkbGFXZG9kSE1nYjJZZ1kyVnlkR0ZwYmlCbGVIQnlaWE56YVc5dWN5NWNiaUFnSUNvdlhHNGdJSEJ5YVhaaGRHVWdYMk5oYkdOMWJHRjBaVmRsYVdkb2RFMTFiSFJwY0d4cFpYSnpLQ2s2SUh0Y2JpQWdJQ0JpYkdsdWF6b2diblZ0WW1WeU8xeHVJQ0FnSUd4dmIydEJkRG9nYm5WdFltVnlPMXh1SUNBZ0lHMXZkWFJvT2lCdWRXMWlaWEk3WEc0Z0lIMGdlMXh1SUNBZ0lHeGxkQ0JpYkdsdWF5QTlJREV1TUR0Y2JpQWdJQ0JzWlhRZ2JHOXZhMEYwSUQwZ01TNHdPMXh1SUNBZ0lHeGxkQ0J0YjNWMGFDQTlJREV1TUR0Y2JseHVJQ0FnSUhSb2FYTXVYMlY0Y0hKbGMzTnBiMjV6TG1admNrVmhZMmdvS0dWNGNISmxjM05wYjI0cElEMCtJSHRjYmlBZ0lDQWdJR0pzYVc1cklDMDlJR1Y0Y0hKbGMzTnBiMjR1YjNabGNuSnBaR1ZDYkdsdWEwRnRiM1Z1ZER0Y2JpQWdJQ0FnSUd4dmIydEJkQ0F0UFNCbGVIQnlaWE56YVc5dUxtOTJaWEp5YVdSbFRHOXZhMEYwUVcxdmRXNTBPMXh1SUNBZ0lDQWdiVzkxZEdnZ0xUMGdaWGh3Y21WemMybHZiaTV2ZG1WeWNtbGtaVTF2ZFhSb1FXMXZkVzUwTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnWW14cGJtc2dQU0JOWVhSb0xtMWhlQ2d3TGpBc0lHSnNhVzVyS1R0Y2JpQWdJQ0JzYjI5clFYUWdQU0JOWVhSb0xtMWhlQ2d3TGpBc0lHeHZiMnRCZENrN1hHNGdJQ0FnYlc5MWRHZ2dQU0JOWVhSb0xtMWhlQ2d3TGpBc0lHMXZkWFJvS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUI3SUdKc2FXNXJMQ0JzYjI5clFYUXNJRzF2ZFhSb0lIMDdYRzRnSUgxY2JuMWNiaUlzSWk4cUlHVnpiR2x1ZEMxa2FYTmhZbXhsSUVCMGVYQmxjMk55YVhCMExXVnpiR2x1ZEM5dVlXMXBibWN0WTI5dWRtVnVkR2x2YmlBcUwxeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1ZsSk5SWGh3Y21WemMybHZiazFoZEdWeWFXRnNRMjlzYjNKVWVYQmxJRDBnZTF4dUlDQkRiMnh2Y2pvZ0oyTnZiRzl5Snl4Y2JpQWdSVzFwYzNOcGIyNURiMnh2Y2pvZ0oyVnRhWE56YVc5dVEyOXNiM0luTEZ4dUlDQlRhR0ZrWlVOdmJHOXlPaUFuYzJoaFpHVkRiMnh2Y2ljc1hHNGdJRTFoZEdOaGNFTnZiRzl5T2lBbmJXRjBZMkZ3UTI5c2IzSW5MRnh1SUNCU2FXMURiMnh2Y2pvZ0ozSnBiVU52Ykc5eUp5eGNiaUFnVDNWMGJHbHVaVU52Ykc5eU9pQW5iM1YwYkdsdVpVTnZiRzl5Snl4Y2JuMGdZWE1nWTI5dWMzUTdYRzVjYm1WNGNHOXlkQ0IwZVhCbElGWlNUVVY0Y0hKbGMzTnBiMjVOWVhSbGNtbGhiRU52Ykc5eVZIbHdaU0E5WEc0Z0lIUjVjR1Z2WmlCV1VrMUZlSEJ5WlhOemFXOXVUV0YwWlhKcFlXeERiMnh2Y2xSNWNHVmJhMlY1YjJZZ2RIbHdaVzltSUZaU1RVVjRjSEpsYzNOcGIyNU5ZWFJsY21saGJFTnZiRzl5Vkhsd1pWMDdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQjJNRVY0Y0hKbGMzTnBiMjVOWVhSbGNtbGhiRU52Ykc5eVRXRndPaUI3SUZ0clpYazZJSE4wY21sdVoxMDZJRlpTVFVWNGNISmxjM05wYjI1TllYUmxjbWxoYkVOdmJHOXlWSGx3WlNCOElIVnVaR1ZtYVc1bFpDQjlJRDBnZTF4dUlDQmZRMjlzYjNJNklGWlNUVVY0Y0hKbGMzTnBiMjVOWVhSbGNtbGhiRU52Ykc5eVZIbHdaUzVEYjJ4dmNpeGNiaUFnWDBWdGFYTnphVzl1UTI5c2IzSTZJRlpTVFVWNGNISmxjM05wYjI1TllYUmxjbWxoYkVOdmJHOXlWSGx3WlM1RmJXbHpjMmx2YmtOdmJHOXlMRnh1SUNCZlUyaGhaR1ZEYjJ4dmNqb2dWbEpOUlhod2NtVnpjMmx2YmsxaGRHVnlhV0ZzUTI5c2IzSlVlWEJsTGxOb1lXUmxRMjlzYjNJc1hHNGdJRjlTYVcxRGIyeHZjam9nVmxKTlJYaHdjbVZ6YzJsdmJrMWhkR1Z5YVdGc1EyOXNiM0pVZVhCbExsSnBiVU52Ykc5eUxGeHVJQ0JmVDNWMGJHbHVaVU52Ykc5eU9pQldVazFGZUhCeVpYTnphVzl1VFdGMFpYSnBZV3hEYjJ4dmNsUjVjR1V1VDNWMGJHbHVaVU52Ykc5eUxGeHVmVHRjYmlJc0ltbHRjRzl5ZENBcUlHRnpJRlJJVWtWRklHWnliMjBnSjNSb2NtVmxKenRjYm1sdGNHOXlkQ0IwZVhCbElIc2dWbEpOUlhod2NtVnpjMmx2YmtKcGJtUWdmU0JtY205dElDY3VMMVpTVFVWNGNISmxjM05wYjI1Q2FXNWtKenRjYm1sdGNHOXlkQ0IwZVhCbElIc2dWbEpOUlhod2NtVnpjMmx2YmsxaGRHVnlhV0ZzUTI5c2IzSlVlWEJsSUgwZ1puSnZiU0FuTGk5V1VrMUZlSEJ5WlhOemFXOXVUV0YwWlhKcFlXeERiMnh2Y2xSNWNHVW5PMXh1WEc1amIyNXpkQ0JmWTI5c2IzSWdQU0J1WlhjZ1ZFaFNSVVV1UTI5c2IzSW9LVHRjYmx4dUx5b3FYRzRnS2lCQklHSnBibVFnYjJZZ1pYaHdjbVZ6YzJsdmJpQnBibVpzZFdWdVkyVnpJSFJ2SUdFZ2JXRjBaWEpwWVd3Z1kyOXNiM0l1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCV1VrMUZlSEJ5WlhOemFXOXVUV0YwWlhKcFlXeERiMnh2Y2tKcGJtUWdhVzF3YkdWdFpXNTBjeUJXVWsxRmVIQnlaWE56YVc5dVFtbHVaQ0I3WEc0Z0lDOHFLbHh1SUNBZ0tpQk5ZWEJ3YVc1bklHOW1JSEJ5YjNCbGNuUjVJRzVoYldWeklHWnliMjBnVmxKTlF5OXRZWFJsY21saGJFTnZiRzl5UW1sdVpITXVkSGx3WlNCMGJ5QjBhSEpsWlM1cWN5OU5ZWFJsY21saGJDNWNiaUFnSUNvdlhHNGdJSEJ5YVhaaGRHVWdjM1JoZEdsaklGOXdjbTl3WlhKMGVVNWhiV1ZOWVhCTllYQTZJSHRjYmlBZ0lDQmJaR2x6ZEdsdVozVnBjMmhsY2pvZ2MzUnlhVzVuWFRvZ2V5QmJkSGx3WlNCcGJpQldVazFGZUhCeVpYTnphVzl1VFdGMFpYSnBZV3hEYjJ4dmNsUjVjR1ZkUHpvZ2MzUnlhVzVuSUgwN1hHNGdJSDBnUFNCN1hHNGdJQ0FnYVhOTlpYTm9VM1JoYm1SaGNtUk5ZWFJsY21saGJEb2dlMXh1SUNBZ0lDQWdZMjlzYjNJNklDZGpiMnh2Y2ljc1hHNGdJQ0FnSUNCbGJXbHpjMmx2YmtOdmJHOXlPaUFuWlcxcGMzTnBkbVVuTEZ4dUlDQWdJSDBzWEc0Z0lDQWdhWE5OWlhOb1FtRnphV05OWVhSbGNtbGhiRG9nZTF4dUlDQWdJQ0FnWTI5c2IzSTZJQ2RqYjJ4dmNpY3NYRzRnSUNBZ2ZTeGNiaUFnSUNCcGMwMVViMjl1VFdGMFpYSnBZV3c2SUh0Y2JpQWdJQ0FnSUdOdmJHOXlPaUFuWTI5c2IzSW5MRnh1SUNBZ0lDQWdaVzFwYzNOcGIyNURiMnh2Y2pvZ0oyVnRhWE56YVhabEp5eGNiaUFnSUNBZ0lHOTFkR3hwYm1WRGIyeHZjam9nSjI5MWRHeHBibVZEYjJ4dmNrWmhZM1J2Y2ljc1hHNGdJQ0FnSUNCdFlYUmpZWEJEYjJ4dmNqb2dKMjFoZEdOaGNFWmhZM1J2Y2ljc1hHNGdJQ0FnSUNCeWFXMURiMnh2Y2pvZ0ozQmhjbUZ0WlhSeWFXTlNhVzFEYjJ4dmNrWmhZM1J2Y2ljc1hHNGdJQ0FnSUNCemFHRmtaVU52Ykc5eU9pQW5jMmhoWkdWRGIyeHZja1poWTNSdmNpY3NYRzRnSUNBZ2ZTeGNiaUFnZlR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVkdobElIUmhjbWRsZENCdFlYUmxjbWxoYkM1Y2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCdFlYUmxjbWxoYkRvZ1ZFaFNSVVV1VFdGMFpYSnBZV3c3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJvWlNCMGVYQmxJRzltSUhSb1pTQjBZWEpuWlhRZ2NISnZjR1Z5ZEhrZ2IyWWdkR2hsSUcxaGRHVnlhV0ZzTGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhSNWNHVTZJRlpTVFVWNGNISmxjM05wYjI1TllYUmxjbWxoYkVOdmJHOXlWSGx3WlR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVkdobElIUmhjbWRsZENCamIyeHZjaTVjYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0IwWVhKblpYUldZV3gxWlRvZ1ZFaFNSVVV1UTI5c2IzSTdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbDBjeUJ6ZEdGMFpTNWNiaUFnSUNvZ1NXWWdhWFFnWTJGdWJtOTBJR1pwYm1RZ2RHaGxJSFJoY21kbGRDQndjbTl3WlhKMGVTQnBiaUJqYjI1emRISjFZM1J2Y2l3Z2FYUWdkMmxzYkNCaVpTQnVkV3hzSUdsdWMzUmxZV1F1WEc0Z0lDQXFMMXh1SUNCd2NtbDJZWFJsSUY5emRHRjBaVG9nZTF4dUlDQWdJSEJ5YjNCbGNuUjVUbUZ0WlRvZ2MzUnlhVzVuTzF4dUlDQWdJR2x1YVhScFlXeFdZV3gxWlRvZ1ZFaFNSVVV1UTI5c2IzSTdYRzRnSUNBZ1pHVnNkR0ZXWVd4MVpUb2dWRWhTUlVVdVEyOXNiM0k3WEc0Z0lIMGdmQ0J1ZFd4c08xeHVYRzRnSUhCMVlteHBZeUJqYjI1emRISjFZM1J2Y2loN1hHNGdJQ0FnYldGMFpYSnBZV3dzWEc0Z0lDQWdkSGx3WlN4Y2JpQWdJQ0IwWVhKblpYUldZV3gxWlN4Y2JpQWdmVG9nZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZSb1pTQjBZWEpuWlhRZ2JXRjBaWEpwWVd3dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYldGMFpYSnBZV3c2SUZSSVVrVkZMazFoZEdWeWFXRnNPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVkdobElIUjVjR1VnYjJZZ2RHaGxJSFJoY21kbGRDQndjbTl3WlhKMGVTQnZaaUIwYUdVZ2JXRjBaWEpwWVd3dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnZEhsd1pUb2dWbEpOUlhod2NtVnpjMmx2YmsxaGRHVnlhV0ZzUTI5c2IzSlVlWEJsTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJSFJoY21kbGRDQmpiMnh2Y2k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwWVhKblpYUldZV3gxWlRvZ1ZFaFNSVVV1UTI5c2IzSTdYRzRnSUgwcElIdGNiaUFnSUNCMGFHbHpMbTFoZEdWeWFXRnNJRDBnYldGMFpYSnBZV3c3WEc0Z0lDQWdkR2hwY3k1MGVYQmxJRDBnZEhsd1pUdGNiaUFnSUNCMGFHbHpMblJoY21kbGRGWmhiSFZsSUQwZ2RHRnlaMlYwVm1Gc2RXVTdYRzVjYmlBZ0lDQXZMeUJwYm1sMElIQnliM0JsY25SNUlHNWhiV1ZjYmlBZ0lDQmpiMjV6ZENCd2NtOXdaWEowZVU1aGJXVk5ZWEFnUFNCUFltcGxZM1F1Wlc1MGNtbGxjeWhXVWsxRmVIQnlaWE56YVc5dVRXRjBaWEpwWVd4RGIyeHZja0pwYm1RdVgzQnliM0JsY25SNVRtRnRaVTFoY0UxaGNDa3VabWx1WkNoY2JpQWdJQ0FnSUNoYlpHbHpkR2x1WjNWcGMyaGxjbDBwSUQwK0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaHRZWFJsY21saGJDQmhjeUJoYm5rcFcyUnBjM1JwYm1kMWFYTm9aWEpkSUQwOVBTQjBjblZsTzF4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FwUHk1Yk1WMDdYRzRnSUNBZ1kyOXVjM1FnY0hKdmNHVnlkSGxPWVcxbElEMGdjSEp2Y0dWeWRIbE9ZVzFsVFdGd1B5NWJkSGx3WlYwZ1B6OGdiblZzYkR0Y2JseHVJQ0FnSUdsbUlDaHdjbTl3WlhKMGVVNWhiV1VnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtGeHVJQ0FnSUNBZ0lDQmdWSEpwWldRZ2RHOGdZV1JrSUdFZ2JXRjBaWEpwWVd3Z1kyOXNiM0lnWW1sdVpDQjBieUIwYUdVZ2JXRjBaWEpwWVd3Z0pIdGNiaUFnSUNBZ0lDQWdJQ0J0WVhSbGNtbGhiQzV1WVcxbElEOC9JQ2NvYm04Z2JtRnRaU2tuWEc0Z0lDQWdJQ0FnSUgwc0lIUm9aU0IwZVhCbElDUjdkSGx3WlgwZ1luVjBJSFJvWlNCdFlYUmxjbWxoYkNCdmNpQjBhR1VnZEhsd1pTQnBjeUJ1YjNRZ2MzVndjRzl5ZEdWa0xtQXNYRzRnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0IwYUdsekxsOXpkR0YwWlNBOUlHNTFiR3c3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHTnZibk4wSUhSaGNtZGxkQ0E5SUNodFlYUmxjbWxoYkNCaGN5QmhibmtwVzNCeWIzQmxjblI1VG1GdFpWMGdZWE1nVkVoU1JVVXVRMjlzYjNJN1hHNWNiaUFnSUNBZ0lHTnZibk4wSUdsdWFYUnBZV3hXWVd4MVpTQTlJSFJoY21kbGRDNWpiRzl1WlNncE8xeHVYRzRnSUNBZ0lDQXZMeURvc3FEamdhN2xnS1RqZ3BMa3Y1M21qSUhqZ1puamdvdmpnWi9qZ29IamdhdERiMnh2Y2k1emRXTGpncExrdmIvamdvL2pnWnJqZ2F2bHQ2N2xpSWJqZ3BMb3FJam5ycGZqZ1puamdvdGNiaUFnSUNBZ0lHTnZibk4wSUdSbGJIUmhWbUZzZFdVZ1BTQnVaWGNnVkVoU1JVVXVRMjlzYjNJb1hHNGdJQ0FnSUNBZ0lIUmhjbWRsZEZaaGJIVmxMbklnTFNCcGJtbDBhV0ZzVm1Gc2RXVXVjaXhjYmlBZ0lDQWdJQ0FnZEdGeVoyVjBWbUZzZFdVdVp5QXRJR2x1YVhScFlXeFdZV3gxWlM1bkxGeHVJQ0FnSUNBZ0lDQjBZWEpuWlhSV1lXeDFaUzVpSUMwZ2FXNXBkR2xoYkZaaGJIVmxMbUlzWEc0Z0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNCMGFHbHpMbDl6ZEdGMFpTQTlJSHRjYmlBZ0lDQWdJQ0FnY0hKdmNHVnlkSGxPWVcxbExGeHVJQ0FnSUNBZ0lDQnBibWwwYVdGc1ZtRnNkV1VzWEc0Z0lDQWdJQ0FnSUdSbGJIUmhWbUZzZFdVc1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCaGNIQnNlVmRsYVdkb2RDaDNaV2xuYUhRNklHNTFiV0psY2lrNklIWnZhV1FnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbDl6ZEdGMFpTQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQXZMeUIzWVhKdWFXNW5JR2x6SUdGc2NtVmhaSGtnWlcxcGRIUmxaQ0JwYmlCamIyNXpkSEoxWTNSdmNseHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElIc2djSEp2Y0dWeWRIbE9ZVzFsTENCa1pXeDBZVlpoYkhWbElIMGdQU0IwYUdsekxsOXpkR0YwWlR0Y2JseHVJQ0FnSUdOdmJuTjBJSFJoY21kbGRDQTlJQ2gwYUdsekxtMWhkR1Z5YVdGc0lHRnpJR0Z1ZVNsYmNISnZjR1Z5ZEhsT1lXMWxYU0JoY3lCVVNGSkZSUzVEYjJ4dmNqdGNiaUFnSUNCcFppQW9kR0Z5WjJWMElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlJQzh2SUZSUFJFODZJSGRsSUhOb2IzVnNaQ0JyYVdOcklIUm9hWE1nWVhRZ1lHRmtaRTFoZEdWeWFXRnNWbUZzZFdWZ1hHNWNiaUFnSUNCMFlYSm5aWFF1WVdSa0tGOWpiMnh2Y2k1amIzQjVLR1JsYkhSaFZtRnNkV1VwTG0xMWJIUnBjR3g1VTJOaGJHRnlLSGRsYVdkb2RDa3BPMXh1WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUFvZEdocGN5NXRZWFJsY21saGJDQmhjeUJoYm5rcExuTm9iM1ZzWkVGd2NHeDVWVzVwWm05eWJYTWdQVDA5SUNkaWIyOXNaV0Z1SnlrZ2UxeHVJQ0FnSUNBZ0tIUm9hWE11YldGMFpYSnBZV3dnWVhNZ1lXNTVLUzV6YUc5MWJHUkJjSEJzZVZWdWFXWnZjbTF6SUQwZ2RISjFaVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdZMnhsWVhKQmNIQnNhV1ZrVjJWcFoyaDBLQ2s2SUhadmFXUWdlMXh1SUNBZ0lHbG1JQ2gwYUdsekxsOXpkR0YwWlNBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBdkx5QjNZWEp1YVc1bklHbHpJR0ZzY21WaFpIa2daVzFwZEhSbFpDQnBiaUJqYjI1emRISjFZM1J2Y2x4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUhzZ2NISnZjR1Z5ZEhsT1lXMWxMQ0JwYm1sMGFXRnNWbUZzZFdVZ2ZTQTlJSFJvYVhNdVgzTjBZWFJsTzF4dVhHNGdJQ0FnWTI5dWMzUWdkR0Z5WjJWMElEMGdLSFJvYVhNdWJXRjBaWEpwWVd3Z1lYTWdZVzU1S1Z0d2NtOXdaWEowZVU1aGJXVmRJR0Z6SUZSSVVrVkZMa052Ykc5eU8xeHVJQ0FnSUdsbUlDaDBZWEpuWlhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMGdMeThnVkU5RVR6b2dkMlVnYzJodmRXeGtJR3RwWTJzZ2RHaHBjeUJoZENCZ1lXUmtUV0YwWlhKcFlXeFdZV3gxWldCY2JseHVJQ0FnSUhSaGNtZGxkQzVqYjNCNUtHbHVhWFJwWVd4V1lXeDFaU2s3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUNoMGFHbHpMbTFoZEdWeWFXRnNJR0Z6SUdGdWVTa3VjMmh2ZFd4a1FYQndiSGxWYm1sbWIzSnRjeUE5UFQwZ0oySnZiMnhsWVc0bktTQjdYRzRnSUNBZ0lDQW9kR2hwY3k1dFlYUmxjbWxoYkNCaGN5QmhibmtwTG5Ob2IzVnNaRUZ3Y0d4NVZXNXBabTl5YlhNZ1BTQjBjblZsTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUhSNWNHVWdLaUJoY3lCVVNGSkZSU0JtY205dElDZDBhSEpsWlNjN1hHNXBiWEJ2Y25RZ2RIbHdaU0I3SUZaU1RVVjRjSEpsYzNOcGIyNUNhVzVrSUgwZ1puSnZiU0FuTGk5V1VrMUZlSEJ5WlhOemFXOXVRbWx1WkNjN1hHNWNiaThxS2x4dUlDb2dRU0JpYVc1a0lHOW1JSHRBYkdsdWF5QldVazFGZUhCeVpYTnphVzl1ZlNCcGJtWnNkV1Z1WTJWeklIUnZJRzF2Y25Cb0lIUmhjbWRsZEhNdVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QldVazFGZUhCeVpYTnphVzl1VFc5eWNHaFVZWEpuWlhSQ2FXNWtJR2x0Y0d4bGJXVnVkSE1nVmxKTlJYaHdjbVZ6YzJsdmJrSnBibVFnZTF4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUcxbGMyZ2djSEpwYldsMGFYWmxjeUIwYUdGMElHRjBkR0ZqYUdWa0lIUnZJSFJoY21kbGRDQnRaWE5vTGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhCeWFXMXBkR2wyWlhNNklGUklVa1ZGTGsxbGMyaGJYVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUdsdVpHVjRJRzltSUhSb1pTQnRiM0p3YUNCMFlYSm5aWFFnYVc0Z2RHaGxJRzFsYzJndVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2FXNWtaWGc2SUc1MWJXSmxjanRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUhkbGFXZG9kQ0IyWVd4MVpTQnZaaUIwWVhKblpYUWdiVzl5Y0dnZ2RHRnlaMlYwTGlCU1lXNW5hVzVuSUdsdUlGc3dMakFnTFNBeExqQmRMbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSGRsYVdkb2REb2diblZ0WW1WeU8xeHVYRzRnSUhCMVlteHBZeUJqYjI1emRISjFZM1J2Y2loN1hHNGdJQ0FnY0hKcGJXbDBhWFpsY3l4Y2JpQWdJQ0JwYm1SbGVDeGNiaUFnSUNCM1pXbG5hSFFzWEc0Z0lIMDZJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVYUdVZ2JXVnphQ0J3Y21sdGFYUnBkbVZ6SUhSb1lYUWdZWFIwWVdOb1pXUWdkRzhnZEdGeVoyVjBJRzFsYzJndVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hKcGJXbDBhWFpsY3pvZ1ZFaFNSVVV1VFdWemFGdGRPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVkdobElHbHVaR1Y0SUc5bUlIUm9aU0J0YjNKd2FDQjBZWEpuWlhRZ2FXNGdkR2hsSUcxbGMyZ3VYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FXNWtaWGc2SUc1MWJXSmxjanRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZSb1pTQjNaV2xuYUhRZ2RtRnNkV1VnYjJZZ2RHRnlaMlYwSUcxdmNuQm9JSFJoY21kbGRDNGdVbUZ1WjJsdVp5QnBiaUJiTUM0d0lDMGdNUzR3WFM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0IzWldsbmFIUTZJRzUxYldKbGNqdGNiaUFnZlNrZ2UxeHVJQ0FnSUhSb2FYTXVjSEpwYldsMGFYWmxjeUE5SUhCeWFXMXBkR2wyWlhNN1hHNGdJQ0FnZEdocGN5NXBibVJsZUNBOUlHbHVaR1Y0TzF4dUlDQWdJSFJvYVhNdWQyVnBaMmgwSUQwZ2QyVnBaMmgwTzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUdGd2NHeDVWMlZwWjJoMEtIZGxhV2RvZERvZ2JuVnRZbVZ5S1RvZ2RtOXBaQ0I3WEc0Z0lDQWdkR2hwY3k1d2NtbHRhWFJwZG1WekxtWnZja1ZoWTJnb0tHMWxjMmdwSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2h0WlhOb0xtMXZjbkJvVkdGeVoyVjBTVzVtYkhWbGJtTmxjejh1VzNSb2FYTXVhVzVrWlhoZElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdiV1Z6YUM1dGIzSndhRlJoY21kbGRFbHVabXgxWlc1alpYTmJkR2hwY3k1cGJtUmxlRjBnS3owZ2RHaHBjeTUzWldsbmFIUWdLaUIzWldsbmFIUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdZMnhsWVhKQmNIQnNhV1ZrVjJWcFoyaDBLQ2s2SUhadmFXUWdlMXh1SUNBZ0lIUm9hWE11Y0hKcGJXbDBhWFpsY3k1bWIzSkZZV05vS0NodFpYTm9LU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9iV1Z6YUM1dGIzSndhRlJoY21kbGRFbHVabXgxWlc1alpYTS9MbHQwYUdsekxtbHVaR1Y0WFNBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lHMWxjMmd1Ylc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWelczUm9hWE11YVc1a1pYaGRJRDBnTUM0d08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdLaUJoY3lCVVNGSkZSU0JtY205dElDZDBhSEpsWlNjN1hHNXBiWEJ2Y25RZ2RIbHdaU0I3SUZaU1RVVjRjSEpsYzNOcGIyNUNhVzVrSUgwZ1puSnZiU0FuTGk5V1VrMUZlSEJ5WlhOemFXOXVRbWx1WkNjN1hHNWNibU52Ym5OMElGOTJNaUE5SUc1bGR5QlVTRkpGUlM1V1pXTjBiM0l5S0NrN1hHNWNiaThxS2x4dUlDb2dRU0JpYVc1a0lHOW1JR1Y0Y0hKbGMzTnBiMjRnYVc1bWJIVmxibU5sY3lCMGJ5QjBaWGgwZFhKbElIUnlZVzV6Wm05eWJYTXVYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJXVWsxRmVIQnlaWE56YVc5dVZHVjRkSFZ5WlZSeVlXNXpabTl5YlVKcGJtUWdhVzF3YkdWdFpXNTBjeUJXVWsxRmVIQnlaWE56YVc5dVFtbHVaQ0I3WEc0Z0lIQnlhWFpoZEdVZ2MzUmhkR2xqSUY5d2NtOXdaWEowZVU1aGJXVnpUV0Z3T2lCN0lGdGthWE4wYVc1bmRXbHphR1Z5T2lCemRISnBibWRkT2lCemRISnBibWRiWFNCOUlEMGdlMXh1SUNBZ0lHbHpUV1Z6YUZOMFlXNWtZWEprVFdGMFpYSnBZV3c2SUZ0Y2JpQWdJQ0FnSUNkdFlYQW5MRnh1SUNBZ0lDQWdKMlZ0YVhOemFYWmxUV0Z3Snl4Y2JpQWdJQ0FnSUNkaWRXMXdUV0Z3Snl4Y2JpQWdJQ0FnSUNkdWIzSnRZV3hOWVhBbkxGeHVJQ0FnSUNBZ0oyUnBjM0JzWVdObGJXVnVkRTFoY0Njc1hHNGdJQ0FnSUNBbmNtOTFaMmh1WlhOelRXRndKeXhjYmlBZ0lDQWdJQ2R0WlhSaGJHNWxjM05OWVhBbkxGeHVJQ0FnSUNBZ0oyRnNjR2hoVFdGd0p5eGNiaUFnSUNCZExGeHVJQ0FnSUdselRXVnphRUpoYzJsalRXRjBaWEpwWVd3NklGc25iV0Z3Snl3Z0ozTndaV04xYkdGeVRXRndKeXdnSjJGc2NHaGhUV0Z3SjEwc1hHNGdJQ0FnYVhOTlZHOXZiazFoZEdWeWFXRnNPaUJiWEc0Z0lDQWdJQ0FuYldGd0p5eGNiaUFnSUNBZ0lDZHViM0p0WVd4TllYQW5MRnh1SUNBZ0lDQWdKMlZ0YVhOemFYWmxUV0Z3Snl4Y2JpQWdJQ0FnSUNkemFHRmtaVTExYkhScGNHeDVWR1Y0ZEhWeVpTY3NYRzRnSUNBZ0lDQW5jbWx0VFhWc2RHbHdiSGxVWlhoMGRYSmxKeXhjYmlBZ0lDQWdJQ2R2ZFhSc2FXNWxWMmxrZEdoTmRXeDBhWEJzZVZSbGVIUjFjbVVuTEZ4dUlDQWdJQ0FnSjNWMlFXNXBiV0YwYVc5dVRXRnphMVJsZUhSMWNtVW5MRnh1SUNBZ0lGMHNYRzRnSUgwN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pTQjBZWEpuWlhRZ2JXRjBaWEpwWVd3dVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2JXRjBaWEpwWVd3NklGUklVa1ZGTGsxaGRHVnlhV0ZzTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ2RYWWdjMk5oYkdVZ2IyWWdkR2hsSUhSbGVIUjFjbVV1WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYzJOaGJHVTZJRlJJVWtWRkxsWmxZM1J2Y2pJN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pTQjFkaUJ2Wm1aelpYUWdiMllnZEdobElIUmxlSFIxY21VdVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2IyWm1jMlYwT2lCVVNGSkZSUzVXWldOMGIzSXlPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR1VnYkdsemRDQnZaaUIwWlhoMGRYSmxJRzVoYldWeklHRnVaQ0JwZEhNZ2MzUmhkR1VnZEdoaGRDQnphRzkxYkdRZ1ltVWdkSEpoYm5ObWIzSnRaV1FnWW5rZ2RHaHBjeUJpYVc1a0xseHVJQ0FnS2k5Y2JpQWdjSEpwZG1GMFpTQmZjSEp2Y0dWeWRHbGxjem9nZTF4dUlDQWdJRzVoYldVNklITjBjbWx1Wnp0Y2JpQWdJQ0JwYm1sMGFXRnNUMlptYzJWME9pQlVTRkpGUlM1V1pXTjBiM0l5TzF4dUlDQWdJR2x1YVhScFlXeFRZMkZzWlRvZ1ZFaFNSVVV1Vm1WamRHOXlNanRjYmlBZ0lDQmtaV3gwWVU5bVpuTmxkRG9nVkVoU1JVVXVWbVZqZEc5eU1qdGNiaUFnSUNCa1pXeDBZVk5qWVd4bE9pQlVTRkpGUlM1V1pXTjBiM0l5TzF4dUlDQjlXMTA3WEc1Y2JpQWdjSFZpYkdsaklHTnZibk4wY25WamRHOXlLSHRjYmlBZ0lDQnRZWFJsY21saGJDeGNiaUFnSUNCelkyRnNaU3hjYmlBZ0lDQnZabVp6WlhRc1hHNGdJSDA2SUh0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVWFHVWdkR0Z5WjJWMElHMWhkR1Z5YVdGc0xseHVJQ0FnSUNBcUwxeHVJQ0FnSUcxaGRHVnlhV0ZzT2lCVVNGSkZSUzVOWVhSbGNtbGhiRHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZSb1pTQjFkaUJ6WTJGc1pTQnZaaUIwYUdVZ2RHVjRkSFZ5WlM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6WTJGc1pUb2dWRWhTUlVVdVZtVmpkRzl5TWp0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGUm9aU0IxZGlCdlptWnpaWFFnYjJZZ2RHaGxJSFJsZUhSMWNtVXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyWm1jMlYwT2lCVVNGSkZSUzVXWldOMGIzSXlPMXh1SUNCOUtTQjdYRzRnSUNBZ2RHaHBjeTV0WVhSbGNtbGhiQ0E5SUcxaGRHVnlhV0ZzTzF4dUlDQWdJSFJvYVhNdWMyTmhiR1VnUFNCelkyRnNaVHRjYmlBZ0lDQjBhR2x6TG05bVpuTmxkQ0E5SUc5bVpuTmxkRHRjYmx4dUlDQWdJR052Ym5OMElIQnliM0JsY25SNVRtRnRaWE1nUFNCUFltcGxZM1F1Wlc1MGNtbGxjeWhXVWsxRmVIQnlaWE56YVc5dVZHVjRkSFZ5WlZSeVlXNXpabTl5YlVKcGJtUXVYM0J5YjNCbGNuUjVUbUZ0WlhOTllYQXBMbVpwYm1Rb1hHNGdJQ0FnSUNBb1cyUnBjM1JwYm1kMWFYTm9aWEpkS1NBOVBpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9iV0YwWlhKcFlXd2dZWE1nWVc1NUtWdGthWE4wYVc1bmRXbHphR1Z5WFNBOVBUMGdkSEoxWlR0Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnS1Q4dVd6RmRPMXh1WEc0Z0lDQWdhV1lnS0hCeWIzQmxjblI1VG1GdFpYTWdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0Z4dUlDQWdJQ0FnSUNCZ1ZISnBaV1FnZEc4Z1lXUmtJR0VnZEdWNGRIVnlaU0IwY21GdWMyWnZjbTBnWW1sdVpDQjBieUIwYUdVZ2JXRjBaWEpwWVd3Z0pIdGNiaUFnSUNBZ0lDQWdJQ0J0WVhSbGNtbGhiQzV1WVcxbElEOC9JQ2NvYm04Z2JtRnRaU2tuWEc0Z0lDQWdJQ0FnSUgwZ1luVjBJSFJvWlNCdFlYUmxjbWxoYkNCcGN5QnViM1FnYzNWd2NHOXlkR1ZrTG1Bc1hHNGdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQjBhR2x6TGw5d2NtOXdaWEowYVdWeklEMGdXMTA3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9hWE11WDNCeWIzQmxjblJwWlhNZ1BTQmJYVHRjYmx4dUlDQWdJQ0FnY0hKdmNHVnlkSGxPWVcxbGN5NW1iM0pGWVdOb0tDaHdjbTl3WlhKMGVVNWhiV1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RHVjRkSFZ5WlNBOUlDZ29iV0YwWlhKcFlXd2dZWE1nWVc1NUtWdHdjbTl3WlhKMGVVNWhiV1ZkSUdGeklGUklVa1ZGTGxSbGVIUjFjbVVnZkNCMWJtUmxabWx1WldRcFB5NWpiRzl1WlNncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSbGVIUjFjbVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDaHRZWFJsY21saGJDQmhjeUJoYm5rcFczQnliM0JsY25SNVRtRnRaVjBnUFNCMFpYaDBkWEpsT3lBdkx5QmlaV05oZFhObElIUm9aU0IwWlhoMGRYSmxJR2x6SUdOc2IyNWxaRnh1WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2x1YVhScFlXeFBabVp6WlhRZ1BTQjBaWGgwZFhKbExtOW1abk5sZEM1amJHOXVaU2dwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JwYm1sMGFXRnNVMk5oYkdVZ1BTQjBaWGgwZFhKbExuSmxjR1ZoZEM1amJHOXVaU2dwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JrWld4MFlVOW1abk5sZENBOUlHOW1abk5sZEM1amJHOXVaU2dwTG5OMVlpaHBibWwwYVdGc1QyWm1jMlYwS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWkdWc2RHRlRZMkZzWlNBOUlITmpZV3hsTG1Oc2IyNWxLQ2t1YzNWaUtHbHVhWFJwWVd4VFkyRnNaU2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY0hKdmNHVnlkR2xsY3k1d2RYTm9LSHRjYmlBZ0lDQWdJQ0FnSUNCdVlXMWxPaUJ3Y205d1pYSjBlVTVoYldVc1hHNGdJQ0FnSUNBZ0lDQWdhVzVwZEdsaGJFOW1abk5sZEN4Y2JpQWdJQ0FnSUNBZ0lDQmtaV3gwWVU5bVpuTmxkQ3hjYmlBZ0lDQWdJQ0FnSUNCcGJtbDBhV0ZzVTJOaGJHVXNYRzRnSUNBZ0lDQWdJQ0FnWkdWc2RHRlRZMkZzWlN4Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdZWEJ3YkhsWFpXbG5hSFFvZDJWcFoyaDBPaUJ1ZFcxaVpYSXBPaUIyYjJsa0lIdGNiaUFnSUNCMGFHbHpMbDl3Y205d1pYSjBhV1Z6TG1admNrVmhZMmdvS0hCeWIzQmxjblI1S1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCMFlYSm5aWFFnUFNBb2RHaHBjeTV0WVhSbGNtbGhiQ0JoY3lCaGJua3BXM0J5YjNCbGNuUjVMbTVoYldWZElHRnpJRlJJVWtWRkxsUmxlSFIxY21VN1hHNGdJQ0FnSUNCcFppQW9kR0Z5WjJWMElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnZlNBdkx5QlVUMFJQT2lCM1pTQnphRzkxYkdRZ2EybGpheUIwYUdseklHRjBJR0JoWkdSTllYUmxjbWxoYkZaaGJIVmxZRnh1WEc0Z0lDQWdJQ0IwWVhKblpYUXViMlptYzJWMExtRmtaQ2hmZGpJdVkyOXdlU2h3Y205d1pYSjBlUzVrWld4MFlVOW1abk5sZENrdWJYVnNkR2x3YkhsVFkyRnNZWElvZDJWcFoyaDBLU2s3WEc0Z0lDQWdJQ0IwWVhKblpYUXVjbVZ3WldGMExtRmtaQ2hmZGpJdVkyOXdlU2h3Y205d1pYSjBlUzVrWld4MFlWTmpZV3hsS1M1dGRXeDBhWEJzZVZOallXeGhjaWgzWldsbmFIUXBLVHRjYmx4dUlDQWdJQ0FnZEdGeVoyVjBMbTVsWldSelZYQmtZWFJsSUQwZ2RISjFaVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJqYkdWaGNrRndjR3hwWldSWFpXbG5hSFFvS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdkR2hwY3k1ZmNISnZjR1Z5ZEdsbGN5NW1iM0pGWVdOb0tDaHdjbTl3WlhKMGVTa2dQVDRnZTF4dUlDQWdJQ0FnWTI5dWMzUWdkR0Z5WjJWMElEMGdLSFJvYVhNdWJXRjBaWEpwWVd3Z1lYTWdZVzU1S1Z0d2NtOXdaWEowZVM1dVlXMWxYU0JoY3lCVVNGSkZSUzVVWlhoMGRYSmxPMXh1SUNBZ0lDQWdhV1lnS0hSaGNtZGxkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMGdMeThnVkU5RVR6b2dkMlVnYzJodmRXeGtJR3RwWTJzZ2RHaHBjeUJoZENCZ1lXUmtUV0YwWlhKcFlXeFdZV3gxWldCY2JseHVJQ0FnSUNBZ2RHRnlaMlYwTG05bVpuTmxkQzVqYjNCNUtIQnliM0JsY25SNUxtbHVhWFJwWVd4UFptWnpaWFFwTzF4dUlDQWdJQ0FnZEdGeVoyVjBMbkpsY0dWaGRDNWpiM0I1S0hCeWIzQmxjblI1TG1sdWFYUnBZV3hUWTJGc1pTazdYRzVjYmlBZ0lDQWdJSFJoY21kbGRDNXVaV1ZrYzFWd1pHRjBaU0E5SUhSeWRXVTdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0IwZVhCbElDb2dZWE1nVmpCV1VrMGdabkp2YlNBblFIQnBlR2wyTDNSNWNHVnpMWFp5YlMwd0xqQW5PMXh1YVcxd2IzSjBJSFI1Y0dVZ0tpQmhjeUJXTVZaU1RWTmphR1Z0WVNCbWNtOXRJQ2RBY0dsNGFYWXZkSGx3WlhNdGRuSnRZeTEyY20wdE1TNHdKenRjYm1sdGNHOXlkQ0FxSUdGeklGUklVa1ZGSUdaeWIyMGdKM1JvY21WbEp6dGNibWx0Y0c5eWRDQjdJRWRNVkVZc0lFZE1WRVpNYjJGa1pYSlFiSFZuYVc0c0lFZE1WRVpRWVhKelpYSWdmU0JtY205dElDZDBhSEpsWlM5bGVHRnRjR3hsY3k5cWMyMHZiRzloWkdWeWN5OUhURlJHVEc5aFpHVnlMbXB6Snp0Y2JtbHRjRzl5ZENCN0lHZHNkR1pGZUhSeVlXTjBVSEpwYldsMGFYWmxjMFp5YjIxT2IyUmxJSDBnWm5KdmJTQW5MaTR2ZFhScGJITXZaMngwWmtWNGRISmhZM1JRY21sdGFYUnBkbVZ6Um5KdmJVNXZaR1VuTzF4dWFXMXdiM0owSUhzZ1oyeDBaa2RsZEVGemMyOWphV0YwWldSTllYUmxjbWxoYkVsdVpHVjRJSDBnWm5KdmJTQW5MaTR2ZFhScGJITXZaMngwWmtkbGRFRnpjMjlqYVdGMFpXUk5ZWFJsY21saGJFbHVaR1Y0Snp0Y2JtbHRjRzl5ZENCN0lGWlNUVVY0Y0hKbGMzTnBiMjRnZlNCbWNtOXRJQ2N1TDFaU1RVVjRjSEpsYzNOcGIyNG5PMXh1YVcxd2IzSjBJSHNnVmxKTlJYaHdjbVZ6YzJsdmJrMWhibUZuWlhJZ2ZTQm1jbTl0SUNjdUwxWlNUVVY0Y0hKbGMzTnBiMjVOWVc1aFoyVnlKenRjYm1sdGNHOXlkQ0I3SUhZd1JYaHdjbVZ6YzJsdmJrMWhkR1Z5YVdGc1EyOXNiM0pOWVhBZ2ZTQm1jbTl0SUNjdUwxWlNUVVY0Y0hKbGMzTnBiMjVOWVhSbGNtbGhiRU52Ykc5eVZIbHdaU2M3WEc1cGJYQnZjblFnZXlCV1VrMUZlSEJ5WlhOemFXOXVUV0YwWlhKcFlXeERiMnh2Y2tKcGJtUWdmU0JtY205dElDY3VMMVpTVFVWNGNISmxjM05wYjI1TllYUmxjbWxoYkVOdmJHOXlRbWx1WkNjN1hHNXBiWEJ2Y25RZ2V5QldVazFGZUhCeVpYTnphVzl1VFc5eWNHaFVZWEpuWlhSQ2FXNWtJSDBnWm5KdmJTQW5MaTlXVWsxRmVIQnlaWE56YVc5dVRXOXljR2hVWVhKblpYUkNhVzVrSnp0Y2JtbHRjRzl5ZENCN0lGWlNUVVY0Y0hKbGMzTnBiMjVRY21WelpYUk9ZVzFsSUgwZ1puSnZiU0FuTGk5V1VrMUZlSEJ5WlhOemFXOXVVSEpsYzJWMFRtRnRaU2M3WEc1cGJYQnZjblFnZXlCV1VrMUZlSEJ5WlhOemFXOXVWR1Y0ZEhWeVpWUnlZVzV6Wm05eWJVSnBibVFnZlNCbWNtOXRJQ2N1TDFaU1RVVjRjSEpsYzNOcGIyNVVaWGgwZFhKbFZISmhibk5tYjNKdFFtbHVaQ2M3WEc1cGJYQnZjblFnZXlCSFRGUkdJR0Z6SUVkTVZFWlRZMmhsYldFZ2ZTQm1jbTl0SUNkQVoyeDBaaTEwY21GdWMyWnZjbTB2WTI5eVpTYzdYRzVjYmk4cUtseHVJQ29nVUc5emMybGliR1VnYzNCbFl5QjJaWEp6YVc5dWN5QnBkQ0J5WldOdloyNXBlbVZ6TGx4dUlDb3ZYRzVqYjI1emRDQlFUMU5UU1VKTVJWOVRVRVZEWDFaRlVsTkpUMDVUSUQwZ2JtVjNJRk5sZENoYkp6RXVNQ2NzSUNjeExqQXRZbVYwWVNkZEtUdGNibHh1THlvcVhHNGdLaUJCSUhCc2RXZHBiaUJ2WmlCSFRGUkdURzloWkdWeUlIUm9ZWFFnYVcxd2IzSjBjeUJoSUh0QWJHbHVheUJXVWsxRmVIQnlaWE56YVc5dVRXRnVZV2RsY24wZ1puSnZiU0JoSUZaU1RTQmxlSFJsYm5OcGIyNGdiMllnWVNCSFRGUkdMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVmxKTlJYaHdjbVZ6YzJsdmJreHZZV1JsY2xCc2RXZHBiaUJwYlhCc1pXMWxiblJ6SUVkTVZFWk1iMkZrWlhKUWJIVm5hVzRnZTF4dUlDQndkV0pzYVdNZ2MzUmhkR2xqSUhKbFlXUnZibXg1SUhZd2RqRlFjbVZ6WlhST1lXMWxUV0Z3T2lCN0lGdDJNRTVoYldVZ2FXNGdWakJXVWswdVFteGxibVJUYUdGd1pWQnlaWE5sZEU1aGJXVmRQem9nVmxKTlJYaHdjbVZ6YzJsdmJsQnlaWE5sZEU1aGJXVWdmU0E5SUh0Y2JpQWdJQ0JoT2lBbllXRW5MRnh1SUNBZ0lHVTZJQ2RsWlNjc1hHNGdJQ0FnYVRvZ0oybG9KeXhjYmlBZ0lDQnZPaUFuYjJnbkxGeHVJQ0FnSUhVNklDZHZkU2NzWEc0Z0lDQWdZbXhwYm1zNklDZGliR2x1YXljc1hHNGdJQ0FnYW05NU9pQW5hR0Z3Y0hrbkxGeHVJQ0FnSUdGdVozSjVPaUFuWVc1bmNua25MRnh1SUNBZ0lITnZjbkp2ZHpvZ0ozTmhaQ2NzWEc0Z0lDQWdablZ1T2lBbmNtVnNZWGhsWkNjc1hHNGdJQ0FnYkc5dmEzVndPaUFuYkc5dmExVndKeXhjYmlBZ0lDQnNiMjlyWkc5M2Jqb2dKMnh2YjJ0RWIzZHVKeXhjYmlBZ0lDQnNiMjlyYkdWbWREb2dKMnh2YjJ0TVpXWjBKeXhjYmlBZ0lDQnNiMjlyY21sbmFIUTZJQ2RzYjI5clVtbG5hSFFuTEZ4dUlDQWdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym1GdGFXNW5MV052Ym5abGJuUnBiMjVjYmlBZ0lDQmliR2x1YTE5c09pQW5ZbXhwYm10TVpXWjBKeXhjYmlBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjVoYldsdVp5MWpiMjUyWlc1MGFXOXVYRzRnSUNBZ1lteHBibXRmY2pvZ0oySnNhVzVyVW1sbmFIUW5MRnh1SUNBZ0lHNWxkWFJ5WVd3NklDZHVaWFYwY21Gc0p5eGNiaUFnZlR0Y2JseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2djR0Z5YzJWeU9pQkhURlJHVUdGeWMyVnlPMXh1WEc0Z0lIQjFZbXhwWXlCblpYUWdibUZ0WlNncE9pQnpkSEpwYm1jZ2UxeHVJQ0FnSUM4dklGZGxJSE5vYjNWc1pDQjFjMlVnZEdobElHVjRkR1Z1YzJsdmJpQnVZVzFsSUdsdWMzUmxZV1FnWW5WMElIZGxJR2hoZG1VZ2JYVnNkR2x3YkdVZ2NHeDFaMmx1Y3lCbWIzSWdZVzRnWlhoMFpXNXphVzl1TGk0dVhHNGdJQ0FnY21WMGRYSnVJQ2RXVWsxRmVIQnlaWE56YVc5dVRHOWhaR1Z5VUd4MVoybHVKenRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJqYjI1emRISjFZM1J2Y2lod1lYSnpaWEk2SUVkTVZFWlFZWEp6WlhJcElIdGNiaUFnSUNCMGFHbHpMbkJoY25ObGNpQTlJSEJoY25ObGNqdGNiaUFnZlZ4dVhHNGdJSEIxWW14cFl5QmhjM2x1WXlCaFpuUmxjbEp2YjNRb1oyeDBaam9nUjB4VVJpazZJRkJ5YjIxcGMyVThkbTlwWkQ0Z2UxeHVJQ0FnSUdkc2RHWXVkWE5sY2tSaGRHRXVkbkp0Ulhod2NtVnpjMmx2YmsxaGJtRm5aWElnUFNCaGQyRnBkQ0IwYUdsekxsOXBiWEJ2Y25Rb1oyeDBaaWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1NXMXdiM0owSUdFZ2UwQnNhVzVySUZaU1RVVjRjSEpsYzNOcGIyNU5ZVzVoWjJWeWZTQm1jbTl0SUdFZ1ZsSk5MbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnWjJ4MFppQkJJSEJoY25ObFpDQnlaWE4xYkhRZ2IyWWdSMHhVUmlCMFlXdGxiaUJtY205dElFZE1WRVpNYjJGa1pYSmNiaUFnSUNvdlhHNGdJSEJ5YVhaaGRHVWdZWE41Ym1NZ1gybHRjRzl5ZENobmJIUm1PaUJIVEZSR0tUb2dVSEp2YldselpUeFdVazFGZUhCeVpYTnphVzl1VFdGdVlXZGxjaUI4SUc1MWJHdytJSHRjYmlBZ0lDQmpiMjV6ZENCMk1WSmxjM1ZzZENBOUlHRjNZV2wwSUhSb2FYTXVYM1l4U1cxd2IzSjBLR2RzZEdZcE8xeHVJQ0FnSUdsbUlDaDJNVkpsYzNWc2RDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIWXhVbVZ6ZFd4ME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJSFl3VW1WemRXeDBJRDBnWVhkaGFYUWdkR2hwY3k1ZmRqQkpiWEJ2Y25Rb1oyeDBaaWs3WEc0Z0lDQWdhV1lnS0hZd1VtVnpkV3gwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZGpCU1pYTjFiSFE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lIMWNibHh1SUNCd2NtbDJZWFJsSUdGemVXNWpJRjkyTVVsdGNHOXlkQ2huYkhSbU9pQkhURlJHS1RvZ1VISnZiV2x6WlR4V1VrMUZlSEJ5WlhOemFXOXVUV0Z1WVdkbGNpQjhJRzUxYkd3K0lIdGNiaUFnSUNCamIyNXpkQ0JxYzI5dUlEMGdkR2hwY3k1d1lYSnpaWEl1YW5OdmJpQmhjeUJIVEZSR1UyTm9aVzFoTGtsSFRGUkdPMXh1WEc0Z0lDQWdMeThnWldGeWJIa2dZV0p2Y25RZ2FXWWdhWFFnWkc5bGMyNG5kQ0IxYzJVZ2RuSnRYRzRnSUNBZ1kyOXVjM1FnYVhOV1VrMVZjMlZrSUQwZ2FuTnZiaTVsZUhSbGJuTnBiMjV6VlhObFpEOHVhVzVrWlhoUFppZ25WbEpOUTE5MmNtMG5LU0FoUFQwZ0xURTdYRzRnSUNBZ2FXWWdLQ0ZwYzFaU1RWVnpaV1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJR1Y0ZEdWdWMybHZiaUE5SUdwemIyNHVaWGgwWlc1emFXOXVjejh1V3lkV1VrMURYM1p5YlNkZElHRnpJRll4VmxKTlUyTm9aVzFoTGxaU1RVTldVazBnZkNCMWJtUmxabWx1WldRN1hHNGdJQ0FnYVdZZ0tDRmxlSFJsYm5OcGIyNHBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElITndaV05XWlhKemFXOXVJRDBnWlhoMFpXNXphVzl1TG5Od1pXTldaWEp6YVc5dU8xeHVJQ0FnSUdsbUlDZ2hVRTlUVTBsQ1RFVmZVMUJGUTE5V1JWSlRTVTlPVXk1b1lYTW9jM0JsWTFabGNuTnBiMjRwS1NCN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9ZRlpTVFVWNGNISmxjM05wYjI1TWIyRmtaWEpRYkhWbmFXNDZJRlZ1YTI1dmQyNGdWbEpOUTE5MmNtMGdjM0JsWTFabGNuTnBiMjRnWENJa2UzTndaV05XWlhKemFXOXVmVndpWUNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J6WTJobGJXRkZlSEJ5WlhOemFXOXVjeUE5SUdWNGRHVnVjMmx2Ymk1bGVIQnlaWE56YVc5dWN6dGNiaUFnSUNCcFppQW9JWE5qYUdWdFlVVjRjSEpsYzNOcGIyNXpLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCc2FYTjBJR1Y0Y0hKbGMzTnBiMjV6WEc0Z0lDQWdZMjl1YzNRZ2NISmxjMlYwVG1GdFpWTmxkQ0E5SUc1bGR5QlRaWFE4YzNSeWFXNW5QaWhQWW1wbFkzUXVkbUZzZFdWektGWlNUVVY0Y0hKbGMzTnBiMjVRY21WelpYUk9ZVzFsS1NrN1hHNGdJQ0FnWTI5dWMzUWdibUZ0WlZOamFHVnRZVVY0Y0hKbGMzTnBiMjVOWVhBZ1BTQnVaWGNnVFdGd1BITjBjbWx1Wnl3Z1ZqRldVazFUWTJobGJXRXVSWGh3Y21WemMybHZiajRvS1R0Y2JseHVJQ0FnSUdsbUlDaHpZMmhsYldGRmVIQnlaWE56YVc5dWN5NXdjbVZ6WlhRZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ1QySnFaV04wTG1WdWRISnBaWE1vYzJOb1pXMWhSWGh3Y21WemMybHZibk11Y0hKbGMyVjBLUzVtYjNKRllXTm9LQ2hiYm1GdFpTd2djMk5vWlcxaFJYaHdjbVZ6YzJsdmJsMHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSE5qYUdWdFlVVjRjSEpsYzNOcGIyNGdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlNBdkx5QjBlWEJsYzJOeWFYQjBYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRndjbVZ6WlhST1lXMWxVMlYwTG1oaGN5aHVZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmloZ1ZsSk5SWGh3Y21WemMybHZia3h2WVdSbGNsQnNkV2RwYmpvZ1ZXNXJibTkzYmlCd2NtVnpaWFFnYm1GdFpTQmNJaVI3Ym1GdFpYMWNJaUJrWlhSbFkzUmxaQzRnU1dkdWIzSnBibWNnZEdobElHVjRjSEpsYzNOcGIyNWdLVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnVZVzFsVTJOb1pXMWhSWGh3Y21WemMybHZiazFoY0M1elpYUW9ibUZ0WlN3Z2MyTm9aVzFoUlhod2NtVnpjMmx2YmlrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jMk5vWlcxaFJYaHdjbVZ6YzJsdmJuTXVZM1Z6ZEc5dElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lFOWlhbVZqZEM1bGJuUnlhV1Z6S0hOamFHVnRZVVY0Y0hKbGMzTnBiMjV6TG1OMWMzUnZiU2t1Wm05eVJXRmphQ2dvVzI1aGJXVXNJSE5qYUdWdFlVVjRjSEpsYzNOcGIyNWRLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h3Y21WelpYUk9ZVzFsVTJWMExtaGhjeWh1WVcxbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUdCV1VrMUZlSEJ5WlhOemFXOXVURzloWkdWeVVHeDFaMmx1T2lCRGRYTjBiMjBnWlhod2NtVnpjMmx2YmlCallXNXViM1FnYUdGMlpTQndjbVZ6WlhRZ2JtRnRaU0JjSWlSN2JtRnRaWDFjSWk0Z1NXZHViM0pwYm1jZ2RHaGxJR1Y0Y0hKbGMzTnBiMjVnTEZ4dUlDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2JtRnRaVk5qYUdWdFlVVjRjSEpsYzNOcGIyNU5ZWEF1YzJWMEtHNWhiV1VzSUhOamFHVnRZVVY0Y0hKbGMzTnBiMjRwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z2NISmxjR0Z5WlNCdFlXNWhaMlZ5WEc0Z0lDQWdZMjl1YzNRZ2JXRnVZV2RsY2lBOUlHNWxkeUJXVWsxRmVIQnlaWE56YVc5dVRXRnVZV2RsY2lncE8xeHVYRzRnSUNBZ0x5OGdiRzloWkNCbGVIQnlaWE56YVc5dWMxeHVJQ0FnSUdGM1lXbDBJRkJ5YjIxcGMyVXVZV3hzS0Z4dUlDQWdJQ0FnUVhKeVlYa3Vabkp2YlNodVlXMWxVMk5vWlcxaFJYaHdjbVZ6YzJsdmJrMWhjQzVsYm5SeWFXVnpLQ2twTG0xaGNDaGhjM2x1WXlBb1cyNWhiV1VzSUhOamFHVnRZVVY0Y0hKbGMzTnBiMjVkS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHVjRjSEpsYzNOcGIyNGdQU0J1WlhjZ1ZsSk5SWGh3Y21WemMybHZiaWh1WVcxbEtUdGNiaUFnSUNBZ0lDQWdaMngwWmk1elkyVnVaUzVoWkdRb1pYaHdjbVZ6YzJsdmJpazdYRzVjYmlBZ0lDQWdJQ0FnWlhod2NtVnpjMmx2Ymk1cGMwSnBibUZ5ZVNBOUlITmphR1Z0WVVWNGNISmxjM05wYjI0dWFYTkNhVzVoY25rZ1B6OGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lHVjRjSEpsYzNOcGIyNHViM1psY25KcFpHVkNiR2x1YXlBOUlITmphR1Z0WVVWNGNISmxjM05wYjI0dWIzWmxjbkpwWkdWQ2JHbHVheUEvUHlBbmJtOXVaU2M3WEc0Z0lDQWdJQ0FnSUdWNGNISmxjM05wYjI0dWIzWmxjbkpwWkdWTWIyOXJRWFFnUFNCelkyaGxiV0ZGZUhCeVpYTnphVzl1TG05MlpYSnlhV1JsVEc5dmEwRjBJRDgvSUNkdWIyNWxKenRjYmlBZ0lDQWdJQ0FnWlhod2NtVnpjMmx2Ymk1dmRtVnljbWxrWlUxdmRYUm9JRDBnYzJOb1pXMWhSWGh3Y21WemMybHZiaTV2ZG1WeWNtbGtaVTF2ZFhSb0lEOC9JQ2R1YjI1bEp6dGNibHh1SUNBZ0lDQWdJQ0J6WTJobGJXRkZlSEJ5WlhOemFXOXVMbTF2Y25Cb1ZHRnlaMlYwUW1sdVpITS9MbVp2Y2tWaFkyZ29ZWE41Ym1NZ0tHSnBibVFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1ltbHVaQzV1YjJSbElEMDlQU0IxYm1SbFptbHVaV1FnZkh3Z1ltbHVaQzVwYm1SbGVDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NISnBiV2wwYVhabGN5QTlJQ2hoZDJGcGRDQm5iSFJtUlhoMGNtRmpkRkJ5YVcxcGRHbDJaWE5HY205dFRtOWtaU2huYkhSbUxDQmlhVzVrTG01dlpHVXBLU0U3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYlc5eWNHaFVZWEpuWlhSSmJtUmxlQ0E5SUdKcGJtUXVhVzVrWlhnN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCamFHVmpheUJwWmlCMGFHVWdiV1Z6YUNCb1lYTWdkR2hsSUhSaGNtZGxkQ0J0YjNKd2FDQjBZWEpuWlhSY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWhjSEpwYldsMGFYWmxjeTVsZG1WeWVTaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0tIQnlhVzFwZEdsMlpTa2dQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JCY25KaGVTNXBjMEZ5Y21GNUtIQnlhVzFwZEdsMlpTNXRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE1wSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXOXljR2hVWVhKblpYUkpibVJsZUNBOElIQnlhVzFwZEdsMlpTNXRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE11YkdWdVozUm9MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JnVmxKTlJYaHdjbVZ6YzJsdmJreHZZV1JsY2xCc2RXZHBiam9nSkh0elkyaGxiV0ZGZUhCeVpYTnphVzl1TG01aGJXVjlJR0YwZEdWdGNIUnpJSFJ2SUdsdVpHVjRJRzF2Y25Cb0lDTWtlMjF2Y25Cb1ZHRnlaMlYwU1c1a1pYaDlJR0oxZENCdWIzUWdabTkxYm1RdVlDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdaWGh3Y21WemMybHZiaTVoWkdSQ2FXNWtLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRlpTVFVWNGNISmxjM05wYjI1TmIzSndhRlJoY21kbGRFSnBibVFvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y21sdGFYUnBkbVZ6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVEb2diVzl5Y0doVVlYSm5aWFJKYm1SbGVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2QyVnBaMmgwT2lCaWFXNWtMbmRsYVdkb2RDQS9QeUF4TGpBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1N4Y2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYzJOb1pXMWhSWGh3Y21WemMybHZiaTV0WVhSbGNtbGhiRU52Ykc5eVFtbHVaSE1nZkh3Z2MyTm9aVzFoUlhod2NtVnpjMmx2Ymk1MFpYaDBkWEpsVkhKaGJuTm1iM0p0UW1sdVpITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QnNhWE4wSUhWd0lHVjJaWEo1SUcxaGRHVnlhV0ZzSUdsdUlHQm5iSFJtTG5OalpXNWxZRnh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR2RzZEdaTllYUmxjbWxoYkhNNklGUklVa1ZGTGsxaGRHVnlhV0ZzVzEwZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNCbmJIUm1Mbk5qWlc1bExuUnlZWFpsY25ObEtDaHZZbXBsWTNRcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUcxaGRHVnlhV0ZzSUQwZ0tHOWlhbVZqZENCaGN5QmhibmtwTG0xaGRHVnlhV0ZzSUdGeklGUklVa1ZGTGsxaGRHVnlhV0ZzSUh3Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMWhkR1Z5YVdGc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHZHNkR1pOWVhSbGNtbGhiSE11Y0hWemFDaHRZWFJsY21saGJDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnpZMmhsYldGRmVIQnlaWE56YVc5dUxtMWhkR1Z5YVdGc1EyOXNiM0pDYVc1a2N6OHVabTl5UldGamFDaGhjM2x1WXlBb1ltbHVaQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiV0YwWlhKcFlXeHpJRDBnWjJ4MFprMWhkR1Z5YVdGc2N5NW1hV3gwWlhJb0tHMWhkR1Z5YVdGc0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHMWhkR1Z5YVdGc1NXNWtaWGdnUFNCbmJIUm1SMlYwUVhOemIyTnBZWFJsWkUxaGRHVnlhV0ZzU1c1a1pYZ29kR2hwY3k1d1lYSnpaWElzSUcxaGRHVnlhV0ZzS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0pwYm1RdWJXRjBaWEpwWVd3Z1BUMDlJRzFoZEdWeWFXRnNTVzVrWlhnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYldGMFpYSnBZV3h6TG1admNrVmhZMmdvS0cxaGRHVnlhV0ZzS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjRjSEpsYzNOcGIyNHVZV1JrUW1sdVpDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVmxKTlJYaHdjbVZ6YzJsdmJrMWhkR1Z5YVdGc1EyOXNiM0pDYVc1a0tIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFoZEdWeWFXRnNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dZbWx1WkM1MGVYQmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBWbUZzZFdVNklHNWxkeUJVU0ZKRlJTNURiMnh2Y2lncExtWnliMjFCY25KaGVTaGlhVzVrTG5SaGNtZGxkRlpoYkhWbEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYzJOb1pXMWhSWGh3Y21WemMybHZiaTUwWlhoMGRYSmxWSEpoYm5ObWIzSnRRbWx1WkhNL0xtWnZja1ZoWTJnb1lYTjVibU1nS0dKcGJtUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHMWhkR1Z5YVdGc2N5QTlJR2RzZEdaTllYUmxjbWxoYkhNdVptbHNkR1Z5S0NodFlYUmxjbWxoYkNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdFlYUmxjbWxoYkVsdVpHVjRJRDBnWjJ4MFprZGxkRUZ6YzI5amFXRjBaV1JOWVhSbGNtbGhiRWx1WkdWNEtIUm9hWE11Y0dGeWMyVnlMQ0J0WVhSbGNtbGhiQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmlhVzVrTG0xaGRHVnlhV0ZzSUQwOVBTQnRZWFJsY21saGJFbHVaR1Y0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFoZEdWeWFXRnNjeTVtYjNKRllXTm9LQ2h0WVhSbGNtbGhiQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGVIQnlaWE56YVc5dUxtRmtaRUpwYm1Rb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRlpTVFVWNGNISmxjM05wYjI1VVpYaDBkWEpsVkhKaGJuTm1iM0p0UW1sdVpDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhSbGNtbGhiQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5bVpuTmxkRG9nYm1WM0lGUklVa1ZGTGxabFkzUnZjaklvS1M1bWNtOXRRWEp5WVhrb1ltbHVaQzV2Wm1aelpYUWdQejhnV3pBdU1Dd2dNQzR3WFNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZMkZzWlRvZ2JtVjNJRlJJVWtWRkxsWmxZM1J2Y2pJb0tTNW1jbTl0UVhKeVlYa29ZbWx1WkM1elkyRnNaU0EvUHlCYk1TNHdMQ0F4TGpCZEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYldGdVlXZGxjaTV5WldkcGMzUmxja1Y0Y0hKbGMzTnBiMjRvWlhod2NtVnpjMmx2YmlrN1hHNGdJQ0FnSUNCOUtTeGNiaUFnSUNBcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUcxaGJtRm5aWEk3WEc0Z0lIMWNibHh1SUNCd2NtbDJZWFJsSUdGemVXNWpJRjkyTUVsdGNHOXlkQ2huYkhSbU9pQkhURlJHS1RvZ1VISnZiV2x6WlR4V1VrMUZlSEJ5WlhOemFXOXVUV0Z1WVdkbGNpQjhJRzUxYkd3K0lIdGNiaUFnSUNCamIyNXpkQ0JxYzI5dUlEMGdkR2hwY3k1d1lYSnpaWEl1YW5OdmJpQmhjeUJIVEZSR1UyTm9aVzFoTGtsSFRGUkdPMXh1WEc0Z0lDQWdMeThnWldGeWJIa2dZV0p2Y25RZ2FXWWdhWFFnWkc5bGMyNG5kQ0IxYzJVZ2RuSnRYRzRnSUNBZ1kyOXVjM1FnZG5KdFJYaDBJRDBnYW5OdmJpNWxlSFJsYm5OcGIyNXpQeTVXVWswZ1lYTWdWakJXVWswdVZsSk5JSHdnZFc1a1pXWnBibVZrTzF4dUlDQWdJR2xtSUNnaGRuSnRSWGgwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J6WTJobGJXRkNiR1Z1WkZOb1lYQmxJRDBnZG5KdFJYaDBMbUpzWlc1a1UyaGhjR1ZOWVhOMFpYSTdYRzRnSUNBZ2FXWWdLQ0Z6WTJobGJXRkNiR1Z1WkZOb1lYQmxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQnRZVzVoWjJWeUlEMGdibVYzSUZaU1RVVjRjSEpsYzNOcGIyNU5ZVzVoWjJWeUtDazdYRzVjYmlBZ0lDQmpiMjV6ZENCelkyaGxiV0ZDYkdWdVpGTm9ZWEJsUjNKdmRYQnpJRDBnYzJOb1pXMWhRbXhsYm1SVGFHRndaUzVpYkdWdVpGTm9ZWEJsUjNKdmRYQnpPMXh1SUNBZ0lHbG1JQ2doYzJOb1pXMWhRbXhsYm1SVGFHRndaVWR5YjNWd2N5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHMWhibUZuWlhJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdZbXhsYm1SVGFHRndaVTVoYldWVFpYUWdQU0J1WlhjZ1UyVjBQSE4wY21sdVp6NG9LVHRjYmx4dUlDQWdJR0YzWVdsMElGQnliMjFwYzJVdVlXeHNLRnh1SUNBZ0lDQWdjMk5vWlcxaFFteGxibVJUYUdGd1pVZHliM1Z3Y3k1dFlYQW9ZWE41Ym1NZ0tITmphR1Z0WVVkeWIzVndLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhZd1VISmxjMlYwVG1GdFpTQTlJSE5qYUdWdFlVZHliM1Z3TG5CeVpYTmxkRTVoYldVN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhZeFVISmxjMlYwVG1GdFpTQTlYRzRnSUNBZ0lDQWdJQ0FnS0hZd1VISmxjMlYwVG1GdFpTQWhQU0J1ZFd4c0lDWW1JRlpTVFVWNGNISmxjM05wYjI1TWIyRmtaWEpRYkhWbmFXNHVkakIyTVZCeVpYTmxkRTVoYldWTllYQmJkakJRY21WelpYUk9ZVzFsWFNrZ2ZId2diblZzYkR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYm1GdFpTQTlJSFl4VUhKbGMyVjBUbUZ0WlNBL1B5QnpZMmhsYldGSGNtOTFjQzV1WVcxbE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNodVlXMWxJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9KMVpTVFVWNGNISmxjM05wYjI1TWIyRmtaWEpRYkhWbmFXNDZJRTl1WlNCdlppQmpkWE4wYjIwZ1pYaHdjbVZ6YzJsdmJuTWdhR0Z6SUc1dklHNWhiV1V1SUVsbmJtOXlhVzVuSUhSb1pTQmxlSEJ5WlhOemFXOXVKeWs3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnWkhWd2JHbGpZWFJwYjI0Z1kyaGxZMnRjYmlBZ0lDQWdJQ0FnYVdZZ0tHSnNaVzVrVTJoaGNHVk9ZVzFsVTJWMExtaGhjeWh1WVcxbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUdCV1VrMUZlSEJ5WlhOemFXOXVURzloWkdWeVVHeDFaMmx1T2lCQmJpQmxlSEJ5WlhOemFXOXVJSEJ5WlhObGRDQWtlM1l3VUhKbGMyVjBUbUZ0WlgwZ2FHRnpJR1IxY0d4cFkyRjBaV1FnWlc1MGNtbGxjeTRnU1dkdWIzSnBibWNnZEdobElHVjRjSEpsYzNOcGIyNWdMRnh1SUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWW14bGJtUlRhR0Z3WlU1aGJXVlRaWFF1WVdSa0tHNWhiV1VwTzF4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdWNGNISmxjM05wYjI0Z1BTQnVaWGNnVmxKTlJYaHdjbVZ6YzJsdmJpaHVZVzFsS1R0Y2JpQWdJQ0FnSUNBZ1oyeDBaaTV6WTJWdVpTNWhaR1FvWlhod2NtVnpjMmx2YmlrN1hHNWNiaUFnSUNBZ0lDQWdaWGh3Y21WemMybHZiaTVwYzBKcGJtRnllU0E5SUhOamFHVnRZVWR5YjNWd0xtbHpRbWx1WVhKNUlEOC9JR1poYkhObE8xeHVJQ0FnSUNBZ0lDQXZMeUIyTUNCa2IyVnpiaWQwSUdoaGRtVWdhV2R1YjNKbElIQnliM0JsY25ScFpYTmNibHh1SUNBZ0lDQWdJQ0F2THlCQ2FXNWtJRzF2Y25Cb1ZHRnlaMlYwWEc0Z0lDQWdJQ0FnSUdsbUlDaHpZMmhsYldGSGNtOTFjQzVpYVc1a2N5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhOamFHVnRZVWR5YjNWd0xtSnBibVJ6TG1admNrVmhZMmdvWVhONWJtTWdLR0pwYm1RcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hpYVc1a0xtMWxjMmdnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0JpYVc1a0xtbHVaR1Y0SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnViMlJsYzFWemFXNW5UV1Z6YURvZ2JuVnRZbVZ5VzEwZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHcHpiMjR1Ym05a1pYTS9MbVp2Y2tWaFkyZ29LRzV2WkdVc0lHa3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHNXZaR1V1YldWemFDQTlQVDBnWW1sdVpDNXRaWE5vS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaWE5WYzJsdVowMWxjMmd1Y0hWemFDaHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUcxdmNuQm9WR0Z5WjJWMFNXNWtaWGdnUFNCaWFXNWtMbWx1WkdWNE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCaGQyRnBkQ0JRY205dGFYTmxMbUZzYkNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pYTlZjMmx1WjAxbGMyZ3ViV0Z3S0dGemVXNWpJQ2h1YjJSbFNXNWtaWGdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd2NtbHRhWFJwZG1WeklEMGdLR0YzWVdsMElHZHNkR1pGZUhSeVlXTjBVSEpwYldsMGFYWmxjMFp5YjIxT2IyUmxLR2RzZEdZc0lHNXZaR1ZKYm1SbGVDa3BJVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHTm9aV05ySUdsbUlIUm9aU0J0WlhOb0lHaGhjeUIwYUdVZ2RHRnlaMlYwSUcxdmNuQm9JSFJoY21kbGRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNGd2NtbHRhWFJwZG1WekxtVjJaWEo1S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9jSEpwYldsMGFYWmxLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRUZ5Y21GNUxtbHpRWEp5WVhrb2NISnBiV2wwYVhabExtMXZjbkJvVkdGeVoyVjBTVzVtYkhWbGJtTmxjeWtnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0YjNKd2FGUmhjbWRsZEVsdVpHVjRJRHdnY0hKcGJXbDBhWFpsTG0xdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGN5NXNaVzVuZEdnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCV1VrMUZlSEJ5WlhOemFXOXVURzloWkdWeVVHeDFaMmx1T2lBa2UzTmphR1Z0WVVkeWIzVndMbTVoYldWOUlHRjBkR1Z0Y0hSeklIUnZJR2x1WkdWNElDUjdiVzl5Y0doVVlYSm5aWFJKYm1SbGVIMTBhQ0J0YjNKd2FDQmlkWFFnYm05MElHWnZkVzVrTG1Bc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWNGNISmxjM05wYjI0dVlXUmtRbWx1WkNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJXVWsxRmVIQnlaWE56YVc5dVRXOXljR2hVWVhKblpYUkNhVzVrS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEpwYldsMGFYWmxjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGc2SUcxdmNuQm9WR0Z5WjJWMFNXNWtaWGdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZGxhV2RvZERvZ01DNHdNU0FxSUNoaWFXNWtMbmRsYVdkb2RDQS9QeUF4TURBcExDQXZMeUJ1WVhKeWIzZHBibWNnZEdobElISmhibWRsSUdaeWIyMGdXeUF3TGpBZ0xTQXhNREF1TUNCZElIUnZJRnNnTUM0d0lDMGdNUzR3SUYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklFSnBibVFnVFdGMFpYSnBZV3hEYjJ4dmNpQmhibVFnVkdWNGRIVnlaVlJ5WVc1elptOXliVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQnRZWFJsY21saGJGWmhiSFZsY3lBOUlITmphR1Z0WVVkeWIzVndMbTFoZEdWeWFXRnNWbUZzZFdWek8xeHVJQ0FnSUNBZ0lDQnBaaUFvYldGMFpYSnBZV3hXWVd4MVpYTWdKaVlnYldGMFpYSnBZV3hXWVd4MVpYTXViR1Z1WjNSb0lDRTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdiV0YwWlhKcFlXeFdZV3gxWlhNdVptOXlSV0ZqYUNnb2JXRjBaWEpwWVd4V1lXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYUmxjbWxoYkZaaGJIVmxMbTFoZEdWeWFXRnNUbUZ0WlNBOVBUMGdkVzVrWldacGJtVmtJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzFoZEdWeWFXRnNWbUZzZFdVdWNISnZjR1Z5ZEhsT1lXMWxJRDA5UFNCMWJtUmxabWx1WldRZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBaWEpwWVd4V1lXeDFaUzUwWVhKblpYUldZV3gxWlNBOVBUMGdkVzVrWldacGJtVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQXFJT09Db3VPRGtPT0N2K09Edk9PQnJ1T0NxdU9EbHVPQ3VPT0NwK09DcitPRGlPT0JxK2lvcmVXdW11T0JsZU9Dak9PQnB1T0JoT09DaStPRG51T0RodU9EcXVPQ291T0RxK09CcnVXR2hlT0JpK09DaVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ29nYldGMFpYSnBZV3hXWVd4MVplT0JwK2FNaCtXdW11T0JsZU9Dak9PQnB1T0JoT09DaStPRG51T0RodU9EcXVPQ291T0RxK09Da3VtYmh1T0NnZU9DaStPQWdseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FxSU9lSnVlV3VtdU9CcStPQnIrV1FqZVdKamVPQ2t1Uzl2K2VVcU9PQm1lT0NpK09BZ2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ29nNDRLaTQ0S200NE9JNDRPcDQ0S2s0NE96NW8rUDU1Uzc1NVNvNDRHdTQ0T2U0NE9HNDRPcTQ0S2k0NE9yNDRLQzVaQ001cG1DNDRHcjZadUc0NEtCNDRLTDQ0Q0NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzFoZEdWeWFXRnNjem9nVkVoU1JVVXVUV0YwWlhKcFlXeGJYU0E5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJ4MFppNXpZMlZ1WlM1MGNtRjJaWEp6WlNnb2IySnFaV04wS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dvYjJKcVpXTjBJR0Z6SUdGdWVTa3ViV0YwWlhKcFlXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnRZWFJsY21saGJEb2dWRWhTUlVVdVRXRjBaWEpwWVd4YlhTQjhJRlJJVWtWRkxrMWhkR1Z5YVdGc0lEMGdLRzlpYW1WamRDQmhjeUJoYm5rcExtMWhkR1Z5YVdGc08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHMWhkR1Z5YVdGc0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGMFpYSnBZV3h6TG5CMWMyZ29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM0dUxtMWhkR1Z5YVdGc0xtWnBiSFJsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvYlhSc0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLRzEwYkM1dVlXMWxJRDA5UFNCdFlYUmxjbWxoYkZaaGJIVmxMbTFoZEdWeWFXRnNUbUZ0WlNFZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiWFJzTG01aGJXVWdQVDA5SUcxaGRHVnlhV0ZzVm1Gc2RXVXViV0YwWlhKcFlXeE9ZVzFsSVNBcklDY2dLRTkxZEd4cGJtVXBKeWtnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGRHVnlhV0ZzY3k1cGJtUmxlRTltS0cxMGJDa2dQVDA5SUMweExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzFoZEdWeWFXRnNMbTVoYldVZ1BUMDlJRzFoZEdWeWFXRnNWbUZzZFdVdWJXRjBaWEpwWVd4T1lXMWxJQ1ltSUcxaGRHVnlhV0ZzY3k1cGJtUmxlRTltS0cxaGRHVnlhV0ZzS1NBOVBUMGdMVEVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhkR1Z5YVdGc2N5NXdkWE5vS0cxaGRHVnlhV0ZzS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnRZWFJsY21saGJGQnliM0JsY25SNVRtRnRaU0E5SUcxaGRHVnlhV0ZzVm1Gc2RXVXVjSEp2Y0dWeWRIbE9ZVzFsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiV0YwWlhKcFlXeHpMbVp2Y2tWaFkyZ29LRzFoZEdWeWFXRnNLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGUmxlSFIxY21WVWNtRnVjMlp2Y20xQ2FXNWtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0WVhSbGNtbGhiRkJ5YjNCbGNuUjVUbUZ0WlNBOVBUMGdKMTlOWVdsdVZHVjRYMU5VSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhOallXeGxJRDBnYm1WM0lGUklVa1ZGTGxabFkzUnZjaklvYldGMFpYSnBZV3hXWVd4MVpTNTBZWEpuWlhSV1lXeDFaU0ZiTUYwc0lHMWhkR1Z5YVdGc1ZtRnNkV1V1ZEdGeVoyVjBWbUZzZFdVaFd6RmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnZabVp6WlhRZ1BTQnVaWGNnVkVoU1JVVXVWbVZqZEc5eU1paHRZWFJsY21saGJGWmhiSFZsTG5SaGNtZGxkRlpoYkhWbElWc3lYU3dnYldGMFpYSnBZV3hXWVd4MVpTNTBZWEpuWlhSV1lXeDFaU0ZiTTEwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjRjSEpsYzNOcGIyNHVZV1JrUW1sdVpDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCV1VrMUZlSEJ5WlhOemFXOXVWR1Y0ZEhWeVpWUnlZVzV6Wm05eWJVSnBibVFvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWFJsY21saGJDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOaGJHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5bVpuTmxkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJOWVhSbGNtbGhiRU52Ykc5eVFtbHVaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdFlYUmxjbWxoYkVOdmJHOXlWSGx3WlNBOUlIWXdSWGh3Y21WemMybHZiazFoZEdWeWFXRnNRMjlzYjNKTllYQmJiV0YwWlhKcFlXeFFjbTl3WlhKMGVVNWhiV1ZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JXRjBaWEpwWVd4RGIyeHZjbFI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxlSEJ5WlhOemFXOXVMbUZrWkVKcGJtUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1ZsSk5SWGh3Y21WemMybHZiazFoZEdWeWFXRnNRMjlzYjNKQ2FXNWtLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBaWEpwWVd3c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklHMWhkR1Z5YVdGc1EyOXNiM0pVZVhCbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUldZV3gxWlRvZ2JtVjNJRlJJVWtWRkxrTnZiRzl5S0M0dUxtMWhkR1Z5YVdGc1ZtRnNkV1V1ZEdGeVoyVjBWbUZzZFdVaExuTnNhV05sS0RBc0lETXBLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvYldGMFpYSnBZV3hRY205d1pYSjBlVTVoYldVZ0t5QW5JR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUW5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYldGdVlXZGxjaTV5WldkcGMzUmxja1Y0Y0hKbGMzTnBiMjRvWlhod2NtVnpjMmx2YmlrN1hHNGdJQ0FnSUNCOUtTeGNiaUFnSUNBcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUcxaGJtRm5aWEk3WEc0Z0lIMWNibjFjYmlJc0lpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVZVzFwYm1jdFkyOXVkbVZ1ZEdsdmJpQXFMMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdWbEpOUlhod2NtVnpjMmx2Yms5MlpYSnlhV1JsVkhsd1pTQTlJSHRjYmlBZ1RtOXVaVG9nSjI1dmJtVW5MRnh1SUNCQ2JHOWphem9nSjJKc2IyTnJKeXhjYmlBZ1FteGxibVE2SUNkaWJHVnVaQ2NzWEc1OUlHRnpJR052Ym5OME8xeHVYRzVsZUhCdmNuUWdkSGx3WlNCV1VrMUZlSEJ5WlhOemFXOXVUM1psY25KcFpHVlVlWEJsSUQwZ2RIbHdaVzltSUZaU1RVVjRjSEpsYzNOcGIyNVBkbVZ5Y21sa1pWUjVjR1ZiYTJWNWIyWWdkSGx3Wlc5bUlGWlNUVVY0Y0hKbGMzTnBiMjVQZG1WeWNtbGtaVlI1Y0dWZE8xeHVJaXdpYVcxd2IzSjBJSFI1Y0dVZ2V5QldVazFHYVhKemRGQmxjbk52YmsxbGMyaEJibTV2ZEdGMGFXOXVJSDBnWm5KdmJTQW5MaTlXVWsxR2FYSnpkRkJsY25OdmJrMWxjMmhCYm01dmRHRjBhVzl1Snp0Y2JtbHRjRzl5ZENBcUlHRnpJRlJJVWtWRklHWnliMjBnSjNSb2NtVmxKenRjYm1sdGNHOXlkQ0IwZVhCbElIc2dWbEpOU0hWdFlXNXZhV1FnZlNCbWNtOXRJQ2N1TGk5b2RXMWhibTlwWkNjN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCV1VrMUdhWEp6ZEZCbGNuTnZiaUI3WEc0Z0lDOHFLbHh1SUNBZ0tpQkJJR1JsWm1GMWJIUWdZMkZ0WlhKaElHeGhlV1Z5SUdadmNpQmdSbWx5YzNSUVpYSnpiMjVQYm14NVlDQnNZWGxsY2k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSE5sWlNCYlcyZGxkRVpwY25OMFVHVnljMjl1VDI1c2VVeGhlV1Z5WFYxY2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCemRHRjBhV01nY21WaFpHOXViSGtnUkVWR1FWVk1WRjlHU1ZKVFZGQkZVbE5QVGw5UFRreFpYMHhCV1VWU0lEMGdPVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRU0JrWldaaGRXeDBJR05oYldWeVlTQnNZWGxsY2lCbWIzSWdZRlJvYVhKa1VHVnljMjl1VDI1c2VXQWdiR0Y1WlhJdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ6WldVZ1cxdG5aWFJVYUdseVpGQmxjbk52Yms5dWJIbE1ZWGxsY2wxZFhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ2MzUmhkR2xqSUhKbFlXUnZibXg1SUVSRlJrRlZURlJmVkVoSlVrUlFSVkpUVDA1ZlQwNU1XVjlNUVZsRlVpQTlJREV3TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJKZEhNZ1lYTnpiMk5wWVhSbFpDQjdRR3hwYm1zZ1ZsSk5TSFZ0WVc1dmFXUjlMbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR2gxYldGdWIybGtPaUJXVWsxSWRXMWhibTlwWkR0Y2JpQWdjSFZpYkdsaklHMWxjMmhCYm01dmRHRjBhVzl1Y3pvZ1ZsSk5SbWx5YzNSUVpYSnpiMjVOWlhOb1FXNXViM1JoZEdsdmJsdGRPMXh1WEc0Z0lIQnlhWFpoZEdVZ1gyWnBjbk4wVUdWeWMyOXVUMjVzZVV4aGVXVnlJRDBnVmxKTlJtbHljM1JRWlhKemIyNHVSRVZHUVZWTVZGOUdTVkpUVkZCRlVsTlBUbDlQVGt4WlgweEJXVVZTTzF4dUlDQndjbWwyWVhSbElGOTBhR2x5WkZCbGNuTnZiazl1YkhsTVlYbGxjaUE5SUZaU1RVWnBjbk4wVUdWeWMyOXVMa1JGUmtGVlRGUmZWRWhKVWtSUVJWSlRUMDVmVDA1TVdWOU1RVmxGVWp0Y2JseHVJQ0J3Y21sMllYUmxJRjlwYm1sMGFXRnNhWHBsWkV4aGVXVnljeUE5SUdaaGJITmxPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRjbVZoZEdVZ1lTQnVaWGNnVmxKTlJtbHljM1JRWlhKemIyNGdiMkpxWldOMExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdhSFZ0WVc1dmFXUWdRU0I3UUd4cGJtc2dWbEpOU0hWdFlXNXZhV1I5WEc0Z0lDQXFJRUJ3WVhKaGJTQnRaWE5vUVc1dWIzUmhkR2x2Ym5NZ1FTQnlaVzVrWlhKbGNpQnpaWFIwYVc1bmN5NGdVMlZsSUhSb1pTQmtaWE5qY21sd2RHbHZiaUJ2WmlCYlcxSmxibVJsY21WeVJtbHljM1JRWlhKemIyNUdiR0ZuYzExZElHWnZjaUJ0YjNKbElHbHVabTljYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUJqYjI1emRISjFZM1J2Y2lob2RXMWhibTlwWkRvZ1ZsSk5TSFZ0WVc1dmFXUXNJRzFsYzJoQmJtNXZkR0YwYVc5dWN6b2dWbEpOUm1seWMzUlFaWEp6YjI1TlpYTm9RVzV1YjNSaGRHbHZibHRkS1NCN1hHNGdJQ0FnZEdocGN5NW9kVzFoYm05cFpDQTlJR2gxYldGdWIybGtPMXh1SUNBZ0lIUm9hWE11YldWemFFRnVibTkwWVhScGIyNXpJRDBnYldWemFFRnVibTkwWVhScGIyNXpPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOdmNIa2dkR2hsSUdkcGRtVnVJSHRBYkdsdWF5QldVazFHYVhKemRGQmxjbk52Ym4wZ2FXNTBieUIwYUdseklHOXVaUzVjYmlBZ0lDb2dlMEJzYVc1cklHaDFiV0Z1YjJsa2ZTQnRkWE4wSUdKbElITmhiV1VnWVhNZ2RHaGxJSE52ZFhKalpTQnZibVV1WEc0Z0lDQXFJRUJ3WVhKaGJTQnpiM1Z5WTJVZ1ZHaGxJSHRBYkdsdWF5QldVazFHYVhKemRGQmxjbk52Ym4wZ2VXOTFJSGRoYm5RZ2RHOGdZMjl3ZVZ4dUlDQWdLaUJBY21WMGRYSnVjeUIwYUdselhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ1kyOXdlU2h6YjNWeVkyVTZJRlpTVFVacGNuTjBVR1Z5YzI5dUtUb2dkR2hwY3lCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YUhWdFlXNXZhV1FnSVQwOUlITnZkWEpqWlM1b2RXMWhibTlwWkNrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkV1VrMUdhWEp6ZEZCbGNuTnZiam9nYUhWdFlXNXZhV1FnYlhWemRDQmlaU0J6WVcxbElHbHVJRzl5WkdWeUlIUnZJR052Y0hrbktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbTFsYzJoQmJtNXZkR0YwYVc5dWN5QTlJSE52ZFhKalpTNXRaWE5vUVc1dWIzUmhkR2x2Ym5NdWJXRndLQ2hoYm01dmRHRjBhVzl1S1NBOVBpQW9lMXh1SUNBZ0lDQWdiV1Z6YUdWek9pQmhibTV2ZEdGMGFXOXVMbTFsYzJobGN5NWpiMjVqWVhRb0tTeGNiaUFnSUNBZ0lIUjVjR1U2SUdGdWJtOTBZWFJwYjI0dWRIbHdaU3hjYmlBZ0lDQjlLU2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWFIxY201eklHRWdZMnh2Ym1VZ2IyWWdkR2hwY3lCN1FHeHBibXNnVmxKTlJtbHljM1JRWlhKemIyNTlMbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QkRiM0JwWldRZ2UwQnNhVzVySUZaU1RVWnBjbk4wVUdWeWMyOXVmVnh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJR05zYjI1bEtDazZJRlpTVFVacGNuTjBVR1Z5YzI5dUlIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGWlNUVVpwY25OMFVHVnljMjl1S0hSb2FYTXVhSFZ0WVc1dmFXUXNJSFJvYVhNdWJXVnphRUZ1Ym05MFlYUnBiMjV6S1M1amIzQjVLSFJvYVhNcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUVnWTJGdFpYSmhJR3hoZVdWeUlISmxjSEpsYzJWdWRITWdZRVpwY25OMFVHVnljMjl1VDI1c2VXQWdiR0Y1WlhJdVhHNGdJQ0FxSUU1dmRHVWdkR2hoZENBcUtubHZkU0J0ZFhOMElHTmhiR3dnZTBCc2FXNXJJSE5sZEhWd2ZTQm1hWEp6ZENCaVpXWnZjbVVnZVc5MUlIVnpaU0IwYUdVZ2JHRjVaWElnWm1WaGRIVnlaU29xSUc5eUlHbDBJR1J2WlhNZ2JtOTBJSGR2Y21zZ2NISnZjR1Z5YkhrdVhHNGdJQ0FxWEc0Z0lDQXFJRlJvWlNCMllXeDFaU0JwY3lCN1FHeHBibXNnUkVWR1FWVk1WRjlHU1ZKVFZGQkZVbE5QVGw5UFRreFpYMHhCV1VWU2ZTQmllU0JrWldaaGRXeDBJR0oxZENCNWIzVWdZMkZ1SUdOb1lXNW5aU0IwYUdVZ2JHRjVaWElnWW5rZ2MzQmxZMmxtZVdsdVp5QjJhV0VnZTBCc2FXNXJJSE5sZEhWd2ZTQnBaaUI1YjNVZ2NISmxabVZ5TGx4dUlDQWdLbHh1SUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2ZG5KdExtUmxkaTlsYmk5MWJtbDJjbTB2WVhCcEwzVnVhWFp5YlY5MWMyVmZabWx5YzNSd1pYSnpiMjR2WEc0Z0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5MGFISmxaV3B6TG05eVp5OWtiMk56THlOaGNHa3ZaVzR2WTI5eVpTOU1ZWGxsY25OY2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCblpYUWdabWx5YzNSUVpYSnpiMjVQYm14NVRHRjVaWElvS1RvZ2JuVnRZbVZ5SUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlptbHljM1JRWlhKemIyNVBibXg1VEdGNVpYSTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVNCallXMWxjbUVnYkdGNVpYSWdjbVZ3Y21WelpXNTBjeUJnVkdocGNtUlFaWEp6YjI1UGJteDVZQ0JzWVhsbGNpNWNiaUFnSUNvZ1RtOTBaU0IwYUdGMElDb3FlVzkxSUcxMWMzUWdZMkZzYkNCN1FHeHBibXNnYzJWMGRYQjlJR1pwY25OMElHSmxabTl5WlNCNWIzVWdkWE5sSUhSb1pTQnNZWGxsY2lCbVpXRjBkWEpsS2lvZ2IzSWdhWFFnWkc5bGN5QnViM1FnZDI5eWF5QndjbTl3WlhKc2VTNWNiaUFnSUNwY2JpQWdJQ29nVkdobElIWmhiSFZsSUdseklIdEFiR2x1YXlCRVJVWkJWVXhVWDFSSVNWSkVVRVZTVTA5T1gwOU9URmxmVEVGWlJWSjlJR0o1SUdSbFptRjFiSFFnWW5WMElIbHZkU0JqWVc0Z1kyaGhibWRsSUhSb1pTQnNZWGxsY2lCaWVTQnpjR1ZqYVdaNWFXNW5JSFpwWVNCN1FHeHBibXNnYzJWMGRYQjlJR2xtSUhsdmRTQndjbVZtWlhJdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5MmNtMHVaR1YyTDJWdUwzVnVhWFp5YlM5aGNHa3ZkVzVwZG5KdFgzVnpaVjltYVhKemRIQmxjbk52Ymk5Y2JpQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwzUm9jbVZsYW5NdWIzSm5MMlJ2WTNNdkkyRndhUzlsYmk5amIzSmxMMHhoZVdWeWMxeHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklHZGxkQ0IwYUdseVpGQmxjbk52Yms5dWJIbE1ZWGxsY2lncE9pQnVkVzFpWlhJZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTBhR2x5WkZCbGNuTnZiazl1YkhsTVlYbGxjanRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCSmJpQjBhR2x6SUcxbGRHaHZaQ3dnYVhRZ1lYTnphV2R1Y3lCc1lYbGxjbk1nWm05eUlHVjJaWEo1SUcxbGMyaGxjeUJpWVhObFpDQnZiaUJ0WlhOb0lHRnVibTkwWVhScGIyNXpMbHh1SUNBZ0tpQlpiM1VnYlhWemRDQmpZV3hzSUhSb2FYTWdiV1YwYUc5a0lHWnBjbk4wSUdKbFptOXlaU0I1YjNVZ2RYTmxJSFJvWlNCc1lYbGxjaUJtWldGMGRYSmxMbHh1SUNBZ0tseHVJQ0FnS2lCVWFHbHpJR2x6SUdGdUlHVnhkV2wyWVd4bGJuUWdiMllnVzFaU1RVWnBjbk4wVUdWeWMyOXVMbE5sZEhWd1hTaG9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZkbkp0TFdNdlZXNXBWbEpOTDJKc2IySXZOek5oTldKa09HWmpaR1JoWVRKaE4yRTROek0xTURrNVlUazNaVFl6WXpsa1lqTmxOV1ZoTUM5QmMzTmxkSE12VmxKTkwxSjFiblJwYldVdlJtbHljM1JRWlhKemIyNHZWbEpOUm1seWMzUlFaWEp6YjI0dVkzTWpUREk1TlMxTU1qazVLU0J2WmlCMGFHVWdWVzVwVmxKTkxseHVJQ0FnS2x4dUlDQWdLaUJVYUdVZ1lHTmhiV1Z5WVV4aGVXVnlZQ0J3WVhKaGJXVjBaWElnYzNCbFkybG1hV1Z6SUhkb2FXTm9JR3hoZVdWeUlIZHBiR3dnWW1VZ1lYTnphV2R1WldRZ1ptOXlJR0JHYVhKemRGQmxjbk52Yms5dWJIbGdJQzhnWUZSb2FYSmtVR1Z5YzI5dVQyNXNlV0F1WEc0Z0lDQXFJRWx1SUZWdWFWWlNUU3dnZDJVZ2MzQmxZMmxtYVdWa0lIUm9iM05sSUdKNUlHNWhiV2x1WnlCbFlXTm9JR1JsYzJseVpXUWdiR0Y1WlhJZ1lYTWdZRVpKVWxOVVVFVlNVMDlPWDA5T1RGbGZURUZaUlZKZ0lDOGdZRlJJU1ZKRVVFVlNVMDlPWDA5T1RGbGZURUZaUlZKZ1hHNGdJQ0FxSUdKMWRDQjNaU0JoY21VZ1oyOXBibWNnZEc4Z2MzQmxZMmxtZVNCMGFHVnpaU0JzWVhsbGNuTWdZWFFnYUdWeVpTQnphVzVqWlNCM1pTQmhjbVVnZFc1aFlteGxJSFJ2SUc1aGJXVWdiR0Y1WlhKeklHbHVJRlJvY21WbExtcHpMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnWTJGdFpYSmhUR0Y1WlhJZ1UzQmxZMmxtZVNCM2FHbGphQ0JzWVhsbGNpQjNhV3hzSUdKbElHWnZjaUJnUm1seWMzUlFaWEp6YjI1UGJteDVZQ0F2SUdCVWFHbHlaRkJsY25OdmJrOXViSGxnTGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUhObGRIVndLSHRjYmlBZ0lDQm1hWEp6ZEZCbGNuTnZiazl1YkhsTVlYbGxjaUE5SUZaU1RVWnBjbk4wVUdWeWMyOXVMa1JGUmtGVlRGUmZSa2xTVTFSUVJWSlRUMDVmVDA1TVdWOU1RVmxGVWl4Y2JpQWdJQ0IwYUdseVpGQmxjbk52Yms5dWJIbE1ZWGxsY2lBOUlGWlNUVVpwY25OMFVHVnljMjl1TGtSRlJrRlZURlJmVkVoSlVrUlFSVkpUVDA1ZlQwNU1XVjlNUVZsRlVpeGNiaUFnZlNBOUlIdDlLVG9nZG05cFpDQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdVgybHVhWFJwWVd4cGVtVmtUR0Y1WlhKektTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdVgyWnBjbk4wVUdWeWMyOXVUMjVzZVV4aGVXVnlJRDBnWm1seWMzUlFaWEp6YjI1UGJteDVUR0Y1WlhJN1hHNGdJQ0FnZEdocGN5NWZkR2hwY21SUVpYSnpiMjVQYm14NVRHRjVaWElnUFNCMGFHbHlaRkJsY25OdmJrOXViSGxNWVhsbGNqdGNibHh1SUNBZ0lIUm9hWE11YldWemFFRnVibTkwWVhScGIyNXpMbVp2Y2tWaFkyZ29LR2wwWlcwcElEMCtJSHRjYmlBZ0lDQWdJR2wwWlcwdWJXVnphR1Z6TG1admNrVmhZMmdvS0cxbGMyZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2wwWlcwdWRIbHdaU0E5UFQwZ0oyWnBjbk4wVUdWeWMyOXVUMjVzZVNjcElIdGNiaUFnSUNBZ0lDQWdJQ0J0WlhOb0xteGhlV1Z5Y3k1elpYUW9kR2hwY3k1ZlptbHljM1JRWlhKemIyNVBibXg1VEdGNVpYSXBPMXh1SUNBZ0lDQWdJQ0FnSUcxbGMyZ3VkSEpoZG1WeWMyVW9LR05vYVd4a0tTQTlQaUJqYUdsc1pDNXNZWGxsY25NdWMyVjBLSFJvYVhNdVgyWnBjbk4wVUdWeWMyOXVUMjVzZVV4aGVXVnlLU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYUmxiUzUwZVhCbElEMDlQU0FuZEdocGNtUlFaWEp6YjI1UGJteDVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHMWxjMmd1YkdGNVpYSnpMbk5sZENoMGFHbHpMbDkwYUdseVpGQmxjbk52Yms5dWJIbE1ZWGxsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdiV1Z6YUM1MGNtRjJaWEp6WlNnb1kyaHBiR1FwSUQwK0lHTm9hV3hrTG14aGVXVnljeTV6WlhRb2RHaHBjeTVmZEdocGNtUlFaWEp6YjI1UGJteDVUR0Y1WlhJcEtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hwZEdWdExuUjVjR1VnUFQwOUlDZGhkWFJ2SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTnlaV0YwWlVobFlXUnNaWE56VFc5a1pXd29iV1Z6YUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdkR2hwY3k1ZmFXNXBkR2xoYkdsNlpXUk1ZWGxsY25NZ1BTQjBjblZsTzF4dUlDQjlYRzVjYmlBZ2NISnBkbUYwWlNCZlpYaGpiSFZrWlZSeWFXRnVaMnhsY3loMGNtbGhibWRzWlhNNklHNTFiV0psY2x0ZExDQmlkM002SUc1MWJXSmxjbHRkVzEwc0lITnJhVzVKYm1SbGVEb2diblZ0WW1WeVcxMWJYU3dnWlhoamJIVmtaVG9nYm5WdFltVnlXMTBwT2lCdWRXMWlaWElnZTF4dUlDQWdJR3hsZENCamIzVnVkQ0E5SURBN1hHNGdJQ0FnYVdZZ0tHSjNjeUFoUFNCdWRXeHNJQ1ltSUdKM2N5NXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhSeWFXRnVaMnhsY3k1c1pXNW5kR2c3SUdrZ0t6MGdNeWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JoSUQwZ2RISnBZVzVuYkdWelcybGRPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmlJRDBnZEhKcFlXNW5iR1Z6VzJrZ0t5QXhYVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZeUE5SUhSeWFXRnVaMnhsYzF0cElDc2dNbDA3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR0ozTUNBOUlHSjNjMXRoWFR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJ0cGJqQWdQU0J6YTJsdVNXNWtaWGhiWVYwN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dKM01Gc3dYU0ErSURBZ0ppWWdaWGhqYkhWa1pTNXBibU5zZFdSbGN5aHphMmx1TUZzd1hTa3BJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdJQ0JwWmlBb1luY3dXekZkSUQ0Z01DQW1KaUJsZUdOc2RXUmxMbWx1WTJ4MVpHVnpLSE5yYVc0d1d6RmRLU2tnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUdsbUlDaGlkekJiTWwwZ1BpQXdJQ1ltSUdWNFkyeDFaR1V1YVc1amJIVmtaWE1vYzJ0cGJqQmJNbDBwS1NCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0ozTUZzelhTQStJREFnSmlZZ1pYaGpiSFZrWlM1cGJtTnNkV1JsY3loemEybHVNRnN6WFNrcElHTnZiblJwYm5WbE8xeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElHSjNNU0E5SUdKM2MxdGlYVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjMnRwYmpFZ1BTQnphMmx1U1c1a1pYaGJZbDA3WEc0Z0lDQWdJQ0FnSUdsbUlDaGlkekZiTUYwZ1BpQXdJQ1ltSUdWNFkyeDFaR1V1YVc1amJIVmtaWE1vYzJ0cGJqRmJNRjBwS1NCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0ozTVZzeFhTQStJREFnSmlZZ1pYaGpiSFZrWlM1cGJtTnNkV1JsY3loemEybHVNVnN4WFNrcElHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWW5jeFd6SmRJRDRnTUNBbUppQmxlR05zZFdSbExtbHVZMngxWkdWektITnJhVzR4V3pKZEtTa2dZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJR2xtSUNoaWR6RmJNMTBnUGlBd0lDWW1JR1Y0WTJ4MVpHVXVhVzVqYkhWa1pYTW9jMnRwYmpGYk0xMHBLU0JqYjI1MGFXNTFaVHRjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0JpZHpJZ1BTQmlkM05iWTEwN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhOcmFXNHlJRDBnYzJ0cGJrbHVaR1Y0VzJOZE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWW5jeVd6QmRJRDRnTUNBbUppQmxlR05zZFdSbExtbHVZMngxWkdWektITnJhVzR5V3pCZEtTa2dZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJR2xtSUNoaWR6SmJNVjBnUGlBd0lDWW1JR1Y0WTJ4MVpHVXVhVzVqYkhWa1pYTW9jMnRwYmpKYk1WMHBLU0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHSjNNbHN5WFNBK0lEQWdKaVlnWlhoamJIVmtaUzVwYm1Oc2RXUmxjeWh6YTJsdU1sc3lYU2twSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNCcFppQW9ZbmN5V3pOZElENGdNQ0FtSmlCbGVHTnNkV1JsTG1sdVkyeDFaR1Z6S0hOcmFXNHlXek5kS1NrZ1kyOXVkR2x1ZFdVN1hHNWNiaUFnSUNBZ0lDQWdkSEpwWVc1bmJHVnpXMk52ZFc1MEt5dGRJRDBnWVR0Y2JpQWdJQ0FnSUNBZ2RISnBZVzVuYkdWelcyTnZkVzUwS3l0ZElEMGdZanRjYmlBZ0lDQWdJQ0FnZEhKcFlXNW5iR1Z6VzJOdmRXNTBLeXRkSUQwZ1l6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR052ZFc1ME8xeHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQmZZM0psWVhSbFJYSmhjMlZrVFdWemFDaHpjbU02SUZSSVVrVkZMbE5yYVc1dVpXUk5aWE5vTENCbGNtRnphVzVuUW05dVpYTkpibVJsZURvZ2JuVnRZbVZ5VzEwcE9pQlVTRkpGUlM1VGEybHVibVZrVFdWemFDQjdYRzRnSUNBZ1kyOXVjM1FnWkhOMElEMGdibVYzSUZSSVVrVkZMbE5yYVc1dVpXUk5aWE5vS0hOeVl5NW5aVzl0WlhSeWVTNWpiRzl1WlNncExDQnpjbU11YldGMFpYSnBZV3dwTzF4dUlDQWdJR1J6ZEM1dVlXMWxJRDBnWUNSN2MzSmpMbTVoYldWOUtHVnlZWE5sS1dBN1hHNGdJQ0FnWkhOMExtWnlkWE4wZFcxRGRXeHNaV1FnUFNCemNtTXVabkoxYzNSMWJVTjFiR3hsWkR0Y2JpQWdJQ0JrYzNRdWJHRjVaWEp6TG5ObGRDaDBhR2x6TGw5bWFYSnpkRkJsY25OdmJrOXViSGxNWVhsbGNpazdYRzVjYmlBZ0lDQmpiMjV6ZENCblpXOXRaWFJ5ZVNBOUlHUnpkQzVuWlc5dFpYUnllVHRjYmx4dUlDQWdJR052Ym5OMElITnJhVzVKYm1SbGVFRjBkSElnUFNCblpXOXRaWFJ5ZVM1blpYUkJkSFJ5YVdKMWRHVW9KM05yYVc1SmJtUmxlQ2NwTzF4dUlDQWdJR052Ym5OMElITnJhVzVKYm1SbGVFRjBkSEpCY25KaGVTQTlJSE5yYVc1SmJtUmxlRUYwZEhJZ2FXNXpkR0Z1WTJWdlppQlVTRkpGUlM1SFRFSjFabVpsY2tGMGRISnBZblYwWlNBL0lGdGRJRG9nYzJ0cGJrbHVaR1Y0UVhSMGNpNWhjbkpoZVR0Y2JpQWdJQ0JqYjI1emRDQnphMmx1U1c1a1pYZ2dQU0JiWFR0Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhOcmFXNUpibVJsZUVGMGRISkJjbkpoZVM1c1pXNW5kR2c3SUdrZ0t6MGdOQ2tnZTF4dUlDQWdJQ0FnYzJ0cGJrbHVaR1Y0TG5CMWMyZ29XMXh1SUNBZ0lDQWdJQ0J6YTJsdVNXNWtaWGhCZEhSeVFYSnlZWGxiYVYwc1hHNGdJQ0FnSUNBZ0lITnJhVzVKYm1SbGVFRjBkSEpCY25KaGVWdHBJQ3NnTVYwc1hHNGdJQ0FnSUNBZ0lITnJhVzVKYm1SbGVFRjBkSEpCY25KaGVWdHBJQ3NnTWwwc1hHNGdJQ0FnSUNBZ0lITnJhVzVKYm1SbGVFRjBkSEpCY25KaGVWdHBJQ3NnTTEwc1hHNGdJQ0FnSUNCZEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J6YTJsdVYyVnBaMmgwUVhSMGNpQTlJR2RsYjIxbGRISjVMbWRsZEVGMGRISnBZblYwWlNnbmMydHBibGRsYVdkb2RDY3BPMXh1SUNBZ0lHTnZibk4wSUhOcmFXNVhaV2xuYUhSQmRIUnlRWEp5WVhrZ1BTQnphMmx1VjJWcFoyaDBRWFIwY2lCcGJuTjBZVzVqWlc5bUlGUklVa1ZGTGtkTVFuVm1abVZ5UVhSMGNtbGlkWFJsSUQ4Z1cxMGdPaUJ6YTJsdVYyVnBaMmgwUVhSMGNpNWhjbkpoZVR0Y2JpQWdJQ0JqYjI1emRDQnphMmx1VjJWcFoyaDBJRDBnVzEwN1hHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCemEybHVWMlZwWjJoMFFYUjBja0Z5Y21GNUxteGxibWQwYURzZ2FTQXJQU0EwS1NCN1hHNGdJQ0FnSUNCemEybHVWMlZwWjJoMExuQjFjMmdvVzF4dUlDQWdJQ0FnSUNCemEybHVWMlZwWjJoMFFYUjBja0Z5Y21GNVcybGRMRnh1SUNBZ0lDQWdJQ0J6YTJsdVYyVnBaMmgwUVhSMGNrRnljbUY1VzJrZ0t5QXhYU3hjYmlBZ0lDQWdJQ0FnYzJ0cGJsZGxhV2RvZEVGMGRISkJjbkpoZVZ0cElDc2dNbDBzWEc0Z0lDQWdJQ0FnSUhOcmFXNVhaV2xuYUhSQmRIUnlRWEp5WVhsYmFTQXJJRE5kTEZ4dUlDQWdJQ0FnWFNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdhVzVrWlhnZ1BTQm5aVzl0WlhSeWVTNW5aWFJKYm1SbGVDZ3BPMXh1SUNBZ0lHbG1JQ2doYVc1a1pYZ3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbFJvWlNCblpXOXRaWFJ5ZVNCa2IyVnpiaWQwSUdoaGRtVWdZVzRnYVc1a1pYZ2dZblZtWm1WeVhDSXBPMXh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0J2YkdSVWNtbGhibWRzWlhNZ1BTQkJjbkpoZVM1bWNtOXRLR2x1WkdWNExtRnljbUY1S1R0Y2JseHVJQ0FnSUdOdmJuTjBJR052ZFc1MElEMGdkR2hwY3k1ZlpYaGpiSFZrWlZSeWFXRnVaMnhsY3lodmJHUlVjbWxoYm1kc1pYTXNJSE5yYVc1WFpXbG5hSFFzSUhOcmFXNUpibVJsZUN3Z1pYSmhjMmx1WjBKdmJtVnpTVzVrWlhncE8xeHVJQ0FnSUdOdmJuTjBJRzVsZDFSeWFXRnVaMnhsT2lCdWRXMWlaWEpiWFNBOUlGdGRPMXh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dZMjkxYm5RN0lHa3JLeWtnZTF4dUlDQWdJQ0FnYm1WM1ZISnBZVzVuYkdWYmFWMGdQU0J2YkdSVWNtbGhibWRzWlhOYmFWMDdYRzRnSUNBZ2ZWeHVJQ0FnSUdkbGIyMWxkSEo1TG5ObGRFbHVaR1Y0S0c1bGQxUnlhV0Z1WjJ4bEtUdGNibHh1SUNBZ0lDOHZJRzEwYjI5dUlHMWhkR1Z5YVdGc0lHbHVZMngxWkdWeklHOXVRbVZtYjNKbFVtVnVaR1Z5TGlCMGFHbHpJR2x6SUhWdWMzVndjRzl5ZEdWa0lHRjBJRk5yYVc1dVpXUk5aWE5vSTJOc2IyNWxYRzRnSUNBZ2FXWWdLSE55WXk1dmJrSmxabTl5WlZKbGJtUmxjaWtnZTF4dUlDQWdJQ0FnWkhOMExtOXVRbVZtYjNKbFVtVnVaR1Z5SUQwZ2MzSmpMbTl1UW1WbWIzSmxVbVZ1WkdWeU8xeHVJQ0FnSUgxY2JpQWdJQ0JrYzNRdVltbHVaQ2h1WlhjZ1ZFaFNSVVV1VTJ0bGJHVjBiMjRvYzNKakxuTnJaV3hsZEc5dUxtSnZibVZ6TENCemNtTXVjMnRsYkdWMGIyNHVZbTl1WlVsdWRtVnljMlZ6S1N3Z2JtVjNJRlJJVWtWRkxrMWhkSEpwZURRb0tTazdYRzRnSUNBZ2NtVjBkWEp1SUdSemREdGNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdYMk55WldGMFpVaGxZV1JzWlhOelRXOWtaV3hHYjNKVGEybHVibVZrVFdWemFDaHdZWEpsYm5RNklGUklVa1ZGTGs5aWFtVmpkRE5FTENCdFpYTm9PaUJVU0ZKRlJTNVRhMmx1Ym1Wa1RXVnphQ2s2SUhadmFXUWdlMXh1SUNBZ0lHTnZibk4wSUdWeVlYTmxRbTl1WlVsdVpHVjRaWE02SUc1MWJXSmxjbHRkSUQwZ1cxMDdYRzRnSUNBZ2JXVnphQzV6YTJWc1pYUnZiaTVpYjI1bGN5NW1iM0pGWVdOb0tDaGliMjVsTENCcGJtUmxlQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgybHpSWEpoYzJWVVlYSm5aWFFvWW05dVpTa3BJR1Z5WVhObFFtOXVaVWx1WkdWNFpYTXVjSFZ6YUNocGJtUmxlQ2s3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0F2THlCVmJteHBhMlVnVlc1cFZsSk5JSGRsSUdSdmJpZDBJR052Y0hrZ2JXVnphQ0JwWmlCdWJ5QnBiblpwYzJsaWJHVWdZbTl1WlNCM1lYTWdabTkxYm1SY2JpQWdJQ0JwWmlBb0lXVnlZWE5sUW05dVpVbHVaR1Y0WlhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCdFpYTm9MbXhoZVdWeWN5NWxibUZpYkdVb2RHaHBjeTVmZEdocGNtUlFaWEp6YjI1UGJteDVUR0Y1WlhJcE8xeHVJQ0FnSUNBZ2JXVnphQzVzWVhsbGNuTXVaVzVoWW14bEtIUm9hWE11WDJacGNuTjBVR1Z5YzI5dVQyNXNlVXhoZVdWeUtUdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdiV1Z6YUM1c1lYbGxjbk11YzJWMEtIUm9hWE11WDNSb2FYSmtVR1Z5YzI5dVQyNXNlVXhoZVdWeUtUdGNiaUFnSUNCamIyNXpkQ0J1WlhkTlpYTm9JRDBnZEdocGN5NWZZM0psWVhSbFJYSmhjMlZrVFdWemFDaHRaWE5vTENCbGNtRnpaVUp2Ym1WSmJtUmxlR1Z6S1R0Y2JpQWdJQ0J3WVhKbGJuUXVZV1JrS0c1bGQwMWxjMmdwTzF4dUlDQjlYRzVjYmlBZ2NISnBkbUYwWlNCZlkzSmxZWFJsU0dWaFpHeGxjM05OYjJSbGJDaHViMlJsT2lCVVNGSkZSUzVQWW1wbFkzUXpSQ2s2SUhadmFXUWdlMXh1SUNBZ0lHbG1JQ2h1YjJSbExuUjVjR1VnUFQwOUlDZEhjbTkxY0NjcElIdGNiaUFnSUNBZ0lHNXZaR1V1YkdGNVpYSnpMbk5sZENoMGFHbHpMbDkwYUdseVpGQmxjbk52Yms5dWJIbE1ZWGxsY2lrN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1ZmFYTkZjbUZ6WlZSaGNtZGxkQ2h1YjJSbEtTa2dlMXh1SUNBZ0lDQWdJQ0J1YjJSbExuUnlZWFpsY25ObEtDaGphR2xzWkNrZ1BUNGdZMmhwYkdRdWJHRjVaWEp6TG5ObGRDaDBhR2x6TGw5MGFHbHlaRkJsY25OdmJrOXViSGxNWVhsbGNpa3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NHRnlaVzUwSUQwZ2JtVjNJRlJJVWtWRkxrZHliM1Z3S0NrN1hHNGdJQ0FnSUNBZ0lIQmhjbVZ1ZEM1dVlXMWxJRDBnWUY5b1pXRmtiR1Z6YzE4a2UyNXZaR1V1Ym1GdFpYMWdPMXh1SUNBZ0lDQWdJQ0J3WVhKbGJuUXViR0Y1WlhKekxuTmxkQ2gwYUdsekxsOW1hWEp6ZEZCbGNuTnZiazl1YkhsTVlYbGxjaWs3WEc0Z0lDQWdJQ0FnSUc1dlpHVXVjR0Z5Wlc1MElTNWhaR1FvY0dGeVpXNTBLVHRjYmlBZ0lDQWdJQ0FnYm05a1pTNWphR2xzWkhKbGJseHVJQ0FnSUNBZ0lDQWdJQzVtYVd4MFpYSW9LR05vYVd4a0tTQTlQaUJqYUdsc1pDNTBlWEJsSUQwOVBTQW5VMnRwYm01bFpFMWxjMmduS1Z4dUlDQWdJQ0FnSUNBZ0lDNW1iM0pGWVdOb0tDaGphR2xzWkNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzJ0cGJtNWxaRTFsYzJnZ1BTQmphR2xzWkNCaGN5QlVTRkpGUlM1VGEybHVibVZrVFdWemFEdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk55WldGMFpVaGxZV1JzWlhOelRXOWtaV3hHYjNKVGEybHVibVZrVFdWemFDaHdZWEpsYm5Rc0lITnJhVzV1WldSTlpYTm9LVHRjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHNXZaR1V1ZEhsd1pTQTlQVDBnSjFOcmFXNXVaV1JOWlhOb0p5a2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2MydHBibTVsWkUxbGMyZ2dQU0J1YjJSbElHRnpJRlJJVWtWRkxsTnJhVzV1WldSTlpYTm9PMXh1SUNBZ0lDQWdkR2hwY3k1ZlkzSmxZWFJsU0dWaFpHeGxjM05OYjJSbGJFWnZjbE5yYVc1dVpXUk5aWE5vS0c1dlpHVXVjR0Z5Wlc1MElTd2djMnRwYm01bFpFMWxjMmdwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWZhWE5GY21GelpWUmhjbWRsZENodWIyUmxLU2tnZTF4dUlDQWdJQ0FnSUNCdWIyUmxMbXhoZVdWeWN5NXpaWFFvZEdocGN5NWZkR2hwY21SUVpYSnpiMjVQYm14NVRHRjVaWElwTzF4dUlDQWdJQ0FnSUNCdWIyUmxMblJ5WVhabGNuTmxLQ2hqYUdsc1pDa2dQVDRnWTJocGJHUXViR0Y1WlhKekxuTmxkQ2gwYUdsekxsOTBhR2x5WkZCbGNuTnZiazl1YkhsTVlYbGxjaWtwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhCeWFYWmhkR1VnWDJselJYSmhjMlZVWVhKblpYUW9ZbTl1WlRvZ1ZFaFNSVVV1VDJKcVpXTjBNMFFwT2lCaWIyOXNaV0Z1SUh0Y2JpQWdJQ0JwWmlBb1ltOXVaU0E5UFQwZ2RHaHBjeTVvZFcxaGJtOXBaQzVuWlhSU1lYZENiMjVsVG05a1pTZ25hR1ZoWkNjcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ0ZpYjI1bExuQmhjbVZ1ZENrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZhWE5GY21GelpWUmhjbWRsZENoaWIyNWxMbkJoY21WdWRDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdkSGx3WlNBcUlHRnpJRll3VmxKTklHWnliMjBnSjBCd2FYaHBkaTkwZVhCbGN5MTJjbTB0TUM0d0p6dGNibWx0Y0c5eWRDQjBlWEJsSUNvZ1lYTWdWakZXVWsxVFkyaGxiV0VnWm5KdmJTQW5RSEJwZUdsMkwzUjVjR1Z6TFhaeWJXTXRkbkp0TFRFdU1DYzdYRzVwYlhCdmNuUWdkSGx3WlNCN0lFZE1WRVlzSUVkTVZFWk1iMkZrWlhKUWJIVm5hVzRzSUVkTVZFWlFZWEp6WlhJZ2ZTQm1jbTl0SUNkMGFISmxaUzlsZUdGdGNHeGxjeTlxYzIwdmJHOWhaR1Z5Y3k5SFRGUkdURzloWkdWeUxtcHpKenRjYm1sdGNHOXlkQ0IwZVhCbElIc2dWbEpOU0hWdFlXNXZhV1FnZlNCbWNtOXRJQ2N1TGk5b2RXMWhibTlwWkM5V1VrMUlkVzFoYm05cFpDYzdYRzVwYlhCdmNuUWdleUJuYkhSbVJYaDBjbUZqZEZCeWFXMXBkR2wyWlhOR2NtOXRUbTlrWlhNZ2ZTQm1jbTl0SUNjdUxpOTFkR2xzY3k5bmJIUm1SWGgwY21GamRGQnlhVzFwZEdsMlpYTkdjbTl0VG05a1pTYzdYRzVwYlhCdmNuUWdleUJXVWsxR2FYSnpkRkJsY25OdmJpQjlJR1p5YjIwZ0p5NHZWbEpOUm1seWMzUlFaWEp6YjI0bk8xeHVhVzF3YjNKMElIUjVjR1VnZXlCV1VrMUdhWEp6ZEZCbGNuTnZiazFsYzJoQmJtNXZkR0YwYVc5dUlIMGdabkp2YlNBbkxpOVdVazFHYVhKemRGQmxjbk52YmsxbGMyaEJibTV2ZEdGMGFXOXVKenRjYm1sdGNHOXlkQ0IwZVhCbElIc2dWbEpOUm1seWMzUlFaWEp6YjI1TlpYTm9RVzV1YjNSaGRHbHZibFI1Y0dVZ2ZTQm1jbTl0SUNjdUwxWlNUVVpwY25OMFVHVnljMjl1VFdWemFFRnVibTkwWVhScGIyNVVlWEJsSnp0Y2JtbHRjRzl5ZENCN0lFZE1WRVlnWVhNZ1IweFVSbE5qYUdWdFlTQjlJR1p5YjIwZ0owQm5iSFJtTFhSeVlXNXpabTl5YlM5amIzSmxKenRjYmx4dUx5b3FYRzRnS2lCUWIzTnphV0pzWlNCemNHVmpJSFpsY25OcGIyNXpJR2wwSUhKbFkyOW5ibWw2WlhNdVhHNGdLaTljYm1OdmJuTjBJRkJQVTFOSlFreEZYMU5RUlVOZlZrVlNVMGxQVGxNZ1BTQnVaWGNnVTJWMEtGc25NUzR3Snl3Z0p6RXVNQzFpWlhSaEoxMHBPMXh1WEc0dktpcGNiaUFxSUVFZ2NHeDFaMmx1SUc5bUlFZE1WRVpNYjJGa1pYSWdkR2hoZENCcGJYQnZjblJ6SUdFZ2UwQnNhVzVySUZaU1RVWnBjbk4wVUdWeWMyOXVmU0JtY205dElHRWdWbEpOSUdWNGRHVnVjMmx2YmlCdlppQmhJRWRNVkVZdVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QldVazFHYVhKemRGQmxjbk52Ymt4dllXUmxjbEJzZFdkcGJpQnBiWEJzWlcxbGJuUnpJRWRNVkVaTWIyRmtaWEpRYkhWbmFXNGdlMXh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnY0dGeWMyVnlPaUJIVEZSR1VHRnljMlZ5TzF4dVhHNGdJSEIxWW14cFl5Qm5aWFFnYm1GdFpTZ3BPaUJ6ZEhKcGJtY2dlMXh1SUNBZ0lDOHZJRmRsSUhOb2IzVnNaQ0IxYzJVZ2RHaGxJR1Y0ZEdWdWMybHZiaUJ1WVcxbElHbHVjM1JsWVdRZ1luVjBJSGRsSUdoaGRtVWdiWFZzZEdsd2JHVWdjR3gxWjJsdWN5Qm1iM0lnWVc0Z1pYaDBaVzV6YVc5dUxpNHVYRzRnSUNBZ2NtVjBkWEp1SUNkV1VrMUdhWEp6ZEZCbGNuTnZia3h2WVdSbGNsQnNkV2RwYmljN1hHNGdJSDFjYmx4dUlDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9jR0Z5YzJWeU9pQkhURlJHVUdGeWMyVnlLU0I3WEc0Z0lDQWdkR2hwY3k1d1lYSnpaWElnUFNCd1lYSnpaWEk3WEc0Z0lIMWNibHh1SUNCd2RXSnNhV01nWVhONWJtTWdZV1owWlhKU2IyOTBLR2RzZEdZNklFZE1WRVlwT2lCUWNtOXRhWE5sUEhadmFXUStJSHRjYmlBZ0lDQmpiMjV6ZENCMmNtMUlkVzFoYm05cFpDQTlJR2RzZEdZdWRYTmxja1JoZEdFdWRuSnRTSFZ0WVc1dmFXUWdZWE1nVmxKTlNIVnRZVzV2YVdRZ2ZDQjFibVJsWm1sdVpXUTdYRzVjYmlBZ0lDQXZMeUJsZUhCc2FXTnBkR3g1SUdScGMzUnBibWQxYVhOb0lHNTFiR3dnWVc1a0lIVnVaR1ZtYVc1bFpGeHVJQ0FnSUM4dklITnBibU5sSUhaeWJVaDFiV0Z1YjJsa0lHMXBaMmgwSUdKbElHNTFiR3dnWVhNZ1lTQnlaWE4xYkhSY2JpQWdJQ0JwWmlBb2RuSnRTSFZ0WVc1dmFXUWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIWnliVWgxYldGdWIybGtJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0oxWlNUVVpwY25OMFVHVnljMjl1VEc5aFpHVnlVR3gxWjJsdU9pQjJjbTFJZFcxaGJtOXBaQ0JwY3lCMWJtUmxabWx1WldRdUlGWlNUVWgxYldGdWIybGtURzloWkdWeVVHeDFaMmx1SUdoaGRtVWdkRzhnWW1VZ2RYTmxaQ0JtYVhKemRDY3NYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHZHNkR1l1ZFhObGNrUmhkR0V1ZG5KdFJtbHljM1JRWlhKemIyNGdQU0JoZDJGcGRDQjBhR2x6TGw5cGJYQnZjblFvWjJ4MFppd2dkbkp0U0hWdFlXNXZhV1FwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHRjRzl5ZENCaElIdEFiR2x1YXlCV1VrMUdhWEp6ZEZCbGNuTnZibjBnWm5KdmJTQmhJRlpTVFM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElHZHNkR1lnUVNCd1lYSnpaV1FnY21WemRXeDBJRzltSUVkTVZFWWdkR0ZyWlc0Z1puSnZiU0JIVEZSR1RHOWhaR1Z5WEc0Z0lDQXFJRUJ3WVhKaGJTQm9kVzFoYm05cFpDQkJJSHRBYkdsdWF5QldVazFJZFcxaGJtOXBaSDBnYVc1emRHRnVZMlVnZEdoaGRDQnlaWEJ5WlhObGJuUnpJSFJvWlNCV1VrMWNiaUFnSUNvdlhHNWNiaUFnY0hKcGRtRjBaU0JoYzNsdVl5QmZhVzF3YjNKMEtHZHNkR1k2SUVkTVZFWXNJR2gxYldGdWIybGtPaUJXVWsxSWRXMWhibTlwWkNCOElHNTFiR3dwT2lCUWNtOXRhWE5sUEZaU1RVWnBjbk4wVUdWeWMyOXVJSHdnYm5Wc2JENGdlMXh1SUNBZ0lHbG1JQ2hvZFcxaGJtOXBaQ0E5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQjJNVkpsYzNWc2RDQTlJR0YzWVdsMElIUm9hWE11WDNZeFNXMXdiM0owS0dkc2RHWXNJR2gxYldGdWIybGtLVHRjYmlBZ0lDQnBaaUFvZGpGU1pYTjFiSFFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIyTVZKbGMzVnNkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCMk1GSmxjM1ZzZENBOUlHRjNZV2wwSUhSb2FYTXVYM1l3U1cxd2IzSjBLR2RzZEdZc0lHaDFiV0Z1YjJsa0tUdGNiaUFnSUNCcFppQW9kakJTWlhOMWJIUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjJNRkpsYzNWc2REdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdZWE41Ym1NZ1gzWXhTVzF3YjNKMEtHZHNkR1k2SUVkTVZFWXNJR2gxYldGdWIybGtPaUJXVWsxSWRXMWhibTlwWkNrNklGQnliMjFwYzJVOFZsSk5SbWx5YzNSUVpYSnpiMjRnZkNCdWRXeHNQaUI3WEc0Z0lDQWdZMjl1YzNRZ2FuTnZiaUE5SUhSb2FYTXVjR0Z5YzJWeUxtcHpiMjRnWVhNZ1IweFVSbE5qYUdWdFlTNUpSMHhVUmp0Y2JseHVJQ0FnSUM4dklHVmhjbXg1SUdGaWIzSjBJR2xtSUdsMElHUnZaWE51SjNRZ2RYTmxJSFp5YlZ4dUlDQWdJR052Ym5OMElHbHpWbEpOVlhObFpDQTlJR3B6YjI0dVpYaDBaVzV6YVc5dWMxVnpaV1EvTG1sdVpHVjRUMllvSjFaU1RVTmZkbkp0SnlrZ0lUMDlJQzB4TzF4dUlDQWdJR2xtSUNnaGFYTldVazFWYzJWa0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCbGVIUmxibk5wYjI0Z1BTQnFjMjl1TG1WNGRHVnVjMmx2Ym5NL0xsc25WbEpOUTE5MmNtMG5YU0JoY3lCV01WWlNUVk5qYUdWdFlTNVdVazFEVmxKTklId2dkVzVrWldacGJtVmtPMXh1SUNBZ0lHbG1JQ2doWlhoMFpXNXphVzl1S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J6Y0dWalZtVnljMmx2YmlBOUlHVjRkR1Z1YzJsdmJpNXpjR1ZqVm1WeWMybHZianRjYmlBZ0lDQnBaaUFvSVZCUFUxTkpRa3hGWDFOUVJVTmZWa1ZTVTBsUFRsTXVhR0Z6S0hOd1pXTldaWEp6YVc5dUtTa2dlMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0dCV1VrMUdhWEp6ZEZCbGNuTnZia3h2WVdSbGNsQnNkV2RwYmpvZ1ZXNXJibTkzYmlCV1VrMURYM1p5YlNCemNHVmpWbVZ5YzJsdmJpQmNJaVI3YzNCbFkxWmxjbk5wYjI1OVhDSmdLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElITmphR1Z0WVVacGNuTjBVR1Z5YzI5dUlEMGdaWGgwWlc1emFXOXVMbVpwY25OMFVHVnljMjl1TzF4dUlDQWdJR2xtSUNnaGMyTm9aVzFoUm1seWMzUlFaWEp6YjI0cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUcxbGMyaEJibTV2ZEdGMGFXOXVjem9nVmxKTlJtbHljM1JRWlhKemIyNU5aWE5vUVc1dWIzUmhkR2x2Ymx0ZElEMGdXMTA3WEc0Z0lDQWdZMjl1YzNRZ2JtOWtaVkJ5YVcxcGRHbDJaWE5OWVhBZ1BTQmhkMkZwZENCbmJIUm1SWGgwY21GamRGQnlhVzFwZEdsMlpYTkdjbTl0VG05a1pYTW9aMngwWmlrN1hHNGdJQ0FnUVhKeVlYa3Vabkp2YlNodWIyUmxVSEpwYldsMGFYWmxjMDFoY0M1bGJuUnlhV1Z6S0NrcExtWnZja1ZoWTJnb0tGdHViMlJsU1c1a1pYZ3NJSEJ5YVcxcGRHbDJaWE5kS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCaGJtNXZkR0YwYVc5dUlEMGdjMk5vWlcxaFJtbHljM1JRWlhKemIyNHViV1Z6YUVGdWJtOTBZWFJwYjI1elhHNGdJQ0FnSUNBZ0lEOGdjMk5vWlcxaFJtbHljM1JRWlhKemIyNHViV1Z6YUVGdWJtOTBZWFJwYjI1ekxtWnBibVFvS0dFcElEMCtJR0V1Ym05a1pTQTlQVDBnYm05a1pVbHVaR1Y0S1Z4dUlDQWdJQ0FnSUNBNklIVnVaR1ZtYVc1bFpEdGNibHh1SUNBZ0lDQWdiV1Z6YUVGdWJtOTBZWFJwYjI1ekxuQjFjMmdvZTF4dUlDQWdJQ0FnSUNCdFpYTm9aWE02SUhCeWFXMXBkR2wyWlhNc1hHNGdJQ0FnSUNBZ0lIUjVjR1U2SUdGdWJtOTBZWFJwYjI0L0xuUjVjR1VnUHo4Z0oySnZkR2duTEZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGWlNUVVpwY25OMFVHVnljMjl1S0doMWJXRnViMmxrTENCdFpYTm9RVzV1YjNSaGRHbHZibk1wTzF4dUlDQjlYRzVjYmlBZ2NISnBkbUYwWlNCaGMzbHVZeUJmZGpCSmJYQnZjblFvWjJ4MFpqb2dSMHhVUml3Z2FIVnRZVzV2YVdRNklGWlNUVWgxYldGdWIybGtLVG9nVUhKdmJXbHpaVHhXVWsxR2FYSnpkRkJsY25OdmJpQjhJRzUxYkd3K0lIdGNiaUFnSUNCamIyNXpkQ0JxYzI5dUlEMGdkR2hwY3k1d1lYSnpaWEl1YW5OdmJpQmhjeUJIVEZSR1UyTm9aVzFoTGtsSFRGUkdPMXh1WEc0Z0lDQWdZMjl1YzNRZ2RuSnRSWGgwSUQwZ2FuTnZiaTVsZUhSbGJuTnBiMjV6UHk1V1VrMGdZWE1nVmpCV1VrMHVWbEpOSUh3Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUdsbUlDZ2hkbkp0UlhoMEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCelkyaGxiV0ZHYVhKemRGQmxjbk52YmpvZ1ZqQldVazB1Um1seWMzUlFaWEp6YjI0Z2ZDQjFibVJsWm1sdVpXUWdQU0IyY20xRmVIUXVabWx5YzNSUVpYSnpiMjQ3WEc0Z0lDQWdhV1lnS0NGelkyaGxiV0ZHYVhKemRGQmxjbk52YmlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnYldWemFFRnVibTkwWVhScGIyNXpPaUJXVWsxR2FYSnpkRkJsY25OdmJrMWxjMmhCYm01dmRHRjBhVzl1VzEwZ1BTQmJYVHRjYmlBZ0lDQmpiMjV6ZENCdWIyUmxVSEpwYldsMGFYWmxjMDFoY0NBOUlHRjNZV2wwSUdkc2RHWkZlSFJ5WVdOMFVISnBiV2wwYVhabGMwWnliMjFPYjJSbGN5aG5iSFJtS1R0Y2JseHVJQ0FnSUVGeWNtRjVMbVp5YjIwb2JtOWtaVkJ5YVcxcGRHbDJaWE5OWVhBdVpXNTBjbWxsY3lncEtTNW1iM0pGWVdOb0tDaGJibTlrWlVsdVpHVjRMQ0J3Y21sdGFYUnBkbVZ6WFNrZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzNRZ2MyTm9aVzFoVG05a1pTQTlJR3B6YjI0dWJtOWtaWE1oVzI1dlpHVkpibVJsZUYwN1hHNWNiaUFnSUNBZ0lHTnZibk4wSUdac1lXY2dQU0J6WTJobGJXRkdhWEp6ZEZCbGNuTnZiaTV0WlhOb1FXNXViM1JoZEdsdmJuTmNiaUFnSUNBZ0lDQWdQeUJ6WTJobGJXRkdhWEp6ZEZCbGNuTnZiaTV0WlhOb1FXNXViM1JoZEdsdmJuTXVabWx1WkNnb1lTa2dQVDRnWVM1dFpYTm9JRDA5UFNCelkyaGxiV0ZPYjJSbExtMWxjMmdwWEc0Z0lDQWdJQ0FnSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUNBZ0lDQnRaWE5vUVc1dWIzUmhkR2x2Ym5NdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUcxbGMyaGxjem9nY0hKcGJXbDBhWFpsY3l4Y2JpQWdJQ0FnSUNBZ2RIbHdaVG9nZEdocGN5NWZZMjl1ZG1WeWRGWXdSbXhoWjFSdlZqRlVlWEJsS0dac1lXYy9MbVpwY25OMFVHVnljMjl1Um14aFp5a3NYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVmxKTlJtbHljM1JRWlhKemIyNG9hSFZ0WVc1dmFXUXNJRzFsYzJoQmJtNXZkR0YwYVc5dWN5azdYRzRnSUgxY2JseHVJQ0J3Y21sMllYUmxJRjlqYjI1MlpYSjBWakJHYkdGblZHOVdNVlI1Y0dVb1pteGhaem9nYzNSeWFXNW5JSHdnZFc1a1pXWnBibVZrS1RvZ1ZsSk5SbWx5YzNSUVpYSnpiMjVOWlhOb1FXNXViM1JoZEdsdmJsUjVjR1VnZTF4dUlDQWdJR2xtSUNobWJHRm5JRDA5UFNBblJtbHljM1JRWlhKemIyNVBibXg1SnlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNkbWFYSnpkRkJsY25OdmJrOXViSGtuTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvWm14aFp5QTlQVDBnSjFSb2FYSmtVR1Z5YzI5dVQyNXNlU2NwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUFuZEdocGNtUlFaWEp6YjI1UGJteDVKenRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1pzWVdjZ1BUMDlJQ2RCZFhSdkp5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlDZGhkWFJ2Snp0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlDZGliM1JvSnp0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmlJc0lpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVZVzFwYm1jdFkyOXVkbVZ1ZEdsdmJpQXFMMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdWbEpOUm1seWMzUlFaWEp6YjI1TlpYTm9RVzV1YjNSaGRHbHZibFI1Y0dVZ1BTQjdYRzRnSUVGMWRHODZJQ2RoZFhSdkp5eGNiaUFnUW05MGFEb2dKMkp2ZEdnbkxGeHVJQ0JVYUdseVpGQmxjbk52Yms5dWJIazZJQ2QwYUdseVpGQmxjbk52Yms5dWJIa25MRnh1SUNCR2FYSnpkRkJsY25OdmJrOXViSGs2SUNkbWFYSnpkRkJsY25OdmJrOXViSGtuTEZ4dWZTQmhjeUJqYjI1emREdGNibHh1Wlhod2IzSjBJSFI1Y0dVZ1ZsSk5SbWx5YzNSUVpYSnpiMjVOWlhOb1FXNXViM1JoZEdsdmJsUjVjR1VnUFZ4dUlDQjBlWEJsYjJZZ1ZsSk5SbWx5YzNSUVpYSnpiMjVOWlhOb1FXNXViM1JoZEdsdmJsUjVjR1ZiYTJWNWIyWWdkSGx3Wlc5bUlGWlNUVVpwY25OMFVHVnljMjl1VFdWemFFRnVibTkwWVhScGIyNVVlWEJsWFR0Y2JpSXNJbWx0Y0c5eWRDQXFJR0Z6SUZSSVVrVkZJR1p5YjIwZ0ozUm9jbVZsSnp0Y2JtbHRjRzl5ZENCN0lGWlNUVWgxYldGdVFtOXVaU0I5SUdaeWIyMGdKeTR1TDFaU1RVaDFiV0Z1UW05dVpTYzdYRzVwYlhCdmNuUWdleUJXVWsxSWRXMWhibTlwWkNCOUlHWnliMjBnSnk0dUwxWlNUVWgxYldGdWIybGtKenRjYmx4dVkyOXVjM1FnWDNZelFTQTlJRzVsZHlCVVNGSkZSUzVXWldOMGIzSXpLQ2s3WEc1amIyNXpkQ0JmZGpOQ0lEMGdibVYzSUZSSVVrVkZMbFpsWTNSdmNqTW9LVHRjYm1OdmJuTjBJRjl4ZFdGMFFTQTlJRzVsZHlCVVNGSkZSUzVSZFdGMFpYSnVhVzl1S0NrN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCV1VrMUlkVzFoYm05cFpFaGxiSEJsY2lCbGVIUmxibVJ6SUZSSVVrVkZMa2R5YjNWd0lIdGNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSFp5YlVoMWJXRnViMmxrT2lCV1VrMUlkVzFoYm05cFpEdGNiaUFnY0hKcGRtRjBaU0JmWW05dVpVRjRaWE5OWVhBNklFMWhjRHhXVWsxSWRXMWhia0p2Ym1Vc0lGUklVa1ZGTGtGNFpYTklaV3h3WlhJK08xeHVYRzRnSUhCMVlteHBZeUJqYjI1emRISjFZM1J2Y2lob2RXMWhibTlwWkRvZ1ZsSk5TSFZ0WVc1dmFXUXBJSHRjYmlBZ0lDQnpkWEJsY2lncE8xeHVYRzRnSUNBZ2RHaHBjeTUyY20xSWRXMWhibTlwWkNBOUlHaDFiV0Z1YjJsa08xeHVYRzRnSUNBZ2RHaHBjeTVmWW05dVpVRjRaWE5OWVhBZ1BTQnVaWGNnVFdGd0tDazdYRzVjYmlBZ0lDQlBZbXBsWTNRdWRtRnNkV1Z6S0doMWJXRnViMmxrTG1oMWJXRnVRbTl1WlhNcExtWnZja1ZoWTJnb0tHSnZibVVwSUQwK0lIdGNiaUFnSUNBZ0lHTnZibk4wSUdobGJIQmxjaUE5SUc1bGR5QlVTRkpGUlM1QmVHVnpTR1ZzY0dWeUtERXVNQ2s3WEc1Y2JpQWdJQ0FnSUdobGJIQmxjaTV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQWdJQ2hvWld4d1pYSXViV0YwWlhKcFlXd2dZWE1nVkVoU1JVVXVUV0YwWlhKcFlXd3BMbVJsY0hSb1ZHVnpkQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdLR2hsYkhCbGNpNXRZWFJsY21saGJDQmhjeUJVU0ZKRlJTNU5ZWFJsY21saGJDa3VaR1Z3ZEdoWGNtbDBaU0E5SUdaaGJITmxPMXh1WEc0Z0lDQWdJQ0IwYUdsekxtRmtaQ2hvWld4d1pYSXBPMXh1WEc0Z0lDQWdJQ0IwYUdsekxsOWliMjVsUVhobGMwMWhjQzV6WlhRb1ltOXVaU3dnYUdWc2NHVnlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJrYVhOd2IzTmxLQ2s2SUhadmFXUWdlMXh1SUNBZ0lFRnljbUY1TG1aeWIyMG9kR2hwY3k1ZlltOXVaVUY0WlhOTllYQXVkbUZzZFdWektDa3BMbVp2Y2tWaFkyZ29LR0Y0WlhNcElEMCtJSHRjYmlBZ0lDQWdJR0Y0WlhNdVoyVnZiV1YwY25rdVpHbHpjRzl6WlNncE8xeHVJQ0FnSUNBZ0tHRjRaWE11YldGMFpYSnBZV3dnWVhNZ1ZFaFNSVVV1VFdGMFpYSnBZV3dwTG1ScGMzQnZjMlVvS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCMWNHUmhkR1ZOWVhSeWFYaFhiM0pzWkNobWIzSmpaVG9nWW05dmJHVmhiaWs2SUhadmFXUWdlMXh1SUNBZ0lFRnljbUY1TG1aeWIyMG9kR2hwY3k1ZlltOXVaVUY0WlhOTllYQXVaVzUwY21sbGN5Z3BLUzVtYjNKRllXTm9LQ2hiWW05dVpTd2dZWGhsYzEwcElEMCtJSHRjYmlBZ0lDQWdJR0p2Ym1VdWJtOWtaUzUxY0dSaGRHVlhiM0pzWkUxaGRISnBlQ2gwY25WbExDQm1ZV3h6WlNrN1hHNWNiaUFnSUNBZ0lHSnZibVV1Ym05a1pTNXRZWFJ5YVhoWGIzSnNaQzVrWldOdmJYQnZjMlVvWDNZelFTd2dYM0YxWVhSQkxDQmZkak5DS1R0Y2JseHVJQ0FnSUNBZ1kyOXVjM1FnYzJOaGJHVWdQU0JmZGpOQkxuTmxkQ2d3TGpFc0lEQXVNU3dnTUM0eEtTNWthWFpwWkdVb1gzWXpRaWs3WEc0Z0lDQWdJQ0JoZUdWekxtMWhkSEpwZUM1amIzQjVLR0p2Ym1VdWJtOWtaUzV0WVhSeWFYaFhiM0pzWkNrdWMyTmhiR1VvYzJOaGJHVXBPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdjM1Z3WlhJdWRYQmtZWFJsVFdGMGNtbDRWMjl5YkdRb1ptOXlZMlVwTzF4dUlDQjlYRzU5WEc0aUxDSXZLaUJsYzJ4cGJuUXRaR2x6WVdKc1pTQkFkSGx3WlhOamNtbHdkQzFsYzJ4cGJuUXZibUZ0YVc1bkxXTnZiblpsYm5ScGIyNGdLaTljYmx4dWFXMXdiM0owSUhzZ1ZsSk5TSFZ0WVc1Q2IyNWxUbUZ0WlNCOUlHWnliMjBnSnk0dlZsSk5TSFZ0WVc1Q2IyNWxUbUZ0WlNjN1hHNWNiaThxS2x4dUlDb2dWR2hsSUd4cGMzUWdiMllnZTBCc2FXNXJJRlpTVFVoMWJXRnVRbTl1WlU1aGJXVjlMaUJFWlhCbGJtUmxibU41SUdGM1lYSmxMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnVmxKTlNIVnRZVzVDYjI1bFRHbHpkRG9nVmxKTlNIVnRZVzVDYjI1bFRtRnRaVnRkSUQwZ1cxeHVJQ0FuYUdsd2N5Y3NYRzRnSUNkemNHbHVaU2NzWEc0Z0lDZGphR1Z6ZENjc1hHNGdJQ2QxY0hCbGNrTm9aWE4wSnl4Y2JpQWdKMjVsWTJzbkxGeHVYRzRnSUNkb1pXRmtKeXhjYmlBZ0oyeGxablJGZVdVbkxGeHVJQ0FuY21sbmFIUkZlV1VuTEZ4dUlDQW5hbUYzSnl4Y2JseHVJQ0FuYkdWbWRGVndjR1Z5VEdWbkp5eGNiaUFnSjJ4bFpuUk1iM2RsY2t4bFp5Y3NYRzRnSUNkc1pXWjBSbTl2ZENjc1hHNGdJQ2RzWldaMFZHOWxjeWNzWEc1Y2JpQWdKM0pwWjJoMFZYQndaWEpNWldjbkxGeHVJQ0FuY21sbmFIUk1iM2RsY2t4bFp5Y3NYRzRnSUNkeWFXZG9kRVp2YjNRbkxGeHVJQ0FuY21sbmFIUlViMlZ6Snl4Y2JseHVJQ0FuYkdWbWRGTm9iM1ZzWkdWeUp5eGNiaUFnSjJ4bFpuUlZjSEJsY2tGeWJTY3NYRzRnSUNkc1pXWjBURzkzWlhKQmNtMG5MRnh1SUNBbmJHVm1kRWhoYm1RbkxGeHVYRzRnSUNkeWFXZG9kRk5vYjNWc1pHVnlKeXhjYmlBZ0ozSnBaMmgwVlhCd1pYSkJjbTBuTEZ4dUlDQW5jbWxuYUhSTWIzZGxja0Z5YlNjc1hHNGdJQ2R5YVdkb2RFaGhibVFuTEZ4dVhHNGdJQ2RzWldaMFZHaDFiV0pOWlhSaFkyRnljR0ZzSnl4Y2JpQWdKMnhsWm5SVWFIVnRZbEJ5YjNocGJXRnNKeXhjYmlBZ0oyeGxablJVYUhWdFlrUnBjM1JoYkNjc1hHNGdJQ2RzWldaMFNXNWtaWGhRY205NGFXMWhiQ2NzWEc0Z0lDZHNaV1owU1c1a1pYaEpiblJsY20xbFpHbGhkR1VuTEZ4dUlDQW5iR1ZtZEVsdVpHVjRSR2x6ZEdGc0p5eGNiaUFnSjJ4bFpuUk5hV1JrYkdWUWNtOTRhVzFoYkNjc1hHNGdJQ2RzWldaMFRXbGtaR3hsU1c1MFpYSnRaV1JwWVhSbEp5eGNiaUFnSjJ4bFpuUk5hV1JrYkdWRWFYTjBZV3duTEZ4dUlDQW5iR1ZtZEZKcGJtZFFjbTk0YVcxaGJDY3NYRzRnSUNkc1pXWjBVbWx1WjBsdWRHVnliV1ZrYVdGMFpTY3NYRzRnSUNkc1pXWjBVbWx1WjBScGMzUmhiQ2NzWEc0Z0lDZHNaV1owVEdsMGRHeGxVSEp2ZUdsdFlXd25MRnh1SUNBbmJHVm1kRXhwZEhSc1pVbHVkR1Z5YldWa2FXRjBaU2NzWEc0Z0lDZHNaV1owVEdsMGRHeGxSR2x6ZEdGc0p5eGNibHh1SUNBbmNtbG5hSFJVYUhWdFlrMWxkR0ZqWVhKd1lXd25MRnh1SUNBbmNtbG5hSFJVYUhWdFlsQnliM2hwYldGc0p5eGNiaUFnSjNKcFoyaDBWR2gxYldKRWFYTjBZV3duTEZ4dUlDQW5jbWxuYUhSSmJtUmxlRkJ5YjNocGJXRnNKeXhjYmlBZ0ozSnBaMmgwU1c1a1pYaEpiblJsY20xbFpHbGhkR1VuTEZ4dUlDQW5jbWxuYUhSSmJtUmxlRVJwYzNSaGJDY3NYRzRnSUNkeWFXZG9kRTFwWkdSc1pWQnliM2hwYldGc0p5eGNiaUFnSjNKcFoyaDBUV2xrWkd4bFNXNTBaWEp0WldScFlYUmxKeXhjYmlBZ0ozSnBaMmgwVFdsa1pHeGxSR2x6ZEdGc0p5eGNiaUFnSjNKcFoyaDBVbWx1WjFCeWIzaHBiV0ZzSnl4Y2JpQWdKM0pwWjJoMFVtbHVaMGx1ZEdWeWJXVmthV0YwWlNjc1hHNGdJQ2R5YVdkb2RGSnBibWRFYVhOMFlXd25MRnh1SUNBbmNtbG5hSFJNYVhSMGJHVlFjbTk0YVcxaGJDY3NYRzRnSUNkeWFXZG9kRXhwZEhSc1pVbHVkR1Z5YldWa2FXRjBaU2NzWEc0Z0lDZHlhV2RvZEV4cGRIUnNaVVJwYzNSaGJDY3NYRzVkTzF4dUlpd2lMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjVoYldsdVp5MWpiMjUyWlc1MGFXOXVJQ292WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxJRzVoYldWeklHOW1JSHRBYkdsdWF5QldVazFJZFcxaGJtOXBaSDBnWW05dVpTQnVZVzFsY3k1Y2JpQXFYRzRnS2lCU1pXWTZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzkyY20wdFl5OTJjbTB0YzNCbFkybG1hV05oZEdsdmJpOWliRzlpTDIxaGMzUmxjaTl6Y0dWamFXWnBZMkYwYVc5dUwxWlNUVU5mZG5KdExURXVNQzlvZFcxaGJtOXBaQzV0WkZ4dUlDb3ZYRzVsZUhCdmNuUWdZMjl1YzNRZ1ZsSk5TSFZ0WVc1Q2IyNWxUbUZ0WlNBOUlIdGNiaUFnU0dsd2N6b2dKMmhwY0hNbkxGeHVJQ0JUY0dsdVpUb2dKM053YVc1bEp5eGNiaUFnUTJobGMzUTZJQ2RqYUdWemRDY3NYRzRnSUZWd2NHVnlRMmhsYzNRNklDZDFjSEJsY2tOb1pYTjBKeXhjYmlBZ1RtVmphem9nSjI1bFkyc25MRnh1WEc0Z0lFaGxZV1E2SUNkb1pXRmtKeXhjYmlBZ1RHVm1kRVY1WlRvZ0oyeGxablJGZVdVbkxGeHVJQ0JTYVdkb2RFVjVaVG9nSjNKcFoyaDBSWGxsSnl4Y2JpQWdTbUYzT2lBbmFtRjNKeXhjYmx4dUlDQk1aV1owVlhCd1pYSk1aV2M2SUNkc1pXWjBWWEJ3WlhKTVpXY25MRnh1SUNCTVpXWjBURzkzWlhKTVpXYzZJQ2RzWldaMFRHOTNaWEpNWldjbkxGeHVJQ0JNWldaMFJtOXZkRG9nSjJ4bFpuUkdiMjkwSnl4Y2JpQWdUR1ZtZEZSdlpYTTZJQ2RzWldaMFZHOWxjeWNzWEc1Y2JpQWdVbWxuYUhSVmNIQmxja3hsWnpvZ0ozSnBaMmgwVlhCd1pYSk1aV2NuTEZ4dUlDQlNhV2RvZEV4dmQyVnlUR1ZuT2lBbmNtbG5hSFJNYjNkbGNreGxaeWNzWEc0Z0lGSnBaMmgwUm05dmREb2dKM0pwWjJoMFJtOXZkQ2NzWEc0Z0lGSnBaMmgwVkc5bGN6b2dKM0pwWjJoMFZHOWxjeWNzWEc1Y2JpQWdUR1ZtZEZOb2IzVnNaR1Z5T2lBbmJHVm1kRk5vYjNWc1pHVnlKeXhjYmlBZ1RHVm1kRlZ3Y0dWeVFYSnRPaUFuYkdWbWRGVndjR1Z5UVhKdEp5eGNiaUFnVEdWbWRFeHZkMlZ5UVhKdE9pQW5iR1ZtZEV4dmQyVnlRWEp0Snl4Y2JpQWdUR1ZtZEVoaGJtUTZJQ2RzWldaMFNHRnVaQ2NzWEc1Y2JpQWdVbWxuYUhSVGFHOTFiR1JsY2pvZ0ozSnBaMmgwVTJodmRXeGtaWEluTEZ4dUlDQlNhV2RvZEZWd2NHVnlRWEp0T2lBbmNtbG5hSFJWY0hCbGNrRnliU2NzWEc0Z0lGSnBaMmgwVEc5M1pYSkJjbTA2SUNkeWFXZG9kRXh2ZDJWeVFYSnRKeXhjYmlBZ1VtbG5hSFJJWVc1a09pQW5jbWxuYUhSSVlXNWtKeXhjYmx4dUlDQk1aV1owVkdoMWJXSk5aWFJoWTJGeWNHRnNPaUFuYkdWbWRGUm9kVzFpVFdWMFlXTmhjbkJoYkNjc1hHNGdJRXhsWm5SVWFIVnRZbEJ5YjNocGJXRnNPaUFuYkdWbWRGUm9kVzFpVUhKdmVHbHRZV3duTEZ4dUlDQk1aV1owVkdoMWJXSkVhWE4wWVd3NklDZHNaV1owVkdoMWJXSkVhWE4wWVd3bkxGeHVJQ0JNWldaMFNXNWtaWGhRY205NGFXMWhiRG9nSjJ4bFpuUkpibVJsZUZCeWIzaHBiV0ZzSnl4Y2JpQWdUR1ZtZEVsdVpHVjRTVzUwWlhKdFpXUnBZWFJsT2lBbmJHVm1kRWx1WkdWNFNXNTBaWEp0WldScFlYUmxKeXhjYmlBZ1RHVm1kRWx1WkdWNFJHbHpkR0ZzT2lBbmJHVm1kRWx1WkdWNFJHbHpkR0ZzSnl4Y2JpQWdUR1ZtZEUxcFpHUnNaVkJ5YjNocGJXRnNPaUFuYkdWbWRFMXBaR1JzWlZCeWIzaHBiV0ZzSnl4Y2JpQWdUR1ZtZEUxcFpHUnNaVWx1ZEdWeWJXVmthV0YwWlRvZ0oyeGxablJOYVdSa2JHVkpiblJsY20xbFpHbGhkR1VuTEZ4dUlDQk1aV1owVFdsa1pHeGxSR2x6ZEdGc09pQW5iR1ZtZEUxcFpHUnNaVVJwYzNSaGJDY3NYRzRnSUV4bFpuUlNhVzVuVUhKdmVHbHRZV3c2SUNkc1pXWjBVbWx1WjFCeWIzaHBiV0ZzSnl4Y2JpQWdUR1ZtZEZKcGJtZEpiblJsY20xbFpHbGhkR1U2SUNkc1pXWjBVbWx1WjBsdWRHVnliV1ZrYVdGMFpTY3NYRzRnSUV4bFpuUlNhVzVuUkdsemRHRnNPaUFuYkdWbWRGSnBibWRFYVhOMFlXd25MRnh1SUNCTVpXWjBUR2wwZEd4bFVISnZlR2x0WVd3NklDZHNaV1owVEdsMGRHeGxVSEp2ZUdsdFlXd25MRnh1SUNCTVpXWjBUR2wwZEd4bFNXNTBaWEp0WldScFlYUmxPaUFuYkdWbWRFeHBkSFJzWlVsdWRHVnliV1ZrYVdGMFpTY3NYRzRnSUV4bFpuUk1hWFIwYkdWRWFYTjBZV3c2SUNkc1pXWjBUR2wwZEd4bFJHbHpkR0ZzSnl4Y2JseHVJQ0JTYVdkb2RGUm9kVzFpVFdWMFlXTmhjbkJoYkRvZ0ozSnBaMmgwVkdoMWJXSk5aWFJoWTJGeWNHRnNKeXhjYmlBZ1VtbG5hSFJVYUhWdFlsQnliM2hwYldGc09pQW5jbWxuYUhSVWFIVnRZbEJ5YjNocGJXRnNKeXhjYmlBZ1VtbG5hSFJVYUhWdFlrUnBjM1JoYkRvZ0ozSnBaMmgwVkdoMWJXSkVhWE4wWVd3bkxGeHVJQ0JTYVdkb2RFbHVaR1Y0VUhKdmVHbHRZV3c2SUNkeWFXZG9kRWx1WkdWNFVISnZlR2x0WVd3bkxGeHVJQ0JTYVdkb2RFbHVaR1Y0U1c1MFpYSnRaV1JwWVhSbE9pQW5jbWxuYUhSSmJtUmxlRWx1ZEdWeWJXVmthV0YwWlNjc1hHNGdJRkpwWjJoMFNXNWtaWGhFYVhOMFlXdzZJQ2R5YVdkb2RFbHVaR1Y0UkdsemRHRnNKeXhjYmlBZ1VtbG5hSFJOYVdSa2JHVlFjbTk0YVcxaGJEb2dKM0pwWjJoMFRXbGtaR3hsVUhKdmVHbHRZV3duTEZ4dUlDQlNhV2RvZEUxcFpHUnNaVWx1ZEdWeWJXVmthV0YwWlRvZ0ozSnBaMmgwVFdsa1pHeGxTVzUwWlhKdFpXUnBZWFJsSnl4Y2JpQWdVbWxuYUhSTmFXUmtiR1ZFYVhOMFlXdzZJQ2R5YVdkb2RFMXBaR1JzWlVScGMzUmhiQ2NzWEc0Z0lGSnBaMmgwVW1sdVoxQnliM2hwYldGc09pQW5jbWxuYUhSU2FXNW5VSEp2ZUdsdFlXd25MRnh1SUNCU2FXZG9kRkpwYm1kSmJuUmxjbTFsWkdsaGRHVTZJQ2R5YVdkb2RGSnBibWRKYm5SbGNtMWxaR2xoZEdVbkxGeHVJQ0JTYVdkb2RGSnBibWRFYVhOMFlXdzZJQ2R5YVdkb2RGSnBibWRFYVhOMFlXd25MRnh1SUNCU2FXZG9kRXhwZEhSc1pWQnliM2hwYldGc09pQW5jbWxuYUhSTWFYUjBiR1ZRY205NGFXMWhiQ2NzWEc0Z0lGSnBaMmgwVEdsMGRHeGxTVzUwWlhKdFpXUnBZWFJsT2lBbmNtbG5hSFJNYVhSMGJHVkpiblJsY20xbFpHbGhkR1VuTEZ4dUlDQlNhV2RvZEV4cGRIUnNaVVJwYzNSaGJEb2dKM0pwWjJoMFRHbDBkR3hsUkdsemRHRnNKeXhjYm4wZ1lYTWdZMjl1YzNRN1hHNWNibVY0Y0c5eWRDQjBlWEJsSUZaU1RVaDFiV0Z1UW05dVpVNWhiV1VnUFNCMGVYQmxiMllnVmxKTlNIVnRZVzVDYjI1bFRtRnRaVnRyWlhsdlppQjBlWEJsYjJZZ1ZsSk5TSFZ0WVc1Q2IyNWxUbUZ0WlYwN1hHNGlMQ0l2S2lCbGMyeHBiblF0WkdsellXSnNaU0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym1GdGFXNW5MV052Ym5abGJuUnBiMjRnS2k5Y2JseHVhVzF3YjNKMElIc2dWbEpOU0hWdFlXNUNiMjVsVG1GdFpTQjlJR1p5YjIwZ0p5NHZWbEpOU0hWdFlXNUNiMjVsVG1GdFpTYzdYRzVjYmk4cUtseHVJQ29nUVc0Z2IySnFaV04wSUhSb1lYUWdiV0Z3Y3lCbWNtOXRJSHRBYkdsdWF5QldVazFJZFcxaGJrSnZibVZPWVcxbGZTQjBieUJwZEhNZ2NHRnlaVzUwSUh0QWJHbHVheUJXVWsxSWRXMWhia0p2Ym1WT1lXMWxmUzVjYmlBcVhHNGdLaUJTWldZNklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOTJjbTB0WXk5MmNtMHRjM0JsWTJsbWFXTmhkR2x2Ymk5aWJHOWlMMjFoYzNSbGNpOXpjR1ZqYVdacFkyRjBhVzl1TDFaU1RVTmZkbkp0TFRFdU1DOW9kVzFoYm05cFpDNXRaRnh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnVmxKTlNIVnRZVzVDYjI1bFVHRnlaVzUwVFdGd09pQjdJRnRpYjI1bElHbHVJRlpTVFVoMWJXRnVRbTl1WlU1aGJXVmRPaUJXVWsxSWRXMWhia0p2Ym1WT1lXMWxJSHdnYm5Wc2JDQjlJRDBnZTF4dUlDQm9hWEJ6T2lCdWRXeHNMRnh1SUNCemNHbHVaVG9nSjJocGNITW5MRnh1SUNCamFHVnpkRG9nSjNOd2FXNWxKeXhjYmlBZ2RYQndaWEpEYUdWemREb2dKMk5vWlhOMEp5eGNiaUFnYm1WamF6b2dKM1Z3Y0dWeVEyaGxjM1FuTEZ4dVhHNGdJR2hsWVdRNklDZHVaV05ySnl4Y2JpQWdiR1ZtZEVWNVpUb2dKMmhsWVdRbkxGeHVJQ0J5YVdkb2RFVjVaVG9nSjJobFlXUW5MRnh1SUNCcVlYYzZJQ2RvWldGa0p5eGNibHh1SUNCc1pXWjBWWEJ3WlhKTVpXYzZJQ2RvYVhCekp5eGNiaUFnYkdWbWRFeHZkMlZ5VEdWbk9pQW5iR1ZtZEZWd2NHVnlUR1ZuSnl4Y2JpQWdiR1ZtZEVadmIzUTZJQ2RzWldaMFRHOTNaWEpNWldjbkxGeHVJQ0JzWldaMFZHOWxjem9nSjJ4bFpuUkdiMjkwSnl4Y2JseHVJQ0J5YVdkb2RGVndjR1Z5VEdWbk9pQW5hR2x3Y3ljc1hHNGdJSEpwWjJoMFRHOTNaWEpNWldjNklDZHlhV2RvZEZWd2NHVnlUR1ZuSnl4Y2JpQWdjbWxuYUhSR2IyOTBPaUFuY21sbmFIUk1iM2RsY2t4bFp5Y3NYRzRnSUhKcFoyaDBWRzlsY3pvZ0ozSnBaMmgwUm05dmRDY3NYRzVjYmlBZ2JHVm1kRk5vYjNWc1pHVnlPaUFuZFhCd1pYSkRhR1Z6ZENjc1hHNGdJR3hsWm5SVmNIQmxja0Z5YlRvZ0oyeGxablJUYUc5MWJHUmxjaWNzWEc0Z0lHeGxablJNYjNkbGNrRnliVG9nSjJ4bFpuUlZjSEJsY2tGeWJTY3NYRzRnSUd4bFpuUklZVzVrT2lBbmJHVm1kRXh2ZDJWeVFYSnRKeXhjYmx4dUlDQnlhV2RvZEZOb2IzVnNaR1Z5T2lBbmRYQndaWEpEYUdWemRDY3NYRzRnSUhKcFoyaDBWWEJ3WlhKQmNtMDZJQ2R5YVdkb2RGTm9iM1ZzWkdWeUp5eGNiaUFnY21sbmFIUk1iM2RsY2tGeWJUb2dKM0pwWjJoMFZYQndaWEpCY20wbkxGeHVJQ0J5YVdkb2RFaGhibVE2SUNkeWFXZG9kRXh2ZDJWeVFYSnRKeXhjYmx4dUlDQnNaV1owVkdoMWJXSk5aWFJoWTJGeWNHRnNPaUFuYkdWbWRFaGhibVFuTEZ4dUlDQnNaV1owVkdoMWJXSlFjbTk0YVcxaGJEb2dKMnhsWm5SVWFIVnRZazFsZEdGallYSndZV3duTEZ4dUlDQnNaV1owVkdoMWJXSkVhWE4wWVd3NklDZHNaV1owVkdoMWJXSlFjbTk0YVcxaGJDY3NYRzRnSUd4bFpuUkpibVJsZUZCeWIzaHBiV0ZzT2lBbmJHVm1kRWhoYm1RbkxGeHVJQ0JzWldaMFNXNWtaWGhKYm5SbGNtMWxaR2xoZEdVNklDZHNaV1owU1c1a1pYaFFjbTk0YVcxaGJDY3NYRzRnSUd4bFpuUkpibVJsZUVScGMzUmhiRG9nSjJ4bFpuUkpibVJsZUVsdWRHVnliV1ZrYVdGMFpTY3NYRzRnSUd4bFpuUk5hV1JrYkdWUWNtOTRhVzFoYkRvZ0oyeGxablJJWVc1a0p5eGNiaUFnYkdWbWRFMXBaR1JzWlVsdWRHVnliV1ZrYVdGMFpUb2dKMnhsWm5STmFXUmtiR1ZRY205NGFXMWhiQ2NzWEc0Z0lHeGxablJOYVdSa2JHVkVhWE4wWVd3NklDZHNaV1owVFdsa1pHeGxTVzUwWlhKdFpXUnBZWFJsSnl4Y2JpQWdiR1ZtZEZKcGJtZFFjbTk0YVcxaGJEb2dKMnhsWm5SSVlXNWtKeXhjYmlBZ2JHVm1kRkpwYm1kSmJuUmxjbTFsWkdsaGRHVTZJQ2RzWldaMFVtbHVaMUJ5YjNocGJXRnNKeXhjYmlBZ2JHVm1kRkpwYm1kRWFYTjBZV3c2SUNkc1pXWjBVbWx1WjBsdWRHVnliV1ZrYVdGMFpTY3NYRzRnSUd4bFpuUk1hWFIwYkdWUWNtOTRhVzFoYkRvZ0oyeGxablJJWVc1a0p5eGNiaUFnYkdWbWRFeHBkSFJzWlVsdWRHVnliV1ZrYVdGMFpUb2dKMnhsWm5STWFYUjBiR1ZRY205NGFXMWhiQ2NzWEc0Z0lHeGxablJNYVhSMGJHVkVhWE4wWVd3NklDZHNaV1owVEdsMGRHeGxTVzUwWlhKdFpXUnBZWFJsSnl4Y2JseHVJQ0J5YVdkb2RGUm9kVzFpVFdWMFlXTmhjbkJoYkRvZ0ozSnBaMmgwU0dGdVpDY3NYRzRnSUhKcFoyaDBWR2gxYldKUWNtOTRhVzFoYkRvZ0ozSnBaMmgwVkdoMWJXSk5aWFJoWTJGeWNHRnNKeXhjYmlBZ2NtbG5hSFJVYUhWdFlrUnBjM1JoYkRvZ0ozSnBaMmgwVkdoMWJXSlFjbTk0YVcxaGJDY3NYRzRnSUhKcFoyaDBTVzVrWlhoUWNtOTRhVzFoYkRvZ0ozSnBaMmgwU0dGdVpDY3NYRzRnSUhKcFoyaDBTVzVrWlhoSmJuUmxjbTFsWkdsaGRHVTZJQ2R5YVdkb2RFbHVaR1Y0VUhKdmVHbHRZV3duTEZ4dUlDQnlhV2RvZEVsdVpHVjRSR2x6ZEdGc09pQW5jbWxuYUhSSmJtUmxlRWx1ZEdWeWJXVmthV0YwWlNjc1hHNGdJSEpwWjJoMFRXbGtaR3hsVUhKdmVHbHRZV3c2SUNkeWFXZG9kRWhoYm1RbkxGeHVJQ0J5YVdkb2RFMXBaR1JzWlVsdWRHVnliV1ZrYVdGMFpUb2dKM0pwWjJoMFRXbGtaR3hsVUhKdmVHbHRZV3duTEZ4dUlDQnlhV2RvZEUxcFpHUnNaVVJwYzNSaGJEb2dKM0pwWjJoMFRXbGtaR3hsU1c1MFpYSnRaV1JwWVhSbEp5eGNiaUFnY21sbmFIUlNhVzVuVUhKdmVHbHRZV3c2SUNkeWFXZG9kRWhoYm1RbkxGeHVJQ0J5YVdkb2RGSnBibWRKYm5SbGNtMWxaR2xoZEdVNklDZHlhV2RvZEZKcGJtZFFjbTk0YVcxaGJDY3NYRzRnSUhKcFoyaDBVbWx1WjBScGMzUmhiRG9nSjNKcFoyaDBVbWx1WjBsdWRHVnliV1ZrYVdGMFpTY3NYRzRnSUhKcFoyaDBUR2wwZEd4bFVISnZlR2x0WVd3NklDZHlhV2RvZEVoaGJtUW5MRnh1SUNCeWFXZG9kRXhwZEhSc1pVbHVkR1Z5YldWa2FXRjBaVG9nSjNKcFoyaDBUR2wwZEd4bFVISnZlR2x0WVd3bkxGeHVJQ0J5YVdkb2RFeHBkSFJzWlVScGMzUmhiRG9nSjNKcFoyaDBUR2wwZEd4bFNXNTBaWEp0WldScFlYUmxKeXhjYm4wN1hHNGlMQ0pwYlhCdmNuUWdLaUJoY3lCVVNGSkZSU0JtY205dElDZDBhSEpsWlNjN1hHNWNiaThxS2x4dUlDb2dRU0JqYjIxd1lYUWdablZ1WTNScGIyNGdabTl5SUdCUmRXRjBaWEp1YVc5dUxtbHVkbVZ5ZENncFlDQXZJR0JSZFdGMFpYSnVhVzl1TG1sdWRtVnljMlVvS1dBdVhHNGdLaUJnVVhWaGRHVnlibWx2Ymk1cGJuWmxjblFvS1dBZ2FYTWdhVzUwY205a2RXTmxaQ0JwYmlCeU1USXpJR0Z1WkNCZ1VYVmhkR1Z5Ym1sdmJpNXBiblpsY25ObEtDbGdJR1Z0YVhSeklHRWdkMkZ5Ym1sdVp5NWNiaUFxSUZkbElHRnlaU0JuYjJsdVp5QjBieUIxYzJVZ2RHaHBjeUJqYjIxd1lYUWdabTl5SUdFZ2QyaHBiR1V1WEc0Z0tpQkFjR0Z5WVcwZ2RHRnlaMlYwSUVFZ2RHRnlaMlYwSUhGMVlYUmxjbTVwYjI1Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSEYxWVhSSmJuWmxjblJEYjIxd1lYUThWQ0JsZUhSbGJtUnpJRlJJVWtWRkxsRjFZWFJsY201cGIyNCtLSFJoY21kbGREb2dWQ2s2SUZRZ2UxeHVJQ0JwWmlBb0tIUmhjbWRsZENCaGN5QmhibmtwTG1sdWRtVnlkQ2tnZTF4dUlDQWdJSFJoY21kbGRDNXBiblpsY25Rb0tUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQW9kR0Z5WjJWMElHRnpJR0Z1ZVNrdWFXNTJaWEp6WlNncE8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIUmhjbWRsZER0Y2JuMWNiaUlzSW1sdGNHOXlkQ0FxSUdGeklGUklVa1ZGSUdaeWIyMGdKM1JvY21WbEp6dGNibWx0Y0c5eWRDQjdJSEYxWVhSSmJuWmxjblJEYjIxd1lYUWdmU0JtY205dElDY3VMaTkxZEdsc2N5OXhkV0YwU1c1MlpYSjBRMjl0Y0dGMEp6dGNibWx0Y0c5eWRDQjBlWEJsSUhzZ1ZsSk5TSFZ0WVc1Q2IyNWxJSDBnWm5KdmJTQW5MaTlXVWsxSWRXMWhia0p2Ym1Vbk8xeHVhVzF3YjNKMElIUjVjR1VnZXlCV1VrMUlkVzFoYmtKdmJtVnpJSDBnWm5KdmJTQW5MaTlXVWsxSWRXMWhia0p2Ym1Wekp6dGNibWx0Y0c5eWRDQjBlWEJsSUhzZ1ZsSk5TSFZ0WVc1Q2IyNWxUbUZ0WlNCOUlHWnliMjBnSnk0dlZsSk5TSFZ0WVc1Q2IyNWxUbUZ0WlNjN1hHNXBiWEJ2Y25RZ2RIbHdaU0I3SUZaU1RWQnZjMlVnZlNCbWNtOXRJQ2N1TDFaU1RWQnZjMlVuTzF4dVhHNWpiMjV6ZENCZmRqTkJJRDBnYm1WM0lGUklVa1ZGTGxabFkzUnZjak1vS1R0Y2JtTnZibk4wSUY5eGRXRjBRU0E5SUc1bGR5QlVTRkpGUlM1UmRXRjBaWEp1YVc5dUtDazdYRzVjYmk4cUtseHVJQ29nUVNCamJHRnpjeUJ5WlhCeVpYTmxiblJ6SUhSb1pTQlNhV2NnYjJZZ1lTQldVazB1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCV1VrMVNhV2NnZTF4dUlDQXZLaXBjYmlBZ0lDb2dRU0I3UUd4cGJtc2dWbEpOU0hWdFlXNUNiMjVsYzMwZ2RHaGhkQ0JqYjI1MFlXbHVjeUJoYkd3Z2RHaGxJR2gxYldGdUlHSnZibVZ6SUc5bUlIUm9aU0JXVWswdVhHNGdJQ0FxSUZsdmRTQnRhV2RvZENCM1lXNTBJSFJ2SUdkbGRDQjBhR1Z6WlNCaWIyNWxjeUIxYzJsdVp5QjdRR3hwYm1zZ1ZsSk5TSFZ0WVc1dmFXUXVaMlYwUW05dVpYMHVYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdhSFZ0WVc1Q2IyNWxjem9nVmxKTlNIVnRZVzVDYjI1bGN6dGNibHh1SUNBdktpcGNiaUFnSUNvZ1FTQjdRR3hwYm1zZ1ZsSk5VRzl6WlgwZ2RHaGhkQ0JwY3lCcGRITWdaR1ZtWVhWc2RDQnpkR0YwWlM1Y2JpQWdJQ29nVG05MFpTQjBhR0YwSUdsMEozTWdibTkwSUdOdmJYQmhkR2xpYkdVZ2QybDBhQ0I3UUd4cGJtc2djMlYwVUc5elpYMGdZVzVrSUh0QWJHbHVheUJuWlhSUWIzTmxmU3dnYzJsdVkyVWdhWFFnWTI5dWRHRnBibk1nYm05dUxYSmxiR0YwYVhabElIWmhiSFZsY3lCdlppQmxZV05vSUd4dlkyRnNJSFJ5WVc1elptOXliWE11WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nY21WemRGQnZjMlU2SUZaU1RWQnZjMlU3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU55WldGMFpTQmhJRzVsZHlCN1FHeHBibXNnVmxKTlNIVnRZVzV2YVdSOUxseHVJQ0FnS2lCQWNHRnlZVzBnYUhWdFlXNUNiMjVsY3lCQklIdEFiR2x1YXlCV1VrMUlkVzFoYmtKdmJtVnpmU0JqYjI1MFlXbHVjeUJoYkd3Z2RHaGxJR0p2Ym1WeklHOW1JSFJvWlNCdVpYY2dhSFZ0WVc1dmFXUmNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWhvZFcxaGJrSnZibVZ6T2lCV1VrMUlkVzFoYmtKdmJtVnpLU0I3WEc0Z0lDQWdkR2hwY3k1b2RXMWhia0p2Ym1WeklEMGdhSFZ0WVc1Q2IyNWxjenRjYmx4dUlDQWdJSFJvYVhNdWNtVnpkRkJ2YzJVZ1BTQjBhR2x6TG1kbGRFRmljMjlzZFhSbFVHOXpaU2dwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5YmlCMGFHVWdZM1Z5Y21WdWRDQmhZbk52YkhWMFpTQndiM05sSUc5bUlIUm9hWE1nYUhWdFlXNXZhV1FnWVhNZ1lTQjdRR3hwYm1zZ1ZsSk5VRzl6WlgwdVhHNGdJQ0FxSUU1dmRHVWdkR2hoZENCMGFHVWdiM1YwY0hWMElISmxjM1ZzZENCM2FXeHNJR052Ym5SaGFXNGdhVzVwZEdsaGJDQnpkR0YwWlNCdlppQjBhR1VnVmxKTklHRnVaQ0J1YjNRZ1kyOXRjR0YwYVdKc1pTQmlaWFIzWldWdUlHUnBabVpsY21WdWRDQnRiMlJsYkhNdVhHNGdJQ0FxSUZsdmRTQnRhV2RvZENCM1lXNTBJSFJ2SUhWelpTQjdRR3hwYm1zZ1oyVjBVRzl6WlgwZ2FXNXpkR1ZoWkM1Y2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCblpYUkJZbk52YkhWMFpWQnZjMlVvS1RvZ1ZsSk5VRzl6WlNCN1hHNGdJQ0FnWTI5dWMzUWdjRzl6WlNBOUlIdDlJR0Z6SUZaU1RWQnZjMlU3WEc1Y2JpQWdJQ0JQWW1wbFkzUXVhMlY1Y3loMGFHbHpMbWgxYldGdVFtOXVaWE1wTG1admNrVmhZMmdvS0haeWJVSnZibVZPWVcxbFUzUnlhVzVuS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCMmNtMUNiMjVsVG1GdFpTQTlJSFp5YlVKdmJtVk9ZVzFsVTNSeWFXNW5JR0Z6SUZaU1RVaDFiV0Z1UW05dVpVNWhiV1U3WEc0Z0lDQWdJQ0JqYjI1emRDQnViMlJsSUQwZ2RHaHBjeTVuWlhSQ2IyNWxUbTlrWlNoMmNtMUNiMjVsVG1GdFpTazdYRzVjYmlBZ0lDQWdJQzh2SUVsbmJtOXlaU0IzYUdWdUlIUm9aWEpsSUdGeVpTQnVieUJpYjI1bElHOXVJSFJvWlNCV1VrMUlkVzFoYm05cFpGeHVJQ0FnSUNBZ2FXWWdLQ0Z1YjJSbEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnUjJWMElIUm9aU0J3YjNOcGRHbHZiaUF2SUhKdmRHRjBhVzl1SUdaeWIyMGdkR2hsSUc1dlpHVmNiaUFnSUNBZ0lGOTJNMEV1WTI5d2VTaHViMlJsTG5CdmMybDBhVzl1S1R0Y2JpQWdJQ0FnSUY5eGRXRjBRUzVqYjNCNUtHNXZaR1V1Y1hWaGRHVnlibWx2YmlrN1hHNWNiaUFnSUNBZ0lDOHZJRU52Ym5abGNuUWdkRzhnY21GM0lHRnljbUY1YzF4dUlDQWdJQ0FnY0c5elpWdDJjbTFDYjI1bFRtRnRaVjBnUFNCN1hHNGdJQ0FnSUNBZ0lIQnZjMmwwYVc5dU9pQmZkak5CTG5SdlFYSnlZWGtvS1NCaGN5QmJiblZ0WW1WeUxDQnVkVzFpWlhJc0lHNTFiV0psY2wwc1hHNGdJQ0FnSUNBZ0lISnZkR0YwYVc5dU9pQmZjWFZoZEVFdWRHOUJjbkpoZVNncElHRnpJRnR1ZFcxaVpYSXNJRzUxYldKbGNpd2diblZ0WW1WeUxDQnVkVzFpWlhKZExGeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCd2IzTmxPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGRIVnliaUIwYUdVZ1kzVnljbVZ1ZENCd2IzTmxJRzltSUhSb2FYTWdhSFZ0WVc1dmFXUWdZWE1nWVNCN1FHeHBibXNnVmxKTlVHOXpaWDB1WEc0Z0lDQXFYRzRnSUNBcUlFVmhZMmdnZEhKaGJuTm1iM0p0SUdseklHRWdiRzlqWVd3Z2RISmhibk5tYjNKdElISmxiR0YwYVhabElHWnliMjBnY21WemRDQndiM05sSUNoVUxYQnZjMlVwTGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUdkbGRGQnZjMlVvS1RvZ1ZsSk5VRzl6WlNCN1hHNGdJQ0FnWTI5dWMzUWdjRzl6WlNBOUlIdDlJR0Z6SUZaU1RWQnZjMlU3WEc1Y2JpQWdJQ0JQWW1wbFkzUXVhMlY1Y3loMGFHbHpMbWgxYldGdVFtOXVaWE1wTG1admNrVmhZMmdvS0dKdmJtVk9ZVzFsVTNSeWFXNW5LU0E5UGlCN1hHNGdJQ0FnSUNCamIyNXpkQ0JpYjI1bFRtRnRaU0E5SUdKdmJtVk9ZVzFsVTNSeWFXNW5JR0Z6SUZaU1RVaDFiV0Z1UW05dVpVNWhiV1U3WEc0Z0lDQWdJQ0JqYjI1emRDQnViMlJsSUQwZ2RHaHBjeTVuWlhSQ2IyNWxUbTlrWlNoaWIyNWxUbUZ0WlNrN1hHNWNiaUFnSUNBZ0lDOHZJRWxuYm05eVpTQjNhR1Z1SUhSb1pYSmxJR0Z5WlNCdWJ5QmliMjVsSUc5dUlIUm9aU0JXVWsxSWRXMWhibTlwWkZ4dUlDQWdJQ0FnYVdZZ0tDRnViMlJsS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdWR0ZyWlNCaElHUnBabVlnWm5KdmJTQnlaWE4wVUc5elpWeHVJQ0FnSUNBZ1gzWXpRUzV6WlhRb01Dd2dNQ3dnTUNrN1hHNGdJQ0FnSUNCZmNYVmhkRUV1YVdSbGJuUnBkSGtvS1R0Y2JseHVJQ0FnSUNBZ1kyOXVjM1FnY21WemRGTjBZWFJsSUQwZ2RHaHBjeTV5WlhOMFVHOXpaVnRpYjI1bFRtRnRaVjA3WEc0Z0lDQWdJQ0JwWmlBb2NtVnpkRk4wWVhSbFB5NXdiM05wZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0JmZGpOQkxtWnliMjFCY25KaGVTaHlaWE4wVTNSaGRHVXVjRzl6YVhScGIyNHBMbTVsWjJGMFpTZ3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0hKbGMzUlRkR0YwWlQ4dWNtOTBZWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdjWFZoZEVsdWRtVnlkRU52YlhCaGRDaGZjWFZoZEVFdVpuSnZiVUZ5Y21GNUtISmxjM1JUZEdGMFpTNXliM1JoZEdsdmJpa3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCSFpYUWdkR2hsSUhCdmMybDBhVzl1SUM4Z2NtOTBZWFJwYjI0Z1puSnZiU0IwYUdVZ2JtOWtaVnh1SUNBZ0lDQWdYM1l6UVM1aFpHUW9ibTlrWlM1d2IzTnBkR2x2YmlrN1hHNGdJQ0FnSUNCZmNYVmhkRUV1Y0hKbGJYVnNkR2x3Ykhrb2JtOWtaUzV4ZFdGMFpYSnVhVzl1S1R0Y2JseHVJQ0FnSUNBZ0x5OGdRMjl1ZG1WeWRDQjBieUJ5WVhjZ1lYSnlZWGx6WEc0Z0lDQWdJQ0J3YjNObFcySnZibVZPWVcxbFhTQTlJSHRjYmlBZ0lDQWdJQ0FnY0c5emFYUnBiMjQ2SUY5Mk0wRXVkRzlCY25KaGVTZ3BJR0Z6SUZ0dWRXMWlaWElzSUc1MWJXSmxjaXdnYm5WdFltVnlYU3hjYmlBZ0lDQWdJQ0FnY205MFlYUnBiMjQ2SUY5eGRXRjBRUzUwYjBGeWNtRjVLQ2tnWVhNZ1cyNTFiV0psY2l3Z2JuVnRZbVZ5TENCdWRXMWlaWElzSUc1MWJXSmxjbDBzWEc0Z0lDQWdJQ0I5TzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnY21WMGRYSnVJSEJ2YzJVN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dUR1YwSUhSb1pTQm9kVzFoYm05cFpDQmtieUJoSUhOd1pXTnBabWxsWkNCd2IzTmxMbHh1SUNBZ0tseHVJQ0FnS2lCRllXTm9JSFJ5WVc1elptOXliU0JvWVhabElIUnZJR0psSUdFZ2JHOWpZV3dnZEhKaGJuTm1iM0p0SUhKbGJHRjBhWFpsSUdaeWIyMGdjbVZ6ZENCd2IzTmxJQ2hVTFhCdmMyVXBMbHh1SUNBZ0tpQlpiM1VnWTJGdUlIQmhjM01nZDJoaGRDQjViM1VnWjI5MElHWnliMjBnZTBCc2FXNXJJR2RsZEZCdmMyVjlMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnY0c5elpVOWlhbVZqZENCQklGdGJWbEpOVUc5elpWMWRJSFJvWVhRZ2NtVndjbVZ6Wlc1MGN5QmhJSE5wYm1kc1pTQndiM05sWEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nYzJWMFVHOXpaU2h3YjNObFQySnFaV04wT2lCV1VrMVFiM05sS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdUMkpxWldOMExtVnVkSEpwWlhNb2NHOXpaVTlpYW1WamRDa3VabTl5UldGamFDZ29XMkp2Ym1WT1lXMWxVM1J5YVc1bkxDQnpkR0YwWlYwcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElHSnZibVZPWVcxbElEMGdZbTl1WlU1aGJXVlRkSEpwYm1jZ1lYTWdWbEpOU0hWdFlXNUNiMjVsVG1GdFpUdGNiaUFnSUNBZ0lHTnZibk4wSUc1dlpHVWdQU0IwYUdsekxtZGxkRUp2Ym1WT2IyUmxLR0p2Ym1WT1lXMWxLVHRjYmx4dUlDQWdJQ0FnTHk4Z1NXZHViM0psSUhkb1pXNGdkR2hsY21VZ1lYSmxJRzV2SUdKdmJtVWdkR2hoZENCcGN5QmtaV1pwYm1Wa0lHbHVJSFJvWlNCd2IzTmxJRzl1SUhSb1pTQldVazFJZFcxaGJtOXBaRnh1SUNBZ0lDQWdhV1lnS0NGdWIyUmxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnWTI5dWMzUWdjbVZ6ZEZOMFlYUmxJRDBnZEdocGN5NXlaWE4wVUc5elpWdGliMjVsVG1GdFpWMDdYRzRnSUNBZ0lDQnBaaUFvSVhKbGMzUlRkR0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJKZENkeklIWmxjbmtnZFc1c2FXdGxiSGt1SUZCdmMzTnBZbXg1SUdFZ1luVm5YRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnUVhCd2JIa2dkR2hsSUhOMFlYUmxJSFJ2SUhSb1pTQmhZM1IxWVd3Z1ltOXVaVnh1SUNBZ0lDQWdhV1lnS0hOMFlYUmxQeTV3YjNOcGRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNCdWIyUmxMbkJ2YzJsMGFXOXVMbVp5YjIxQmNuSmhlU2h6ZEdGMFpTNXdiM05wZEdsdmJpazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjM1JUZEdGMFpTNXdiM05wZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUc1dlpHVXVjRzl6YVhScGIyNHVZV1JrS0Y5Mk0wRXVabkp2YlVGeWNtRjVLSEpsYzNSVGRHRjBaUzV3YjNOcGRHbHZiaWtwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2h6ZEdGMFpUOHVjbTkwWVhScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnYm05a1pTNXhkV0YwWlhKdWFXOXVMbVp5YjIxQmNuSmhlU2h6ZEdGMFpTNXliM1JoZEdsdmJpazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjM1JUZEdGMFpTNXliM1JoZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUc1dlpHVXVjWFZoZEdWeWJtbHZiaTV0ZFd4MGFYQnNlU2hmY1hWaGRFRXVabkp2YlVGeWNtRjVLSEpsYzNSVGRHRjBaUzV5YjNSaGRHbHZiaWtwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZ6WlhRZ2RHaGxJR2gxYldGdWIybGtJSFJ2SUdsMGN5QnlaWE4wSUhCdmMyVXVYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdjbVZ6WlhSUWIzTmxLQ2s2SUhadmFXUWdlMXh1SUNBZ0lFOWlhbVZqZEM1bGJuUnlhV1Z6S0hSb2FYTXVjbVZ6ZEZCdmMyVXBMbVp2Y2tWaFkyZ29LRnRpYjI1bFRtRnRaU3dnY21WemRGMHBJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJRzV2WkdVZ1BTQjBhR2x6TG1kbGRFSnZibVZPYjJSbEtHSnZibVZPWVcxbElHRnpJRlpTVFVoMWJXRnVRbTl1WlU1aGJXVXBPMXh1WEc0Z0lDQWdJQ0JwWmlBb0lXNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9jbVZ6ZEQ4dWNHOXphWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdibTlrWlM1d2IzTnBkR2x2Ymk1bWNtOXRRWEp5WVhrb2NtVnpkQzV3YjNOcGRHbHZiaWs3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaHlaWE4wUHk1eWIzUmhkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQnViMlJsTG5GMVlYUmxjbTVwYjI0dVpuSnZiVUZ5Y21GNUtISmxjM1F1Y205MFlYUnBiMjRwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5YmlCaElHSnZibVVnWW05MWJtUWdkRzhnWVNCemNHVmphV1pwWldRZ2UwQnNhVzVySUZaU1RVaDFiV0Z1UW05dVpVNWhiV1Y5TENCaGN5QmhJSHRBYkdsdWF5QldVazFJZFcxaGJrSnZibVY5TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2JtRnRaU0JPWVcxbElHOW1JSFJvWlNCaWIyNWxJSGx2ZFNCM1lXNTBYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdaMlYwUW05dVpTaHVZVzFsT2lCV1VrMUlkVzFoYmtKdmJtVk9ZVzFsS1RvZ1ZsSk5TSFZ0WVc1Q2IyNWxJSHdnZFc1a1pXWnBibVZrSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1b2RXMWhia0p2Ym1WelcyNWhiV1ZkSUQ4L0lIVnVaR1ZtYVc1bFpEdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNGdZU0JpYjI1bElHSnZkVzVrSUhSdklHRWdjM0JsWTJsbWFXVmtJSHRBYkdsdWF5QldVazFJZFcxaGJrSnZibVZPWVcxbGZTd2dZWE1nWVNCZ1ZFaFNSVVV1VDJKcVpXTjBNMFJnTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2JtRnRaU0JPWVcxbElHOW1JSFJvWlNCaWIyNWxJSGx2ZFNCM1lXNTBYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdaMlYwUW05dVpVNXZaR1VvYm1GdFpUb2dWbEpOU0hWdFlXNUNiMjVsVG1GdFpTazZJRlJJVWtWRkxrOWlhbVZqZERORUlId2diblZzYkNCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWFIVnRZVzVDYjI1bGMxdHVZVzFsWFQ4dWJtOWtaU0EvUHlCdWRXeHNPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnS2lCaGN5QlVTRkpGUlNCbWNtOXRJQ2QwYUhKbFpTYzdYRzVwYlhCdmNuUWdleUJXVWsxSWRXMWhia0p2Ym1WT1lXMWxMQ0JXVWsxSWRXMWhia0p2Ym1WeklIMGdabkp2YlNBbkxpYzdYRzVwYlhCdmNuUWdleUJXVWsxSWRXMWhia0p2Ym1WTWFYTjBJSDBnWm5KdmJTQW5MaTlXVWsxSWRXMWhia0p2Ym1WTWFYTjBKenRjYm1sdGNHOXlkQ0I3SUZaU1RVaDFiV0Z1UW05dVpWQmhjbVZ1ZEUxaGNDQjlJR1p5YjIwZ0p5NHZWbEpOU0hWdFlXNUNiMjVsVUdGeVpXNTBUV0Z3Snp0Y2JtbHRjRzl5ZENCN0lGWlNUVkpwWnlCOUlHWnliMjBnSnk0dlZsSk5VbWxuSnp0Y2JseHVZMjl1YzNRZ1gzWXpRU0E5SUc1bGR5QlVTRkpGUlM1V1pXTjBiM0l6S0NrN1hHNWpiMjV6ZENCZmNYVmhkRUVnUFNCdVpYY2dWRWhTUlVVdVVYVmhkR1Z5Ym1sdmJpZ3BPMXh1WTI5dWMzUWdYMkp2Ym1WWGIzSnNaRkJ2Y3lBOUlHNWxkeUJVU0ZKRlJTNVdaV04wYjNJektDazdYRzVjYmk4cUtseHVJQ29nUVNCamJHRnpjeUJ5WlhCeVpYTmxiblJ6SUhSb1pTQnViM0p0WVd4cGVtVmtJRkpwWnlCdlppQmhJRlpTVFM1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGWlNUVWgxYldGdWIybGtVbWxuSUdWNGRHVnVaSE1nVmxKTlVtbG5JSHRjYmlBZ2NISnZkR1ZqZEdWa0lITjBZWFJwWXlCZmMyVjBkWEJVY21GdWMyWnZjbTF6S0cxdlpHVnNVbWxuT2lCV1VrMVNhV2NwT2lCN1hHNGdJQ0FnY21sblFtOXVaWE02SUZaU1RVaDFiV0Z1UW05dVpYTTdYRzRnSUNBZ2NtOXZkRG9nVkVoU1JVVXVUMkpxWldOME0wUTdYRzRnSUNBZ2NHRnlaVzUwVjI5eWJHUlNiM1JoZEdsdmJuTTZJSHNnVzJKdmJtVk9ZVzFsSUdsdUlGWlNUVWgxYldGdVFtOXVaVTVoYldWZFB6b2dWRWhTUlVVdVVYVmhkR1Z5Ym1sdmJpQjlPMXh1SUNBZ0lHSnZibVZTYjNSaGRHbHZibk02SUhzZ1cySnZibVZPWVcxbElHbHVJRlpTVFVoMWJXRnVRbTl1WlU1aGJXVmRQem9nVkVoU1JVVXVVWFZoZEdWeWJtbHZiaUI5TzF4dUlDQjlJSHRjYmlBZ0lDQmpiMjV6ZENCeWIyOTBJRDBnYm1WM0lGUklVa1ZGTGs5aWFtVmpkRE5FS0NrN1hHNGdJQ0FnY205dmRDNXVZVzFsSUQwZ0oxWlNUVWgxYldGdWIybGtVbWxuSnp0Y2JseHVJQ0FnSUM4dklITjBiM0psSUdKdmJtVlhiM0pzWkZCdmMybDBhVzl1Y3lCaGJtUWdZbTl1WlZkdmNteGtVbTkwWVhScGIyNXpYRzRnSUNBZ1kyOXVjM1FnWW05dVpWZHZjbXhrVUc5emFYUnBiMjV6T2lCN0lGdGliMjVsVG1GdFpTQnBiaUJXVWsxSWRXMWhia0p2Ym1WT1lXMWxYVDg2SUZSSVVrVkZMbFpsWTNSdmNqTWdmU0E5SUh0OU8xeHVJQ0FnSUdOdmJuTjBJR0p2Ym1WWGIzSnNaRkp2ZEdGMGFXOXVjem9nZXlCYlltOXVaVTVoYldVZ2FXNGdWbEpOU0hWdFlXNUNiMjVsVG1GdFpWMC9PaUJVU0ZKRlJTNVJkV0YwWlhKdWFXOXVJSDBnUFNCN2ZUdGNiaUFnSUNCamIyNXpkQ0JpYjI1bFVtOTBZWFJwYjI1ek9pQjdJRnRpYjI1bFRtRnRaU0JwYmlCV1VrMUlkVzFoYmtKdmJtVk9ZVzFsWFQ4NklGUklVa1ZGTGxGMVlYUmxjbTVwYjI0Z2ZTQTlJSHQ5TzF4dVhHNGdJQ0FnVmxKTlNIVnRZVzVDYjI1bFRHbHpkQzVtYjNKRllXTm9LQ2hpYjI1bFRtRnRaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ1kyOXVjM1FnWW05dVpVNXZaR1VnUFNCdGIyUmxiRkpwWnk1blpYUkNiMjVsVG05a1pTaGliMjVsVG1GdFpTazdYRzVjYmlBZ0lDQWdJR2xtSUNoaWIyNWxUbTlrWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCaWIyNWxWMjl5YkdSUWIzTnBkR2x2YmlBOUlHNWxkeUJVU0ZKRlJTNVdaV04wYjNJektDazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHSnZibVZYYjNKc1pGSnZkR0YwYVc5dUlEMGdibVYzSUZSSVVrVkZMbEYxWVhSbGNtNXBiMjRvS1R0Y2JseHVJQ0FnSUNBZ0lDQmliMjVsVG05a1pTNTFjR1JoZEdWWGIzSnNaRTFoZEhKcGVDaDBjblZsTENCbVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUdKdmJtVk9iMlJsTG0xaGRISnBlRmR2Y214a0xtUmxZMjl0Y0c5elpTaGliMjVsVjI5eWJHUlFiM05wZEdsdmJpd2dZbTl1WlZkdmNteGtVbTkwWVhScGIyNHNJRjkyTTBFcE8xeHVYRzRnSUNBZ0lDQWdJR0p2Ym1WWGIzSnNaRkJ2YzJsMGFXOXVjMXRpYjI1bFRtRnRaVjBnUFNCaWIyNWxWMjl5YkdSUWIzTnBkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ1ltOXVaVmR2Y214a1VtOTBZWFJwYjI1elcySnZibVZPWVcxbFhTQTlJR0p2Ym1WWGIzSnNaRkp2ZEdGMGFXOXVPMXh1SUNBZ0lDQWdJQ0JpYjI1bFVtOTBZWFJwYjI1elcySnZibVZPWVcxbFhTQTlJR0p2Ym1WT2IyUmxMbkYxWVhSbGNtNXBiMjR1WTJ4dmJtVW9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJQzh2SUdKMWFXeGtJSEpwWnlCb2FXVnlZWEpqYUhrZ0t5QnpkRzl5WlNCd1lYSmxiblJYYjNKc1pGSnZkR0YwYVc5dWMxeHVJQ0FnSUdOdmJuTjBJSEJoY21WdWRGZHZjbXhrVW05MFlYUnBiMjV6T2lCN0lGdGliMjVsVG1GdFpTQnBiaUJXVWsxSWRXMWhia0p2Ym1WT1lXMWxYVDg2SUZSSVVrVkZMbEYxWVhSbGNtNXBiMjRnZlNBOUlIdDlPMXh1WEc0Z0lDQWdZMjl1YzNRZ2NtbG5RbTl1WlhNNklGQmhjblJwWVd3OFZsSk5TSFZ0WVc1Q2IyNWxjejRnUFNCN2ZUdGNiaUFnSUNCV1VrMUlkVzFoYmtKdmJtVk1hWE4wTG1admNrVmhZMmdvS0dKdmJtVk9ZVzFsS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCaWIyNWxUbTlrWlNBOUlHMXZaR1ZzVW1sbkxtZGxkRUp2Ym1WT2IyUmxLR0p2Ym1WT1lXMWxLVHRjYmx4dUlDQWdJQ0FnYVdZZ0tHSnZibVZPYjJSbEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHSnZibVZYYjNKc1pGQnZjMmwwYVc5dUlEMGdZbTl1WlZkdmNteGtVRzl6YVhScGIyNXpXMkp2Ym1WT1lXMWxYU0JoY3lCVVNGSkZSUzVXWldOMGIzSXpPMXh1WEc0Z0lDQWdJQ0FnSUM4dklITmxaU0IwYUdVZ2JtVmhjbVZ6ZENCd1lYSmxiblFnY0c5emFYUnBiMjVjYmlBZ0lDQWdJQ0FnYkdWMElHTjFjbkpsYm5SQ2IyNWxUbUZ0WlRvZ1ZsSk5TSFZ0WVc1Q2IyNWxUbUZ0WlNCOElHNTFiR3dnUFNCaWIyNWxUbUZ0WlR0Y2JpQWdJQ0FnSUNBZ2JHVjBJSEJoY21WdWRGZHZjbXhrVUc5emFYUnBiMjQ2SUZSSVVrVkZMbFpsWTNSdmNqTWdmQ0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUd4bGRDQndZWEpsYm5SWGIzSnNaRkp2ZEdGMGFXOXVPaUJVU0ZKRlJTNVJkV0YwWlhKdWFXOXVJSHdnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvY0dGeVpXNTBWMjl5YkdSUWIzTnBkR2x2YmlBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRFSnZibVZPWVcxbElEMGdWbEpOU0hWdFlXNUNiMjVsVUdGeVpXNTBUV0Z3VzJOMWNuSmxiblJDYjI1bFRtRnRaVjA3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR04xY25KbGJuUkNiMjVsVG1GdFpTQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdjR0Z5Wlc1MFYyOXliR1JRYjNOcGRHbHZiaUE5SUdKdmJtVlhiM0pzWkZCdmMybDBhVzl1YzF0amRYSnlaVzUwUW05dVpVNWhiV1ZkTzF4dUlDQWdJQ0FnSUNBZ0lIQmhjbVZ1ZEZkdmNteGtVbTkwWVhScGIyNGdQU0JpYjI1bFYyOXliR1JTYjNSaGRHbHZibk5iWTNWeWNtVnVkRUp2Ym1WT1lXMWxYVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJR0ZrWkNCMGJ5Qm9hV1Z5WVhKamFIbGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtbG5RbTl1WlU1dlpHVWdQU0J1WlhjZ1ZFaFNSVVV1VDJKcVpXTjBNMFFvS1R0Y2JpQWdJQ0FnSUNBZ2NtbG5RbTl1WlU1dlpHVXVibUZ0WlNBOUlDZE9iM0p0WVd4cGVtVmtYeWNnS3lCaWIyNWxUbTlrWlM1dVlXMWxPMXh1WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJoY21WdWRGSnBaMEp2Ym1WT2IyUmxJRDBnS0dOMWNuSmxiblJDYjI1bFRtRnRaU0EvSUhKcFowSnZibVZ6VzJOMWNuSmxiblJDYjI1bFRtRnRaVjAvTG01dlpHVWdPaUJ5YjI5MEtTQmhjeUJVU0ZKRlJTNVBZbXBsWTNRelJEdGNibHh1SUNBZ0lDQWdJQ0J3WVhKbGJuUlNhV2RDYjI1bFRtOWtaUzVoWkdRb2NtbG5RbTl1WlU1dlpHVXBPMXh1SUNBZ0lDQWdJQ0J5YVdkQ2IyNWxUbTlrWlM1d2IzTnBkR2x2Ymk1amIzQjVLR0p2Ym1WWGIzSnNaRkJ2YzJsMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIQmhjbVZ1ZEZkdmNteGtVRzl6YVhScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNCeWFXZENiMjVsVG05a1pTNXdiM05wZEdsdmJpNXpkV0lvY0dGeVpXNTBWMjl5YkdSUWIzTnBkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5YVdkQ2IyNWxjMXRpYjI1bFRtRnRaVjBnUFNCN0lHNXZaR1U2SUhKcFowSnZibVZPYjJSbElIMDdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2MzUnZjbVVnY0dGeVpXNTBWMjl5YkdSU2IzUmhkR2x2Ymx4dUlDQWdJQ0FnSUNCd1lYSmxiblJYYjNKc1pGSnZkR0YwYVc5dWMxdGliMjVsVG1GdFpWMGdQU0J3WVhKbGJuUlhiM0pzWkZKdmRHRjBhVzl1SUQ4L0lHNWxkeUJVU0ZKRlJTNVJkV0YwWlhKdWFXOXVLQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdjbWxuUW05dVpYTTZJSEpwWjBKdmJtVnpJR0Z6SUZaU1RVaDFiV0Z1UW05dVpYTXNYRzRnSUNBZ0lDQnliMjkwTEZ4dUlDQWdJQ0FnY0dGeVpXNTBWMjl5YkdSU2IzUmhkR2x2Ym5Nc1hHNGdJQ0FnSUNCaWIyNWxVbTkwWVhScGIyNXpMRnh1SUNBZ0lIMDdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2diM0pwWjJsdVlXdzZJRlpTVFZKcFp6dGNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSEp2YjNRNklGUklVa1ZGTGs5aWFtVmpkRE5FTzF4dUlDQndjbTkwWldOMFpXUWdjbVZoWkc5dWJIa2dYM0JoY21WdWRGZHZjbXhrVW05MFlYUnBiMjV6T2lCN0lGdGliMjVsVG1GdFpTQnBiaUJXVWsxSWRXMWhia0p2Ym1WT1lXMWxYVDg2SUZSSVVrVkZMbEYxWVhSbGNtNXBiMjRnZlR0Y2JpQWdjSEp2ZEdWamRHVmtJSEpsWVdSdmJteDVJRjlpYjI1bFVtOTBZWFJwYjI1ek9pQjdJRnRpYjI1bFRtRnRaU0JwYmlCV1VrMUlkVzFoYmtKdmJtVk9ZVzFsWFQ4NklGUklVa1ZGTGxGMVlYUmxjbTVwYjI0Z2ZUdGNibHh1SUNCd2RXSnNhV01nWTI5dWMzUnlkV04wYjNJb2FIVnRZVzV2YVdRNklGWlNUVkpwWnlrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnY21sblFtOXVaWE1zSUhKdmIzUXNJSEJoY21WdWRGZHZjbXhrVW05MFlYUnBiMjV6TENCaWIyNWxVbTkwWVhScGIyNXpJSDBnUFNCV1VrMUlkVzFoYm05cFpGSnBaeTVmYzJWMGRYQlVjbUZ1YzJadmNtMXpLR2gxYldGdWIybGtLVHRjYmx4dUlDQWdJSE4xY0dWeUtISnBaMEp2Ym1WektUdGNibHh1SUNBZ0lIUm9hWE11YjNKcFoybHVZV3dnUFNCb2RXMWhibTlwWkR0Y2JpQWdJQ0IwYUdsekxuSnZiM1FnUFNCeWIyOTBPMXh1SUNBZ0lIUm9hWE11WDNCaGNtVnVkRmR2Y214a1VtOTBZWFJwYjI1eklEMGdjR0Z5Wlc1MFYyOXliR1JTYjNSaGRHbHZibk03WEc0Z0lDQWdkR2hwY3k1ZlltOXVaVkp2ZEdGMGFXOXVjeUE5SUdKdmJtVlNiM1JoZEdsdmJuTTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhCa1lYUmxJSFJvYVhNZ2FIVnRZVzV2YVdRZ2NtbG5MbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJSFZ3WkdGMFpTZ3BPaUIyYjJsa0lIdGNiaUFnSUNCV1VrMUlkVzFoYmtKdmJtVk1hWE4wTG1admNrVmhZMmdvS0dKdmJtVk9ZVzFsS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCaWIyNWxUbTlrWlNBOUlIUm9hWE11YjNKcFoybHVZV3d1WjJWMFFtOXVaVTV2WkdVb1ltOXVaVTVoYldVcE8xeHVYRzRnSUNBZ0lDQnBaaUFvWW05dVpVNXZaR1VnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J5YVdkQ2IyNWxUbTlrWlNBOUlIUm9hWE11WjJWMFFtOXVaVTV2WkdVb1ltOXVaVTVoYldVcElUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NHRnlaVzUwVjI5eWJHUlNiM1JoZEdsdmJpQTlJSFJvYVhNdVgzQmhjbVZ1ZEZkdmNteGtVbTkwWVhScGIyNXpXMkp2Ym1WT1lXMWxYU0U3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2x1ZGxCaGNtVnVkRmR2Y214a1VtOTBZWFJwYjI0Z1BTQmZjWFZoZEVFdVkyOXdlU2h3WVhKbGJuUlhiM0pzWkZKdmRHRjBhVzl1S1M1cGJuWmxjblFvS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWW05dVpWSnZkR0YwYVc5dUlEMGdkR2hwY3k1ZlltOXVaVkp2ZEdGMGFXOXVjMXRpYjI1bFRtRnRaVjBoTzF4dVhHNGdJQ0FnSUNBZ0lHSnZibVZPYjJSbExuRjFZWFJsY201cGIyNWNiaUFnSUNBZ0lDQWdJQ0F1WTI5d2VTaHlhV2RDYjI1bFRtOWtaUzV4ZFdGMFpYSnVhVzl1S1Z4dUlDQWdJQ0FnSUNBZ0lDNXRkV3gwYVhCc2VTaHdZWEpsYm5SWGIzSnNaRkp2ZEdGMGFXOXVLVnh1SUNBZ0lDQWdJQ0FnSUM1d2NtVnRkV3gwYVhCc2VTaHBiblpRWVhKbGJuUlhiM0pzWkZKdmRHRjBhVzl1S1Z4dUlDQWdJQ0FnSUNBZ0lDNXRkV3gwYVhCc2VTaGliMjVsVW05MFlYUnBiMjRwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRTF2ZG1VZ2RHaGxJRzFoYzNNZ1kyVnVkR1Z5SUc5bUlIUm9aU0JXVWsxY2JpQWdJQ0FnSUNBZ2FXWWdLR0p2Ym1WT1lXMWxJRDA5UFNBbmFHbHdjeWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaWIyNWxWMjl5YkdSUWIzTnBkR2x2YmlBOUlISnBaMEp2Ym1WT2IyUmxMbWRsZEZkdmNteGtVRzl6YVhScGIyNG9YMkp2Ym1WWGIzSnNaRkJ2Y3lrN1hHNGdJQ0FnSUNBZ0lDQWdZbTl1WlU1dlpHVXVjR0Z5Wlc1MElTNTFjR1JoZEdWWGIzSnNaRTFoZEhKcGVDaDBjblZsTENCbVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGeVpXNTBWMjl5YkdSTllYUnlhWGdnUFNCaWIyNWxUbTlrWlM1d1lYSmxiblFoTG0xaGRISnBlRmR2Y214a08xeHVJQ0FnSUNBZ0lDQWdJR052Ym5OMElHeHZZMkZzVUc5emFYUnBiMjRnUFNCaWIyNWxWMjl5YkdSUWIzTnBkR2x2Ymk1aGNIQnNlVTFoZEhKcGVEUW9jR0Z5Wlc1MFYyOXliR1JOWVhSeWFYZ3VhVzUyWlhKMEtDa3BPMXh1SUNBZ0lDQWdJQ0FnSUdKdmJtVk9iMlJsTG5CdmMybDBhVzl1TG1OdmNIa29iRzlqWVd4UWIzTnBkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJQ29nWVhNZ1ZFaFNSVVVnWm5KdmJTQW5kR2h5WldVbk8xeHVhVzF3YjNKMElIUjVjR1VnZXlCV1VrMUlkVzFoYmtKdmJtVWdmU0JtY205dElDY3VMMVpTVFVoMWJXRnVRbTl1WlNjN1hHNXBiWEJ2Y25RZ2RIbHdaU0I3SUZaU1RVaDFiV0Z1UW05dVpYTWdmU0JtY205dElDY3VMMVpTVFVoMWJXRnVRbTl1WlhNbk8xeHVhVzF3YjNKMElIUjVjR1VnZXlCV1VrMUlkVzFoYmtKdmJtVk9ZVzFsSUgwZ1puSnZiU0FuTGk5V1VrMUlkVzFoYmtKdmJtVk9ZVzFsSnp0Y2JtbHRjRzl5ZENCMGVYQmxJSHNnVmxKTlVHOXpaU0I5SUdaeWIyMGdKeTR2VmxKTlVHOXpaU2M3WEc1cGJYQnZjblFnZXlCV1VrMVNhV2NnZlNCbWNtOXRJQ2N1TDFaU1RWSnBaeWM3WEc1cGJYQnZjblFnZXlCV1VrMUlkVzFoYm05cFpGSnBaeUI5SUdaeWIyMGdKeTR2VmxKTlNIVnRZVzV2YVdSU2FXY25PMXh1WEc0dktpcGNiaUFxSUVFZ1kyeGhjM01nY21Wd2NtVnpaVzUwY3lCaElHaDFiV0Z1YjJsa0lHOW1JR0VnVmxKTkxseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdWbEpOU0hWdFlXNXZhV1FnZTF4dUlDQXZLaXBjYmlBZ0lDb2dWMmhsZEdobGNpQnBkQ0JqYjNCcFpYTWdjRzl6WlNCbWNtOXRJRzV2Y20xaGJHbDZaV1JJZFcxaGJrSnZibVZ6SUhSdklISmhkMGgxYldGdVFtOXVaWE1nYjI0Z2UwQnNhVzVySUhWd1pHRjBaWDB1WEc0Z0lDQXFJR0IwY25WbFlDQmllU0JrWldaaGRXeDBMbHh1SUNBZ0tseHVJQ0FnS2lCQVpHVm1ZWFZzZENCMGNuVmxYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdZWFYwYjFWd1pHRjBaVWgxYldGdVFtOXVaWE02SUdKdmIyeGxZVzQ3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUVnY21GM0lISnBaeUJ2WmlCMGFHVWdWbEpOTGx4dUlDQWdLaTljYmlBZ2NISnBkbUYwWlNCZmNtRjNTSFZ0WVc1Q2IyNWxjem9nVmxKTlVtbG5PeUF2THlCVVQwUlBPaUJTWlc1aGJXVmNibHh1SUNBdktpcGNiaUFnSUNvZ1FTQnViM0p0WVd4cGVtVmtJSEpwWnlCdlppQjBhR1VnVmxKTkxseHVJQ0FnS2k5Y2JpQWdjSEpwZG1GMFpTQmZibTl5YldGc2FYcGxaRWgxYldGdVFtOXVaWE02SUZaU1RVaDFiV0Z1YjJsa1VtbG5PeUF2THlCVVQwUlBPaUJTWlc1aGJXVmNibHh1SUNBdktpcGNiaUFnSUNvZ1FHUmxjSEpsWTJGMFpXUWdSR1Z3Y21WallYUmxaQzRnVlhObElHVnBkR2hsY2lCN1FHeHBibXNnY21GM1VtVnpkRkJ2YzJWOUlHOXlJSHRBYkdsdWF5QnViM0p0WVd4cGVtVmtVbVZ6ZEZCdmMyVjlJR2x1YzNSbFlXUXVYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdaMlYwSUhKbGMzUlFiM05sS0NrNklGWlNUVkJ2YzJVZ2UxeHVJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ25WbEpOU0hWdFlXNXZhV1E2SUhKbGMzUlFiM05sSUdseklHUmxjSEpsWTJGMFpXUXVJRlZ6WlNCbGFYUm9aWElnY21GM1VtVnpkRkJ2YzJVZ2IzSWdibTl5YldGc2FYcGxaRkpsYzNSUWIzTmxJR2x1YzNSbFlXUXVKeWs3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVlYZFNaWE4wVUc5elpUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCSUh0QWJHbHVheUJXVWsxUWIzTmxmU0J2WmlCcGRITWdjbUYzSUdoMWJXRnVJR0p2Ym1WeklIUm9ZWFFnYVhNZ2FYUnpJR1JsWm1GMWJIUWdjM1JoZEdVdVhHNGdJQ0FxSUU1dmRHVWdkR2hoZENCcGRDZHpJRzV2ZENCamIyMXdZWFJwWW14bElIZHBkR2dnZTBCc2FXNXJJSE5sZEZKaGQxQnZjMlY5SUdGdVpDQjdRR3hwYm1zZ1oyVjBVbUYzVUc5elpYMHNJSE5wYm1ObElHbDBJR052Ym5SaGFXNXpJRzV2YmkxeVpXeGhkR2wyWlNCMllXeDFaWE1nYjJZZ1pXRmphQ0JzYjJOaGJDQjBjbUZ1YzJadmNtMXpMbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJR2RsZENCeVlYZFNaWE4wVUc5elpTZ3BPaUJXVWsxUWIzTmxJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21GM1NIVnRZVzVDYjI1bGN5NXlaWE4wVUc5elpUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCSUh0QWJHbHVheUJXVWsxUWIzTmxmU0J2WmlCcGRITWdibTl5YldGc2FYcGxaQ0JvZFcxaGJpQmliMjVsY3lCMGFHRjBJR2x6SUdsMGN5QmtaV1poZFd4MElITjBZWFJsTGx4dUlDQWdLaUJPYjNSbElIUm9ZWFFnYVhRbmN5QnViM1FnWTI5dGNHRjBhV0pzWlNCM2FYUm9JSHRBYkdsdWF5QnpaWFJPYjNKdFlXeHBlbVZrVUc5elpYMGdZVzVrSUh0QWJHbHVheUJuWlhST2IzSnRZV3hwZW1Wa1VHOXpaWDBzSUhOcGJtTmxJR2wwSUdOdmJuUmhhVzV6SUc1dmJpMXlaV3hoZEdsMlpTQjJZV3gxWlhNZ2IyWWdaV0ZqYUNCc2IyTmhiQ0IwY21GdWMyWnZjbTF6TGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUdkbGRDQnViM0p0WVd4cGVtVmtVbVZ6ZEZCdmMyVW9LVG9nVmxKTlVHOXpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDI1dmNtMWhiR2w2WldSSWRXMWhia0p2Ym1WekxuSmxjM1JRYjNObE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUVnYldGd0lHWnliMjBnZTBCc2FXNXJJRlpTVFVoMWJXRnVRbTl1WlU1aGJXVjlJSFJ2SUhKaGR5QjdRR3hwYm1zZ1ZsSk5TSFZ0WVc1Q2IyNWxmWE11WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nWjJWMElHaDFiV0Z1UW05dVpYTW9LVG9nVmxKTlNIVnRZVzVDYjI1bGN5QjdYRzRnSUNBZ0x5OGdZVzRnWVd4cFlYTWdiMllnWUhKaGQwaDFiV0Z1UW05dVpYTmdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0poZDBoMWJXRnVRbTl1WlhNdWFIVnRZVzVDYjI1bGN6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCSUcxaGNDQm1jbTl0SUh0QWJHbHVheUJXVWsxSWRXMWhia0p2Ym1WT1lXMWxmU0IwYnlCeVlYY2dlMEJzYVc1cklGWlNUVWgxYldGdVFtOXVaWDF6TGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUdkbGRDQnlZWGRJZFcxaGJrSnZibVZ6S0NrNklGWlNUVWgxYldGdVFtOXVaWE1nZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVlYZElkVzFoYmtKdmJtVnpMbWgxYldGdVFtOXVaWE03WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FTQnRZWEFnWm5KdmJTQjdRR3hwYm1zZ1ZsSk5TSFZ0WVc1Q2IyNWxUbUZ0WlgwZ2RHOGdibTl5YldGc2FYcGxaQ0I3UUd4cGJtc2dWbEpOU0hWdFlXNUNiMjVsZlhNdVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ1oyVjBJRzV2Y20xaGJHbDZaV1JJZFcxaGJrSnZibVZ6S0NrNklGWlNUVWgxYldGdVFtOXVaWE1nZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dWIzSnRZV3hwZW1Wa1NIVnRZVzVDYjI1bGN5NW9kVzFoYmtKdmJtVnpPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pTQnliMjkwSUc5bUlHNXZjbTFoYkdsNlpXUWdlMEJzYVc1cklGWlNUVWgxYldGdVFtOXVaWDF6TGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUdkbGRDQnViM0p0WVd4cGVtVmtTSFZ0WVc1Q2IyNWxjMUp2YjNRb0tUb2dWRWhTUlVVdVQySnFaV04wTTBRZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXViM0p0WVd4cGVtVmtTSFZ0WVc1Q2IyNWxjeTV5YjI5ME8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU55WldGMFpTQmhJRzVsZHlCN1FHeHBibXNnVmxKTlNIVnRZVzV2YVdSOUxseHVJQ0FnS2lCQWNHRnlZVzBnYUhWdFlXNUNiMjVsY3lCQklIdEFiR2x1YXlCV1VrMUlkVzFoYmtKdmJtVnpmU0JqYjI1MFlXbHVjeUJoYkd3Z2RHaGxJR0p2Ym1WeklHOW1JSFJvWlNCdVpYY2dhSFZ0WVc1dmFXUmNiaUFnSUNvZ1FIQmhjbUZ0SUdGMWRHOVZjR1JoZEdWSWRXMWhia0p2Ym1WeklGZG9aWFJvWlhJZ2FYUWdZMjl3YVdWeklIQnZjMlVnWm5KdmJTQnViM0p0WVd4cGVtVmtTSFZ0WVc1Q2IyNWxjeUIwYnlCeVlYZElkVzFoYmtKdmJtVnpJRzl1SUh0QWJHbHVheUIxY0dSaGRHVjlMaUJnZEhKMVpXQWdZbmtnWkdWbVlYVnNkQzVjYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUJqYjI1emRISjFZM1J2Y2lob2RXMWhia0p2Ym1Wek9pQldVazFJZFcxaGJrSnZibVZ6TENCdmNIUnBiMjV6UHpvZ2V5QmhkWFJ2VlhCa1lYUmxTSFZ0WVc1Q2IyNWxjejg2SUdKdmIyeGxZVzRnZlNrZ2UxeHVJQ0FnSUhSb2FYTXVZWFYwYjFWd1pHRjBaVWgxYldGdVFtOXVaWE1nUFNCdmNIUnBiMjV6UHk1aGRYUnZWWEJrWVhSbFNIVnRZVzVDYjI1bGN5QS9QeUIwY25WbE8xeHVJQ0FnSUhSb2FYTXVYM0poZDBoMWJXRnVRbTl1WlhNZ1BTQnVaWGNnVmxKTlVtbG5LR2gxYldGdVFtOXVaWE1wTzF4dUlDQWdJSFJvYVhNdVgyNXZjbTFoYkdsNlpXUklkVzFoYmtKdmJtVnpJRDBnYm1WM0lGWlNUVWgxYldGdWIybGtVbWxuS0hSb2FYTXVYM0poZDBoMWJXRnVRbTl1WlhNcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU52Y0hrZ2RHaGxJR2RwZG1WdUlIdEFiR2x1YXlCV1VrMUlkVzFoYm05cFpIMGdhVzUwYnlCMGFHbHpJRzl1WlM1Y2JpQWdJQ29nUUhCaGNtRnRJSE52ZFhKalpTQlVhR1VnZTBCc2FXNXJJRlpTVFVoMWJXRnViMmxrZlNCNWIzVWdkMkZ1ZENCMGJ5QmpiM0I1WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSFJvYVhOY2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCamIzQjVLSE52ZFhKalpUb2dWbEpOU0hWdFlXNXZhV1FwT2lCMGFHbHpJSHRjYmlBZ0lDQjBhR2x6TG1GMWRHOVZjR1JoZEdWSWRXMWhia0p2Ym1WeklEMGdjMjkxY21ObExtRjFkRzlWY0dSaGRHVklkVzFoYmtKdmJtVnpPMXh1SUNBZ0lIUm9hWE11WDNKaGQwaDFiV0Z1UW05dVpYTWdQU0J1WlhjZ1ZsSk5VbWxuS0hOdmRYSmpaUzVvZFcxaGJrSnZibVZ6S1R0Y2JpQWdJQ0IwYUdsekxsOXViM0p0WVd4cGVtVmtTSFZ0WVc1Q2IyNWxjeUE5SUc1bGR5QldVazFJZFcxaGJtOXBaRkpwWnloMGFHbHpMbDl5WVhkSWRXMWhia0p2Ym1WektUdGNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGRIVnlibk1nWVNCamJHOXVaU0J2WmlCMGFHbHpJSHRBYkdsdWF5QldVazFJZFcxaGJtOXBaSDB1WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJRU52Y0dsbFpDQjdRR3hwYm1zZ1ZsSk5TSFZ0WVc1dmFXUjlYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdZMnh2Ym1Vb0tUb2dWbEpOU0hWdFlXNXZhV1FnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVmxKTlNIVnRZVzV2YVdRb2RHaHBjeTVvZFcxaGJrSnZibVZ6TENCN0lHRjFkRzlWY0dSaGRHVklkVzFoYmtKdmJtVnpPaUIwYUdsekxtRjFkRzlWY0dSaGRHVklkVzFoYmtKdmJtVnpJSDBwTG1OdmNIa29kR2hwY3lrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRR1JsY0hKbFkyRjBaV1FnUkdWd2NtVmpZWFJsWkM0Z1ZYTmxJR1ZwZEdobGNpQjdRR3hwYm1zZ1oyVjBVbUYzUVdKemIyeDFkR1ZRYjNObGZTQnZjaUI3UUd4cGJtc2daMlYwVG05eWJXRnNhWHBsWkVGaWMyOXNkWFJsVUc5elpYMGdhVzV6ZEdWaFpDNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5Qm5aWFJCWW5OdmJIVjBaVkJ2YzJVb0tUb2dWbEpOVUc5elpTQjdYRzRnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLRnh1SUNBZ0lDQWdKMVpTVFVoMWJXRnViMmxrT2lCblpYUkJZbk52YkhWMFpWQnZjMlVvS1NCcGN5QmtaWEJ5WldOaGRHVmtMaUJWYzJVZ1pXbDBhR1Z5SUdkbGRGSmhkMEZpYzI5c2RYUmxVRzl6WlNncElHOXlJR2RsZEU1dmNtMWhiR2w2WldSQlluTnZiSFYwWlZCdmMyVW9LU0JwYm5OMFpXRmtMaWNzWEc0Z0lDQWdLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRGSmhkMEZpYzI5c2RYUmxVRzl6WlNncE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJpQjBhR1VnWTNWeWNtVnVkQ0JoWW5OdmJIVjBaU0J3YjNObElHOW1JSFJvYVhNZ2NtRjNJR2gxYldGdUlHSnZibVZ6SUdGeklHRWdlMEJzYVc1cklGWlNUVkJ2YzJWOUxseHVJQ0FnS2lCT2IzUmxJSFJvWVhRZ2RHaGxJRzkxZEhCMWRDQnlaWE4xYkhRZ2QybHNiQ0JqYjI1MFlXbHVJR2x1YVhScFlXd2djM1JoZEdVZ2IyWWdkR2hsSUZaU1RTQmhibVFnYm05MElHTnZiWEJoZEdsaWJHVWdZbVYwZDJWbGJpQmthV1ptWlhKbGJuUWdiVzlrWld4ekxseHVJQ0FnS2lCWmIzVWdiV2xuYUhRZ2QyRnVkQ0IwYnlCMWMyVWdlMEJzYVc1cklHZGxkRkpoZDFCdmMyVjlJR2x1YzNSbFlXUXVYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdaMlYwVW1GM1FXSnpiMngxZEdWUWIzTmxLQ2s2SUZaU1RWQnZjMlVnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVlYZElkVzFoYmtKdmJtVnpMbWRsZEVGaWMyOXNkWFJsVUc5elpTZ3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGRIVnliaUIwYUdVZ1kzVnljbVZ1ZENCaFluTnZiSFYwWlNCd2IzTmxJRzltSUhSb2FYTWdibTl5YldGc2FYcGxaQ0JvZFcxaGJpQmliMjVsY3lCaGN5QmhJSHRBYkdsdWF5QldVazFRYjNObGZTNWNiaUFnSUNvZ1RtOTBaU0IwYUdGMElIUm9aU0J2ZFhSd2RYUWdjbVZ6ZFd4MElIZHBiR3dnWTI5dWRHRnBiaUJwYm1sMGFXRnNJSE4wWVhSbElHOW1JSFJvWlNCV1VrMGdZVzVrSUc1dmRDQmpiMjF3WVhScFlteGxJR0psZEhkbFpXNGdaR2xtWm1WeVpXNTBJRzF2WkdWc2N5NWNiaUFnSUNvZ1dXOTFJRzFwWjJoMElIZGhiblFnZEc4Z2RYTmxJSHRBYkdsdWF5Qm5aWFJPYjNKdFlXeHBlbVZrVUc5elpYMGdhVzV6ZEdWaFpDNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5Qm5aWFJPYjNKdFlXeHBlbVZrUVdKemIyeDFkR1ZRYjNObEtDazZJRlpTVFZCdmMyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl1YjNKdFlXeHBlbVZrU0hWdFlXNUNiMjVsY3k1blpYUkJZbk52YkhWMFpWQnZjMlVvS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFaR1Z3Y21WallYUmxaQ0JFWlhCeVpXTmhkR1ZrTGlCVmMyVWdaV2wwYUdWeUlIdEFiR2x1YXlCblpYUlNZWGRRYjNObGZTQnZjaUI3UUd4cGJtc2daMlYwVG05eWJXRnNhWHBsWkZCdmMyVjlJR2x1YzNSbFlXUXVYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdaMlYwVUc5elpTZ3BPaUJXVWsxUWIzTmxJSHRjYmlBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSjFaU1RVaDFiV0Z1YjJsa09pQm5aWFJRYjNObEtDa2dhWE1nWkdWd2NtVmpZWFJsWkM0Z1ZYTmxJR1ZwZEdobGNpQm5aWFJTWVhkUWIzTmxLQ2tnYjNJZ1oyVjBUbTl5YldGc2FYcGxaRkJ2YzJVb0tTQnBibk4wWldGa0xpY3BPMXh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFVtRjNVRzl6WlNncE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJpQjBhR1VnWTNWeWNtVnVkQ0J3YjNObElHOW1JSEpoZHlCb2RXMWhiaUJpYjI1bGN5QmhjeUJoSUh0QWJHbHVheUJXVWsxUWIzTmxmUzVjYmlBZ0lDcGNiaUFnSUNvZ1JXRmphQ0IwY21GdWMyWnZjbTBnYVhNZ1lTQnNiMk5oYkNCMGNtRnVjMlp2Y20wZ2NtVnNZWFJwZG1VZ1puSnZiU0J5WlhOMElIQnZjMlVnS0ZRdGNHOXpaU2t1WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nWjJWMFVtRjNVRzl6WlNncE9pQldVazFRYjNObElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZjbUYzU0hWdFlXNUNiMjVsY3k1blpYUlFiM05sS0NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdUlIUm9aU0JqZFhKeVpXNTBJSEJ2YzJVZ2IyWWdibTl5YldGc2FYcGxaQ0JvZFcxaGJpQmliMjVsY3lCaGN5QmhJSHRBYkdsdWF5QldVazFRYjNObGZTNWNiaUFnSUNwY2JpQWdJQ29nUldGamFDQjBjbUZ1YzJadmNtMGdhWE1nWVNCc2IyTmhiQ0IwY21GdWMyWnZjbTBnY21Wc1lYUnBkbVVnWm5KdmJTQnlaWE4wSUhCdmMyVWdLRlF0Y0c5elpTa3VYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdaMlYwVG05eWJXRnNhWHBsWkZCdmMyVW9LVG9nVmxKTlVHOXpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDI1dmNtMWhiR2w2WldSSWRXMWhia0p2Ym1WekxtZGxkRkJ2YzJVb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJBWkdWd2NtVmpZWFJsWkNCRVpYQnlaV05oZEdWa0xpQlZjMlVnWldsMGFHVnlJSHRBYkdsdWF5QnpaWFJTWVhkUWIzTmxmU0J2Y2lCN1FHeHBibXNnYzJWMFRtOXliV0ZzYVhwbFpGQnZjMlY5SUdsdWMzUmxZV1F1WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nYzJWMFVHOXpaU2h3YjNObFQySnFaV04wT2lCV1VrMVFiM05sS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NkV1VrMUlkVzFoYm05cFpEb2djMlYwVUc5elpTZ3BJR2x6SUdSbGNISmxZMkYwWldRdUlGVnpaU0JsYVhSb1pYSWdjMlYwVW1GM1VHOXpaU2dwSUc5eUlITmxkRTV2Y20xaGJHbDZaV1JRYjNObEtDa2dhVzV6ZEdWaFpDNG5LVHRjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRGSmhkMUJ2YzJVb2NHOXpaVTlpYW1WamRDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVEdWMElIUm9aU0J5WVhjZ2FIVnRZVzRnWW05dVpYTWdaRzhnWVNCemNHVmphV1pwWldRZ2NHOXpaUzVjYmlBZ0lDcGNiaUFnSUNvZ1JXRmphQ0IwY21GdWMyWnZjbTBnYUdGMlpTQjBieUJpWlNCaElHeHZZMkZzSUhSeVlXNXpabTl5YlNCeVpXeGhkR2wyWlNCbWNtOXRJSEpsYzNRZ2NHOXpaU0FvVkMxd2IzTmxLUzVjYmlBZ0lDb2dXVzkxSUdOaGJpQndZWE56SUhkb1lYUWdlVzkxSUdkdmRDQm1jbTl0SUh0QWJHbHVheUJuWlhSU1lYZFFiM05sZlM1Y2JpQWdJQ3BjYmlBZ0lDb2dTV1lnZVc5MUlHRnlaU0IxYzJsdVp5QjdRR3hwYm1zZ1lYVjBiMVZ3WkdGMFpVaDFiV0Z1UW05dVpYTjlMQ0I1YjNVZ2JXbG5hSFFnZDJGdWRDQjBieUIxYzJVZ2UwQnNhVzVySUhObGRFNXZjbTFoYkdsNlpXUlFiM05sZlNCcGJuTjBaV0ZrTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2NHOXpaVTlpYW1WamRDQkJJSHRBYkdsdWF5QldVazFRYjNObGZTQjBhR0YwSUhKbGNISmxjMlZ1ZEhNZ1lTQnphVzVuYkdVZ2NHOXpaVnh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJSE5sZEZKaGQxQnZjMlVvY0c5elpVOWlhbVZqZERvZ1ZsSk5VRzl6WlNrNklIWnZhV1FnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVlYZElkVzFoYmtKdmJtVnpMbk5sZEZCdmMyVW9jRzl6WlU5aWFtVmpkQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1RHVjBJSFJvWlNCdWIzSnRZV3hwZW1Wa0lHaDFiV0Z1SUdKdmJtVnpJR1J2SUdFZ2MzQmxZMmxtYVdWa0lIQnZjMlV1WEc0Z0lDQXFYRzRnSUNBcUlFVmhZMmdnZEhKaGJuTm1iM0p0SUdoaGRtVWdkRzhnWW1VZ1lTQnNiMk5oYkNCMGNtRnVjMlp2Y20wZ2NtVnNZWFJwZG1VZ1puSnZiU0J5WlhOMElIQnZjMlVnS0ZRdGNHOXpaU2t1WEc0Z0lDQXFJRmx2ZFNCallXNGdjR0Z6Y3lCM2FHRjBJSGx2ZFNCbmIzUWdabkp2YlNCN1FHeHBibXNnWjJWMFRtOXliV0ZzYVhwbFpGQnZjMlY5TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2NHOXpaVTlpYW1WamRDQkJJSHRBYkdsdWF5QldVazFRYjNObGZTQjBhR0YwSUhKbGNISmxjMlZ1ZEhNZ1lTQnphVzVuYkdVZ2NHOXpaVnh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJSE5sZEU1dmNtMWhiR2w2WldSUWIzTmxLSEJ2YzJWUFltcGxZM1E2SUZaU1RWQnZjMlVwT2lCMmIybGtJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYm05eWJXRnNhWHBsWkVoMWJXRnVRbTl1WlhNdWMyVjBVRzl6WlNod2IzTmxUMkpxWldOMEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJBWkdWd2NtVmpZWFJsWkNCRVpYQnlaV05oZEdWa0xpQlZjMlVnWldsMGFHVnlJSHRBYkdsdWF5QnlaWE5sZEZKaGQxQnZjMlY5SUc5eUlIdEFiR2x1YXlCeVpYTmxkRTV2Y20xaGJHbDZaV1JRYjNObGZTQnBibk4wWldGa0xseHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklISmxjMlYwVUc5elpTZ3BPaUIyYjJsa0lIdGNiaUFnSUNCamIyNXpiMnhsTG5kaGNtNG9KMVpTVFVoMWJXRnViMmxrT2lCeVpYTmxkRkJ2YzJVb0tTQnBjeUJrWlhCeVpXTmhkR1ZrTGlCVmMyVWdaV2wwYUdWeUlISmxjMlYwVW1GM1VHOXpaU2dwSUc5eUlISmxjMlYwVG05eWJXRnNhWHBsWkZCdmMyVW9LU0JwYm5OMFpXRmtMaWNwTzF4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtVnpaWFJTWVhkUWIzTmxLQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVnpaWFFnZEdobElISmhkeUJvZFcxaGJtOXBaQ0IwYnlCcGRITWdjbVZ6ZENCd2IzTmxMbHh1SUNBZ0tseHVJQ0FnS2lCSlppQjViM1VnWVhKbElIVnphVzVuSUh0QWJHbHVheUJoZFhSdlZYQmtZWFJsU0hWdFlXNUNiMjVsYzMwc0lIbHZkU0J0YVdkb2RDQjNZVzUwSUhSdklIVnpaU0I3UUd4cGJtc2djbVZ6WlhST2IzSnRZV3hwZW1Wa1VHOXpaWDBnYVc1emRHVmhaQzVjYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUJ5WlhObGRGSmhkMUJ2YzJVb0tUb2dkbTlwWkNCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmhkMGgxYldGdVFtOXVaWE11Y21WelpYUlFiM05sS0NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZ6WlhRZ2RHaGxJRzV2Y20xaGJHbDZaV1FnYUhWdFlXNXZhV1FnZEc4Z2FYUnpJSEpsYzNRZ2NHOXpaUzVjYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUJ5WlhObGRFNXZjbTFoYkdsNlpXUlFiM05sS0NrNklIWnZhV1FnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dWIzSnRZV3hwZW1Wa1NIVnRZVzVDYjI1bGN5NXlaWE5sZEZCdmMyVW9LVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQVpHVndjbVZqWVhSbFpDQkVaWEJ5WldOaGRHVmtMaUJWYzJVZ1pXbDBhR1Z5SUh0QWJHbHVheUJuWlhSU1lYZENiMjVsZlNCdmNpQjdRR3hwYm1zZ1oyVjBUbTl5YldGc2FYcGxaRUp2Ym1WOUlHbHVjM1JsWVdRdVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ1oyVjBRbTl1WlNodVlXMWxPaUJXVWsxSWRXMWhia0p2Ym1WT1lXMWxLVG9nVmxKTlNIVnRZVzVDYjI1bElId2dkVzVrWldacGJtVmtJSHRjYmlBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSjFaU1RVaDFiV0Z1YjJsa09pQm5aWFJDYjI1bEtDa2dhWE1nWkdWd2NtVmpZWFJsWkM0Z1ZYTmxJR1ZwZEdobGNpQm5aWFJTWVhkQ2IyNWxLQ2tnYjNJZ1oyVjBUbTl5YldGc2FYcGxaRUp2Ym1Vb0tTQnBibk4wWldGa0xpY3BPMXh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFVtRjNRbTl1WlNodVlXMWxLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pYUjFjbTRnWVNCeVlYY2dlMEJzYVc1cklGWlNUVWgxYldGdVFtOXVaWDBnWW05MWJtUWdkRzhnWVNCemNHVmphV1pwWldRZ2UwQnNhVzVySUZaU1RVaDFiV0Z1UW05dVpVNWhiV1Y5TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2JtRnRaU0JPWVcxbElHOW1JSFJvWlNCaWIyNWxJSGx2ZFNCM1lXNTBYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdaMlYwVW1GM1FtOXVaU2h1WVcxbE9pQldVazFJZFcxaGJrSnZibVZPWVcxbEtUb2dWbEpOU0hWdFlXNUNiMjVsSUh3Z2RXNWtaV1pwYm1Wa0lIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZjbUYzU0hWdFlXNUNiMjVsY3k1blpYUkNiMjVsS0c1aGJXVXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGRIVnliaUJoSUc1dmNtMWhiR2w2WldRZ2UwQnNhVzVySUZaU1RVaDFiV0Z1UW05dVpYMGdZbTkxYm1RZ2RHOGdZU0J6Y0dWamFXWnBaV1FnZTBCc2FXNXJJRlpTVFVoMWJXRnVRbTl1WlU1aGJXVjlMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnYm1GdFpTQk9ZVzFsSUc5bUlIUm9aU0JpYjI1bElIbHZkU0IzWVc1MFhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ1oyVjBUbTl5YldGc2FYcGxaRUp2Ym1Vb2JtRnRaVG9nVmxKTlNIVnRZVzVDYjI1bFRtRnRaU2s2SUZaU1RVaDFiV0Z1UW05dVpTQjhJSFZ1WkdWbWFXNWxaQ0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDI1dmNtMWhiR2w2WldSSWRXMWhia0p2Ym1WekxtZGxkRUp2Ym1Vb2JtRnRaU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FHUmxjSEpsWTJGMFpXUWdSR1Z3Y21WallYUmxaQzRnVlhObElHVnBkR2hsY2lCN1FHeHBibXNnWjJWMFVtRjNRbTl1WlU1dlpHVjlJRzl5SUh0QWJHbHVheUJuWlhST2IzSnRZV3hwZW1Wa1FtOXVaVTV2WkdWOUlHbHVjM1JsWVdRdVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ1oyVjBRbTl1WlU1dlpHVW9ibUZ0WlRvZ1ZsSk5TSFZ0WVc1Q2IyNWxUbUZ0WlNrNklGUklVa1ZGTGs5aWFtVmpkRE5FSUh3Z2JuVnNiQ0I3WEc0Z0lDQWdZMjl1YzI5c1pTNTNZWEp1S0Z4dUlDQWdJQ0FnSjFaU1RVaDFiV0Z1YjJsa09pQm5aWFJDYjI1bFRtOWtaU2dwSUdseklHUmxjSEpsWTJGMFpXUXVJRlZ6WlNCbGFYUm9aWElnWjJWMFVtRjNRbTl1WlU1dlpHVW9LU0J2Y2lCblpYUk9iM0p0WVd4cGVtVmtRbTl1WlU1dlpHVW9LU0JwYm5OMFpXRmtMaWNzWEc0Z0lDQWdLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRGSmhkMEp2Ym1WT2IyUmxLRzVoYldVcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJpQmhJSEpoZHlCaWIyNWxJR0Z6SUdFZ1lGUklVa1ZGTGs5aWFtVmpkRE5FWUNCaWIzVnVaQ0IwYnlCaElITndaV05wWm1sbFpDQjdRR3hwYm1zZ1ZsSk5TSFZ0WVc1Q2IyNWxUbUZ0WlgwdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQnVZVzFsSUU1aGJXVWdiMllnZEdobElHSnZibVVnZVc5MUlIZGhiblJjYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUJuWlhSU1lYZENiMjVsVG05a1pTaHVZVzFsT2lCV1VrMUlkVzFoYmtKdmJtVk9ZVzFsS1RvZ1ZFaFNSVVV1VDJKcVpXTjBNMFFnZkNCdWRXeHNJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21GM1NIVnRZVzVDYjI1bGN5NW5aWFJDYjI1bFRtOWtaU2h1WVcxbEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNGdZU0J1YjNKdFlXeHBlbVZrSUdKdmJtVWdZWE1nWVNCZ1ZFaFNSVVV1VDJKcVpXTjBNMFJnSUdKdmRXNWtJSFJ2SUdFZ2MzQmxZMmxtYVdWa0lIdEFiR2x1YXlCV1VrMUlkVzFoYmtKdmJtVk9ZVzFsZlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElHNWhiV1VnVG1GdFpTQnZaaUIwYUdVZ1ltOXVaU0I1YjNVZ2QyRnVkRnh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJR2RsZEU1dmNtMWhiR2w2WldSQ2IyNWxUbTlrWlNodVlXMWxPaUJXVWsxSWRXMWhia0p2Ym1WT1lXMWxLVG9nVkVoU1JVVXVUMkpxWldOME0wUWdmQ0J1ZFd4c0lIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZibTl5YldGc2FYcGxaRWgxYldGdVFtOXVaWE11WjJWMFFtOXVaVTV2WkdVb2JtRnRaU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1ZYQmtZWFJsSUhSb1pTQm9kVzFoYm05cFpDQmpiMjF3YjI1bGJuUXVYRzRnSUNBcVhHNGdJQ0FxSUVsbUlIdEFiR2x1YXlCaGRYUnZWWEJrWVhSbFNIVnRZVzVDYjI1bGMzMGdhWE1nWUhSeWRXVmdMQ0JwZENCMGNtRnVjMlpsY25NZ2RHaGxJSEJ2YzJVZ2IyWWdibTl5YldGc2FYcGxaQ0JvZFcxaGJpQmliMjVsY3lCMGJ5QnlZWGNnYUhWdFlXNGdZbTl1WlhNdVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ2RYQmtZWFJsS0NrNklIWnZhV1FnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbUYxZEc5VmNHUmhkR1ZJZFcxaGJrSnZibVZ6S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDl1YjNKdFlXeHBlbVZrU0hWdFlXNUNiMjVsY3k1MWNHUmhkR1VvS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmlJc0lpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVZVzFwYm1jdFkyOXVkbVZ1ZEdsdmJpQXFMMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdWbEpOVW1WeGRXbHlaV1JJZFcxaGJrSnZibVZPWVcxbElEMGdlMXh1SUNCSWFYQnpPaUFuYUdsd2N5Y3NYRzRnSUZOd2FXNWxPaUFuYzNCcGJtVW5MRnh1SUNCSVpXRmtPaUFuYUdWaFpDY3NYRzRnSUV4bFpuUlZjSEJsY2t4bFp6b2dKMnhsWm5SVmNIQmxja3hsWnljc1hHNGdJRXhsWm5STWIzZGxja3hsWnpvZ0oyeGxablJNYjNkbGNreGxaeWNzWEc0Z0lFeGxablJHYjI5ME9pQW5iR1ZtZEVadmIzUW5MRnh1SUNCU2FXZG9kRlZ3Y0dWeVRHVm5PaUFuY21sbmFIUlZjSEJsY2t4bFp5Y3NYRzRnSUZKcFoyaDBURzkzWlhKTVpXYzZJQ2R5YVdkb2RFeHZkMlZ5VEdWbkp5eGNiaUFnVW1sbmFIUkdiMjkwT2lBbmNtbG5hSFJHYjI5MEp5eGNiaUFnVEdWbWRGVndjR1Z5UVhKdE9pQW5iR1ZtZEZWd2NHVnlRWEp0Snl4Y2JpQWdUR1ZtZEV4dmQyVnlRWEp0T2lBbmJHVm1kRXh2ZDJWeVFYSnRKeXhjYmlBZ1RHVm1kRWhoYm1RNklDZHNaV1owU0dGdVpDY3NYRzRnSUZKcFoyaDBWWEJ3WlhKQmNtMDZJQ2R5YVdkb2RGVndjR1Z5UVhKdEp5eGNiaUFnVW1sbmFIUk1iM2RsY2tGeWJUb2dKM0pwWjJoMFRHOTNaWEpCY20wbkxGeHVJQ0JTYVdkb2RFaGhibVE2SUNkeWFXZG9kRWhoYm1RbkxGeHVmU0JoY3lCamIyNXpkRHRjYmx4dVpYaHdiM0owSUhSNWNHVWdWbEpOVW1WeGRXbHlaV1JJZFcxaGJrSnZibVZPWVcxbElEMGdkSGx3Wlc5bUlGWlNUVkpsY1hWcGNtVmtTSFZ0WVc1Q2IyNWxUbUZ0WlZ0clpYbHZaaUIwZVhCbGIyWWdWbEpOVW1WeGRXbHlaV1JJZFcxaGJrSnZibVZPWVcxbFhUdGNiaUlzSW1sdGNHOXlkQ0IwZVhCbElDb2dZWE1nVmpCV1VrMGdabkp2YlNBblFIQnBlR2wyTDNSNWNHVnpMWFp5YlMwd0xqQW5PMXh1YVcxd2IzSjBJSFI1Y0dVZ0tpQmhjeUJXTVZaU1RWTmphR1Z0WVNCbWNtOXRJQ2RBY0dsNGFYWXZkSGx3WlhNdGRuSnRZeTEyY20wdE1TNHdKenRjYm1sdGNHOXlkQ0IwZVhCbElIc2dSMHhVUml3Z1IweFVSa3h2WVdSbGNsQnNkV2RwYml3Z1IweFVSbEJoY25ObGNpQjlJR1p5YjIwZ0ozUm9jbVZsTDJWNFlXMXdiR1Z6TDJwemJTOXNiMkZrWlhKekwwZE1WRVpNYjJGa1pYSXVhbk1uTzF4dWFXMXdiM0owSUhzZ1ZsSk5TSFZ0WVc1dmFXUWdmU0JtY205dElDY3VMMVpTVFVoMWJXRnViMmxrSnp0Y2JtbHRjRzl5ZENCMGVYQmxJSHNnVmxKTlNIVnRZVzVDYjI1bGN5QjlJR1p5YjIwZ0p5NHZWbEpOU0hWdFlXNUNiMjVsY3ljN1hHNXBiWEJ2Y25RZ2V5QldVazFTWlhGMWFYSmxaRWgxYldGdVFtOXVaVTVoYldVZ2ZTQm1jbTl0SUNjdUwxWlNUVkpsY1hWcGNtVmtTSFZ0WVc1Q2IyNWxUbUZ0WlNjN1hHNXBiWEJ2Y25RZ2V5QkhURlJHSUdGeklFZE1WRVpUWTJobGJXRWdmU0JtY205dElDZEFaMngwWmkxMGNtRnVjMlp2Y20wdlkyOXlaU2M3WEc1cGJYQnZjblFnZXlCV1VrMUlkVzFoYm05cFpFaGxiSEJsY2lCOUlHWnliMjBnSnk0dmFHVnNjR1Z5Y3k5V1VrMUlkVzFoYm05cFpFaGxiSEJsY2ljN1hHNXBiWEJ2Y25RZ2V5QldVazFJZFcxaGJtOXBaRXh2WVdSbGNsQnNkV2RwYms5d2RHbHZibk1nZlNCbWNtOXRJQ2N1TDFaU1RVaDFiV0Z1YjJsa1RHOWhaR1Z5VUd4MVoybHVUM0IwYVc5dWN5YzdYRzVjYmk4cUtseHVJQ29nVUc5emMybGliR1VnYzNCbFl5QjJaWEp6YVc5dWN5QnBkQ0J5WldOdloyNXBlbVZ6TGx4dUlDb3ZYRzVqYjI1emRDQlFUMU5UU1VKTVJWOVRVRVZEWDFaRlVsTkpUMDVUSUQwZ2JtVjNJRk5sZENoYkp6RXVNQ2NzSUNjeExqQXRZbVYwWVNkZEtUdGNibHh1THlvcVhHNGdLaUJCSUcxaGNDQm1jbTl0SUc5c1pDQjBhSFZ0WWlCaWIyNWxJRzVoYldWeklIUnZJRzVsZHlCMGFIVnRZaUJpYjI1bElHNWhiV1Z6WEc0Z0tpOWNibU52Ym5OMElIUm9kVzFpUW05dVpVNWhiV1ZOWVhBNklIc2dXMnRsZVRvZ2MzUnlhVzVuWFRvZ1ZqRldVazFUWTJobGJXRXVTSFZ0WVc1dmFXUklkVzFoYmtKdmJtVk9ZVzFsSUh3Z2RXNWtaV1pwYm1Wa0lIMGdQU0I3WEc0Z0lHeGxablJVYUhWdFlsQnliM2hwYldGc09pQW5iR1ZtZEZSb2RXMWlUV1YwWVdOaGNuQmhiQ2NzWEc0Z0lHeGxablJVYUhWdFlrbHVkR1Z5YldWa2FXRjBaVG9nSjJ4bFpuUlVhSFZ0WWxCeWIzaHBiV0ZzSnl4Y2JpQWdjbWxuYUhSVWFIVnRZbEJ5YjNocGJXRnNPaUFuY21sbmFIUlVhSFZ0WWsxbGRHRmpZWEp3WVd3bkxGeHVJQ0J5YVdkb2RGUm9kVzFpU1c1MFpYSnRaV1JwWVhSbE9pQW5jbWxuYUhSVWFIVnRZbEJ5YjNocGJXRnNKeXhjYm4wN1hHNWNiaThxS2x4dUlDb2dRU0J3YkhWbmFXNGdiMllnUjB4VVJreHZZV1JsY2lCMGFHRjBJR2x0Y0c5eWRITWdZU0I3UUd4cGJtc2dWbEpOU0hWdFlXNXZhV1I5SUdaeWIyMGdZU0JXVWswZ1pYaDBaVzV6YVc5dUlHOW1JR0VnUjB4VVJpNWNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRlpTVFVoMWJXRnViMmxrVEc5aFpHVnlVR3gxWjJsdUlHbHRjR3hsYldWdWRITWdSMHhVUmt4dllXUmxjbEJzZFdkcGJpQjdYRzRnSUM4cUtseHVJQ0FnS2lCVGNHVmphV1o1SUdGdUlFOWlhbVZqZERORUlIUnZJR0ZrWkNCN1FHeHBibXNnVmxKTlNIVnRZVzV2YVdSSVpXeHdaWEo5TGx4dUlDQWdLaUJKWmlCdWIzUWdjM0JsWTJsbWFXVmtMQ0JvWld4d1pYSWdkMmxzYkNCdWIzUWdZbVVnWTNKbFlYUmxaQzVjYmlBZ0lDb2dTV1lnWUhKbGJtUmxjazl5WkdWeVlDQnBjeUJ6WlhRZ2RHOGdkR2hsSUhKdmIzUXNJSFJvWlNCb1pXeHdaWElnZDJsc2JDQmpiM0I1SUhSb1pTQnpZVzFsSUdCeVpXNWtaWEpQY21SbGNtQWdMbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJR2hsYkhCbGNsSnZiM1EvT2lCVVNGSkZSUzVQWW1wbFkzUXpSRHRjYmx4dUlDQndkV0pzYVdNZ1lYVjBiMVZ3WkdGMFpVaDFiV0Z1UW05dVpYTS9PaUJpYjI5c1pXRnVPMXh1WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCd1lYSnpaWEk2SUVkTVZFWlFZWEp6WlhJN1hHNWNiaUFnY0hWaWJHbGpJR2RsZENCdVlXMWxLQ2s2SUhOMGNtbHVaeUI3WEc0Z0lDQWdMeThnVjJVZ2MyaHZkV3hrSUhWelpTQjBhR1VnWlhoMFpXNXphVzl1SUc1aGJXVWdhVzV6ZEdWaFpDQmlkWFFnZDJVZ2FHRjJaU0J0ZFd4MGFYQnNaU0J3YkhWbmFXNXpJR1p2Y2lCaGJpQmxlSFJsYm5OcGIyNHVMaTVjYmlBZ0lDQnlaWFIxY200Z0oxWlNUVWgxYldGdWIybGtURzloWkdWeVVHeDFaMmx1Snp0Y2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCamIyNXpkSEoxWTNSdmNpaHdZWEp6WlhJNklFZE1WRVpRWVhKelpYSXNJRzl3ZEdsdmJuTS9PaUJXVWsxSWRXMWhibTlwWkV4dllXUmxjbEJzZFdkcGJrOXdkR2x2Ym5NcElIdGNiaUFnSUNCMGFHbHpMbkJoY25ObGNpQTlJSEJoY25ObGNqdGNibHh1SUNBZ0lIUm9hWE11YUdWc2NHVnlVbTl2ZENBOUlHOXdkR2x2Ym5NL0xtaGxiSEJsY2xKdmIzUTdYRzRnSUNBZ2RHaHBjeTVoZFhSdlZYQmtZWFJsU0hWdFlXNUNiMjVsY3lBOUlHOXdkR2x2Ym5NL0xtRjFkRzlWY0dSaGRHVklkVzFoYmtKdmJtVnpPMXh1SUNCOVhHNWNiaUFnY0hWaWJHbGpJR0Z6ZVc1aklHRm1kR1Z5VW05dmRDaG5iSFJtT2lCSFRGUkdLVG9nVUhKdmJXbHpaVHgyYjJsa1BpQjdYRzRnSUNBZ1oyeDBaaTUxYzJWeVJHRjBZUzUyY20xSWRXMWhibTlwWkNBOUlHRjNZV2wwSUhSb2FYTXVYMmx0Y0c5eWRDaG5iSFJtS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpiWEJ2Y25RZ1lTQjdRR3hwYm1zZ1ZsSk5TSFZ0WVc1dmFXUjlJR1p5YjIwZ1lTQldVazB1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCbmJIUm1JRUVnY0dGeWMyVmtJSEpsYzNWc2RDQnZaaUJIVEZSR0lIUmhhMlZ1SUdaeWIyMGdSMHhVUmt4dllXUmxjbHh1SUNBZ0tpOWNiaUFnY0hKcGRtRjBaU0JoYzNsdVl5QmZhVzF3YjNKMEtHZHNkR1k2SUVkTVZFWXBPaUJRY205dGFYTmxQRlpTVFVoMWJXRnViMmxrSUh3Z2JuVnNiRDRnZTF4dUlDQWdJR052Ym5OMElIWXhVbVZ6ZFd4MElEMGdZWGRoYVhRZ2RHaHBjeTVmZGpGSmJYQnZjblFvWjJ4MFppazdYRzRnSUNBZ2FXWWdLSFl4VW1WemRXeDBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkakZTWlhOMWJIUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnZGpCU1pYTjFiSFFnUFNCaGQyRnBkQ0IwYUdsekxsOTJNRWx0Y0c5eWRDaG5iSFJtS1R0Y2JpQWdJQ0JwWmlBb2RqQlNaWE4xYkhRcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMk1GSmxjM1ZzZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdmVnh1WEc0Z0lIQnlhWFpoZEdVZ1lYTjVibU1nWDNZeFNXMXdiM0owS0dkc2RHWTZJRWRNVkVZcE9pQlFjbTl0YVhObFBGWlNUVWgxYldGdWIybGtJSHdnYm5Wc2JENGdlMXh1SUNBZ0lHTnZibk4wSUdwemIyNGdQU0IwYUdsekxuQmhjbk5sY2k1cWMyOXVJR0Z6SUVkTVZFWlRZMmhsYldFdVNVZE1WRVk3WEc1Y2JpQWdJQ0F2THlCbFlYSnNlU0JoWW05eWRDQnBaaUJwZENCa2IyVnpiaWQwSUhWelpTQjJjbTFjYmlBZ0lDQmpiMjV6ZENCcGMxWlNUVlZ6WldRZ1BTQnFjMjl1TG1WNGRHVnVjMmx2Ym5OVmMyVmtQeTVwYm1SbGVFOW1LQ2RXVWsxRFgzWnliU2NwSUNFOVBTQXRNVHRjYmlBZ0lDQnBaaUFvSVdselZsSk5WWE5sWkNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnWlhoMFpXNXphVzl1SUQwZ2FuTnZiaTVsZUhSbGJuTnBiMjV6UHk1YkoxWlNUVU5mZG5KdEoxMGdZWE1nVmpGV1VrMVRZMmhsYldFdVZsSk5RMVpTVFNCOElIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCcFppQW9JV1Y0ZEdWdWMybHZiaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdjM0JsWTFabGNuTnBiMjRnUFNCbGVIUmxibk5wYjI0dWMzQmxZMVpsY25OcGIyNDdYRzRnSUNBZ2FXWWdLQ0ZRVDFOVFNVSk1SVjlUVUVWRFgxWkZVbE5KVDA1VExtaGhjeWh6Y0dWalZtVnljMmx2YmlrcElIdGNiaUFnSUNBZ0lHTnZibk52YkdVdWQyRnliaWhnVmxKTlNIVnRZVzV2YVdSTWIyRmtaWEpRYkhWbmFXNDZJRlZ1YTI1dmQyNGdWbEpOUTE5MmNtMGdjM0JsWTFabGNuTnBiMjRnWENJa2UzTndaV05XWlhKemFXOXVmVndpWUNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J6WTJobGJXRklkVzFoYm05cFpDQTlJR1Y0ZEdWdWMybHZiaTVvZFcxaGJtOXBaRHRjYmlBZ0lDQnBaaUFvSVhOamFHVnRZVWgxYldGdWIybGtLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCamIyMXdZWFE2SURFdU1DMWlaWFJoSUhSb2RXMWlJR0p2Ym1VZ2JtRnRaWE5jYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJR0IwY25WbFlDQnBaaUJnYkdWbWRGUm9kVzFpU1c1MFpYSnRaV1JwWVhSbFlDQnZjaUJnY21sbmFIUlVhSFZ0WWtsdWRHVnliV1ZrYVdGMFpXQWdaWGhwYzNSelhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5dWMzUWdaWGhwYzNSelVISmxkbWx2ZFhOVWFIVnRZazVoYldVZ1BWeHVJQ0FnSUNBZ0tITmphR1Z0WVVoMWJXRnViMmxrTG1oMWJXRnVRbTl1WlhNZ1lYTWdZVzU1S1M1c1pXWjBWR2gxYldKSmJuUmxjbTFsWkdsaGRHVWdJVDBnYm5Wc2JDQjhmRnh1SUNBZ0lDQWdLSE5qYUdWdFlVaDFiV0Z1YjJsa0xtaDFiV0Z1UW05dVpYTWdZWE1nWVc1NUtTNXlhV2RvZEZSb2RXMWlTVzUwWlhKdFpXUnBZWFJsSUNFOUlHNTFiR3c3WEc1Y2JpQWdJQ0JqYjI1emRDQm9kVzFoYmtKdmJtVnpPaUJRWVhKMGFXRnNQRlpTVFVoMWJXRnVRbTl1WlhNK0lEMGdlMzA3WEc0Z0lDQWdhV1lnS0hOamFHVnRZVWgxYldGdWIybGtMbWgxYldGdVFtOXVaWE1nSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnWVhkaGFYUWdVSEp2YldselpTNWhiR3dvWEc0Z0lDQWdJQ0FnSUU5aWFtVmpkQzVsYm5SeWFXVnpLSE5qYUdWdFlVaDFiV0Z1YjJsa0xtaDFiV0Z1UW05dVpYTXBMbTFoY0NoaGMzbHVZeUFvVzJKdmJtVk9ZVzFsVTNSeWFXNW5MQ0J6WTJobGJXRklkVzFoYmtKdmJtVmRLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdKdmJtVk9ZVzFsSUQwZ1ltOXVaVTVoYldWVGRISnBibWNnWVhNZ1ZqRldVazFUWTJobGJXRXVTSFZ0WVc1dmFXUklkVzFoYmtKdmJtVk9ZVzFsTzF4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUdsdVpHVjRJRDBnYzJOb1pXMWhTSFZ0WVc1Q2IyNWxMbTV2WkdVN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCamIyMXdZWFE2SURFdU1DMWlaWFJoSUhCeVpYWnBiM1Z6SUhSb2RXMWlJR0p2Ym1VZ2JtRnRaWE5jYmlBZ0lDQWdJQ0FnSUNCcFppQW9aWGhwYzNSelVISmxkbWx2ZFhOVWFIVnRZazVoYldVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFJvZFcxaVFtOXVaVTVoYldVZ1BTQjBhSFZ0WWtKdmJtVk9ZVzFsVFdGd1cySnZibVZPWVcxbFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhSFZ0WWtKdmJtVk9ZVzFsSUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWW05dVpVNWhiV1VnUFNCMGFIVnRZa0p2Ym1WT1lXMWxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUc1dlpHVWdQU0JoZDJGcGRDQjBhR2x6TG5CaGNuTmxjaTVuWlhSRVpYQmxibVJsYm1ONUtDZHViMlJsSnl3Z2FXNWtaWGdwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnYVdZZ2RHaGxJSE53WldOcFptbGxaQ0J1YjJSbElHUnZaWE1nYm05MElHVjRhWE4wTENCbGJXbDBJR0VnZDJGeWJtbHVaMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHViMlJsSUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmloZ1FTQm5iRlJHSUc1dlpHVWdZbTkxYm1RZ2RHOGdkR2hsSUdoMWJXRnViMmxrSUdKdmJtVWdKSHRpYjI1bFRtRnRaWDBnS0dsdVpHVjRJRDBnSkh0cGJtUmxlSDBwSUdSdlpYTWdibTkwSUdWNGFYTjBZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdjMlYwSUhSdklIUm9aU0JnYUhWdFlXNUNiMjVsYzJCY2JpQWdJQ0FnSUNBZ0lDQm9kVzFoYmtKdmJtVnpXMkp2Ym1WT1lXMWxYU0E5SUhzZ2JtOWtaU0I5TzF4dUlDQWdJQ0FnSUNCOUtTeGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnYUhWdFlXNXZhV1FnUFNCdVpYY2dWbEpOU0hWdFlXNXZhV1FvZEdocGN5NWZaVzV6ZFhKbFVtVnhkV2x5WldSQ2IyNWxjMFY0YVhOMEtHaDFiV0Z1UW05dVpYTXBMQ0I3WEc0Z0lDQWdJQ0JoZFhSdlZYQmtZWFJsU0hWdFlXNUNiMjVsY3pvZ2RHaHBjeTVoZFhSdlZYQmtZWFJsU0hWdFlXNUNiMjVsY3l4Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0JuYkhSbUxuTmpaVzVsTG1Ga1pDaG9kVzFoYm05cFpDNXViM0p0WVd4cGVtVmtTSFZ0WVc1Q2IyNWxjMUp2YjNRcE8xeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdWFHVnNjR1Z5VW05dmRDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2FHVnNjR1Z5SUQwZ2JtVjNJRlpTVFVoMWJXRnViMmxrU0dWc2NHVnlLR2gxYldGdWIybGtLVHRjYmlBZ0lDQWdJSFJvYVhNdWFHVnNjR1Z5VW05dmRDNWhaR1FvYUdWc2NHVnlLVHRjYmlBZ0lDQWdJR2hsYkhCbGNpNXlaVzVrWlhKUGNtUmxjaUE5SUhSb2FYTXVhR1ZzY0dWeVVtOXZkQzV5Wlc1a1pYSlBjbVJsY2p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdhSFZ0WVc1dmFXUTdYRzRnSUgxY2JseHVJQ0J3Y21sMllYUmxJR0Z6ZVc1aklGOTJNRWx0Y0c5eWRDaG5iSFJtT2lCSFRGUkdLVG9nVUhKdmJXbHpaVHhXVWsxSWRXMWhibTlwWkNCOElHNTFiR3crSUh0Y2JpQWdJQ0JqYjI1emRDQnFjMjl1SUQwZ2RHaHBjeTV3WVhKelpYSXVhbk52YmlCaGN5QkhURlJHVTJOb1pXMWhMa2xIVEZSR08xeHVYRzRnSUNBZ1kyOXVjM1FnZG5KdFJYaDBJRDBnYW5OdmJpNWxlSFJsYm5OcGIyNXpQeTVXVWswZ1lYTWdWakJXVWswdVZsSk5JSHdnZFc1a1pXWnBibVZrTzF4dUlDQWdJR2xtSUNnaGRuSnRSWGgwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J6WTJobGJXRklkVzFoYm05cFpEb2dWakJXVWswdVNIVnRZVzV2YVdRZ2ZDQjFibVJsWm1sdVpXUWdQU0IyY20xRmVIUXVhSFZ0WVc1dmFXUTdYRzRnSUNBZ2FXWWdLQ0Z6WTJobGJXRklkVzFoYm05cFpDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2FIVnRZVzVDYjI1bGN6b2dVR0Z5ZEdsaGJEeFdVazFJZFcxaGJrSnZibVZ6UGlBOUlIdDlPMXh1SUNBZ0lHbG1JQ2h6WTJobGJXRklkVzFoYm05cFpDNW9kVzFoYmtKdmJtVnpJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR0YzWVdsMElGQnliMjFwYzJVdVlXeHNLRnh1SUNBZ0lDQWdJQ0J6WTJobGJXRklkVzFoYm05cFpDNW9kVzFoYmtKdmJtVnpMbTFoY0NoaGMzbHVZeUFvWW05dVpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUdKdmJtVk9ZVzFsSUQwZ1ltOXVaUzVpYjI1bE8xeHVJQ0FnSUNBZ0lDQWdJR052Ym5OMElHbHVaR1Y0SUQwZ1ltOXVaUzV1YjJSbE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHSnZibVZPWVcxbElEMDlJRzUxYkd3Z2ZId2dhVzVrWlhnZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJR052Ym5OMElHNXZaR1VnUFNCaGQyRnBkQ0IwYUdsekxuQmhjbk5sY2k1blpYUkVaWEJsYm1SbGJtTjVLQ2R1YjJSbEp5d2dhVzVrWlhncE8xeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2FXWWdkR2hsSUhOd1pXTnBabWxsWkNCdWIyUmxJR1J2WlhNZ2JtOTBJR1Y0YVhOMExDQmxiV2wwSUdFZ2QyRnlibWx1WjF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h1YjJSbElEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGdRU0JuYkZSR0lHNXZaR1VnWW05MWJtUWdkRzhnZEdobElHaDFiV0Z1YjJsa0lHSnZibVVnSkh0aWIyNWxUbUZ0WlgwZ0tHbHVaR1Y0SUQwZ0pIdHBibVJsZUgwcElHUnZaWE1nYm05MElHVjRhWE4wWUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnYldGd0lIUnZJRzVsZHlCaWIyNWxJRzVoYldWY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMGFIVnRZa0p2Ym1WT1lXMWxJRDBnZEdoMWJXSkNiMjVsVG1GdFpVMWhjRnRpYjI1bFRtRnRaVjA3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYm1WM1FtOXVaVTVoYldVZ1BTQW9kR2gxYldKQ2IyNWxUbUZ0WlNBL1B5QmliMjVsVG1GdFpTa2dZWE1nVmpGV1VrMVRZMmhsYldFdVNIVnRZVzV2YVdSSWRXMWhia0p2Ym1WT1lXMWxPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkakFnVmxKTmN5QnRhV2RvZENCb1lYWmxJR0VnYlhWc2RHbHdiR1VnYm05a1pYTWdZWFIwWVdOb1pXUWdkRzhnWVNCemFXNW5iR1VnWW05dVpTNHVMbHh1SUNBZ0lDQWdJQ0FnSUM4dklITnZJR2xtSUhSb1pYSmxJR0ZzY21WaFpIa2dhWE1nWVc0Z1pXNTBjbmtnYVc0Z2RHaGxJR0JvZFcxaGJrSnZibVZ6WUN3Z2MyaHZkeUJoSUhkaGNtNXBibWNnWVc1a0lHbG5ibTl5WlNCcGRGeHVJQ0FnSUNBZ0lDQWdJR2xtSUNob2RXMWhia0p2Ym1WelcyNWxkMEp2Ym1WT1lXMWxYU0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0JOZFd4MGFYQnNaU0JpYjI1bElHVnVkSEpwWlhNZ1ptOXlJQ1I3Ym1WM1FtOXVaVTVoYldWOUlHUmxkR1ZqZEdWa0lDaHBibVJsZUNBOUlDUjdhVzVrWlhoOUtTd2dhV2R1YjNKcGJtY2daSFZ3YkdsallYUmxaQ0JsYm5SeWFXVnpMbUFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUM4dklITmxkQ0IwYnlCMGFHVWdZR2gxYldGdVFtOXVaWE5nWEc0Z0lDQWdJQ0FnSUNBZ2FIVnRZVzVDYjI1bGMxdHVaWGRDYjI1bFRtRnRaVjBnUFNCN0lHNXZaR1VnZlR0Y2JpQWdJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUdoMWJXRnViMmxrSUQwZ2JtVjNJRlpTVFVoMWJXRnViMmxrS0hSb2FYTXVYMlZ1YzNWeVpWSmxjWFZwY21Wa1FtOXVaWE5GZUdsemRDaG9kVzFoYmtKdmJtVnpLU3dnZTF4dUlDQWdJQ0FnWVhWMGIxVndaR0YwWlVoMWJXRnVRbTl1WlhNNklIUm9hWE11WVhWMGIxVndaR0YwWlVoMWJXRnVRbTl1WlhNc1hHNGdJQ0FnZlNrN1hHNGdJQ0FnWjJ4MFppNXpZMlZ1WlM1aFpHUW9hSFZ0WVc1dmFXUXVibTl5YldGc2FYcGxaRWgxYldGdVFtOXVaWE5TYjI5MEtUdGNibHh1SUNBZ0lHbG1JQ2gwYUdsekxtaGxiSEJsY2xKdmIzUXBJSHRjYmlBZ0lDQWdJR052Ym5OMElHaGxiSEJsY2lBOUlHNWxkeUJXVWsxSWRXMWhibTlwWkVobGJIQmxjaWhvZFcxaGJtOXBaQ2s3WEc0Z0lDQWdJQ0IwYUdsekxtaGxiSEJsY2xKdmIzUXVZV1JrS0dobGJIQmxjaWs3WEc0Z0lDQWdJQ0JvWld4d1pYSXVjbVZ1WkdWeVQzSmtaWElnUFNCMGFHbHpMbWhsYkhCbGNsSnZiM1F1Y21WdVpHVnlUM0prWlhJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJR2gxYldGdWIybGtPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVWdWMzVnlaU0J5WlhGMWFYSmxaQ0JpYjI1bGN5QmxlR2x6ZENCcGJpQm5hWFpsYmlCb2RXMWhiaUJpYjI1bGN5NWNiaUFnSUNvZ1FIQmhjbUZ0SUdoMWJXRnVRbTl1WlhNZ1NIVnRZVzRnWW05dVpYTmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ1NIVnRZVzRnWW05dVpYTXNJRzV2SUd4dmJtZGxjaUJ3WVhKMGFXRnNJVnh1SUNBZ0tpOWNiaUFnY0hKcGRtRjBaU0JmWlc1emRYSmxVbVZ4ZFdseVpXUkNiMjVsYzBWNGFYTjBLR2gxYldGdVFtOXVaWE02SUZCaGNuUnBZV3c4VmxKTlNIVnRZVzVDYjI1bGN6NHBPaUJXVWsxSWRXMWhia0p2Ym1WeklIdGNiaUFnSUNBdkx5Qmxibk4xY21VZ2NtVnhkV2x5WldRZ1ltOXVaWE1nWlhocGMzUmNiaUFnSUNCamIyNXpkQ0J0YVhOemFXNW5VbVZ4ZFdseVpXUkNiMjVsY3lBOUlFOWlhbVZqZEM1MllXeDFaWE1vVmxKTlVtVnhkV2x5WldSSWRXMWhia0p2Ym1WT1lXMWxLUzVtYVd4MFpYSW9YRzRnSUNBZ0lDQW9jbVZ4ZFdseVpXUkNiMjVsVG1GdFpTa2dQVDRnYUhWdFlXNUNiMjVsYzF0eVpYRjFhWEpsWkVKdmJtVk9ZVzFsWFNBOVBTQnVkV3hzTEZ4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0F2THlCMGFISnZkeUJoYmlCbGNuSnZjaUJwWmlCMGFHVnlaU0JoY21VZ2JXbHpjMmx1WnlCaWIyNWxjMXh1SUNBZ0lHbG1JQ2h0YVhOemFXNW5VbVZ4ZFdseVpXUkNiMjVsY3k1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lHQldVazFJZFcxaGJtOXBaRXh2WVdSbGNsQnNkV2RwYmpvZ1ZHaGxjMlVnYUhWdFlXNXZhV1FnWW05dVpYTWdZWEpsSUhKbGNYVnBjbVZrSUdKMWRDQnViM1FnWlhocGMzUTZJQ1I3YldsemMybHVaMUpsY1hWcGNtVmtRbTl1WlhNdWFtOXBiaWduTENBbktYMWdMRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2FIVnRZVzVDYjI1bGN5QmhjeUJXVWsxSWRXMWhia0p2Ym1Wek8xeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdLaUJoY3lCVVNGSkZSU0JtY205dElDZDBhSEpsWlNjN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCR1lXNUNkV1ptWlhKSFpXOXRaWFJ5ZVNCbGVIUmxibVJ6SUZSSVVrVkZMa0oxWm1abGNrZGxiMjFsZEhKNUlIdGNiaUFnY0hWaWJHbGpJSFJvWlhSaE9pQnVkVzFpWlhJN1hHNGdJSEIxWW14cFl5QnlZV1JwZFhNNklHNTFiV0psY2p0Y2JpQWdjSEpwZG1GMFpTQmZZM1Z5Y21WdWRGUm9aWFJoSUQwZ01EdGNiaUFnY0hKcGRtRjBaU0JmWTNWeWNtVnVkRkpoWkdsMWN5QTlJREE3WEc0Z0lIQnlhWFpoZEdVZ2NtVmhaRzl1YkhrZ1gyRjBkSEpRYjNNNklGUklVa1ZGTGtKMVptWmxja0YwZEhKcFluVjBaVHRjYmlBZ2NISnBkbUYwWlNCeVpXRmtiMjVzZVNCZllYUjBja2x1WkdWNE9pQlVTRkpGUlM1Q2RXWm1aWEpCZEhSeWFXSjFkR1U3WEc1Y2JpQWdjSFZpYkdsaklHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJSE4xY0dWeUtDazdYRzVjYmlBZ0lDQjBhR2x6TG5Sb1pYUmhJRDBnTUM0d08xeHVJQ0FnSUhSb2FYTXVjbUZrYVhWeklEMGdNQzR3TzF4dUlDQWdJSFJvYVhNdVgyTjFjbkpsYm5SVWFHVjBZU0E5SURBdU1EdGNiaUFnSUNCMGFHbHpMbDlqZFhKeVpXNTBVbUZrYVhWeklEMGdNQzR3TzF4dVhHNGdJQ0FnZEdocGN5NWZZWFIwY2xCdmN5QTlJRzVsZHlCVVNGSkZSUzVDZFdabVpYSkJkSFJ5YVdKMWRHVW9ibVYzSUVac2IyRjBNekpCY25KaGVTZzJOU0FxSURNcExDQXpLVHRjYmlBZ0lDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ25jRzl6YVhScGIyNG5MQ0IwYUdsekxsOWhkSFJ5VUc5ektUdGNibHh1SUNBZ0lIUm9hWE11WDJGMGRISkpibVJsZUNBOUlHNWxkeUJVU0ZKRlJTNUNkV1ptWlhKQmRIUnlhV0oxZEdVb2JtVjNJRlZwYm5ReE5rRnljbUY1S0RNZ0tpQTJNeWtzSURFcE8xeHVJQ0FnSUhSb2FYTXVjMlYwU1c1a1pYZ29kR2hwY3k1ZllYUjBja2x1WkdWNEtUdGNibHh1SUNBZ0lIUm9hWE11WDJKMWFXeGtTVzVrWlhnb0tUdGNiaUFnSUNCMGFHbHpMblZ3WkdGMFpTZ3BPMXh1SUNCOVhHNWNiaUFnY0hWaWJHbGpJSFZ3WkdGMFpTZ3BPaUIyYjJsa0lIdGNiaUFnSUNCc1pYUWdjMmh2ZFd4a1ZYQmtZWFJsUjJWdmJXVjBjbmtnUFNCbVlXeHpaVHRjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbDlqZFhKeVpXNTBWR2hsZEdFZ0lUMDlJSFJvYVhNdWRHaGxkR0VwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMk4xY25KbGJuUlVhR1YwWVNBOUlIUm9hWE11ZEdobGRHRTdYRzRnSUNBZ0lDQnphRzkxYkdSVmNHUmhkR1ZIWlc5dFpYUnllU0E5SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdVgyTjFjbkpsYm5SU1lXUnBkWE1nSVQwOUlIUm9hWE11Y21Ga2FYVnpLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWpkWEp5Wlc1MFVtRmthWFZ6SUQwZ2RHaHBjeTV5WVdScGRYTTdYRzRnSUNBZ0lDQnphRzkxYkdSVmNHUmhkR1ZIWlc5dFpYUnllU0E5SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSE5vYjNWc1pGVndaR0YwWlVkbGIyMWxkSEo1S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDlpZFdsc1pGQnZjMmwwYVc5dUtDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQmZZblZwYkdSUWIzTnBkR2x2YmlncE9pQjJiMmxrSUh0Y2JpQWdJQ0IwYUdsekxsOWhkSFJ5VUc5ekxuTmxkRmhaV2lnd0xDQXdMakFzSURBdU1Dd2dNQzR3S1R0Y2JseHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z05qUTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnZENBOUlDaHBJQzhnTmpNdU1Da2dLaUIwYUdsekxsOWpkWEp5Wlc1MFZHaGxkR0U3WEc1Y2JpQWdJQ0FnSUhSb2FYTXVYMkYwZEhKUWIzTXVjMlYwV0ZsYUtHa2dLeUF4TENCMGFHbHpMbDlqZFhKeVpXNTBVbUZrYVhWeklDb2dUV0YwYUM1emFXNG9kQ2tzSURBdU1Dd2dkR2hwY3k1ZlkzVnljbVZ1ZEZKaFpHbDFjeUFxSUUxaGRHZ3VZMjl6S0hRcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbDloZEhSeVVHOXpMbTVsWldSelZYQmtZWFJsSUQwZ2RISjFaVHRjYmlBZ2ZWeHVYRzRnSUhCeWFYWmhkR1VnWDJKMWFXeGtTVzVrWlhnb0tUb2dkbTlwWkNCN1hHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENBMk16c2dhU3NyS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDloZEhSeVNXNWtaWGd1YzJWMFdGbGFLR2tnS2lBekxDQXdMQ0JwSUNzZ01Td2dhU0FySURJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVYMkYwZEhKSmJtUmxlQzV1WldWa2MxVndaR0YwWlNBOUlIUnlkV1U3WEc0Z0lIMWNibjFjYmlJc0ltbHRjRzl5ZENBcUlHRnpJRlJJVWtWRklHWnliMjBnSjNSb2NtVmxKenRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRXhwYm1WQmJtUlRjR2hsY21WQ2RXWm1aWEpIWlc5dFpYUnllU0JsZUhSbGJtUnpJRlJJVWtWRkxrSjFabVpsY2tkbGIyMWxkSEo1SUh0Y2JpQWdjSFZpYkdsaklISmhaR2wxY3pvZ2JuVnRZbVZ5TzF4dUlDQndkV0pzYVdNZ2RHRnBiRG9nVkVoU1JVVXVWbVZqZEc5eU16dGNiaUFnY0hKcGRtRjBaU0JmWTNWeWNtVnVkRkpoWkdsMWN6b2diblZ0WW1WeU8xeHVJQ0J3Y21sMllYUmxJRjlqZFhKeVpXNTBWR0ZwYkRvZ1ZFaFNSVVV1Vm1WamRHOXlNenRjYmlBZ2NISnBkbUYwWlNCeVpXRmtiMjVzZVNCZllYUjBjbEJ2Y3pvZ1ZFaFNSVVV1UW5WbVptVnlRWFIwY21saWRYUmxPMXh1SUNCd2NtbDJZWFJsSUhKbFlXUnZibXg1SUY5aGRIUnlTVzVrWlhnNklGUklVa1ZGTGtKMVptWmxja0YwZEhKcFluVjBaVHRjYmx4dUlDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdjM1Z3WlhJb0tUdGNibHh1SUNBZ0lIUm9hWE11Y21Ga2FYVnpJRDBnTUM0d08xeHVJQ0FnSUhSb2FYTXVYMk4xY25KbGJuUlNZV1JwZFhNZ1BTQXdMakE3WEc1Y2JpQWdJQ0IwYUdsekxuUmhhV3dnUFNCdVpYY2dWRWhTUlVVdVZtVmpkRzl5TXlncE8xeHVJQ0FnSUhSb2FYTXVYMk4xY25KbGJuUlVZV2xzSUQwZ2JtVjNJRlJJVWtWRkxsWmxZM1J2Y2pNb0tUdGNibHh1SUNBZ0lIUm9hWE11WDJGMGRISlFiM01nUFNCdVpYY2dWRWhTUlVVdVFuVm1abVZ5UVhSMGNtbGlkWFJsS0c1bGR5QkdiRzloZERNeVFYSnlZWGtvTWprMEtTd2dNeWs3WEc0Z0lDQWdkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9KM0J2YzJsMGFXOXVKeXdnZEdocGN5NWZZWFIwY2xCdmN5azdYRzVjYmlBZ0lDQjBhR2x6TGw5aGRIUnlTVzVrWlhnZ1BTQnVaWGNnVkVoU1JVVXVRblZtWm1WeVFYUjBjbWxpZFhSbEtHNWxkeUJWYVc1ME1UWkJjbkpoZVNneE9UUXBMQ0F4S1R0Y2JpQWdJQ0IwYUdsekxuTmxkRWx1WkdWNEtIUm9hWE11WDJGMGRISkpibVJsZUNrN1hHNWNiaUFnSUNCMGFHbHpMbDlpZFdsc1pFbHVaR1Y0S0NrN1hHNGdJQ0FnZEdocGN5NTFjR1JoZEdVb0tUdGNiaUFnZlZ4dVhHNGdJSEIxWW14cFl5QjFjR1JoZEdVb0tUb2dkbTlwWkNCN1hHNGdJQ0FnYkdWMElITm9iM1ZzWkZWd1pHRjBaVWRsYjIxbGRISjVJRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NWZZM1Z5Y21WdWRGSmhaR2wxY3lBaFBUMGdkR2hwY3k1eVlXUnBkWE1wSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMk4xY25KbGJuUlNZV1JwZFhNZ1BTQjBhR2x6TG5KaFpHbDFjenRjYmlBZ0lDQWdJSE5vYjNWc1pGVndaR0YwWlVkbGIyMWxkSEo1SUQwZ2RISjFaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvSVhSb2FYTXVYMk4xY25KbGJuUlVZV2xzTG1WeGRXRnNjeWgwYUdsekxuUmhhV3dwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDlqZFhKeVpXNTBWR0ZwYkM1amIzQjVLSFJvYVhNdWRHRnBiQ2s3WEc0Z0lDQWdJQ0J6YUc5MWJHUlZjR1JoZEdWSFpXOXRaWFJ5ZVNBOUlIUnlkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hOb2IzVnNaRlZ3WkdGMFpVZGxiMjFsZEhKNUtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5aWRXbHNaRkJ2YzJsMGFXOXVLQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY0hKcGRtRjBaU0JmWW5WcGJHUlFiM05wZEdsdmJpZ3BPaUIyYjJsa0lIdGNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElETXlPeUJwS3lzcElIdGNiaUFnSUNBZ0lHTnZibk4wSUhRZ1BTQW9hU0F2SURFMkxqQXBJQ29nVFdGMGFDNVFTVHRjYmx4dUlDQWdJQ0FnZEdocGN5NWZZWFIwY2xCdmN5NXpaWFJZV1Zvb2FTd2dUV0YwYUM1amIzTW9kQ2tzSUUxaGRHZ3VjMmx1S0hRcExDQXdMakFwTzF4dUlDQWdJQ0FnZEdocGN5NWZZWFIwY2xCdmN5NXpaWFJZV1Zvb016SWdLeUJwTENBd0xqQXNJRTFoZEdndVkyOXpLSFFwTENCTllYUm9Mbk5wYmloMEtTazdYRzRnSUNBZ0lDQjBhR2x6TGw5aGRIUnlVRzl6TG5ObGRGaFpXaWcyTkNBcklHa3NJRTFoZEdndWMybHVLSFFwTENBd0xqQXNJRTFoZEdndVkyOXpLSFFwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxuTmpZV3hsS0hSb2FYTXVYMk4xY25KbGJuUlNZV1JwZFhNc0lIUm9hWE11WDJOMWNuSmxiblJTWVdScGRYTXNJSFJvYVhNdVgyTjFjbkpsYm5SU1lXUnBkWE1wTzF4dUlDQWdJSFJvYVhNdWRISmhibk5zWVhSbEtIUm9hWE11WDJOMWNuSmxiblJVWVdsc0xuZ3NJSFJvYVhNdVgyTjFjbkpsYm5SVVlXbHNMbmtzSUhSb2FYTXVYMk4xY25KbGJuUlVZV2xzTG5vcE8xeHVYRzRnSUNBZ2RHaHBjeTVmWVhSMGNsQnZjeTV6WlhSWVdWb29PVFlzSURBc0lEQXNJREFwTzF4dUlDQWdJSFJvYVhNdVgyRjBkSEpRYjNNdWMyVjBXRmxhS0RrM0xDQjBhR2x6TGw5amRYSnlaVzUwVkdGcGJDNTRMQ0IwYUdsekxsOWpkWEp5Wlc1MFZHRnBiQzU1TENCMGFHbHpMbDlqZFhKeVpXNTBWR0ZwYkM1NktUdGNibHh1SUNBZ0lIUm9hWE11WDJGMGRISlFiM011Ym1WbFpITlZjR1JoZEdVZ1BTQjBjblZsTzF4dUlDQjlYRzVjYmlBZ2NISnBkbUYwWlNCZlluVnBiR1JKYm1SbGVDZ3BPaUIyYjJsa0lIdGNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElETXlPeUJwS3lzcElIdGNiaUFnSUNBZ0lHTnZibk4wSUdreElEMGdLR2tnS3lBeEtTQWxJRE15TzF4dVhHNGdJQ0FnSUNCMGFHbHpMbDloZEhSeVNXNWtaWGd1YzJWMFdGa29hU0FxSURJc0lHa3NJR2t4S1R0Y2JpQWdJQ0FnSUhSb2FYTXVYMkYwZEhKSmJtUmxlQzV6WlhSWVdTZzJOQ0FySUdrZ0tpQXlMQ0F6TWlBcklHa3NJRE15SUNzZ2FURXBPMXh1SUNBZ0lDQWdkR2hwY3k1ZllYUjBja2x1WkdWNExuTmxkRmhaS0RFeU9DQXJJR2tnS2lBeUxDQTJOQ0FySUdrc0lEWTBJQ3NnYVRFcE8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxsOWhkSFJ5U1c1a1pYZ3VjMlYwV0Zrb01Ua3lMQ0E1Tml3Z09UY3BPMXh1WEc0Z0lDQWdkR2hwY3k1ZllYUjBja2x1WkdWNExtNWxaV1J6VlhCa1lYUmxJRDBnZEhKMVpUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJQ29nWVhNZ1ZFaFNSVVVnWm5KdmJTQW5kR2h5WldVbk8xeHVhVzF3YjNKMElIc2dWbEpOVEc5dmEwRjBJSDBnWm5KdmJTQW5MaTR2VmxKTlRHOXZhMEYwSnp0Y2JtbHRjRzl5ZENCN0lFWmhia0oxWm1abGNrZGxiMjFsZEhKNUlIMGdabkp2YlNBbkxpOTFkR2xzY3k5R1lXNUNkV1ptWlhKSFpXOXRaWFJ5ZVNjN1hHNXBiWEJ2Y25RZ2V5Qk1hVzVsUVc1a1UzQm9aWEpsUW5WbVptVnlSMlZ2YldWMGNua2dmU0JtY205dElDY3VMM1YwYVd4ekwweHBibVZCYm1SVGNHaGxjbVZDZFdabVpYSkhaVzl0WlhSeWVTYzdYRzVjYm1OdmJuTjBJRjl4ZFdGMFFTQTlJRzVsZHlCVVNGSkZSUzVSZFdGMFpYSnVhVzl1S0NrN1hHNWpiMjV6ZENCZmNYVmhkRUlnUFNCdVpYY2dWRWhTUlVVdVVYVmhkR1Z5Ym1sdmJpZ3BPMXh1WTI5dWMzUWdYM1l6UVNBOUlHNWxkeUJVU0ZKRlJTNVdaV04wYjNJektDazdYRzVqYjI1emRDQmZkak5DSUQwZ2JtVjNJRlJJVWtWRkxsWmxZM1J2Y2pNb0tUdGNibHh1WTI5dWMzUWdVMUZTVkY4eVgwOVdSVkpmTWlBOUlFMWhkR2d1YzNGeWRDZ3lMakFwSUM4Z01pNHdPMXh1WTI5dWMzUWdVVlZCVkY5WVdWOURWemt3SUQwZ2JtVjNJRlJJVWtWRkxsRjFZWFJsY201cGIyNG9NQ3dnTUN3Z0xWTlJVbFJmTWw5UFZrVlNYeklzSUZOUlVsUmZNbDlQVmtWU1h6SXBPMXh1WTI5dWMzUWdWa1ZETTE5UVQxTkpWRWxXUlY5WklEMGdibVYzSUZSSVVrVkZMbFpsWTNSdmNqTW9NQzR3TENBeExqQXNJREF1TUNrN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCV1VrMU1iMjlyUVhSSVpXeHdaWElnWlhoMFpXNWtjeUJVU0ZKRlJTNUhjbTkxY0NCN1hHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQjJjbTFNYjI5clFYUTZJRlpTVFV4dmIydEJkRHRjYmlBZ2NISnBkbUYwWlNCeVpXRmtiMjVzZVNCZmJXVnphRmxoZHpvZ1ZFaFNSVVV1VFdWemFEeEdZVzVDZFdabVpYSkhaVzl0WlhSeWVTd2dWRWhTUlVVdVRXVnphRUpoYzJsalRXRjBaWEpwWVd3K08xeHVJQ0J3Y21sMllYUmxJSEpsWVdSdmJteDVJRjl0WlhOb1VHbDBZMmc2SUZSSVVrVkZMazFsYzJnOFJtRnVRblZtWm1WeVIyVnZiV1YwY25rc0lGUklVa1ZGTGsxbGMyaENZWE5wWTAxaGRHVnlhV0ZzUGp0Y2JpQWdjSEpwZG1GMFpTQnlaV0ZrYjI1c2VTQmZiR2x1WlZSaGNtZGxkRG9nVkVoU1JVVXVUR2x1WlZObFoyMWxiblJ6UEV4cGJtVkJibVJUY0dobGNtVkNkV1ptWlhKSFpXOXRaWFJ5ZVN3Z1ZFaFNSVVV1VEdsdVpVSmhjMmxqVFdGMFpYSnBZV3crTzF4dVhHNGdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWhzYjI5clFYUTZJRlpTVFV4dmIydEJkQ2tnZTF4dUlDQWdJSE4xY0dWeUtDazdYRzRnSUNBZ2RHaHBjeTV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQjBhR2x6TG5aeWJVeHZiMnRCZENBOUlHeHZiMnRCZER0Y2JseHVJQ0FnSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR2RsYjIxbGRISjVJRDBnYm1WM0lFWmhia0oxWm1abGNrZGxiMjFsZEhKNUtDazdYRzRnSUNBZ0lDQm5aVzl0WlhSeWVTNXlZV1JwZFhNZ1BTQXdMalU3WEc1Y2JpQWdJQ0FnSUdOdmJuTjBJRzFoZEdWeWFXRnNJRDBnYm1WM0lGUklVa1ZGTGsxbGMyaENZWE5wWTAxaGRHVnlhV0ZzS0h0Y2JpQWdJQ0FnSUNBZ1kyOXNiM0k2SURCNE1EQm1aakF3TEZ4dUlDQWdJQ0FnSUNCMGNtRnVjM0JoY21WdWREb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2IzQmhZMmwwZVRvZ01DNDFMRnh1SUNBZ0lDQWdJQ0J6YVdSbE9pQlVTRkpGUlM1RWIzVmliR1ZUYVdSbExGeHVJQ0FnSUNBZ0lDQmtaWEIwYUZSbGMzUTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQmtaWEIwYUZkeWFYUmxPaUJtWVd4elpTeGNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0IwYUdsekxsOXRaWE5vVUdsMFkyZ2dQU0J1WlhjZ1ZFaFNSVVV1VFdWemFDaG5aVzl0WlhSeWVTd2diV0YwWlhKcFlXd3BPMXh1SUNBZ0lDQWdkR2hwY3k1aFpHUW9kR2hwY3k1ZmJXVnphRkJwZEdOb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCN1hHNGdJQ0FnSUNCamIyNXpkQ0JuWlc5dFpYUnllU0E5SUc1bGR5QkdZVzVDZFdabVpYSkhaVzl0WlhSeWVTZ3BPMXh1SUNBZ0lDQWdaMlZ2YldWMGNua3VjbUZrYVhWeklEMGdNQzQxTzF4dVhHNGdJQ0FnSUNCamIyNXpkQ0J0WVhSbGNtbGhiQ0E5SUc1bGR5QlVTRkpGUlM1TlpYTm9RbUZ6YVdOTllYUmxjbWxoYkNoN1hHNGdJQ0FnSUNBZ0lHTnZiRzl5T2lBd2VHWm1NREF3TUN4Y2JpQWdJQ0FnSUNBZ2RISmhibk53WVhKbGJuUTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lHOXdZV05wZEhrNklEQXVOU3hjYmlBZ0lDQWdJQ0FnYzJsa1pUb2dWRWhTUlVVdVJHOTFZbXhsVTJsa1pTeGNiaUFnSUNBZ0lDQWdaR1Z3ZEdoVVpYTjBPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdaR1Z3ZEdoWGNtbDBaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnZEdocGN5NWZiV1Z6YUZsaGR5QTlJRzVsZHlCVVNGSkZSUzVOWlhOb0tHZGxiMjFsZEhKNUxDQnRZWFJsY21saGJDazdYRzRnSUNBZ0lDQjBhR2x6TG1Ga1pDaDBhR2x6TGw5dFpYTm9XV0YzS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0I3WEc0Z0lDQWdJQ0JqYjI1emRDQm5aVzl0WlhSeWVTQTlJRzVsZHlCTWFXNWxRVzVrVTNCb1pYSmxRblZtWm1WeVIyVnZiV1YwY25rb0tUdGNiaUFnSUNBZ0lHZGxiMjFsZEhKNUxuSmhaR2wxY3lBOUlEQXVNVHRjYmx4dUlDQWdJQ0FnWTI5dWMzUWdiV0YwWlhKcFlXd2dQU0J1WlhjZ1ZFaFNSVVV1VEdsdVpVSmhjMmxqVFdGMFpYSnBZV3dvZTF4dUlDQWdJQ0FnSUNCamIyeHZjam9nTUhobVptWm1abVlzWEc0Z0lDQWdJQ0FnSUdSbGNIUm9WR1Z6ZERvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdSbGNIUm9WM0pwZEdVNklHWmhiSE5sTEZ4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lIUm9hWE11WDJ4cGJtVlVZWEpuWlhRZ1BTQnVaWGNnVkVoU1JVVXVUR2x1WlZObFoyMWxiblJ6S0dkbGIyMWxkSEo1TENCdFlYUmxjbWxoYkNrN1hHNGdJQ0FnSUNCMGFHbHpMbDlzYVc1bFZHRnlaMlYwTG1aeWRYTjBkVzFEZFd4c1pXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lIUm9hWE11WVdSa0tIUm9hWE11WDJ4cGJtVlVZWEpuWlhRcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCa2FYTndiM05sS0NrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdVgyMWxjMmhaWVhjdVoyVnZiV1YwY25rdVpHbHpjRzl6WlNncE8xeHVJQ0FnSUhSb2FYTXVYMjFsYzJoWllYY3ViV0YwWlhKcFlXd3VaR2x6Y0c5elpTZ3BPMXh1WEc0Z0lDQWdkR2hwY3k1ZmJXVnphRkJwZEdOb0xtZGxiMjFsZEhKNUxtUnBjM0J2YzJVb0tUdGNiaUFnSUNCMGFHbHpMbDl0WlhOb1VHbDBZMmd1YldGMFpYSnBZV3d1WkdsemNHOXpaU2dwTzF4dVhHNGdJQ0FnZEdocGN5NWZiR2x1WlZSaGNtZGxkQzVuWlc5dFpYUnllUzVrYVhOd2IzTmxLQ2s3WEc0Z0lDQWdkR2hwY3k1ZmJHbHVaVlJoY21kbGRDNXRZWFJsY21saGJDNWthWE53YjNObEtDazdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9abTl5WTJVNklHSnZiMnhsWVc0cE9pQjJiMmxrSUh0Y2JpQWdJQ0F2THlCMWNHUmhkR1VnWjJWdmJXVjBjbWxsYzF4dUlDQWdJR052Ym5OMElIbGhkeUE5SUZSSVVrVkZMazFoZEdoVmRHbHNjeTVFUlVjeVVrRkVJQ29nZEdocGN5NTJjbTFNYjI5clFYUXVlV0YzTzF4dUlDQWdJSFJvYVhNdVgyMWxjMmhaWVhjdVoyVnZiV1YwY25rdWRHaGxkR0VnUFNCNVlYYzdYRzRnSUNBZ2RHaHBjeTVmYldWemFGbGhkeTVuWlc5dFpYUnllUzUxY0dSaGRHVW9LVHRjYmx4dUlDQWdJR052Ym5OMElIQnBkR05vSUQwZ1ZFaFNSVVV1VFdGMGFGVjBhV3h6TGtSRlJ6SlNRVVFnS2lCMGFHbHpMblp5YlV4dmIydEJkQzV3YVhSamFEdGNiaUFnSUNCMGFHbHpMbDl0WlhOb1VHbDBZMmd1WjJWdmJXVjBjbmt1ZEdobGRHRWdQU0J3YVhSamFEdGNiaUFnSUNCMGFHbHpMbDl0WlhOb1VHbDBZMmd1WjJWdmJXVjBjbmt1ZFhCa1lYUmxLQ2s3WEc1Y2JpQWdJQ0F2THlCblpYUWdkMjl5YkdRZ2NHOXphWFJwYjI0Z1lXNWtJSEYxWVhSbGNtNXBiMjVjYmlBZ0lDQjBhR2x6TG5aeWJVeHZiMnRCZEM1blpYUk1iMjlyUVhSWGIzSnNaRkJ2YzJsMGFXOXVLRjkyTTBFcE8xeHVJQ0FnSUhSb2FYTXVkbkp0VEc5dmEwRjBMbWRsZEV4dmIydEJkRmR2Y214a1VYVmhkR1Z5Ym1sdmJpaGZjWFZoZEVFcE8xeHVYRzRnSUNBZ0x5OGdZMkZzWTNWc1lYUmxJSEp2ZEdGMGFXOXVJSFZ6YVc1bklHWmhZMlZHY205dWRGeHVJQ0FnSUY5eGRXRjBRUzV0ZFd4MGFYQnNlU2gwYUdsekxuWnliVXh2YjJ0QmRDNW5aWFJHWVdObFJuSnZiblJSZFdGMFpYSnVhVzl1S0Y5eGRXRjBRaWtwTzF4dVhHNGdJQ0FnTHk4Z2MyVjBJSFJ5WVc1elptOXliU0IwYnlCdFpYTm9aWE5jYmlBZ0lDQjBhR2x6TGw5dFpYTm9XV0YzTG5CdmMybDBhVzl1TG1OdmNIa29YM1l6UVNrN1hHNGdJQ0FnZEdocGN5NWZiV1Z6YUZsaGR5NXhkV0YwWlhKdWFXOXVMbU52Y0hrb1gzRjFZWFJCS1R0Y2JseHVJQ0FnSUhSb2FYTXVYMjFsYzJoUWFYUmphQzV3YjNOcGRHbHZiaTVqYjNCNUtGOTJNMEVwTzF4dUlDQWdJSFJvYVhNdVgyMWxjMmhRYVhSamFDNXhkV0YwWlhKdWFXOXVMbU52Y0hrb1gzRjFZWFJCS1R0Y2JpQWdJQ0IwYUdsekxsOXRaWE5vVUdsMFkyZ3VjWFZoZEdWeWJtbHZiaTV0ZFd4MGFYQnNlU2hmY1hWaGRFSXVjMlYwUm5KdmJVRjRhWE5CYm1kc1pTaFdSVU16WDFCUFUwbFVTVlpGWDFrc0lIbGhkeWtwTzF4dUlDQWdJSFJvYVhNdVgyMWxjMmhRYVhSamFDNXhkV0YwWlhKdWFXOXVMbTExYkhScGNHeDVLRkZWUVZSZldGbGZRMWM1TUNrN1hHNWNiaUFnSUNBdkx5QjFjR1JoZEdVZ2RHRnlaMlYwSUd4cGJtVWdZVzVrSUhOd2FHVnlaVnh1SUNBZ0lHTnZibk4wSUhzZ2RHRnlaMlYwTENCaGRYUnZWWEJrWVhSbElIMGdQU0IwYUdsekxuWnliVXh2YjJ0QmREdGNiaUFnSUNCcFppQW9kR0Z5WjJWMElDRTlJRzUxYkd3Z0ppWWdZWFYwYjFWd1pHRjBaU2tnZTF4dUlDQWdJQ0FnZEdGeVoyVjBMbWRsZEZkdmNteGtVRzl6YVhScGIyNG9YM1l6UWlrdWMzVmlLRjkyTTBFcE8xeHVJQ0FnSUNBZ2RHaHBjeTVmYkdsdVpWUmhjbWRsZEM1blpXOXRaWFJ5ZVM1MFlXbHNMbU52Y0hrb1gzWXpRaWs3WEc0Z0lDQWdJQ0IwYUdsekxsOXNhVzVsVkdGeVoyVjBMbWRsYjIxbGRISjVMblZ3WkdGMFpTZ3BPMXh1SUNBZ0lDQWdkR2hwY3k1ZmJHbHVaVlJoY21kbGRDNXdiM05wZEdsdmJpNWpiM0I1S0Y5Mk0wRXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJR0Z3Y0d4NUlIUnlZVzV6Wm05eWJTQjBieUJ0WlhOb1pYTmNiaUFnSUNCemRYQmxjaTUxY0dSaGRHVk5ZWFJ5YVhoWGIzSnNaQ2htYjNKalpTazdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0FxSUdGeklGUklVa1ZGSUdaeWIyMGdKM1JvY21WbEp6dGNibHh1WTI5dWMzUWdYM0J2YzJsMGFXOXVJRDBnYm1WM0lGUklVa1ZGTGxabFkzUnZjak1vS1R0Y2JtTnZibk4wSUY5elkyRnNaU0E5SUc1bGR5QlVTRkpGUlM1V1pXTjBiM0l6S0NrN1hHNWNiaThxS2x4dUlDb2dRU0J5WlhCc1lXTmxiV1Z1ZENCdlppQmdUMkpxWldOME0wUXVaMlYwVjI5eWJHUlJkV0YwWlhKdWFXOXVZQzVjYmlBcUlFVjRkSEpoWTNRZ2RHaGxJSGR2Y214a0lIRjFZWFJsY201cGIyNGdiMllnWVc0Z2IySnFaV04wSUdaeWIyMGdhWFJ6SUhkdmNteGtJSE53WVdObElHMWhkSEpwZUN3Z2QybDBhRzkxZENCallXeHNhVzVuSUdCUFltcGxZM1F6UkM1MWNHUmhkR1ZYYjNKc1pFMWhkSEpwZUdBdVhHNGdLaUJWYzJVZ2RHaHBjeUIzYUdWdUlIbHZkU2R5WlNCemRYSmxJSFJvWVhRZ2RHaGxJSGR2Y214a0lHMWhkSEpwZUNCcGN5QjFjQzEwYnkxa1lYUmxMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQnZZbXBsWTNRZ1ZHaGxJRzlpYW1WamRGeHVJQ29nUUhCaGNtRnRJRzkxZENCQklIUmhjbWRsZENCeGRXRjBaWEp1YVc5dVhHNGdLaTljYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJuWlhSWGIzSnNaRkYxWVhSbGNtNXBiMjVNYVhSbEtHOWlhbVZqZERvZ1ZFaFNSVVV1VDJKcVpXTjBNMFFzSUc5MWREb2dWRWhTUlVVdVVYVmhkR1Z5Ym1sdmJpazZJRlJJVWtWRkxsRjFZWFJsY201cGIyNGdlMXh1SUNCdlltcGxZM1F1YldGMGNtbDRWMjl5YkdRdVpHVmpiMjF3YjNObEtGOXdiM05wZEdsdmJpd2diM1YwTENCZmMyTmhiR1VwTzF4dUlDQnlaWFIxY200Z2IzVjBPMXh1ZlZ4dUlpd2lhVzF3YjNKMElDb2dZWE1nVkVoU1JVVWdabkp2YlNBbmRHaHlaV1VuTzF4dVhHNHZLaXBjYmlBcUlFTmhiR04xYkdGMFpTQmhlbWx0ZFhSb0lDOGdZV3gwYVhSMVpHVWdZVzVuYkdWeklHWnliMjBnWVNCMlpXTjBiM0l1WEc0Z0tseHVJQ29nVkdocGN5QnlaWFIxY201eklHRWdaR2xtWm1WeVpXNWpaU0J2WmlCaGJtZHNaWE1nWm5KdmJTQW9NU3dnTUN3Z01Da3VYRzRnS2lCQmVtbHRkWFJvSUhKbGNISmxjMlZ1ZEhNZ1lXNGdZVzVuYkdVZ1lYSnZkVzVrSUZrZ1lYaHBjeTVjYmlBcUlFRnNkR2wwZFdSbElISmxjSEpsYzJWdWRITWdZVzRnWVc1bmJHVWdZWEp2ZFc1a0lGb2dZWGhwY3k1Y2JpQXFJRWwwSUdseklISnZkR0YwWldRZ2FXNGdhVzUwY21sdWMybGpJRmt0V2lCdmNtUmxjaTVjYmlBcVhHNGdLaUJBY0dGeVlXMGdkbVZqZEc5eUlGUm9aU0IyWldOMGIzSmNiaUFxSUVCeVpYUjFjbTV6SUVFZ2RIVndiR1VnWTI5dWRHRnBibk1nZEhkdklHRnVaMnhsY3l3Z1lGc2dZWHBwYlhWMGFDd2dZV3gwYVhSMVpHVWdYV0JjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTmhiR05CZW1sdGRYUm9RV3gwYVhSMVpHVW9kbVZqZEc5eU9pQlVTRkpGUlM1V1pXTjBiM0l6S1RvZ1cyRjZhVzExZEdnNklHNTFiV0psY2l3Z1lXeDBhWFIxWkdVNklHNTFiV0psY2wwZ2UxeHVJQ0J5WlhSMWNtNGdXMDFoZEdndVlYUmhiaklvTFhabFkzUnZjaTU2TENCMlpXTjBiM0l1ZUNrc0lFMWhkR2d1WVhSaGJqSW9kbVZqZEc5eUxua3NJRTFoZEdndWMzRnlkQ2gyWldOMGIzSXVlQ0FxSUhabFkzUnZjaTU0SUNzZ2RtVmpkRzl5TG5vZ0tpQjJaV04wYjNJdWVpa3BYVHRjYm4xY2JpSXNJaThxS2x4dUlDb2dUV0ZyWlNCemRYSmxJSFJvWlNCaGJtZHNaU0JwY3lCM2FYUm9hVzRnTFZCSklIUnZJRkJKTGx4dUlDcGNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tpQmdZR0JxYzF4dUlDb2djMkZ1YVhScGVtVkJibWRzWlNneExqVWdLaUJOWVhSb0xsQkpLU0F2THlBdE1DNDFJQ29nVUVsY2JpQXFJR0JnWUZ4dUlDcGNiaUFxSUVCd1lYSmhiU0JoYm1kc1pTQkJiaUJwYm5CMWRDQmhibWRzWlZ4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjMkZ1YVhScGVtVkJibWRzWlNoaGJtZHNaVG9nYm5WdFltVnlLVG9nYm5WdFltVnlJSHRjYmlBZ1kyOXVjM1FnY205MWJtUlVkWEp1SUQwZ1RXRjBhQzV5YjNWdVpDaGhibWRzWlNBdklESXVNQ0F2SUUxaGRHZ3VVRWtwTzF4dUlDQnlaWFIxY200Z1lXNW5iR1VnTFNBeUxqQWdLaUJOWVhSb0xsQkpJQ29nY205MWJtUlVkWEp1TzF4dWZWeHVJaXdpYVcxd2IzSjBJQ29nWVhNZ1ZFaFNSVVVnWm5KdmJTQW5kR2h5WldVbk8xeHVhVzF3YjNKMElIc2dWbEpOU0hWdFlXNXZhV1FnZlNCbWNtOXRJQ2N1TGk5b2RXMWhibTlwWkNjN1hHNXBiWEJ2Y25RZ2V5Qm5aWFJYYjNKc1pGRjFZWFJsY201cGIyNU1hWFJsSUgwZ1puSnZiU0FuTGk0dmRYUnBiSE12WjJWMFYyOXliR1JSZFdGMFpYSnVhVzl1VEdsMFpTYzdYRzVwYlhCdmNuUWdleUJ4ZFdGMFNXNTJaWEowUTI5dGNHRjBJSDBnWm5KdmJTQW5MaTR2ZFhScGJITXZjWFZoZEVsdWRtVnlkRU52YlhCaGRDYzdYRzVwYlhCdmNuUWdleUJqWVd4alFYcHBiWFYwYUVGc2RHbDBkV1JsSUgwZ1puSnZiU0FuTGk5MWRHbHNjeTlqWVd4alFYcHBiWFYwYUVGc2RHbDBkV1JsSnp0Y2JtbHRjRzl5ZENCMGVYQmxJSHNnVmxKTlRHOXZhMEYwUVhCd2JHbGxjaUI5SUdaeWIyMGdKeTR2VmxKTlRHOXZhMEYwUVhCd2JHbGxjaWM3WEc1cGJYQnZjblFnZXlCellXNXBkR2w2WlVGdVoyeGxJSDBnWm5KdmJTQW5MaTkxZEdsc2N5OXpZVzVwZEdsNlpVRnVaMnhsSnp0Y2JseHVZMjl1YzNRZ1ZrVkRNMTlRVDFOSlZFbFdSVjlhSUQwZ2JtVjNJRlJJVWtWRkxsWmxZM1J2Y2pNb01DNHdMQ0F3TGpBc0lERXVNQ2s3WEc1Y2JtTnZibk4wSUY5Mk0wRWdQU0J1WlhjZ1ZFaFNSVVV1Vm1WamRHOXlNeWdwTzF4dVkyOXVjM1FnWDNZelFpQTlJRzVsZHlCVVNGSkZSUzVXWldOMGIzSXpLQ2s3WEc1amIyNXpkQ0JmZGpORElEMGdibVYzSUZSSVVrVkZMbFpsWTNSdmNqTW9LVHRjYm1OdmJuTjBJRjl4ZFdGMFFTQTlJRzVsZHlCVVNGSkZSUzVSZFdGMFpYSnVhVzl1S0NrN1hHNWpiMjV6ZENCZmNYVmhkRUlnUFNCdVpYY2dWRWhTUlVVdVVYVmhkR1Z5Ym1sdmJpZ3BPMXh1WTI5dWMzUWdYM0YxWVhSRElEMGdibVYzSUZSSVVrVkZMbEYxWVhSbGNtNXBiMjRvS1R0Y2JtTnZibk4wSUY5eGRXRjBSQ0E5SUc1bGR5QlVTRkpGUlM1UmRXRjBaWEp1YVc5dUtDazdYRzVqYjI1emRDQmZaWFZzWlhKQklEMGdibVYzSUZSSVVrVkZMa1YxYkdWeUtDazdYRzVjYmk4cUtseHVJQ29nUVNCamJHRnpjeUJqYjI1MGNtOXNjeUJsZVdVZ1oyRjZaU0J0YjNabGJXVnVkSE1nYjJZZ1lTQldVazB1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCV1VrMU1iMjlyUVhRZ2UxeHVJQ0J3ZFdKc2FXTWdjM1JoZEdsaklISmxZV1J2Ym14NUlFVlZURVZTWDA5U1JFVlNJRDBnSjFsWVdpYzdJQzh2SUhsaGR5MXdhWFJqYUMxeWIyeHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGUm9aU0J2Y21sbmFXNGdiMllnVEc5dmEwRjBMaUJRYjNOcGRHbHZiaUJ2Wm1aelpYUWdabkp2YlNCMGFHVWdhR1ZoWkNCaWIyNWxMbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJRzltWm5ObGRFWnliMjFJWldGa1FtOXVaU0E5SUc1bGR5QlVTRkpGUlM1V1pXTjBiM0l6S0NrN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVsMGN5QmhjM052WTJsaGRHVmtJSHRBYkdsdWF5QldVazFJZFcxaGJtOXBaSDB1WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYUhWdFlXNXZhV1E2SUZaU1RVaDFiV0Z1YjJsa08xeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVWdlMEJzYVc1cklGWlNUVXh2YjJ0QmRFRndjR3hwWlhKOUlHOW1JSFJvWlNCTWIyOXJRWFF1WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nWVhCd2JHbGxjam9nVmxKTlRHOXZhMEYwUVhCd2JHbGxjanRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTV1lnZEdocGN5QnBjeUIwY25WbExDQjBhR1VnVEc5dmEwRjBJSGRwYkd3Z1ltVWdkWEJrWVhSbFpDQmhkWFJ2YldGMGFXTmhiR3g1SUdKNUlHTmhiR3hwYm1jZ2UwQnNhVzVySUhWd1pHRjBaWDBzSUhSdmQyRnlaR2x1WnlCMGFHVWdaR2x5WldOMGFXOXVJSFJ2SUhSb1pTQjdRR3hwYm1zZ2RHRnlaMlYwZlM1Y2JpQWdJQ29nWUhSeWRXVmdJR0o1SUdSbFptRjFiSFF1WEc0Z0lDQXFYRzRnSUNBcUlGTmxaU0JoYkhOdk9pQjdRR3hwYm1zZ2RHRnlaMlYwZlZ4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUdGMWRHOVZjR1JoZEdVZ1BTQjBjblZsTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ2RHRnlaMlYwSUc5aWFtVmpkQ0J2WmlCMGFHVWdURzl2YTBGMExseHVJQ0FnS2lCT2IzUmxJSFJvWVhRZ2FYUWdaRzlsY3lCdWIzUWdiV0ZyWlNCaGJua2djMlZ1YzJVZ2FXWWdlMEJzYVc1cklHRjFkRzlWY0dSaGRHVjlJR2x6SUdScGMyRmliR1ZrTGx4dUlDQWdLbHh1SUNBZ0tpQlRaV1VnWVd4emJ6b2dlMEJzYVc1cklHRjFkRzlWY0dSaGRHVjlYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdkR0Z5WjJWMFB6b2dWRWhTUlVVdVQySnFaV04wTTBRZ2ZDQnVkV3hzTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ1puSnZiblFnWkdseVpXTjBhVzl1SUc5bUlIUm9aU0JtWVdObExseHVJQ0FnS2lCSmJuUmxibVJsWkNCMGJ5QmlaU0IxYzJWa0lHWnZjaUJXVWswZ01DNHdJR052YlhCaGRDQW9WbEpOSURBdU1DQnRiMlJsYkhNZ1lYSmxJR1poWTJsdVp5QmFMU0JwYm5OMFpXRmtJRzltSUZvcktTNWNiaUFnSUNvZ1dXOTFJSFZ6ZFdGc2JIa2daRzl1SjNRZ2QyRnVkQ0IwYnlCMGIzVmphQ0IwYUdsekxseHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklHWmhZMlZHY205dWRDQTlJRzVsZHlCVVNGSkZSUzVXWldOMGIzSXpLREF1TUN3Z01DNHdMQ0F4TGpBcE8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCSmRITWdZM1Z5Y21WdWRDQmhibWRzWlNCaGNtOTFibVFnV1NCaGVHbHpMQ0JwYmlCa1pXZHlaV1V1WEc0Z0lDQXFMMXh1SUNCd2NtOTBaV04wWldRZ1gzbGhkem9nYm5WdFltVnlPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpkSE1nWTNWeWNtVnVkQ0JoYm1kc1pTQmhjbTkxYm1RZ1dTQmhlR2x6TENCcGJpQmtaV2R5WldVdVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ1oyVjBJSGxoZHlncE9pQnVkVzFpWlhJZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTVZWGM3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1NYUnpJR04xY25KbGJuUWdZVzVuYkdVZ1lYSnZkVzVrSUZrZ1lYaHBjeXdnYVc0Z1pHVm5jbVZsTGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUhObGRDQjVZWGNvZG1Gc2RXVTZJRzUxYldKbGNpa2dlMXh1SUNBZ0lIUm9hWE11WDNsaGR5QTlJSFpoYkhWbE8xeHVJQ0FnSUhSb2FYTXVYMjVsWldSelZYQmtZWFJsSUQwZ2RISjFaVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCSmRITWdZM1Z5Y21WdWRDQmhibWRzWlNCaGNtOTFibVFnV0NCaGVHbHpMQ0JwYmlCa1pXZHlaV1V1WEc0Z0lDQXFMMXh1SUNCd2NtOTBaV04wWldRZ1gzQnBkR05vT2lCdWRXMWlaWEk3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWwwY3lCamRYSnlaVzUwSUdGdVoyeGxJR0Z5YjNWdVpDQllJR0Y0YVhNc0lHbHVJR1JsWjNKbFpTNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5Qm5aWFFnY0dsMFkyZ29LVG9nYm5WdFltVnlJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY0dsMFkyZzdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nU1hSeklHTjFjbkpsYm5RZ1lXNW5iR1VnWVhKdmRXNWtJRmdnWVhocGN5d2dhVzRnWkdWbmNtVmxMbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJSE5sZENCd2FYUmphQ2gyWVd4MVpUb2diblZ0WW1WeUtTQjdYRzRnSUNBZ2RHaHBjeTVmY0dsMFkyZ2dQU0IyWVd4MVpUdGNiaUFnSUNCMGFHbHpMbDl1WldWa2MxVndaR0YwWlNBOUlIUnlkV1U3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UzQmxZMmxtYVdWeklIUm9ZWFFnWVc1bmJHVnpJRzVsWldRZ2RHOGdZbVVnWVhCd2JHbGxaQ0IwYnlCcGRITWdXMEJzYVc1cklHRndjR3hwWlhKZExseHVJQ0FnS2k5Y2JpQWdjSEp2ZEdWamRHVmtJRjl1WldWa2MxVndaR0YwWlRvZ1ltOXZiR1ZoYmp0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVjI5eWJHUWdjbTkwWVhScGIyNGdiMllnZEdobElHaGxZV1FnYVc0Z2FYUnpJSEpsYzNRZ2NHOXpaUzVjYmlBZ0lDb3ZYRzRnSUhCeWFYWmhkR1VnWDNKbGMzUklaV0ZrVjI5eWJHUlJkV0YwWlhKdWFXOXVPaUJVU0ZKRlJTNVJkV0YwWlhKdWFXOXVPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFaR1Z3Y21WallYUmxaQ0JWYzJVZ2UwQnNhVzVySUdkbGRFVjFiR1Z5ZlNCcGJuTjBaV0ZrTGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUdkbGRDQmxkV3hsY2lncE9pQlVTRkpGUlM1RmRXeGxjaUI3WEc0Z0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NkV1VrMU1iMjlyUVhRNklHVjFiR1Z5SUdseklHUmxjSEpsWTJGMFpXUXVJSFZ6WlNCblpYUkZkV3hsY2lncElHbHVjM1JsWVdRdUp5azdYRzVjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWlhSRmRXeGxjaWh1WlhjZ1ZFaFNSVVV1UlhWc1pYSW9LU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1EzSmxZWFJsSUdFZ2JtVjNJSHRBYkdsdWF5QldVazFNYjI5clFYUjlMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnYUhWdFlXNXZhV1FnUVNCN1FHeHBibXNnVmxKTlNIVnRZVzV2YVdSOVhHNGdJQ0FxSUVCd1lYSmhiU0JoY0hCc2FXVnlJRUVnZTBCc2FXNXJJRlpTVFV4dmIydEJkRUZ3Y0d4cFpYSjlYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdZMjl1YzNSeWRXTjBiM0lvYUhWdFlXNXZhV1E2SUZaU1RVaDFiV0Z1YjJsa0xDQmhjSEJzYVdWeU9pQldVazFNYjI5clFYUkJjSEJzYVdWeUtTQjdYRzRnSUNBZ2RHaHBjeTVvZFcxaGJtOXBaQ0E5SUdoMWJXRnViMmxrTzF4dUlDQWdJSFJvYVhNdVlYQndiR2xsY2lBOUlHRndjR3hwWlhJN1hHNWNiaUFnSUNCMGFHbHpMbDk1WVhjZ1BTQXdMakE3WEc0Z0lDQWdkR2hwY3k1ZmNHbDBZMmdnUFNBd0xqQTdYRzRnSUNBZ2RHaHBjeTVmYm1WbFpITlZjR1JoZEdVZ1BTQjBjblZsTzF4dVhHNGdJQ0FnZEdocGN5NWZjbVZ6ZEVobFlXUlhiM0pzWkZGMVlYUmxjbTVwYjI0Z1BTQjBhR2x6TG1kbGRFeHZiMnRCZEZkdmNteGtVWFZoZEdWeWJtbHZiaWh1WlhjZ1ZFaFNSVVV1VVhWaGRHVnlibWx2YmlncEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRZ2FYUnpJSGxoZHkxd2FYUmphQ0JoYm1kc1pYTWdZWE1nWVc0Z1lFVjFiR1Z5WUM1Y2JpQWdJQ29nUkc5bGN5Qk9UMVFnWTI5dWMybGtaWElnZTBCc2FXNXJJR1poWTJWR2NtOXVkSDA3SUdsMElISmxkSFZ5Ym5NZ1lFVjFiR1Z5S0RBc0lEQXNJREE3SUZ3aVdWaGFYQ0lwWUNCaWVTQmtaV1poZFd4MElISmxaMkZ5Wkd4bGMzTWdiMllnZEdobElHWmhZMlZHY205dWRDQjJZV3gxWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIUmhjbWRsZENCVWFHVWdkR0Z5WjJWMElHVjFiR1Z5WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nWjJWMFJYVnNaWElvZEdGeVoyVjBPaUJVU0ZKRlJTNUZkV3hsY2lrNklGUklVa1ZGTGtWMWJHVnlJSHRjYmlBZ0lDQnlaWFIxY200Z2RHRnlaMlYwTG5ObGRDaFVTRkpGUlM1TllYUm9WWFJwYkhNdVJFVkhNbEpCUkNBcUlIUm9hWE11WDNCcGRHTm9MQ0JVU0ZKRlJTNU5ZWFJvVlhScGJITXVSRVZITWxKQlJDQXFJSFJvYVhNdVgzbGhkeXdnTUM0d0xDQW5XVmhhSnlrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMjl3ZVNCMGFHVWdaMmwyWlc0Z2UwQnNhVzVySUZaU1RVeHZiMnRCZEgwZ2FXNTBieUIwYUdseklHOXVaUzVjYmlBZ0lDb2dlMEJzYVc1cklHaDFiV0Z1YjJsa2ZTQnRkWE4wSUdKbElITmhiV1VnWVhNZ2RHaGxJSE52ZFhKalpTQnZibVV1WEc0Z0lDQXFJSHRBYkdsdWF5QmhjSEJzYVdWeWZTQjNhV3hzSUhKbFptVnlaVzVqWlNCMGFHVWdjMkZ0WlNCcGJuTjBZVzVqWlNCaGN5QjBhR1VnYzI5MWNtTmxJRzl1WlM1Y2JpQWdJQ29nUUhCaGNtRnRJSE52ZFhKalpTQlVhR1VnZTBCc2FXNXJJRlpTVFV4dmIydEJkSDBnZVc5MUlIZGhiblFnZEc4Z1kyOXdlVnh1SUNBZ0tpQkFjbVYwZFhKdWN5QjBhR2x6WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nWTI5d2VTaHpiM1Z5WTJVNklGWlNUVXh2YjJ0QmRDazZJSFJvYVhNZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG1oMWJXRnViMmxrSUNFOVBTQnpiM1Z5WTJVdWFIVnRZVzV2YVdRcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblZsSk5URzl2YTBGME9pQm9kVzFoYm05cFpDQnRkWE4wSUdKbElITmhiV1VnYVc0Z2IzSmtaWElnZEc4Z1kyOXdlU2NwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdWIyWm1jMlYwUm5KdmJVaGxZV1JDYjI1bExtTnZjSGtvYzI5MWNtTmxMbTltWm5ObGRFWnliMjFJWldGa1FtOXVaU2s3WEc0Z0lDQWdkR2hwY3k1aGNIQnNhV1Z5SUQwZ2MyOTFjbU5sTG1Gd2NHeHBaWEk3WEc0Z0lDQWdkR2hwY3k1aGRYUnZWWEJrWVhSbElEMGdjMjkxY21ObExtRjFkRzlWY0dSaGRHVTdYRzRnSUNBZ2RHaHBjeTUwWVhKblpYUWdQU0J6YjNWeVkyVXVkR0Z5WjJWME8xeHVJQ0FnSUhSb2FYTXVabUZqWlVaeWIyNTBMbU52Y0hrb2MyOTFjbU5sTG1aaFkyVkdjbTl1ZENrN1hHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJR0VnWTJ4dmJtVWdiMllnZEdocGN5QjdRR3hwYm1zZ1ZsSk5URzl2YTBGMGZTNWNiaUFnSUNvZ1RtOTBaU0IwYUdGMElIdEFiR2x1YXlCb2RXMWhibTlwWkgwZ1lXNWtJSHRBYkdsdWF5QmhjSEJzYVdWeWZTQjNhV3hzSUhKbFptVnlaVzVqWlNCMGFHVWdjMkZ0WlNCcGJuTjBZVzVqWlNCaGN5QjBhR2x6SUc5dVpTNWNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ1EyOXdhV1ZrSUh0QWJHbHVheUJXVWsxTWIyOXJRWFI5WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nWTJ4dmJtVW9LVG9nVmxKTlRHOXZhMEYwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZaU1RVeHZiMnRCZENoMGFHbHpMbWgxYldGdWIybGtMQ0IwYUdsekxtRndjR3hwWlhJcExtTnZjSGtvZEdocGN5azdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WelpYUWdkR2hsSUd4dmIydEJkQ0JrYVhKbFkzUnBiMjRnS0hsaGR5QmhibVFnY0dsMFkyZ3BJSFJ2SUhSb1pTQnBibWwwYVdGc0lHUnBjbVZqZEdsdmJpNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QnlaWE5sZENncE9pQjJiMmxrSUh0Y2JpQWdJQ0IwYUdsekxsOTVZWGNnUFNBd0xqQTdYRzRnSUNBZ2RHaHBjeTVmY0dsMFkyZ2dQU0F3TGpBN1hHNGdJQ0FnZEdocGN5NWZibVZsWkhOVmNHUmhkR1VnUFNCMGNuVmxPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVkbGRDQnBkSE1nYkc5dmEwRjBJSEJ2YzJsMGFXOXVJR2x1SUhkdmNteGtJR052YjNKa2FXNWhkR1V1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCMFlYSm5aWFFnUVNCMFlYSm5aWFFnWUZSSVVrVkZMbFpsWTNSdmNqTmdYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdaMlYwVEc5dmEwRjBWMjl5YkdSUWIzTnBkR2x2YmloMFlYSm5aWFE2SUZSSVVrVkZMbFpsWTNSdmNqTXBPaUJVU0ZKRlJTNVdaV04wYjNJeklIdGNiaUFnSUNCamIyNXpkQ0JvWldGa0lEMGdkR2hwY3k1b2RXMWhibTlwWkM1blpYUlNZWGRDYjI1bFRtOWtaU2duYUdWaFpDY3BJVHRjYmx4dUlDQWdJSEpsZEhWeWJpQjBZWEpuWlhRdVkyOXdlU2gwYUdsekxtOW1abk5sZEVaeWIyMUlaV0ZrUW05dVpTa3VZWEJ3YkhsTllYUnlhWGcwS0dobFlXUXViV0YwY21sNFYyOXliR1FwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFZGxkQ0JwZEhNZ2JHOXZhMEYwSUhKdmRHRjBhVzl1SUdsdUlIZHZjbXhrSUdOdmIzSmthVzVoZEdVdVhHNGdJQ0FxSUVSdlpYTWdUazlVSUdOdmJuTnBaR1Z5SUh0QWJHbHVheUJtWVdObFJuSnZiblI5TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2RHRnlaMlYwSUVFZ2RHRnlaMlYwSUdCVVNGSkZSUzVSZFdGMFpYSnVhVzl1WUZ4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUdkbGRFeHZiMnRCZEZkdmNteGtVWFZoZEdWeWJtbHZiaWgwWVhKblpYUTZJRlJJVWtWRkxsRjFZWFJsY201cGIyNHBPaUJVU0ZKRlJTNVJkV0YwWlhKdWFXOXVJSHRjYmlBZ0lDQmpiMjV6ZENCb1pXRmtJRDBnZEdocGN5NW9kVzFoYm05cFpDNW5aWFJTWVhkQ2IyNWxUbTlrWlNnbmFHVmhaQ2NwSVR0Y2JseHVJQ0FnSUhKbGRIVnliaUJuWlhSWGIzSnNaRkYxWVhSbGNtNXBiMjVNYVhSbEtHaGxZV1FzSUhSaGNtZGxkQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1IyVjBJR0VnY1hWaGRHVnlibWx2YmlCMGFHRjBJSEp2ZEdGMFpYTWdkR2hsSUN0YUlIVnVhWFFnZG1WamRHOXlJRzltSUhSb1pTQm9kVzFoYm05cFpDQklaV0ZrSUhSdklIUm9aU0I3UUd4cGJtc2dabUZqWlVaeWIyNTBmU0JrYVhKbFkzUnBiMjR1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCMFlYSm5aWFFnUVNCMFlYSm5aWFFnWUZSSVVrVkZMbEYxWVhSbGNtNXBiMjVnWEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nWjJWMFJtRmpaVVp5YjI1MFVYVmhkR1Z5Ym1sdmJpaDBZWEpuWlhRNklGUklVa1ZGTGxGMVlYUmxjbTVwYjI0cE9pQlVTRkpGUlM1UmRXRjBaWEp1YVc5dUlIdGNiaUFnSUNCcFppQW9kR2hwY3k1bVlXTmxSbkp2Ym5RdVpHbHpkR0Z1WTJWVWIxTnhkV0Z5WldRb1ZrVkRNMTlRVDFOSlZFbFdSVjlhS1NBOElEQXVNREVwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwWVhKblpYUXVZMjl3ZVNoMGFHbHpMbDl5WlhOMFNHVmhaRmR2Y214a1VYVmhkR1Z5Ym1sdmJpa3VhVzUyWlhKMEtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnVzJaaFkyVkdjbTl1ZEVGNmFXMTFkR2dzSUdaaFkyVkdjbTl1ZEVGc2RHbDBkV1JsWFNBOUlHTmhiR05CZW1sdGRYUm9RV3gwYVhSMVpHVW9kR2hwY3k1bVlXTmxSbkp2Ym5RcE8xeHVJQ0FnSUY5bGRXeGxja0V1YzJWMEtEQXVNQ3dnTUM0MUlDb2dUV0YwYUM1UVNTQXJJR1poWTJWR2NtOXVkRUY2YVcxMWRHZ3NJR1poWTJWR2NtOXVkRUZzZEdsMGRXUmxMQ0FuV1ZwWUp5azdYRzVjYmlBZ0lDQnlaWFIxY200Z2RHRnlaMlYwTG5ObGRFWnliMjFGZFd4bGNpaGZaWFZzWlhKQktTNXdjbVZ0ZFd4MGFYQnNlU2hmY1hWaGRFUXVZMjl3ZVNoMGFHbHpMbDl5WlhOMFNHVmhaRmR2Y214a1VYVmhkR1Z5Ym1sdmJpa3VhVzUyWlhKMEtDa3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVkbGRDQnBkSE1nVEc5dmEwRjBJR1JwY21WamRHbHZiaUJwYmlCM2IzSnNaQ0JqYjI5eVpHbHVZWFJsTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2RHRnlaMlYwSUVFZ2RHRnlaMlYwSUdCVVNGSkZSUzVXWldOMGIzSXpZRnh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJR2RsZEV4dmIydEJkRmR2Y214a1JHbHlaV04wYVc5dUtIUmhjbWRsZERvZ1ZFaFNSVVV1Vm1WamRHOXlNeWs2SUZSSVVrVkZMbFpsWTNSdmNqTWdlMXh1SUNBZ0lIUm9hWE11WjJWMFRHOXZhMEYwVjI5eWJHUlJkV0YwWlhKdWFXOXVLRjl4ZFdGMFFpazdYRzRnSUNBZ2RHaHBjeTVuWlhSR1lXTmxSbkp2Ym5SUmRXRjBaWEp1YVc5dUtGOXhkV0YwUXlrN1hHNWNiaUFnSUNCeVpYUjFjbTRnZEdGeVoyVjBYRzRnSUNBZ0lDQXVZMjl3ZVNoV1JVTXpYMUJQVTBsVVNWWkZYMW9wWEc0Z0lDQWdJQ0F1WVhCd2JIbFJkV0YwWlhKdWFXOXVLRjl4ZFdGMFFpbGNiaUFnSUNBZ0lDNWhjSEJzZVZGMVlYUmxjbTVwYjI0b1gzRjFZWFJES1Z4dUlDQWdJQ0FnTG1Gd2NHeDVSWFZzWlhJb2RHaHBjeTVuWlhSRmRXeGxjaWhmWlhWc1pYSkJLU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVjBJR2wwY3lCc2IyOXJRWFFnZEdGeVoyVjBJSEJ2YzJsMGFXOXVMbHh1SUNBZ0tseHVJQ0FnS2lCT2IzUmxJSFJvWVhRZ2FYUnpJSEpsYzNWc2RDQjNhV3hzSUdKbElHbHVjM1JoYm5Sc2VTQnZkbVZ5ZDNKcGRIUmxiaUJwWmlCN1FHeHBibXNnVmxKTlRHOXZhMEYwU0dWaFpDNWhkWFJ2VlhCa1lYUmxmU0JwY3lCbGJtRmliR1ZrTGx4dUlDQWdLbHh1SUNBZ0tpQkpaaUI1YjNVZ2QyRnVkQ0IwYnlCMGNtRmpheUJoYmlCdlltcGxZM1FnWTI5dWRHbHVkVzkxYzJ4NUxDQjViM1VnYldsbmFIUWdkMkZ1ZENCMGJ5QjFjMlVnZTBCc2FXNXJJSFJoY21kbGRIMGdhVzV6ZEdWaFpDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSEJ2YzJsMGFXOXVJRUVnZEdGeVoyVjBJSEJ2YzJsMGFXOXVMQ0JwYmlCM2IzSnNaQ0J6Y0dGalpWeHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklHeHZiMnRCZENod2IzTnBkR2x2YmpvZ1ZFaFNSVVV1Vm1WamRHOXlNeWs2SUhadmFXUWdlMXh1SUNBZ0lDOHZJRXh2YjJzZ1lYUWdaR2x5WldOMGFXOXVJR2x1SUd4dlkyRnNJR052YjNKa2FXNWhkR1ZjYmlBZ0lDQmpiMjV6ZENCb1pXRmtVbTkwUkdsbVprbHVkaUE5SUY5eGRXRjBRVnh1SUNBZ0lDQWdMbU52Y0hrb2RHaHBjeTVmY21WemRFaGxZV1JYYjNKc1pGRjFZWFJsY201cGIyNHBYRzRnSUNBZ0lDQXViWFZzZEdsd2JIa29jWFZoZEVsdWRtVnlkRU52YlhCaGRDaDBhR2x6TG1kbGRFeHZiMnRCZEZkdmNteGtVWFZoZEdWeWJtbHZiaWhmY1hWaGRFSXBLU2s3WEc0Z0lDQWdZMjl1YzNRZ2FHVmhaRkJ2Y3lBOUlIUm9hWE11WjJWMFRHOXZhMEYwVjI5eWJHUlFiM05wZEdsdmJpaGZkak5DS1R0Y2JpQWdJQ0JqYjI1emRDQnNiMjlyUVhSRWFYSWdQU0JmZGpORExtTnZjSGtvY0c5emFYUnBiMjRwTG5OMVlpaG9aV0ZrVUc5ektTNWhjSEJzZVZGMVlYUmxjbTVwYjI0b2FHVmhaRkp2ZEVScFptWkpibllwTG01dmNtMWhiR2w2WlNncE8xeHVYRzRnSUNBZ0x5OGdZMkZzWTNWc1lYUmxJR0Z1WjJ4bGMxeHVJQ0FnSUdOdmJuTjBJRnRoZW1sdGRYUm9Sbkp2YlN3Z1lXeDBhWFIxWkdWR2NtOXRYU0E5SUdOaGJHTkJlbWx0ZFhSb1FXeDBhWFIxWkdVb2RHaHBjeTVtWVdObFJuSnZiblFwTzF4dUlDQWdJR052Ym5OMElGdGhlbWx0ZFhSb1ZHOHNJR0ZzZEdsMGRXUmxWRzlkSUQwZ1kyRnNZMEY2YVcxMWRHaEJiSFJwZEhWa1pTaHNiMjlyUVhSRWFYSXBPMXh1SUNBZ0lHTnZibk4wSUhsaGR5QTlJSE5oYm1sMGFYcGxRVzVuYkdVb1lYcHBiWFYwYUZSdklDMGdZWHBwYlhWMGFFWnliMjBwTzF4dUlDQWdJR052Ym5OMElIQnBkR05vSUQwZ2MyRnVhWFJwZW1WQmJtZHNaU2hoYkhScGRIVmtaVVp5YjIwZ0xTQmhiSFJwZEhWa1pWUnZLVHNnTHk4Z2MzQnBibTVwYm1jZ0tERXNJREFzSURBcElFTkRWeUJoY205MWJtUWdXaUJoZUdseklHMWhhMlZ6SUhSb1pTQjJaV04wYjNJZ2JHOXZheUIxY0N3Z2QyaHBiR1VnYzNCcGJtNXBibWNnS0RBc0lEQXNJREVwSUVORFZ5QmhjbTkxYm1RZ1dDQmhlR2x6SUcxaGEyVnpJSFJvWlNCMlpXTjBiM0lnYkc5dmF5QmtiM2R1WEc1Y2JpQWdJQ0F2THlCaGNIQnNlU0JoYm1kc1pYTmNiaUFnSUNCMGFHbHpMbDk1WVhjZ1BTQlVTRkpGUlM1TllYUm9WWFJwYkhNdVVrRkVNa1JGUnlBcUlIbGhkenRjYmlBZ0lDQjBhR2x6TGw5d2FYUmphQ0E5SUZSSVVrVkZMazFoZEdoVmRHbHNjeTVTUVVReVJFVkhJQ29nY0dsMFkyZzdYRzVjYmlBZ0lDQjBhR2x6TGw5dVpXVmtjMVZ3WkdGMFpTQTlJSFJ5ZFdVN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWWEJrWVhSbElIUm9aU0JXVWsxTWIyOXJRWFJJWldGa0xseHVJQ0FnS2lCSlppQjdRR3hwYm1zZ1lYVjBiMVZ3WkdGMFpYMGdhWE1nWlc1aFlteGxaQ3dnZEdocGN5QjNhV3hzSUcxaGEyVWdhWFFnYkc5dmF5QmhkQ0IwYUdVZ2UwQnNhVzVySUhSaGNtZGxkSDB1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCa1pXeDBZU0JrWld4MFlWUnBiV1VzSUdsMElHbHpiaWQwSUhWelpXUWdkR2h2ZFdkb0xpQlpiM1VnWTJGdUlIVnpaU0IwYUdVZ2NHRnlZVzFsZEdWeUlHbG1JSGx2ZFNCM1lXNTBJSFJ2SUhWelpTQjBhR2x6SUdsdUlIbHZkWElnYjNkdUlHVjRkR1Z1WkdWa0lIdEFiR2x1YXlCV1VrMU1iMjlyUVhSOUxseHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklIVndaR0YwWlNoa1pXeDBZVG9nYm5WdFltVnlLVG9nZG05cFpDQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWRHRnlaMlYwSUNFOUlHNTFiR3dnSmlZZ2RHaHBjeTVoZFhSdlZYQmtZWFJsS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbXh2YjJ0QmRDaDBhR2x6TG5SaGNtZGxkQzVuWlhSWGIzSnNaRkJ2YzJsMGFXOXVLRjkyTTBFcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kR2hwY3k1ZmJtVmxaSE5WY0dSaGRHVXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgyNWxaV1J6VlhCa1lYUmxJRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQWdJSFJvYVhNdVlYQndiR2xsY2k1aGNIQnNlVmxoZDFCcGRHTm9LSFJvYVhNdVgzbGhkeXdnZEdocGN5NWZjR2wwWTJncE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElIc2dWbEpOU0hWdFlXNXZhV1FnZlNCbWNtOXRJQ2N1TGk5b2RXMWhibTlwWkNjN1hHNXBiWEJ2Y25RZ0tpQmhjeUJVU0ZKRlJTQm1jbTl0SUNkMGFISmxaU2M3WEc1cGJYQnZjblFnZEhsd1pTQjdJRlpTVFV4dmIydEJkRUZ3Y0d4cFpYSWdmU0JtY205dElDY3VMMVpTVFV4dmIydEJkRUZ3Y0d4cFpYSW5PMXh1YVcxd2IzSjBJSHNnVmxKTlRHOXZhMEYwVW1GdVoyVk5ZWEFnZlNCbWNtOXRJQ2N1TDFaU1RVeHZiMnRCZEZKaGJtZGxUV0Z3Snp0Y2JtbHRjRzl5ZENCN0lHTmhiR05CZW1sdGRYUm9RV3gwYVhSMVpHVWdmU0JtY205dElDY3VMM1YwYVd4ekwyTmhiR05CZW1sdGRYUm9RV3gwYVhSMVpHVW5PMXh1YVcxd2IzSjBJSHNnWjJWMFYyOXliR1JSZFdGMFpYSnVhVzl1VEdsMFpTQjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekwyZGxkRmR2Y214a1VYVmhkR1Z5Ym1sdmJreHBkR1VuTzF4dVhHNWpiMjV6ZENCV1JVTXpYMUJQVTBsVVNWWkZYMW9nUFNCdVpYY2dWRWhTUlVVdVZtVmpkRzl5TXlnd0xqQXNJREF1TUN3Z01TNHdLVHRjYmx4dVkyOXVjM1FnWDNGMVlYUkJJRDBnYm1WM0lGUklVa1ZGTGxGMVlYUmxjbTVwYjI0b0tUdGNibU52Ym5OMElGOXhkV0YwUWlBOUlHNWxkeUJVU0ZKRlJTNVJkV0YwWlhKdWFXOXVLQ2s3WEc1amIyNXpkQ0JmWlhWc1pYSkJJRDBnYm1WM0lGUklVa1ZGTGtWMWJHVnlLREF1TUN3Z01DNHdMQ0F3TGpBc0lDZFpXRm9uS1R0Y2JseHVMeW9xWEc0Z0tpQkJJR05zWVhOeklIUm9ZWFFnWVhCd2JHbGxjeUJsZVdVZ1oyRjZaU0JrYVhKbFkzUnBiMjV6SUhSdklHRWdWbEpOTGx4dUlDb2dTWFFnZDJsc2JDQmlaU0IxYzJWa0lHSjVJSHRBYkdsdWF5QldVazFNYjI5clFYUjlMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVmxKTlRHOXZhMEYwUW05dVpVRndjR3hwWlhJZ2FXMXdiR1Z0Wlc1MGN5QldVazFNYjI5clFYUkJjSEJzYVdWeUlIdGNiaUFnTHlvcVhHNGdJQ0FxSUZKbGNISmxjMlZ1ZENCcGRITWdkSGx3WlNCdlppQmhjSEJzYVdWeUxseHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklITjBZWFJwWXlCeVpXRmtiMjVzZVNCMGVYQmxJRDBnSjJKdmJtVW5PMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpkSE1nWVhOemIyTnBZWFJsWkNCN1FHeHBibXNnVmxKTlNIVnRZVzV2YVdSOUxseHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHaDFiV0Z1YjJsa09pQldVazFJZFcxaGJtOXBaRHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRU0I3UUd4cGJtc2dWbEpOVEc5dmEwRjBVbUZ1WjJWTllYQjlJR1p2Y2lCb2IzSnBlbTl1ZEdGc0lHbHVkMkZ5WkNCdGIzWmxiV1Z1ZEM0Z1ZHaGxJR3hsWm5RZ1pYbGxJRzF2ZG1WeklISnBaMmgwTGlCVWFHVWdjbWxuYUhRZ1pYbGxJRzF2ZG1WeklHeGxablF1WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nY21GdVoyVk5ZWEJJYjNKcGVtOXVkR0ZzU1c1dVpYSTZJRlpTVFV4dmIydEJkRkpoYm1kbFRXRndPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJJSHRBYkdsdWF5QldVazFNYjI5clFYUlNZVzVuWlUxaGNIMGdabTl5SUdodmNtbDZiMjUwWVd3Z2IzVjBkMkZ5WkNCdGIzWmxiV1Z1ZEM0Z1ZHaGxJR3hsWm5RZ1pYbGxJRzF2ZG1WeklHeGxablF1SUZSb1pTQnlhV2RvZENCbGVXVWdiVzkyWlhNZ2NtbG5hSFF1WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nY21GdVoyVk5ZWEJJYjNKcGVtOXVkR0ZzVDNWMFpYSTZJRlpTVFV4dmIydEJkRkpoYm1kbFRXRndPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJJSHRBYkdsdWF5QldVazFNYjI5clFYUlNZVzVuWlUxaGNIMGdabTl5SUhabGNuUnBZMkZzSUdSdmQyNTNZWEprSUcxdmRtVnRaVzUwTGlCQ2IzUm9JR1Y1WlhNZ2JXOTJaU0IxY0hkaGNtUnpMbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJSEpoYm1kbFRXRndWbVZ5ZEdsallXeEViM2R1T2lCV1VrMU1iMjlyUVhSU1lXNW5aVTFoY0R0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUVNCN1FHeHBibXNnVmxKTlRHOXZhMEYwVW1GdVoyVk5ZWEI5SUdadmNpQjJaWEowYVdOaGJDQjFjSGRoY21RZ2JXOTJaVzFsYm5RdUlFSnZkR2dnWlhsbGN5QnRiM1psSUdSdmQyNTNZWEprY3k1Y2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCeVlXNW5aVTFoY0ZabGNuUnBZMkZzVlhBNklGWlNUVXh2YjJ0QmRGSmhibWRsVFdGd08xeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVWdabkp2Ym5RZ1pHbHlaV04wYVc5dUlHOW1JSFJvWlNCbVlXTmxMbHh1SUNBZ0tpQkpiblJsYm1SbFpDQjBieUJpWlNCMWMyVmtJR1p2Y2lCV1VrMGdNQzR3SUdOdmJYQmhkQ0FvVmxKTklEQXVNQ0J0YjJSbGJITWdZWEpsSUdaaFkybHVaeUJhTFNCcGJuTjBaV0ZrSUc5bUlGb3JLUzVjYmlBZ0lDb2dXVzkxSUhWemRXRnNiSGtnWkc5dUozUWdkMkZ1ZENCMGJ5QjBiM1ZqYUNCMGFHbHpMbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJR1poWTJWR2NtOXVkRG9nVkVoU1JVVXVWbVZqZEc5eU16dGNibHh1SUNBdktpcGNiaUFnSUNvZ1ZHaGxJSEpsYzNRZ2NYVmhkR1Z5Ym1sdmJpQnZaaUJNWldaMFJYbGxJR0p2Ym1VdVhHNGdJQ0FxTDF4dUlDQndjbWwyWVhSbElGOXlaWE4wVVhWaGRFeGxablJGZVdVNklGUklVa1ZGTGxGMVlYUmxjbTVwYjI0N1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pTQnlaWE4wSUhGMVlYUmxjbTVwYjI0Z2IyWWdVbWxuYUhSRmVXVWdZbTl1WlM1Y2JpQWdJQ292WEc0Z0lIQnlhWFpoZEdVZ1gzSmxjM1JSZFdGMFVtbG5hSFJGZVdVNklGUklVa1ZGTGxGMVlYUmxjbTVwYjI0N1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pTQjNiM0pzWkMxemNHRmpaU0J5WlhOMElIRjFZWFJsY201cGIyNGdiMllnZEdobElIQmhjbVZ1ZENCdlppQjBhR1VnYUhWdFlXNXZhV1FnVEdWbWRFVjVaUzVjYmlBZ0lDb3ZYRzRnSUhCeWFYWmhkR1VnWDNKbGMzUk1aV1owUlhsbFVHRnlaVzUwVjI5eWJHUlJkV0YwT2lCVVNGSkZSUzVSZFdGMFpYSnVhVzl1TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ2QyOXliR1F0YzNCaFkyVWdjbVZ6ZENCeGRXRjBaWEp1YVc5dUlHOW1JSFJvWlNCd1lYSmxiblFnYjJZZ2RHaGxJR2gxYldGdWIybGtJRkpwWjJoMFJYbGxMbHh1SUNBZ0tpOWNiaUFnY0hKcGRtRjBaU0JmY21WemRGSnBaMmgwUlhsbFVHRnlaVzUwVjI5eWJHUlJkV0YwT2lCVVNGSkZSUzVSZFdGMFpYSnVhVzl1TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJEY21WaGRHVWdZU0J1WlhjZ2UwQnNhVzVySUZaU1RVeHZiMnRCZEVKdmJtVkJjSEJzYVdWeWZTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJR2gxYldGdWIybGtJRUVnZTBCc2FXNXJJRlpTVFVoMWJXRnViMmxrZlZ4dUlDQWdLaUJBY0dGeVlXMGdjbUZ1WjJWTllYQkliM0pwZW05dWRHRnNTVzV1WlhJZ1FTQjdRR3hwYm1zZ1ZsSk5URzl2YTBGMFVtRnVaMlZOWVhCOUlIVnpaV1FnWm05eUlHbHVibVZ5SUhSeVlXNXpkbVZ5YzJVZ1pHbHlaV04wYVc5dVhHNGdJQ0FxSUVCd1lYSmhiU0J5WVc1blpVMWhjRWh2Y21sNmIyNTBZV3hQZFhSbGNpQkJJSHRBYkdsdWF5QldVazFNYjI5clFYUlNZVzVuWlUxaGNIMGdkWE5sWkNCbWIzSWdiM1YwWlhJZ2RISmhibk4yWlhKelpTQmthWEpsWTNScGIyNWNiaUFnSUNvZ1FIQmhjbUZ0SUhKaGJtZGxUV0Z3Vm1WeWRHbGpZV3hFYjNkdUlFRWdlMEJzYVc1cklGWlNUVXh2YjJ0QmRGSmhibWRsVFdGd2ZTQjFjMlZrSUdadmNpQmtiM2R1SUdScGNtVmpkR2x2Ymx4dUlDQWdLaUJBY0dGeVlXMGdjbUZ1WjJWTllYQldaWEowYVdOaGJGVndJRUVnZTBCc2FXNXJJRlpTVFV4dmIydEJkRkpoYm1kbFRXRndmU0IxYzJWa0lHWnZjaUIxY0NCa2FYSmxZM1JwYjI1Y2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCamIyNXpkSEoxWTNSdmNpaGNiaUFnSUNCb2RXMWhibTlwWkRvZ1ZsSk5TSFZ0WVc1dmFXUXNYRzRnSUNBZ2NtRnVaMlZOWVhCSWIzSnBlbTl1ZEdGc1NXNXVaWEk2SUZaU1RVeHZiMnRCZEZKaGJtZGxUV0Z3TEZ4dUlDQWdJSEpoYm1kbFRXRndTRzl5YVhwdmJuUmhiRTkxZEdWeU9pQldVazFNYjI5clFYUlNZVzVuWlUxaGNDeGNiaUFnSUNCeVlXNW5aVTFoY0ZabGNuUnBZMkZzUkc5M2Jqb2dWbEpOVEc5dmEwRjBVbUZ1WjJWTllYQXNYRzRnSUNBZ2NtRnVaMlZOWVhCV1pYSjBhV05oYkZWd09pQldVazFNYjI5clFYUlNZVzVuWlUxaGNDeGNiaUFnS1NCN1hHNGdJQ0FnZEdocGN5NW9kVzFoYm05cFpDQTlJR2gxYldGdWIybGtPMXh1WEc0Z0lDQWdkR2hwY3k1eVlXNW5aVTFoY0VodmNtbDZiMjUwWVd4SmJtNWxjaUE5SUhKaGJtZGxUV0Z3U0c5eWFYcHZiblJoYkVsdWJtVnlPMXh1SUNBZ0lIUm9hWE11Y21GdVoyVk5ZWEJJYjNKcGVtOXVkR0ZzVDNWMFpYSWdQU0J5WVc1blpVMWhjRWh2Y21sNmIyNTBZV3hQZFhSbGNqdGNiaUFnSUNCMGFHbHpMbkpoYm1kbFRXRndWbVZ5ZEdsallXeEViM2R1SUQwZ2NtRnVaMlZOWVhCV1pYSjBhV05oYkVSdmQyNDdYRzRnSUNBZ2RHaHBjeTV5WVc1blpVMWhjRlpsY25ScFkyRnNWWEFnUFNCeVlXNW5aVTFoY0ZabGNuUnBZMkZzVlhBN1hHNWNiaUFnSUNCMGFHbHpMbVpoWTJWR2NtOXVkQ0E5SUc1bGR5QlVTRkpGUlM1V1pXTjBiM0l6S0RBdU1Dd2dNQzR3TENBeExqQXBPMXh1WEc0Z0lDQWdMeThnYzJWMElISmxjM1FnY1hWaGRHVnlibWx2Ym5OY2JpQWdJQ0IwYUdsekxsOXlaWE4wVVhWaGRFeGxablJGZVdVZ1BTQnVaWGNnVkVoU1JVVXVVWFZoZEdWeWJtbHZiaWdwTzF4dUlDQWdJSFJvYVhNdVgzSmxjM1JSZFdGMFVtbG5hSFJGZVdVZ1BTQnVaWGNnVkVoU1JVVXVVWFZoZEdWeWJtbHZiaWdwTzF4dUlDQWdJSFJvYVhNdVgzSmxjM1JNWldaMFJYbGxVR0Z5Wlc1MFYyOXliR1JSZFdGMElEMGdibVYzSUZSSVVrVkZMbEYxWVhSbGNtNXBiMjRvS1R0Y2JpQWdJQ0IwYUdsekxsOXlaWE4wVW1sbmFIUkZlV1ZRWVhKbGJuUlhiM0pzWkZGMVlYUWdQU0J1WlhjZ1ZFaFNSVVV1VVhWaGRHVnlibWx2YmlncE8xeHVYRzRnSUNBZ1kyOXVjM1FnYkdWbWRFVjVaU0E5SUhSb2FYTXVhSFZ0WVc1dmFXUXVaMlYwVW1GM1FtOXVaVTV2WkdVb0oyeGxablJGZVdVbktUdGNiaUFnSUNCamIyNXpkQ0J5YVdkb2RFVjVaU0E5SUhSb2FYTXVhSFZ0WVc1dmFXUXVaMlYwVW1GM1FtOXVaVTV2WkdVb0ozSnBaMmgwUlhsbEp5azdYRzVjYmlBZ0lDQnBaaUFvYkdWbWRFVjVaU2tnZTF4dUlDQWdJQ0FnZEdocGN5NWZjbVZ6ZEZGMVlYUk1aV1owUlhsbExtTnZjSGtvYkdWbWRFVjVaUzV4ZFdGMFpYSnVhVzl1S1R0Y2JpQWdJQ0FnSUdkbGRGZHZjbXhrVVhWaGRHVnlibWx2Ymt4cGRHVW9iR1ZtZEVWNVpTNXdZWEpsYm5RaExDQjBhR2x6TGw5eVpYTjBUR1ZtZEVWNVpWQmhjbVZ1ZEZkdmNteGtVWFZoZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tISnBaMmgwUlhsbEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5eVpYTjBVWFZoZEZKcFoyaDBSWGxsTG1OdmNIa29jbWxuYUhSRmVXVXVjWFZoZEdWeWJtbHZiaWs3WEc0Z0lDQWdJQ0JuWlhSWGIzSnNaRkYxWVhSbGNtNXBiMjVNYVhSbEtISnBaMmgwUlhsbExuQmhjbVZ1ZENFc0lIUm9hWE11WDNKbGMzUlNhV2RvZEVWNVpWQmhjbVZ1ZEZkdmNteGtVWFZoZENrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRndjR3g1SUhSb1pTQnBibkIxZENCaGJtZHNaU0IwYnlCcGRITWdZWE56YjJOcFlYUmxaQ0JXVWswZ2JXOWtaV3d1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCNVlYY2dVbTkwWVhScGIyNGdZWEp2ZFc1a0lGa2dZWGhwY3l3Z2FXNGdaR1ZuY21WbFhHNGdJQ0FxSUVCd1lYSmhiU0J3YVhSamFDQlNiM1JoZEdsdmJpQmhjbTkxYm1RZ1dDQmhlR2x6TENCcGJpQmtaV2R5WldWY2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCaGNIQnNlVmxoZDFCcGRHTm9LSGxoZHpvZ2JuVnRZbVZ5TENCd2FYUmphRG9nYm5WdFltVnlLVG9nZG05cFpDQjdYRzRnSUNBZ1kyOXVjM1FnYkdWbWRFVjVaU0E5SUhSb2FYTXVhSFZ0WVc1dmFXUXVaMlYwVW1GM1FtOXVaVTV2WkdVb0oyeGxablJGZVdVbktUdGNiaUFnSUNCamIyNXpkQ0J5YVdkb2RFVjVaU0E5SUhSb2FYTXVhSFZ0WVc1dmFXUXVaMlYwVW1GM1FtOXVaVTV2WkdVb0ozSnBaMmgwUlhsbEp5azdYRzRnSUNBZ1kyOXVjM1FnYkdWbWRFVjVaVTV2Y20xaGJHbDZaV1FnUFNCMGFHbHpMbWgxYldGdWIybGtMbWRsZEU1dmNtMWhiR2w2WldSQ2IyNWxUbTlrWlNnbmJHVm1kRVY1WlNjcE8xeHVJQ0FnSUdOdmJuTjBJSEpwWjJoMFJYbGxUbTl5YldGc2FYcGxaQ0E5SUhSb2FYTXVhSFZ0WVc1dmFXUXVaMlYwVG05eWJXRnNhWHBsWkVKdmJtVk9iMlJsS0NkeWFXZG9kRVY1WlNjcE8xeHVJQ0FnSUM4dklHeGxablJjYmlBZ0lDQnBaaUFvYkdWbWRFVjVaU2tnZTF4dUlDQWdJQ0FnYVdZZ0tIQnBkR05vSUR3Z01DNHdLU0I3WEc0Z0lDQWdJQ0FnSUY5bGRXeGxja0V1ZUNBOUlDMVVTRkpGUlM1TllYUm9WWFJwYkhNdVJFVkhNbEpCUkNBcUlIUm9hWE11Y21GdVoyVk5ZWEJXWlhKMGFXTmhiRVJ2ZDI0dWJXRndLQzF3YVhSamFDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmZaWFZzWlhKQkxuZ2dQU0JVU0ZKRlJTNU5ZWFJvVlhScGJITXVSRVZITWxKQlJDQXFJSFJvYVhNdWNtRnVaMlZOWVhCV1pYSjBhV05oYkZWd0xtMWhjQ2h3YVhSamFDazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoNVlYY2dQQ0F3TGpBcElIdGNiaUFnSUNBZ0lDQWdYMlYxYkdWeVFTNTVJRDBnTFZSSVVrVkZMazFoZEdoVmRHbHNjeTVFUlVjeVVrRkVJQ29nZEdocGN5NXlZVzVuWlUxaGNFaHZjbWw2YjI1MFlXeEpibTVsY2k1dFlYQW9MWGxoZHlrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCZlpYVnNaWEpCTG5rZ1BTQlVTRkpGUlM1TllYUm9WWFJwYkhNdVJFVkhNbEpCUkNBcUlIUm9hWE11Y21GdVoyVk5ZWEJJYjNKcGVtOXVkR0ZzVDNWMFpYSXViV0Z3S0hsaGR5azdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJRjl4ZFdGMFFTNXpaWFJHY205dFJYVnNaWElvWDJWMWJHVnlRU2s3WEc0Z0lDQWdJQ0IwYUdsekxsOW5aWFJYYjNKc1pFWmhZMlZHY205dWRGRjFZWFFvWDNGMVlYUkNLVHRjYmx4dUlDQWdJQ0FnTHk4Z1gzRjFZWFJDSUNvZ1gzRjFZWFJCSUNvZ1gzRjFZWFJDWGkweFhHNGdJQ0FnSUNBdkx5QjNhR1Z5WlNCZmNYVmhkRUVnYVhNZ1RHOXZhMEYwSUhKdmRHRjBhVzl1WEc0Z0lDQWdJQ0F2THlCaGJtUWdYM0YxWVhSQ0lHbHpJSGR2Y214a1JtRmpaVVp5YjI1MFVYVmhkRnh1SUNBZ0lDQWdiR1ZtZEVWNVpVNXZjbTFoYkdsNlpXUWhMbkYxWVhSbGNtNXBiMjR1WTI5d2VTaGZjWFZoZEVJcExtMTFiSFJwY0d4NUtGOXhkV0YwUVNrdWJYVnNkR2x3Ykhrb1gzRjFZWFJDTG1sdWRtVnlkQ2dwS1R0Y2JseHVJQ0FnSUNBZ1gzRjFZWFJCTG1OdmNIa29kR2hwY3k1ZmNtVnpkRXhsWm5SRmVXVlFZWEpsYm5SWGIzSnNaRkYxWVhRcE8xeHVYRzRnSUNBZ0lDQXZMeUJmY1hWaGRFRmVMVEVnS2lCc1pXWjBSWGxsVG05eWJXRnNhWHBsWkM1eGRXRjBaWEp1YVc5dUlDb2dYM0YxWVhSQklDb2djbVZ6ZEZGMVlYUk1aV1owUlhsbFhHNGdJQ0FnSUNBdkx5QjNhR1Z5WlNCZmNYVmhkRUVnYVhNZ2NtVnpkRXhsWm5SRmVXVlFZWEpsYm5SWGIzSnNaRkYxWVhSY2JpQWdJQ0FnSUd4bFpuUkZlV1V1Y1hWaGRHVnlibWx2Ymx4dUlDQWdJQ0FnSUNBdVkyOXdlU2hzWldaMFJYbGxUbTl5YldGc2FYcGxaQ0V1Y1hWaGRHVnlibWx2YmlsY2JpQWdJQ0FnSUNBZ0xtMTFiSFJwY0d4NUtGOXhkV0YwUVNsY2JpQWdJQ0FnSUNBZ0xuQnlaVzExYkhScGNHeDVLRjl4ZFdGMFFTNXBiblpsY25Rb0tTbGNiaUFnSUNBZ0lDQWdMbTExYkhScGNHeDVLSFJvYVhNdVgzSmxjM1JSZFdGMFRHVm1kRVY1WlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z2NtbG5hSFJjYmlBZ0lDQnBaaUFvY21sbmFIUkZlV1VwSUh0Y2JpQWdJQ0FnSUdsbUlDaHdhWFJqYUNBOElEQXVNQ2tnZTF4dUlDQWdJQ0FnSUNCZlpYVnNaWEpCTG5nZ1BTQXRWRWhTUlVVdVRXRjBhRlYwYVd4ekxrUkZSekpTUVVRZ0tpQjBhR2x6TG5KaGJtZGxUV0Z3Vm1WeWRHbGpZV3hFYjNkdUxtMWhjQ2d0Y0dsMFkyZ3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdYMlYxYkdWeVFTNTRJRDBnVkVoU1JVVXVUV0YwYUZWMGFXeHpMa1JGUnpKU1FVUWdLaUIwYUdsekxuSmhibWRsVFdGd1ZtVnlkR2xqWVd4VmNDNXRZWEFvY0dsMFkyZ3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2VXRjNJRHdnTUM0d0tTQjdYRzRnSUNBZ0lDQWdJRjlsZFd4bGNrRXVlU0E5SUMxVVNGSkZSUzVOWVhSb1ZYUnBiSE11UkVWSE1sSkJSQ0FxSUhSb2FYTXVjbUZ1WjJWTllYQkliM0pwZW05dWRHRnNUM1YwWlhJdWJXRndLQzE1WVhjcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1gyVjFiR1Z5UVM1NUlEMGdWRWhTUlVVdVRXRjBhRlYwYVd4ekxrUkZSekpTUVVRZ0tpQjBhR2x6TG5KaGJtZGxUV0Z3U0c5eWFYcHZiblJoYkVsdWJtVnlMbTFoY0NoNVlYY3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JmY1hWaGRFRXVjMlYwUm5KdmJVVjFiR1Z5S0Y5bGRXeGxja0VwTzF4dUlDQWdJQ0FnZEdocGN5NWZaMlYwVjI5eWJHUkdZV05sUm5KdmJuUlJkV0YwS0Y5eGRXRjBRaWs3WEc1Y2JpQWdJQ0FnSUM4dklGOXhkV0YwUWlBcUlGOXhkV0YwUVNBcUlGOXhkV0YwUWw0dE1WeHVJQ0FnSUNBZ0x5OGdkMmhsY21VZ1gzRjFZWFJCSUdseklFeHZiMnRCZENCeWIzUmhkR2x2Ymx4dUlDQWdJQ0FnTHk4Z1lXNWtJRjl4ZFdGMFFpQnBjeUIzYjNKc1pFWmhZMlZHY205dWRGRjFZWFJjYmlBZ0lDQWdJSEpwWjJoMFJYbGxUbTl5YldGc2FYcGxaQ0V1Y1hWaGRHVnlibWx2Ymk1amIzQjVLRjl4ZFdGMFFpa3ViWFZzZEdsd2JIa29YM0YxWVhSQktTNXRkV3gwYVhCc2VTaGZjWFZoZEVJdWFXNTJaWEowS0NrcE8xeHVYRzRnSUNBZ0lDQmZjWFZoZEVFdVkyOXdlU2gwYUdsekxsOXlaWE4wVW1sbmFIUkZlV1ZRWVhKbGJuUlhiM0pzWkZGMVlYUXBPMXh1WEc0Z0lDQWdJQ0F2THlCZmNYVmhkRUZlTFRFZ0tpQnlhV2RvZEVWNVpVNXZjbTFoYkdsNlpXUXVjWFZoZEdWeWJtbHZiaUFxSUY5eGRXRjBRU0FxSUhKbGMzUlJkV0YwVW1sbmFIUkZlV1ZjYmlBZ0lDQWdJQzh2SUhkb1pYSmxJRjl4ZFdGMFFTQnBjeUJ5WlhOMFVtbG5hSFJGZVdWUVlYSmxiblJYYjNKc1pGRjFZWFJjYmlBZ0lDQWdJSEpwWjJoMFJYbGxMbkYxWVhSbGNtNXBiMjVjYmlBZ0lDQWdJQ0FnTG1OdmNIa29jbWxuYUhSRmVXVk9iM0p0WVd4cGVtVmtJUzV4ZFdGMFpYSnVhVzl1S1Z4dUlDQWdJQ0FnSUNBdWJYVnNkR2x3Ykhrb1gzRjFZWFJCS1Z4dUlDQWdJQ0FnSUNBdWNISmxiWFZzZEdsd2JIa29YM0YxWVhSQkxtbHVkbVZ5ZENncEtWeHVJQ0FnSUNBZ0lDQXViWFZzZEdsd2JIa29kR2hwY3k1ZmNtVnpkRkYxWVhSU2FXZG9kRVY1WlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFQmtaWEJ5WldOaGRHVmtJRlZ6WlNCN1FHeHBibXNnWVhCd2JIbFpZWGRRYVhSamFIMGdhVzV6ZEdWaFpDNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QnNiMjlyUVhRb1pYVnNaWEk2SUZSSVVrVkZMa1YxYkdWeUtUb2dkbTlwWkNCN1hHNGdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDZFdVazFNYjI5clFYUkNiMjVsUVhCd2JHbGxjam9nYkc5dmEwRjBLQ2tnYVhNZ1pHVndjbVZqWVhSbFpDNGdkWE5sSUdGd2NHeDVLQ2tnYVc1emRHVmhaQzRuS1R0Y2JseHVJQ0FnSUdOdmJuTjBJSGxoZHlBOUlGUklVa1ZGTGsxaGRHaFZkR2xzY3k1U1FVUXlSRVZISUNvZ1pYVnNaWEl1ZVR0Y2JpQWdJQ0JqYjI1emRDQndhWFJqYUNBOUlGUklVa1ZGTGsxaGRHaFZkR2xzY3k1U1FVUXlSRVZISUNvZ1pYVnNaWEl1ZUR0Y2JseHVJQ0FnSUhSb2FYTXVZWEJ3YkhsWllYZFFhWFJqYUNoNVlYY3NJSEJwZEdOb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRZ1lTQnhkV0YwWlhKdWFXOXVJSFJvWVhRZ2NtOTBZWFJsY3lCMGFHVWdkMjl5YkdRdGMzQmhZMlVnSzFvZ2RXNXBkQ0IyWldOMGIzSWdkRzhnZEdobElIdEFiR2x1YXlCbVlXTmxSbkp2Ym5SOUlHUnBjbVZqZEdsdmJpNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSFJoY21kbGRDQkJJSFJoY21kbGRDQmdWRWhTUlVVdVVYVmhkR1Z5Ym1sdmJtQmNiaUFnSUNvdlhHNGdJSEJ5YVhaaGRHVWdYMmRsZEZkdmNteGtSbUZqWlVaeWIyNTBVWFZoZENoMFlYSm5aWFE2SUZSSVVrVkZMbEYxWVhSbGNtNXBiMjRwT2lCVVNGSkZSUzVSZFdGMFpYSnVhVzl1SUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVtWVdObFJuSnZiblF1WkdsemRHRnVZMlZVYjFOeGRXRnlaV1FvVmtWRE0xOVFUMU5KVkVsV1JWOWFLU0E4SURBdU1ERXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBZWEpuWlhRdWFXUmxiblJwZEhrb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0JiWm1GalpVWnliMjUwUVhwcGJYVjBhQ3dnWm1GalpVWnliMjUwUVd4MGFYUjFaR1ZkSUQwZ1kyRnNZMEY2YVcxMWRHaEJiSFJwZEhWa1pTaDBhR2x6TG1aaFkyVkdjbTl1ZENrN1hHNGdJQ0FnWDJWMWJHVnlRUzV6WlhRb01DNHdMQ0F3TGpVZ0tpQk5ZWFJvTGxCSklDc2dabUZqWlVaeWIyNTBRWHBwYlhWMGFDd2dabUZqWlVaeWIyNTBRV3gwYVhSMVpHVXNJQ2RaV2xnbktUdGNibHh1SUNBZ0lISmxkSFZ5YmlCMFlYSm5aWFF1YzJWMFJuSnZiVVYxYkdWeUtGOWxkV3hsY2tFcE8xeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdleUJXVWsxRmVIQnlaWE56YVc5dVRXRnVZV2RsY2lCOUlHWnliMjBnSnk0dUwyVjRjSEpsYzNOcGIyNXpKenRjYm1sdGNHOXlkQ0FxSUdGeklGUklVa1ZGSUdaeWIyMGdKM1JvY21WbEp6dGNibWx0Y0c5eWRDQjBlWEJsSUhzZ1ZsSk5URzl2YTBGMFFYQndiR2xsY2lCOUlHWnliMjBnSnk0dlZsSk5URzl2YTBGMFFYQndiR2xsY2ljN1hHNXBiWEJ2Y25RZ2V5QldVazFNYjI5clFYUlNZVzVuWlUxaGNDQjlJR1p5YjIwZ0p5NHZWbEpOVEc5dmEwRjBVbUZ1WjJWTllYQW5PMXh1WEc0dktpcGNiaUFxSUVFZ1kyeGhjM01nZEdoaGRDQmhjSEJzYVdWeklHVjVaU0JuWVhwbElHUnBjbVZqZEdsdmJuTWdkRzhnWVNCV1VrMHVYRzRnS2lCSmRDQjNhV3hzSUdKbElIVnpaV1FnWW5rZ2UwQnNhVzVySUZaU1RVeHZiMnRCZEgwdVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QldVazFNYjI5clFYUkZlSEJ5WlhOemFXOXVRWEJ3YkdsbGNpQnBiWEJzWlcxbGJuUnpJRlpTVFV4dmIydEJkRUZ3Y0d4cFpYSWdlMXh1SUNBdktpcGNiaUFnSUNvZ1VtVndjbVZ6Wlc1MElHbDBjeUIwZVhCbElHOW1JR0Z3Y0d4cFpYSXVYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdjM1JoZEdsaklISmxZV1J2Ym14NUlIUjVjR1VnUFNBblpYaHdjbVZ6YzJsdmJpYzdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbDBjeUJoYzNOdlkybGhkR1ZrSUh0QWJHbHVheUJXVWsxRmVIQnlaWE56YVc5dVRXRnVZV2RsY24wdVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ1pYaHdjbVZ6YzJsdmJuTTZJRlpTVFVWNGNISmxjM05wYjI1TllXNWhaMlZ5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJKZENCM2IyNG5kQ0JpWlNCMWMyVmtJR2x1SUdWNGNISmxjM05wYjI0Z1lYQndiR2xsY2k1Y2JpQWdJQ29nVTJWbElHRnNjMjg2SUh0QWJHbHVheUJ5WVc1blpVMWhjRWh2Y21sNmIyNTBZV3hQZFhSbGNuMWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QnlZVzVuWlUxaGNFaHZjbWw2YjI1MFlXeEpibTVsY2pvZ1ZsSk5URzl2YTBGMFVtRnVaMlZOWVhBN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVFZ2UwQnNhVzVySUZaU1RVeHZiMnRCZEZKaGJtZGxUV0Z3ZlNCbWIzSWdhRzl5YVhwdmJuUmhiQ0J0YjNabGJXVnVkQzRnUW05MGFDQmxlV1Z6SUcxdmRtVWdiR1ZtZENCdmNpQnlhV2RvZEM1Y2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCeVlXNW5aVTFoY0VodmNtbDZiMjUwWVd4UGRYUmxjam9nVmxKTlRHOXZhMEYwVW1GdVoyVk5ZWEE3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUVnZTBCc2FXNXJJRlpTVFV4dmIydEJkRkpoYm1kbFRXRndmU0JtYjNJZ2RtVnlkR2xqWVd3Z1pHOTNibmRoY21RZ2JXOTJaVzFsYm5RdUlFSnZkR2dnWlhsbGN5QnRiM1psSUhWd2QyRnlaSE11WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nY21GdVoyVk5ZWEJXWlhKMGFXTmhiRVJ2ZDI0NklGWlNUVXh2YjJ0QmRGSmhibWRsVFdGd08xeHVYRzRnSUM4cUtseHVJQ0FnS2lCQklIdEFiR2x1YXlCV1VrMU1iMjlyUVhSU1lXNW5aVTFoY0gwZ1ptOXlJSFpsY25ScFkyRnNJSFZ3ZDJGeVpDQnRiM1psYldWdWRDNGdRbTkwYUNCbGVXVnpJRzF2ZG1VZ1pHOTNibmRoY21SekxseHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklISmhibWRsVFdGd1ZtVnlkR2xqWVd4VmNEb2dWbEpOVEc5dmEwRjBVbUZ1WjJWTllYQTdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnlaV0YwWlNCaElHNWxkeUI3UUd4cGJtc2dWbEpOVEc5dmEwRjBSWGh3Y21WemMybHZia0Z3Y0d4cFpYSjlMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnWlhod2NtVnpjMmx2Ym5NZ1FTQjdRR3hwYm1zZ1ZsSk5SWGh3Y21WemMybHZiazFoYm1GblpYSjlYRzRnSUNBcUlFQndZWEpoYlNCeVlXNW5aVTFoY0VodmNtbDZiMjUwWVd4SmJtNWxjaUJCSUh0QWJHbHVheUJXVWsxTWIyOXJRWFJTWVc1blpVMWhjSDBnZFhObFpDQm1iM0lnYVc1dVpYSWdkSEpoYm5OMlpYSnpaU0JrYVhKbFkzUnBiMjVjYmlBZ0lDb2dRSEJoY21GdElISmhibWRsVFdGd1NHOXlhWHB2Ym5SaGJFOTFkR1Z5SUVFZ2UwQnNhVzVySUZaU1RVeHZiMnRCZEZKaGJtZGxUV0Z3ZlNCMWMyVmtJR1p2Y2lCdmRYUmxjaUIwY21GdWMzWmxjbk5sSUdScGNtVmpkR2x2Ymx4dUlDQWdLaUJBY0dGeVlXMGdjbUZ1WjJWTllYQldaWEowYVdOaGJFUnZkMjRnUVNCN1FHeHBibXNnVmxKTlRHOXZhMEYwVW1GdVoyVk5ZWEI5SUhWelpXUWdabTl5SUdSdmQyNGdaR2x5WldOMGFXOXVYRzRnSUNBcUlFQndZWEpoYlNCeVlXNW5aVTFoY0ZabGNuUnBZMkZzVlhBZ1FTQjdRR3hwYm1zZ1ZsSk5URzl2YTBGMFVtRnVaMlZOWVhCOUlIVnpaV1FnWm05eUlIVndJR1JwY21WamRHbHZibHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJR052Ym5OMGNuVmpkRzl5S0Z4dUlDQWdJR1Y0Y0hKbGMzTnBiMjV6T2lCV1VrMUZlSEJ5WlhOemFXOXVUV0Z1WVdkbGNpeGNiaUFnSUNCeVlXNW5aVTFoY0VodmNtbDZiMjUwWVd4SmJtNWxjam9nVmxKTlRHOXZhMEYwVW1GdVoyVk5ZWEFzWEc0Z0lDQWdjbUZ1WjJWTllYQkliM0pwZW05dWRHRnNUM1YwWlhJNklGWlNUVXh2YjJ0QmRGSmhibWRsVFdGd0xGeHVJQ0FnSUhKaGJtZGxUV0Z3Vm1WeWRHbGpZV3hFYjNkdU9pQldVazFNYjI5clFYUlNZVzVuWlUxaGNDeGNiaUFnSUNCeVlXNW5aVTFoY0ZabGNuUnBZMkZzVlhBNklGWlNUVXh2YjJ0QmRGSmhibWRsVFdGd0xGeHVJQ0FwSUh0Y2JpQWdJQ0IwYUdsekxtVjRjSEpsYzNOcGIyNXpJRDBnWlhod2NtVnpjMmx2Ym5NN1hHNWNiaUFnSUNCMGFHbHpMbkpoYm1kbFRXRndTRzl5YVhwdmJuUmhiRWx1Ym1WeUlEMGdjbUZ1WjJWTllYQkliM0pwZW05dWRHRnNTVzV1WlhJN1hHNGdJQ0FnZEdocGN5NXlZVzVuWlUxaGNFaHZjbWw2YjI1MFlXeFBkWFJsY2lBOUlISmhibWRsVFdGd1NHOXlhWHB2Ym5SaGJFOTFkR1Z5TzF4dUlDQWdJSFJvYVhNdWNtRnVaMlZOWVhCV1pYSjBhV05oYkVSdmQyNGdQU0J5WVc1blpVMWhjRlpsY25ScFkyRnNSRzkzYmp0Y2JpQWdJQ0IwYUdsekxuSmhibWRsVFdGd1ZtVnlkR2xqWVd4VmNDQTlJSEpoYm1kbFRXRndWbVZ5ZEdsallXeFZjRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQmNIQnNlU0IwYUdVZ2FXNXdkWFFnWVc1bmJHVWdkRzhnYVhSeklHRnpjMjlqYVdGMFpXUWdWbEpOSUcxdlpHVnNMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZVdGM0lGSnZkR0YwYVc5dUlHRnliM1Z1WkNCWklHRjRhWE1zSUdsdUlHUmxaM0psWlZ4dUlDQWdLaUJBY0dGeVlXMGdjR2wwWTJnZ1VtOTBZWFJwYjI0Z1lYSnZkVzVrSUZnZ1lYaHBjeXdnYVc0Z1pHVm5jbVZsWEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nWVhCd2JIbFpZWGRRYVhSamFDaDVZWGM2SUc1MWJXSmxjaXdnY0dsMFkyZzZJRzUxYldKbGNpazZJSFp2YVdRZ2UxeHVJQ0FnSUdsbUlDaHdhWFJqYUNBOElEQXVNQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NWxlSEJ5WlhOemFXOXVjeTV6WlhSV1lXeDFaU2duYkc5dmEwUnZkMjRuTENBd0xqQXBPMXh1SUNBZ0lDQWdkR2hwY3k1bGVIQnlaWE56YVc5dWN5NXpaWFJXWVd4MVpTZ25iRzl2YTFWd0p5d2dkR2hwY3k1eVlXNW5aVTFoY0ZabGNuUnBZMkZzVlhBdWJXRndLQzF3YVhSamFDa3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFHbHpMbVY0Y0hKbGMzTnBiMjV6TG5ObGRGWmhiSFZsS0Nkc2IyOXJWWEFuTENBd0xqQXBPMXh1SUNBZ0lDQWdkR2hwY3k1bGVIQnlaWE56YVc5dWN5NXpaWFJXWVd4MVpTZ25iRzl2YTBSdmQyNG5MQ0IwYUdsekxuSmhibWRsVFdGd1ZtVnlkR2xqWVd4RWIzZHVMbTFoY0Nod2FYUmphQ2twTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoNVlYY2dQQ0F3TGpBcElIdGNiaUFnSUNBZ0lIUm9hWE11Wlhod2NtVnpjMmx2Ym5NdWMyVjBWbUZzZFdVb0oyeHZiMnRNWldaMEp5d2dNQzR3S1R0Y2JpQWdJQ0FnSUhSb2FYTXVaWGh3Y21WemMybHZibk11YzJWMFZtRnNkV1VvSjJ4dmIydFNhV2RvZENjc0lIUm9hWE11Y21GdVoyVk5ZWEJJYjNKcGVtOXVkR0ZzVDNWMFpYSXViV0Z3S0MxNVlYY3BLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVsZUhCeVpYTnphVzl1Y3k1elpYUldZV3gxWlNnbmJHOXZhMUpwWjJoMEp5d2dNQzR3S1R0Y2JpQWdJQ0FnSUhSb2FYTXVaWGh3Y21WemMybHZibk11YzJWMFZtRnNkV1VvSjJ4dmIydE1aV1owSnl3Z2RHaHBjeTV5WVc1blpVMWhjRWh2Y21sNmIyNTBZV3hQZFhSbGNpNXRZWEFvZVdGM0tTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJrWlhCeVpXTmhkR1ZrSUZWelpTQjdRR3hwYm1zZ1lYQndiSGxaWVhkUWFYUmphSDBnYVc1emRHVmhaQzVjYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUJzYjI5clFYUW9aWFZzWlhJNklGUklVa1ZGTGtWMWJHVnlLVG9nZG05cFpDQjdYRzRnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ2RXVWsxTWIyOXJRWFJDYjI1bFFYQndiR2xsY2pvZ2JHOXZhMEYwS0NrZ2FYTWdaR1Z3Y21WallYUmxaQzRnZFhObElHRndjR3g1S0NrZ2FXNXpkR1ZoWkM0bktUdGNibHh1SUNBZ0lHTnZibk4wSUhsaGR5QTlJRlJJVWtWRkxrMWhkR2hWZEdsc2N5NVNRVVF5UkVWSElDb2daWFZzWlhJdWVUdGNiaUFnSUNCamIyNXpkQ0J3YVhSamFDQTlJRlJJVWtWRkxrMWhkR2hWZEdsc2N5NVNRVVF5UkVWSElDb2daWFZzWlhJdWVEdGNibHh1SUNBZ0lIUm9hWE11WVhCd2JIbFpZWGRRYVhSamFDaDVZWGNzSUhCcGRHTm9LVHRjYmlBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUhzZ2MyRjBkWEpoZEdVZ2ZTQm1jbTl0SUNjdUxpOTFkR2xzY3k5ellYUjFjbUYwWlNjN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCV1VrMU1iMjlyUVhSU1lXNW5aVTFoY0NCN1hHNGdJQzhxS2x4dUlDQWdLaUJNYVcxcGRITWdkR2hsSUcxaGVHbHRkVzBnWVc1bmJHVWdiMllnZEdobElHbHVjSFYwSUdGdVoyeGxJRzltSUhSb1pTQk1iMjlyUVhRZ2RtVmpkRzl5SUdaeWIyMGdkR2hsSUdaeWIyNTBJRzltSUhSb1pTQm9aV0ZrSUNoMGFHVWdjRzl6YVhScGRtVWdlaUJoZUdsektTNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QnBibkIxZEUxaGVGWmhiSFZsT2lCdWRXMWlaWEk3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsY0hKbGMyVnVkSE1nWVc0Z1lXNW5iR1VnS0dsdUlHUmxaM0psWlhNcElHWnZjaUJpYjI1bElIUjVjR1VnYjJZZ1RHOXZhMEYwSUdGd2NHeHBaWEp6TENCdmNpQmhJSGRsYVdkb2RDQm1iM0lnWlhod2NtVnpjMmx2YmlCMGVYQmxJRzltSUV4dmIydEJkQ0JoY0hCc2FXVnljeTVjYmlBZ0lDb2dWR2hsSUdsdWNIVjBJSFpoYkhWbElIZHBiR3dnZEdGclpTQmdNUzR3WUNCM2FHVnVJSFJvWlNCcGJuQjFkQ0JoYm1kc1pTQmxjWFZoYkhNZ0tHOXlJR2R5WldGMFpYSXBJSFJ2SUh0QWJHbHVheUJwYm5CMWRFMWhlRlpoYkhWbGZTNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QnZkWFJ3ZFhSVFkyRnNaVG9nYm5WdFltVnlPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRjbVZoZEdVZ1lTQnVaWGNnZTBCc2FXNXJJRlpTVFV4dmIydEJkRkpoYm1kbFRXRndmUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUdsdWNIVjBUV0Y0Vm1Gc2RXVWdWR2hsSUh0QWJHbHVheUJwYm5CMWRFMWhlRlpoYkhWbGZTQnZaaUIwYUdVZ2JXRndYRzRnSUNBcUlFQndZWEpoYlNCdmRYUndkWFJUWTJGc1pTQlVhR1VnZTBCc2FXNXJJRzkxZEhCMWRGTmpZV3hsZlNCdlppQjBhR1VnYldGd1hHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9hVzV3ZFhSTllYaFdZV3gxWlRvZ2JuVnRZbVZ5TENCdmRYUndkWFJUWTJGc1pUb2diblZ0WW1WeUtTQjdYRzRnSUNBZ2RHaHBjeTVwYm5CMWRFMWhlRlpoYkhWbElEMGdhVzV3ZFhSTllYaFdZV3gxWlR0Y2JpQWdJQ0IwYUdsekxtOTFkSEIxZEZOallXeGxJRDBnYjNWMGNIVjBVMk5oYkdVN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSWFpoYkhWaGRHVWdZVzRnYVc1d2RYUWdkbUZzZFdVZ1lXNWtJRzkxZEhCMWRDQmhJRzFoY0hCbFpDQjJZV3gxWlM1Y2JpQWdJQ29nUUhCaGNtRnRJSE55WXlCVWFHVWdhVzV3ZFhRZ2RtRnNkV1ZjYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUJ0WVhBb2MzSmpPaUJ1ZFcxaVpYSXBPaUJ1ZFcxaVpYSWdlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTkxZEhCMWRGTmpZV3hsSUNvZ2MyRjBkWEpoZEdVb2MzSmpJQzhnZEdocGN5NXBibkIxZEUxaGVGWmhiSFZsS1R0Y2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElIUjVjR1VnS2lCaGN5QldNRlpTVFNCbWNtOXRJQ2RBY0dsNGFYWXZkSGx3WlhNdGRuSnRMVEF1TUNjN1hHNXBiWEJ2Y25RZ2RIbHdaU0FxSUdGeklGWXhWbEpOVTJOb1pXMWhJR1p5YjIwZ0owQndhWGhwZGk5MGVYQmxjeTEyY20xakxYWnliUzB4TGpBbk8xeHVhVzF3YjNKMElIUjVjR1VnZXlCSFRGUkdMQ0JIVEZSR1RHOWhaR1Z5VUd4MVoybHVMQ0JIVEZSR1VHRnljMlZ5SUgwZ1puSnZiU0FuZEdoeVpXVXZaWGhoYlhCc1pYTXZhbk50TDJ4dllXUmxjbk12UjB4VVJreHZZV1JsY2k1cWN5YzdYRzVwYlhCdmNuUWdkSGx3WlNCN0lGWlNUVVY0Y0hKbGMzTnBiMjVOWVc1aFoyVnlJSDBnWm5KdmJTQW5MaTR2Wlhod2NtVnpjMmx2Ym5NdlZsSk5SWGh3Y21WemMybHZiazFoYm1GblpYSW5PMXh1YVcxd2IzSjBJSFI1Y0dVZ2V5QldVazFJZFcxaGJtOXBaQ0I5SUdaeWIyMGdKeTR1TDJoMWJXRnViMmxrTDFaU1RVaDFiV0Z1YjJsa0p6dGNibWx0Y0c5eWRDQjdJRlpTVFV4dmIydEJkRWhsYkhCbGNpQjlJR1p5YjIwZ0p5NHZhR1ZzY0dWeWN5OVdVazFNYjI5clFYUklaV3h3WlhJbk8xeHVhVzF3YjNKMElIc2dWbEpOVEc5dmEwRjBJSDBnWm5KdmJTQW5MaTlXVWsxTWIyOXJRWFFuTzF4dWFXMXdiM0owSUhSNWNHVWdleUJXVWsxTWIyOXJRWFJCY0hCc2FXVnlJSDBnWm5KdmJTQW5MaTlXVWsxTWIyOXJRWFJCY0hCc2FXVnlKenRjYm1sdGNHOXlkQ0I3SUZaU1RVeHZiMnRCZEVKdmJtVkJjSEJzYVdWeUlIMGdabkp2YlNBbkxpOVdVazFNYjI5clFYUkNiMjVsUVhCd2JHbGxjaWM3WEc1cGJYQnZjblFnZXlCV1VrMU1iMjlyUVhSRmVIQnlaWE56YVc5dVFYQndiR2xsY2lCOUlHWnliMjBnSnk0dlZsSk5URzl2YTBGMFJYaHdjbVZ6YzJsdmJrRndjR3hwWlhJbk8xeHVhVzF3YjNKMElIUjVjR1VnZXlCV1VrMU1iMjlyUVhSTWIyRmtaWEpRYkhWbmFXNVBjSFJwYjI1eklIMGdabkp2YlNBbkxpOVdVazFNYjI5clFYUk1iMkZrWlhKUWJIVm5hVzVQY0hScGIyNXpKenRjYm1sdGNHOXlkQ0I3SUZaU1RVeHZiMnRCZEZKaGJtZGxUV0Z3SUgwZ1puSnZiU0FuTGk5V1VrMU1iMjlyUVhSU1lXNW5aVTFoY0NjN1hHNXBiWEJ2Y25RZ2V5QkhURlJHSUdGeklFZE1WRVpUWTJobGJXRWdmU0JtY205dElDZEFaMngwWmkxMGNtRnVjMlp2Y20wdlkyOXlaU2M3WEc1Y2JpOHFLbHh1SUNvZ1VHOXpjMmxpYkdVZ2MzQmxZeUIyWlhKemFXOXVjeUJwZENCeVpXTnZaMjVwZW1WekxseHVJQ292WEc1amIyNXpkQ0JRVDFOVFNVSk1SVjlUVUVWRFgxWkZVbE5KVDA1VElEMGdibVYzSUZObGRDaGJKekV1TUNjc0lDY3hMakF0WW1WMFlTZGRLVHRjYmx4dUx5b3FYRzRnS2lCVWFHVWdiV2x1YVcxMWJTQndaWEp0YVhSMFpXUWdkbUZzZFdVZ1ptOXlJSHRBYkdsdWF5QldNVlpTVFZOamFHVnRZUzVNYjI5clFYUlNZVzVuWlUxaGNDNXBibkIxZEUxaGVGWmhiSFZsZlM1Y2JpQXFJRWxtSUhSb1pTQm5hWFpsYmlCMllXeDFaU0JwY3lCemJXRnNiR1Z5SUhSb1lXNGdkR2hwY3l3Z2RHaGxJR3h2WVdSbGNpQnphRzkzY3lCaElIZGhjbTVwYm1jZ1lXNWtJR05zWVcxd2N5QjFjQ0IwYUdVZ2RtRnNkV1V1WEc0Z0tpOWNibU52Ym5OMElFbE9VRlZVWDAxQldGOVdRVXhWUlY5TlNVNUpUVlZOSUQwZ01DNHdNVHRjYmx4dUx5b3FYRzRnS2lCQklIQnNkV2RwYmlCdlppQkhURlJHVEc5aFpHVnlJSFJvWVhRZ2FXMXdiM0owY3lCaElIdEFiR2x1YXlCV1VrMU1iMjlyUVhSOUlHWnliMjBnWVNCV1VrMGdaWGgwWlc1emFXOXVJRzltSUdFZ1IweFVSaTVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZaU1RVeHZiMnRCZEV4dllXUmxjbEJzZFdkcGJpQnBiWEJzWlcxbGJuUnpJRWRNVkVaTWIyRmtaWEpRYkhWbmFXNGdlMXh1SUNBdktpcGNiaUFnSUNvZ1UzQmxZMmxtZVNCaGJpQlBZbXBsWTNRelJDQjBieUJoWkdRZ2UwQnNhVzVySUZaU1RVeHZiMnRCZEVobGJIQmxjbjBnY3k1Y2JpQWdJQ29nU1dZZ2JtOTBJSE53WldOcFptbGxaQ3dnYUdWc2NHVnlJSGRwYkd3Z2JtOTBJR0psSUdOeVpXRjBaV1F1WEc0Z0lDQXFJRWxtSUdCeVpXNWtaWEpQY21SbGNtQWdhWE1nYzJWMElIUnZJSFJvWlNCeWIyOTBMQ0JvWld4d1pYSnpJSGRwYkd3Z1kyOXdlU0IwYUdVZ2MyRnRaU0JnY21WdVpHVnlUM0prWlhKZ0lDNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5Qm9aV3h3WlhKU2IyOTBQem9nVkVoU1JVVXVUMkpxWldOME0wUTdYRzVjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhCaGNuTmxjam9nUjB4VVJsQmhjbk5sY2p0Y2JseHVJQ0J3ZFdKc2FXTWdaMlYwSUc1aGJXVW9LVG9nYzNSeWFXNW5JSHRjYmlBZ0lDQXZMeUJYWlNCemFHOTFiR1FnZFhObElIUm9aU0JsZUhSbGJuTnBiMjRnYm1GdFpTQnBibk4wWldGa0lHSjFkQ0IzWlNCb1lYWmxJRzExYkhScGNHeGxJSEJzZFdkcGJuTWdabTl5SUdGdUlHVjRkR1Z1YzJsdmJpNHVMbHh1SUNBZ0lISmxkSFZ5YmlBblZsSk5URzl2YTBGMFRHOWhaR1Z5VUd4MVoybHVKenRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJqYjI1emRISjFZM1J2Y2lod1lYSnpaWEk2SUVkTVZFWlFZWEp6WlhJc0lHOXdkR2x2Ym5NL09pQldVazFNYjI5clFYUk1iMkZrWlhKUWJIVm5hVzVQY0hScGIyNXpLU0I3WEc0Z0lDQWdkR2hwY3k1d1lYSnpaWElnUFNCd1lYSnpaWEk3WEc1Y2JpQWdJQ0IwYUdsekxtaGxiSEJsY2xKdmIzUWdQU0J2Y0hScGIyNXpQeTVvWld4d1pYSlNiMjkwTzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUdGemVXNWpJR0ZtZEdWeVVtOXZkQ2huYkhSbU9pQkhURlJHS1RvZ1VISnZiV2x6WlR4MmIybGtQaUI3WEc0Z0lDQWdZMjl1YzNRZ2RuSnRTSFZ0WVc1dmFXUWdQU0JuYkhSbUxuVnpaWEpFWVhSaExuWnliVWgxYldGdWIybGtJR0Z6SUZaU1RVaDFiV0Z1YjJsa0lId2dkVzVrWldacGJtVmtPMXh1WEc0Z0lDQWdMeThnWlhod2JHbGphWFJzZVNCa2FYTjBhVzVuZFdsemFDQnVkV3hzSUdGdVpDQjFibVJsWm1sdVpXUmNiaUFnSUNBdkx5QnphVzVqWlNCMmNtMUlkVzFoYm05cFpDQnRhV2RvZENCaVpTQnVkV3hzSUdGeklHRWdjbVZ6ZFd4MFhHNGdJQ0FnYVdZZ0tIWnliVWgxYldGdWIybGtJRDA5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDJjbTFJZFcxaGJtOXBaQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxWlNUVXh2YjJ0QmRFeHZZV1JsY2xCc2RXZHBiam9nZG5KdFNIVnRZVzV2YVdRZ2FYTWdkVzVrWldacGJtVmtMaUJXVWsxSWRXMWhibTlwWkV4dllXUmxjbEJzZFdkcGJpQm9ZWFpsSUhSdklHSmxJSFZ6WldRZ1ptbHljM1FuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQjJjbTFGZUhCeVpYTnphVzl1VFdGdVlXZGxjaUE5SUdkc2RHWXVkWE5sY2tSaGRHRXVkbkp0Ulhod2NtVnpjMmx2YmsxaGJtRm5aWElnWVhNZ1ZsSk5SWGh3Y21WemMybHZiazFoYm1GblpYSWdmQ0IxYm1SbFptbHVaV1E3WEc1Y2JpQWdJQ0JwWmlBb2RuSnRSWGh3Y21WemMybHZiazFoYm1GblpYSWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIWnliVVY0Y0hKbGMzTnBiMjVOWVc1aFoyVnlJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0oxWlNUVXh2YjJ0QmRFeHZZV1JsY2xCc2RXZHBiam9nZG5KdFJYaHdjbVZ6YzJsdmJrMWhibUZuWlhJZ2FYTWdkVzVrWldacGJtVmtMaUJXVWsxRmVIQnlaWE56YVc5dVRHOWhaR1Z5VUd4MVoybHVJR2hoZG1VZ2RHOGdZbVVnZFhObFpDQm1hWEp6ZENjc1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdkc2RHWXVkWE5sY2tSaGRHRXVkbkp0VEc5dmEwRjBJRDBnWVhkaGFYUWdkR2hwY3k1ZmFXMXdiM0owS0dkc2RHWXNJSFp5YlVoMWJXRnViMmxrTENCMmNtMUZlSEJ5WlhOemFXOXVUV0Z1WVdkbGNpazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nU1cxd2IzSjBJR0VnZTBCc2FXNXJJRlpTVFV4dmIydEJkSDBnWm5KdmJTQmhJRlpTVFM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElHZHNkR1lnUVNCd1lYSnpaV1FnY21WemRXeDBJRzltSUVkTVZFWWdkR0ZyWlc0Z1puSnZiU0JIVEZSR1RHOWhaR1Z5WEc0Z0lDQXFJRUJ3WVhKaGJTQm9kVzFoYm05cFpDQkJJSHRBYkdsdWF5QldVazFJZFcxaGJtOXBaSDBnYVc1emRHRnVZMlVnZEdoaGRDQnlaWEJ5WlhObGJuUnpJSFJvWlNCV1VrMWNiaUFnSUNvZ1FIQmhjbUZ0SUdWNGNISmxjM05wYjI1eklFRWdlMEJzYVc1cklGWlNUVVY0Y0hKbGMzTnBiMjVOWVc1aFoyVnlmU0JwYm5OMFlXNWpaU0IwYUdGMElISmxjSEpsYzJWdWRITWdkR2hsSUZaU1RWeHVJQ0FnS2k5Y2JpQWdjSEpwZG1GMFpTQmhjM2x1WXlCZmFXMXdiM0owS0Z4dUlDQWdJR2RzZEdZNklFZE1WRVlzWEc0Z0lDQWdhSFZ0WVc1dmFXUTZJRlpTVFVoMWJXRnViMmxrSUh3Z2JuVnNiQ3hjYmlBZ0lDQmxlSEJ5WlhOemFXOXVjem9nVmxKTlJYaHdjbVZ6YzJsdmJrMWhibUZuWlhJZ2ZDQnVkV3hzTEZ4dUlDQXBPaUJRY205dGFYTmxQRlpTVFV4dmIydEJkQ0I4SUc1MWJHdytJSHRjYmlBZ0lDQnBaaUFvYUhWdFlXNXZhV1FnUFQwZ2JuVnNiQ0I4ZkNCbGVIQnlaWE56YVc5dWN5QTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCMk1WSmxjM1ZzZENBOUlHRjNZV2wwSUhSb2FYTXVYM1l4U1cxd2IzSjBLR2RzZEdZc0lHaDFiV0Z1YjJsa0xDQmxlSEJ5WlhOemFXOXVjeWs3WEc0Z0lDQWdhV1lnS0hZeFVtVnpkV3gwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZGpGU1pYTjFiSFE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2RqQlNaWE4xYkhRZ1BTQmhkMkZwZENCMGFHbHpMbDkyTUVsdGNHOXlkQ2huYkhSbUxDQm9kVzFoYm05cFpDd2daWGh3Y21WemMybHZibk1wTzF4dUlDQWdJR2xtSUNoMk1GSmxjM1ZzZENrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhZd1VtVnpkV3gwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQjlYRzVjYmlBZ2NISnBkbUYwWlNCaGMzbHVZeUJmZGpGSmJYQnZjblFvWEc0Z0lDQWdaMngwWmpvZ1IweFVSaXhjYmlBZ0lDQm9kVzFoYm05cFpEb2dWbEpOU0hWdFlXNXZhV1FzWEc0Z0lDQWdaWGh3Y21WemMybHZibk02SUZaU1RVVjRjSEpsYzNOcGIyNU5ZVzVoWjJWeUxGeHVJQ0FwT2lCUWNtOXRhWE5sUEZaU1RVeHZiMnRCZENCOElHNTFiR3crSUh0Y2JpQWdJQ0JqYjI1emRDQnFjMjl1SUQwZ2RHaHBjeTV3WVhKelpYSXVhbk52YmlCaGN5QkhURlJHVTJOb1pXMWhMa2xIVEZSR08xeHVYRzRnSUNBZ0x5OGdaV0Z5YkhrZ1lXSnZjblFnYVdZZ2FYUWdaRzlsYzI0bmRDQjFjMlVnZG5KdFhHNGdJQ0FnWTI5dWMzUWdhWE5XVWsxVmMyVmtJRDBnYW5OdmJpNWxlSFJsYm5OcGIyNXpWWE5sWkQ4dWFXNWtaWGhQWmlnblZsSk5RMTkyY20wbktTQWhQVDBnTFRFN1hHNGdJQ0FnYVdZZ0tDRnBjMVpTVFZWelpXUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElHVjRkR1Z1YzJsdmJpQTlJR3B6YjI0dVpYaDBaVzV6YVc5dWN6OHVXeWRXVWsxRFgzWnliU2RkSUdGeklGWXhWbEpOVTJOb1pXMWhMbFpTVFVOV1VrMGdmQ0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdhV1lnS0NGbGVIUmxibk5wYjI0cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUhOd1pXTldaWEp6YVc5dUlEMGdaWGgwWlc1emFXOXVMbk53WldOV1pYSnphVzl1TzF4dUlDQWdJR2xtSUNnaFVFOVRVMGxDVEVWZlUxQkZRMTlXUlZKVFNVOU9VeTVvWVhNb2MzQmxZMVpsY25OcGIyNHBLU0I3WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b1lGWlNUVXh2YjJ0QmRFeHZZV1JsY2xCc2RXZHBiam9nVlc1cmJtOTNiaUJXVWsxRFgzWnliU0J6Y0dWalZtVnljMmx2YmlCY0lpUjdjM0JsWTFabGNuTnBiMjU5WENKZ0tUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUhOamFHVnRZVXh2YjJ0QmRDQTlJR1Y0ZEdWdWMybHZiaTVzYjI5clFYUTdYRzRnSUNBZ2FXWWdLQ0Z6WTJobGJXRk1iMjlyUVhRcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUdSbFptRjFiSFJQZFhSd2RYUlRZMkZzWlNBOUlITmphR1Z0WVV4dmIydEJkQzUwZVhCbElEMDlQU0FuWlhod2NtVnpjMmx2YmljZ1B5QXhMakFnT2lBeE1DNHdPMXh1WEc0Z0lDQWdZMjl1YzNRZ2JXRndTRWtnUFNCMGFHbHpMbDkyTVVsdGNHOXlkRkpoYm1kbFRXRndLSE5qYUdWdFlVeHZiMnRCZEM1eVlXNW5aVTFoY0VodmNtbDZiMjUwWVd4SmJtNWxjaXdnWkdWbVlYVnNkRTkxZEhCMWRGTmpZV3hsS1R0Y2JpQWdJQ0JqYjI1emRDQnRZWEJJVHlBOUlIUm9hWE11WDNZeFNXMXdiM0owVW1GdVoyVk5ZWEFvYzJOb1pXMWhURzl2YTBGMExuSmhibWRsVFdGd1NHOXlhWHB2Ym5SaGJFOTFkR1Z5TENCa1pXWmhkV3gwVDNWMGNIVjBVMk5oYkdVcE8xeHVJQ0FnSUdOdmJuTjBJRzFoY0ZaRUlEMGdkR2hwY3k1ZmRqRkpiWEJ2Y25SU1lXNW5aVTFoY0NoelkyaGxiV0ZNYjI5clFYUXVjbUZ1WjJWTllYQldaWEowYVdOaGJFUnZkMjRzSUdSbFptRjFiSFJQZFhSd2RYUlRZMkZzWlNrN1hHNGdJQ0FnWTI5dWMzUWdiV0Z3VmxVZ1BTQjBhR2x6TGw5Mk1VbHRjRzl5ZEZKaGJtZGxUV0Z3S0hOamFHVnRZVXh2YjJ0QmRDNXlZVzVuWlUxaGNGWmxjblJwWTJGc1ZYQXNJR1JsWm1GMWJIUlBkWFJ3ZFhSVFkyRnNaU2s3WEc1Y2JpQWdJQ0JzWlhRZ1lYQndiR2xsY2p0Y2JseHVJQ0FnSUdsbUlDaHpZMmhsYldGTWIyOXJRWFF1ZEhsd1pTQTlQVDBnSjJWNGNISmxjM05wYjI0bktTQjdYRzRnSUNBZ0lDQmhjSEJzYVdWeUlEMGdibVYzSUZaU1RVeHZiMnRCZEVWNGNISmxjM05wYjI1QmNIQnNhV1Z5S0dWNGNISmxjM05wYjI1ekxDQnRZWEJJU1N3Z2JXRndTRThzSUcxaGNGWkVMQ0J0WVhCV1ZTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdGd2NHeHBaWElnUFNCdVpYY2dWbEpOVEc5dmEwRjBRbTl1WlVGd2NHeHBaWElvYUhWdFlXNXZhV1FzSUcxaGNFaEpMQ0J0WVhCSVR5d2diV0Z3VmtRc0lHMWhjRlpWS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQnNiMjlyUVhRZ1BTQjBhR2x6TGw5cGJYQnZjblJNYjI5clFYUW9hSFZ0WVc1dmFXUXNJR0Z3Y0d4cFpYSXBPMXh1WEc0Z0lDQWdiRzl2YTBGMExtOW1abk5sZEVaeWIyMUlaV0ZrUW05dVpTNW1jbTl0UVhKeVlYa29jMk5vWlcxaFRHOXZhMEYwTG05bVpuTmxkRVp5YjIxSVpXRmtRbTl1WlNBL1B5QmJNQzR3TENBd0xqQTJMQ0F3TGpCZEtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCc2IyOXJRWFE3WEc0Z0lIMWNibHh1SUNCd2NtbDJZWFJsSUY5Mk1VbHRjRzl5ZEZKaGJtZGxUV0Z3S0Z4dUlDQWdJSE5qYUdWdFlWSmhibWRsVFdGd09pQldNVlpTVFZOamFHVnRZUzVNYjI5clFYUlNZVzVuWlUxaGNDQjhJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQmtaV1poZFd4MFQzVjBjSFYwVTJOaGJHVTZJRzUxYldKbGNpeGNiaUFnS1RvZ1ZsSk5URzl2YTBGMFVtRnVaMlZOWVhBZ2UxeHVJQ0FnSUd4bGRDQnBibkIxZEUxaGVGWmhiSFZsSUQwZ2MyTm9aVzFoVW1GdVoyVk5ZWEEvTG1sdWNIVjBUV0Y0Vm1Gc2RXVWdQejhnT1RBdU1EdGNiaUFnSUNCamIyNXpkQ0J2ZFhSd2RYUlRZMkZzWlNBOUlITmphR1Z0WVZKaGJtZGxUV0Z3UHk1dmRYUndkWFJUWTJGc1pTQS9QeUJrWldaaGRXeDBUM1YwY0hWMFUyTmhiR1U3WEc1Y2JpQWdJQ0F2THlCSmRDQnRhV2RvZENCallYVnpaU0JPWVU0Z2QyaGxiaUJnYVc1d2RYUk5ZWGhXWVd4MVpXQWdhWE1nZEc5dklITnRZV3hzWEc0Z0lDQWdMeThnZDJocFkyZ2diV0ZyWlhNZ2RHaGxJRzFsYzJnZ2IyWWdkR2hsSUdobFlXUWdaR2x6WVhCd1pXRnlYRzRnSUNBZ0x5OGdVMlZsT2lCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNHbDRhWFl2ZEdoeVpXVXRkbkp0TDJsemMzVmxjeTh4TWpBeFhHNGdJQ0FnYVdZZ0tHbHVjSFYwVFdGNFZtRnNkV1VnUENCSlRsQlZWRjlOUVZoZlZrRk1WVVZmVFVsT1NVMVZUU2tnZTF4dUlDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtGeHVJQ0FnSUNBZ0lDQW5WbEpOVEc5dmEwRjBURzloWkdWeVVHeDFaMmx1T2lCcGJuQjFkRTFoZUZaaGJIVmxJRzltSUdFZ2NtRnVaMlVnYldGd0lHbHpJSFJ2YnlCemJXRnNiQzRnUTI5dWMybGtaWElnY21WMmFXVjNhVzVuSUhSb1pTQnlZVzVuWlNCdFlYQWhKeXhjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0JwYm5CMWRFMWhlRlpoYkhWbElEMGdTVTVRVlZSZlRVRllYMVpCVEZWRlgwMUpUa2xOVlUwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCV1VrMU1iMjlyUVhSU1lXNW5aVTFoY0NocGJuQjFkRTFoZUZaaGJIVmxMQ0J2ZFhSd2RYUlRZMkZzWlNrN1hHNGdJSDFjYmx4dUlDQndjbWwyWVhSbElHRnplVzVqSUY5Mk1FbHRjRzl5ZENoY2JpQWdJQ0JuYkhSbU9pQkhURlJHTEZ4dUlDQWdJR2gxYldGdWIybGtPaUJXVWsxSWRXMWhibTlwWkN4Y2JpQWdJQ0JsZUhCeVpYTnphVzl1Y3pvZ1ZsSk5SWGh3Y21WemMybHZiazFoYm1GblpYSXNYRzRnSUNrNklGQnliMjFwYzJVOFZsSk5URzl2YTBGMElId2diblZzYkQ0Z2UxeHVJQ0FnSUdOdmJuTjBJR3B6YjI0Z1BTQjBhR2x6TG5CaGNuTmxjaTVxYzI5dUlHRnpJRWRNVkVaVFkyaGxiV0V1U1VkTVZFWTdYRzVjYmlBZ0lDQXZMeUJsWVhKc2VTQmhZbTl5ZENCcFppQnBkQ0JrYjJWemJpZDBJSFZ6WlNCMmNtMWNiaUFnSUNCamIyNXpkQ0IyY20xRmVIUWdQU0JxYzI5dUxtVjRkR1Z1YzJsdmJuTS9MbFpTVFNCaGN5QldNRlpTVFM1V1VrMGdmQ0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdhV1lnS0NGMmNtMUZlSFFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJSE5qYUdWdFlVWnBjbk4wVUdWeWMyOXVJRDBnZG5KdFJYaDBMbVpwY25OMFVHVnljMjl1TzF4dUlDQWdJR2xtSUNnaGMyTm9aVzFoUm1seWMzUlFaWEp6YjI0cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUdSbFptRjFiSFJQZFhSd2RYUlRZMkZzWlNBOUlITmphR1Z0WVVacGNuTjBVR1Z5YzI5dUxteHZiMnRCZEZSNWNHVk9ZVzFsSUQwOVBTQW5RbXhsYm1SVGFHRndaU2NnUHlBeExqQWdPaUF4TUM0d08xeHVYRzRnSUNBZ1kyOXVjM1FnYldGd1NFa2dQU0IwYUdsekxsOTJNRWx0Y0c5eWRFUmxaM0psWlUxaGNDaHpZMmhsYldGR2FYSnpkRkJsY25OdmJpNXNiMjlyUVhSSWIzSnBlbTl1ZEdGc1NXNXVaWElzSUdSbFptRjFiSFJQZFhSd2RYUlRZMkZzWlNrN1hHNGdJQ0FnWTI5dWMzUWdiV0Z3U0U4Z1BTQjBhR2x6TGw5Mk1FbHRjRzl5ZEVSbFozSmxaVTFoY0NoelkyaGxiV0ZHYVhKemRGQmxjbk52Ymk1c2IyOXJRWFJJYjNKcGVtOXVkR0ZzVDNWMFpYSXNJR1JsWm1GMWJIUlBkWFJ3ZFhSVFkyRnNaU2s3WEc0Z0lDQWdZMjl1YzNRZ2JXRndWa1FnUFNCMGFHbHpMbDkyTUVsdGNHOXlkRVJsWjNKbFpVMWhjQ2h6WTJobGJXRkdhWEp6ZEZCbGNuTnZiaTVzYjI5clFYUldaWEowYVdOaGJFUnZkMjRzSUdSbFptRjFiSFJQZFhSd2RYUlRZMkZzWlNrN1hHNGdJQ0FnWTI5dWMzUWdiV0Z3VmxVZ1BTQjBhR2x6TGw5Mk1FbHRjRzl5ZEVSbFozSmxaVTFoY0NoelkyaGxiV0ZHYVhKemRGQmxjbk52Ymk1c2IyOXJRWFJXWlhKMGFXTmhiRlZ3TENCa1pXWmhkV3gwVDNWMGNIVjBVMk5oYkdVcE8xeHVYRzRnSUNBZ2JHVjBJR0Z3Y0d4cFpYSTdYRzVjYmlBZ0lDQnBaaUFvYzJOb1pXMWhSbWx5YzNSUVpYSnpiMjR1Ykc5dmEwRjBWSGx3WlU1aGJXVWdQVDA5SUNkQ2JHVnVaRk5vWVhCbEp5a2dlMXh1SUNBZ0lDQWdZWEJ3YkdsbGNpQTlJRzVsZHlCV1VrMU1iMjlyUVhSRmVIQnlaWE56YVc5dVFYQndiR2xsY2lobGVIQnlaWE56YVc5dWN5d2diV0Z3U0Vrc0lHMWhjRWhQTENCdFlYQldSQ3dnYldGd1ZsVXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCaGNIQnNhV1Z5SUQwZ2JtVjNJRlpTVFV4dmIydEJkRUp2Ym1WQmNIQnNhV1Z5S0doMWJXRnViMmxrTENCdFlYQklTU3dnYldGd1NFOHNJRzFoY0ZaRUxDQnRZWEJXVlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdiRzl2YTBGMElEMGdkR2hwY3k1ZmFXMXdiM0owVEc5dmEwRjBLR2gxYldGdWIybGtMQ0JoY0hCc2FXVnlLVHRjYmx4dUlDQWdJR2xtSUNoelkyaGxiV0ZHYVhKemRGQmxjbk52Ymk1bWFYSnpkRkJsY25OdmJrSnZibVZQWm1aelpYUXBJSHRjYmlBZ0lDQWdJR3h2YjJ0QmRDNXZabVp6WlhSR2NtOXRTR1ZoWkVKdmJtVXVjMlYwS0Z4dUlDQWdJQ0FnSUNCelkyaGxiV0ZHYVhKemRGQmxjbk52Ymk1bWFYSnpkRkJsY25OdmJrSnZibVZQWm1aelpYUXVlQ0EvUHlBd0xqQXNYRzRnSUNBZ0lDQWdJSE5qYUdWdFlVWnBjbk4wVUdWeWMyOXVMbVpwY25OMFVHVnljMjl1UW05dVpVOW1abk5sZEM1NUlEOC9JREF1TURZc1hHNGdJQ0FnSUNBZ0lDMG9jMk5vWlcxaFJtbHljM1JRWlhKemIyNHVabWx5YzNSUVpYSnpiMjVDYjI1bFQyWm1jMlYwTG5vZ1B6OGdNQzR3S1N4Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR3h2YjJ0QmRDNXZabVp6WlhSR2NtOXRTR1ZoWkVKdmJtVXVjMlYwS0RBdU1Dd2dNQzR3Tml3Z01DNHdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJXVWswZ01DNHdJR0Z5WlNCbVlXTnBibWNnV2kwZ2FXNXpkR1ZoWkNCdlppQmFLMXh1SUNBZ0lHeHZiMnRCZEM1bVlXTmxSbkp2Ym5RdWMyVjBLREF1TUN3Z01DNHdMQ0F0TVM0d0tUdGNibHh1SUNBZ0lHbG1JQ2hoY0hCc2FXVnlJR2x1YzNSaGJtTmxiMllnVmxKTlRHOXZhMEYwUW05dVpVRndjR3hwWlhJcElIdGNiaUFnSUNBZ0lHRndjR3hwWlhJdVptRmpaVVp5YjI1MExuTmxkQ2d3TGpBc0lEQXVNQ3dnTFRFdU1DazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUd4dmIydEJkRHRjYmlBZ2ZWeHVYRzRnSUhCeWFYWmhkR1VnWDNZd1NXMXdiM0owUkdWbmNtVmxUV0Z3S0Z4dUlDQWdJSE5qYUdWdFlVUmxaM0psWlUxaGNEb2dWakJXVWswdVJtbHljM1JRWlhKemIyNUVaV2R5WldWTllYQWdmQ0IxYm1SbFptbHVaV1FzWEc0Z0lDQWdaR1ZtWVhWc2RFOTFkSEIxZEZOallXeGxPaUJ1ZFcxaVpYSXNYRzRnSUNrNklGWlNUVXh2YjJ0QmRGSmhibWRsVFdGd0lIdGNiaUFnSUNCamIyNXpkQ0JqZFhKMlpTQTlJSE5qYUdWdFlVUmxaM0psWlUxaGNEOHVZM1Z5ZG1VN1hHNGdJQ0FnYVdZZ0tFcFRUMDR1YzNSeWFXNW5hV1o1S0dOMWNuWmxLU0FoUFQwZ0oxc3dMREFzTUN3eExERXNNU3d4TERCZEp5a2dlMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NkRGRYSjJaWE1nYjJZZ1RHOXZhMEYwUkdWbmNtVmxUV0Z3SUdSbFptbHVaV1FnYVc0Z1ZsSk5JREF1TUNCaGNtVWdibTkwSUhOMWNIQnZjblJsWkNjcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQjRVbUZ1WjJVZ1BTQnpZMmhsYldGRVpXZHlaV1ZOWVhBL0xuaFNZVzVuWlNBL1B5QTVNQzR3TzF4dUlDQWdJR052Ym5OMElIbFNZVzVuWlNBOUlITmphR1Z0WVVSbFozSmxaVTFoY0Q4dWVWSmhibWRsSUQ4L0lHUmxabUYxYkhSUGRYUndkWFJUWTJGc1pUdGNibHh1SUNBZ0lDOHZJRWwwSUcxcFoyaDBJR05oZFhObElFNWhUaUIzYUdWdUlHQjRVbUZ1WjJWZ0lHbHpJSFJ2YnlCemJXRnNiRnh1SUNBZ0lDOHZJSGRvYVdOb0lHMWhhMlZ6SUhSb1pTQnRaWE5vSUc5bUlIUm9aU0JvWldGa0lHUnBjMkZ3Y0dWaGNseHVJQ0FnSUM4dklGTmxaVG9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNCcGVHbDJMM1JvY21WbExYWnliUzlwYzNOMVpYTXZNVEl3TVZ4dUlDQWdJR2xtSUNoNFVtRnVaMlVnUENCSlRsQlZWRjlOUVZoZlZrRk1WVVZmVFVsT1NVMVZUU2tnZTF4dUlDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDZFdVazFNYjI5clFYUk1iMkZrWlhKUWJIVm5hVzQ2SUhoU1lXNW5aU0J2WmlCaElHUmxaM0psWlNCdFlYQWdhWE1nZEc5dklITnRZV3hzTGlCRGIyNXphV1JsY2lCeVpYWnBaWGRwYm1jZ2RHaGxJR1JsWjNKbFpTQnRZWEFoSnlrN1hHNGdJQ0FnSUNCNFVtRnVaMlVnUFNCSlRsQlZWRjlOUVZoZlZrRk1WVVZmVFVsT1NVMVZUVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRlpTVFV4dmIydEJkRkpoYm1kbFRXRndLSGhTWVc1blpTd2dlVkpoYm1kbEtUdGNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdYMmx0Y0c5eWRFeHZiMnRCZENob2RXMWhibTlwWkRvZ1ZsSk5TSFZ0WVc1dmFXUXNJR0Z3Y0d4cFpYSTZJRlpTVFV4dmIydEJkRUZ3Y0d4cFpYSXBPaUJXVWsxTWIyOXJRWFFnZTF4dUlDQWdJR052Ym5OMElHeHZiMnRCZENBOUlHNWxkeUJXVWsxTWIyOXJRWFFvYUhWdFlXNXZhV1FzSUdGd2NHeHBaWElwTzF4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11YUdWc2NHVnlVbTl2ZENrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYUdWc2NHVnlJRDBnYm1WM0lGWlNUVXh2YjJ0QmRFaGxiSEJsY2loc2IyOXJRWFFwTzF4dUlDQWdJQ0FnZEdocGN5NW9aV3h3WlhKU2IyOTBMbUZrWkNob1pXeHdaWElwTzF4dUlDQWdJQ0FnYUdWc2NHVnlMbkpsYm1SbGNrOXlaR1Z5SUQwZ2RHaHBjeTVvWld4d1pYSlNiMjkwTG5KbGJtUmxjazl5WkdWeU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJzYjI5clFYUTdYRzRnSUgxY2JuMWNiaUlzSWk4cUlHVnpiR2x1ZEMxa2FYTmhZbXhsSUVCMGVYQmxjMk55YVhCMExXVnpiR2x1ZEM5dVlXMXBibWN0WTI5dWRtVnVkR2x2YmlBcUwxeHVYRzR2S2lwY2JpQXFJRkpsY0hKbGMyVnVkSE1nWVNCMGVYQmxJRzltSUdGd2NHeHBaWEl1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiMjV6ZENCV1VrMU1iMjlyUVhSVWVYQmxUbUZ0WlNBOUlIdGNiaUFnUW05dVpUb2dKMkp2Ym1VbkxGeHVJQ0JGZUhCeVpYTnphVzl1T2lBblpYaHdjbVZ6YzJsdmJpY3NYRzU5TzF4dVhHNWxlSEJ2Y25RZ2RIbHdaU0JXVWsxTWIyOXJRWFJVZVhCbFRtRnRaU0E5SUhSNWNHVnZaaUJXVWsxTWIyOXJRWFJVZVhCbFRtRnRaVnRyWlhsdlppQjBlWEJsYjJZZ1ZsSk5URzl2YTBGMFZIbHdaVTVoYldWZE8xeHVJaXdpTHlvcVhHNGdLaUJaYjJsdWEyVmtJR1p5YjIwZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyMXlaRzl2WWk5MGFISmxaUzVxY3k5aWJHOWlMMjFoYzNSbGNpOWxlR0Z0Y0d4bGN5OXFjMjB2Ykc5aFpHVnljeTlIVEZSR1RHOWhaR1Z5TG1welhHNGdLaTljYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ5WlhOdmJIWmxWVkpNS0hWeWJEb2djM1J5YVc1bkxDQndZWFJvT2lCemRISnBibWNwT2lCemRISnBibWNnZTF4dUlDQXZMeUJKYm5aaGJHbGtJRlZTVEZ4dUlDQnBaaUFvZEhsd1pXOW1JSFZ5YkNBaFBUMGdKM04wY21sdVp5Y2dmSHdnZFhKc0lEMDlQU0FuSnlrZ2NtVjBkWEp1SUNjbk8xeHVYRzRnSUM4dklFaHZjM1FnVW1Wc1lYUnBkbVVnVlZKTVhHNGdJR2xtSUNndlhtaDBkSEJ6UHpwY1hDOWNYQzh2YVM1MFpYTjBLSEJoZEdncElDWW1JQzllWEZ3dkx5NTBaWE4wS0hWeWJDa3BJSHRjYmlBZ0lDQndZWFJvSUQwZ2NHRjBhQzV5WlhCc1lXTmxLQzhvWG1oMGRIQnpQenBjWEM5Y1hDOWJYaTlkS3lrdUtpOXBMQ0FuSkRFbktUdGNiaUFnZlZ4dVhHNGdJQzh2SUVGaWMyOXNkWFJsSUZWU1RDQm9kSFJ3T2k4dkxHaDBkSEJ6T2k4dkxDOHZYRzRnSUdsbUlDZ3ZYaWhvZEhSd2N6ODZLVDljWEM5Y1hDOHZhUzUwWlhOMEtIVnliQ2twSUhKbGRIVnliaUIxY213N1hHNWNiaUFnTHk4Z1JHRjBZU0JWVWtsY2JpQWdhV1lnS0M5ZVpHRjBZVG91S2l3dUtpUXZhUzUwWlhOMEtIVnliQ2twSUhKbGRIVnliaUIxY213N1hHNWNiaUFnTHk4Z1FteHZZaUJWVWt4Y2JpQWdhV1lnS0M5ZVlteHZZam91S2lRdmFTNTBaWE4wS0hWeWJDa3BJSEpsZEhWeWJpQjFjbXc3WEc1Y2JpQWdMeThnVW1Wc1lYUnBkbVVnVlZKTVhHNGdJSEpsZEhWeWJpQndZWFJvSUNzZ2RYSnNPMXh1ZlZ4dUlpd2lhVzF3YjNKMElIUjVjR1VnZXlCSFRGUkdMQ0JIVEZSR1RHOWhaR1Z5VUd4MVoybHVMQ0JIVEZSR1VHRnljMlZ5SUgwZ1puSnZiU0FuZEdoeVpXVXZaWGhoYlhCc1pYTXZhbk50TDJ4dllXUmxjbk12UjB4VVJreHZZV1JsY2k1cWN5YzdYRzVwYlhCdmNuUWdkSGx3WlNCN0lGWlNUVEJOWlhSaElIMGdabkp2YlNBbkxpOVdVazB3VFdWMFlTYzdYRzVwYlhCdmNuUWdkSGx3WlNCN0lGWlNUVEZOWlhSaElIMGdabkp2YlNBbkxpOVdVazB4VFdWMFlTYzdYRzVwYlhCdmNuUWdkSGx3WlNCN0lGWlNUVTFsZEdFZ2ZTQm1jbTl0SUNjdUwxWlNUVTFsZEdFbk8xeHVhVzF3YjNKMElIUjVjR1VnZXlCV1VrMU5aWFJoVEc5aFpHVnlVR3gxWjJsdVQzQjBhVzl1Y3lCOUlHWnliMjBnSnk0dlZsSk5UV1YwWVV4dllXUmxjbEJzZFdkcGJrOXdkR2x2Ym5Nbk8xeHVhVzF3YjNKMElIUjVjR1VnS2lCaGN5QldNRlpTVFNCbWNtOXRJQ2RBY0dsNGFYWXZkSGx3WlhNdGRuSnRMVEF1TUNjN1hHNXBiWEJ2Y25RZ2RIbHdaU0FxSUdGeklGWXhWbEpOVTJOb1pXMWhJR1p5YjIwZ0owQndhWGhwZGk5MGVYQmxjeTEyY20xakxYWnliUzB4TGpBbk8xeHVhVzF3YjNKMElDb2dZWE1nVkVoU1JVVWdabkp2YlNBbmRHaHlaV1VuTzF4dWFXMXdiM0owSUhzZ2NtVnpiMngyWlZWU1RDQjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekwzSmxjMjlzZG1WVlVrd25PMXh1YVcxd2IzSjBJSHNnUjB4VVJpQmhjeUJIVEZSR1UyTm9aVzFoSUgwZ1puSnZiU0FuUUdkc2RHWXRkSEpoYm5ObWIzSnRMMk52Y21Vbk8xeHVYRzR2S2lwY2JpQXFJRkJ2YzNOcFlteGxJSE53WldNZ2RtVnljMmx2Ym5NZ2FYUWdjbVZqYjJkdWFYcGxjeTVjYmlBcUwxeHVZMjl1YzNRZ1VFOVRVMGxDVEVWZlUxQkZRMTlXUlZKVFNVOU9VeUE5SUc1bGR5QlRaWFFvV3ljeExqQW5MQ0FuTVM0d0xXSmxkR0VuWFNrN1hHNWNiaThxS2x4dUlDb2dRU0J3YkhWbmFXNGdiMllnUjB4VVJreHZZV1JsY2lCMGFHRjBJR2x0Y0c5eWRITWdZU0I3UUd4cGJtc2dWbEpOTVUxbGRHRjlJR1p5YjIwZ1lTQldVazBnWlhoMFpXNXphVzl1SUc5bUlHRWdSMHhVUmk1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGWlNUVTFsZEdGTWIyRmtaWEpRYkhWbmFXNGdhVzF3YkdWdFpXNTBjeUJIVEZSR1RHOWhaR1Z5VUd4MVoybHVJSHRjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhCaGNuTmxjam9nUjB4VVJsQmhjbk5sY2p0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nU1dZZ1lHWmhiSE5sWUN3Z2FYUWdkMjl1SjNRZ2JHOWhaQ0JwZEhNZ2RHaDFiV0p1WVdsc0lHbHRZV2RsSUNoN1FHeHBibXNnVmxKTk1VMWxkR0V1ZEdoMWJXSnVZV2xzU1cxaFoyVjlLUzVjYmlBZ0lDb2dZSFJ5ZFdWZ0lHSjVJR1JsWm1GMWJIUXVYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdibVZsWkZSb2RXMWlibUZwYkVsdFlXZGxPaUJpYjI5c1pXRnVPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJJR3hwYzNRZ2IyWWdiR2xqWlc1elpTQjFjbXh6TGx4dUlDQWdLaUJVYUdseklHMWxkR0VnYkc5aFpHVnlJSGRwYkd3Z1lXTmpaWEIwSUhSb1pYTmxJR0JzYVdObGJuTmxWWEpzWUhNdVhHNGdJQ0FxSUU5MGFHVnlkMmx6WlNCcGRDQjNiMjRuZENCaVpTQnNiMkZrWldRdVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ1lXTmpaWEIwVEdsalpXNXpaVlZ5YkhNNklITjBjbWx1WjF0ZE8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCWGFHVjBhR1Z5SUdsMElITm9iM1ZzWkNCaFkyTmxjSFFnVmxKTk1DNHdJRzFsZEdFZ2IzSWdibTkwTGx4dUlDQWdLaUJPYjNSbElIUm9ZWFFnYVhRZ2JXbG5hSFFnYkc5aFpDQjdRR3hwYm1zZ1ZsSk5NRTFsZEdGOUlHbHVjM1JsWVdRZ2IyWWdlMEJzYVc1cklGWlNUVEZOWlhSaGZTQjNhR1Z1SUhSb2FYTWdhWE1nWUhSeWRXVmdMbHh1SUNBZ0tpQmdkSEoxWldBZ1lua2daR1ZtWVhWc2RDNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QmhZMk5sY0hSV01FMWxkR0U2SUdKdmIyeGxZVzQ3WEc1Y2JpQWdjSFZpYkdsaklHZGxkQ0J1WVcxbEtDazZJSE4wY21sdVp5QjdYRzRnSUNBZ0x5OGdWMlVnYzJodmRXeGtJSFZ6WlNCMGFHVWdaWGgwWlc1emFXOXVJRzVoYldVZ2FXNXpkR1ZoWkNCaWRYUWdkMlVnYUdGMlpTQnRkV3gwYVhCc1pTQndiSFZuYVc1eklHWnZjaUJoYmlCbGVIUmxibk5wYjI0dUxpNWNiaUFnSUNCeVpYUjFjbTRnSjFaU1RVMWxkR0ZNYjJGa1pYSlFiSFZuYVc0bk8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklHTnZibk4wY25WamRHOXlLSEJoY25ObGNqb2dSMHhVUmxCaGNuTmxjaXdnYjNCMGFXOXVjejg2SUZaU1RVMWxkR0ZNYjJGa1pYSlFiSFZuYVc1UGNIUnBiMjV6S1NCN1hHNGdJQ0FnZEdocGN5NXdZWEp6WlhJZ1BTQndZWEp6WlhJN1hHNWNiaUFnSUNCMGFHbHpMbTVsWldSVWFIVnRZbTVoYVd4SmJXRm5aU0E5SUc5d2RHbHZibk0vTG01bFpXUlVhSFZ0WW01aGFXeEpiV0ZuWlNBL1B5QjBjblZsTzF4dUlDQWdJSFJvYVhNdVlXTmpaWEIwVEdsalpXNXpaVlZ5YkhNZ1BTQnZjSFJwYjI1elB5NWhZMk5sY0hSTWFXTmxibk5sVlhKc2N5QS9QeUJiSjJoMGRIQnpPaTh2ZG5KdExtUmxkaTlzYVdObGJuTmxjeTh4TGpBdkoxMDdYRzRnSUNBZ2RHaHBjeTVoWTJObGNIUldNRTFsZEdFZ1BTQnZjSFJwYjI1elB5NWhZMk5sY0hSV01FMWxkR0VnUHo4Z2RISjFaVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJoYzNsdVl5QmhablJsY2xKdmIzUW9aMngwWmpvZ1IweFVSaWs2SUZCeWIyMXBjMlU4ZG05cFpENGdlMXh1SUNBZ0lHZHNkR1l1ZFhObGNrUmhkR0V1ZG5KdFRXVjBZU0E5SUdGM1lXbDBJSFJvYVhNdVgybHRjRzl5ZENobmJIUm1LVHRjYmlBZ2ZWeHVYRzRnSUhCeWFYWmhkR1VnWVhONWJtTWdYMmx0Y0c5eWRDaG5iSFJtT2lCSFRGUkdLVG9nVUhKdmJXbHpaVHhXVWsxTlpYUmhJSHdnYm5Wc2JENGdlMXh1SUNBZ0lHTnZibk4wSUhZeFVtVnpkV3gwSUQwZ1lYZGhhWFFnZEdocGN5NWZkakZKYlhCdmNuUW9aMngwWmlrN1hHNGdJQ0FnYVdZZ0tIWXhVbVZ6ZFd4MElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMk1WSmxjM1ZzZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQjJNRkpsYzNWc2RDQTlJR0YzWVdsMElIUm9hWE11WDNZd1NXMXdiM0owS0dkc2RHWXBPMXh1SUNBZ0lHbG1JQ2gyTUZKbGMzVnNkQ0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkakJTWlhOMWJIUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0J3Y21sMllYUmxJR0Z6ZVc1aklGOTJNVWx0Y0c5eWRDaG5iSFJtT2lCSFRGUkdLVG9nVUhKdmJXbHpaVHhXVWsweFRXVjBZU0I4SUc1MWJHdytJSHRjYmlBZ0lDQmpiMjV6ZENCcWMyOXVJRDBnZEdocGN5NXdZWEp6WlhJdWFuTnZiaUJoY3lCSFRGUkdVMk5vWlcxaExrbEhURlJHTzF4dVhHNGdJQ0FnTHk4Z1pXRnliSGtnWVdKdmNuUWdhV1lnYVhRZ1pHOWxjMjRuZENCMWMyVWdkbkp0WEc0Z0lDQWdZMjl1YzNRZ2FYTldVazFWYzJWa0lEMGdhbk52Ymk1bGVIUmxibk5wYjI1elZYTmxaRDh1YVc1a1pYaFBaaWduVmxKTlExOTJjbTBuS1NBaFBUMGdMVEU3WEc0Z0lDQWdhV1lnS0NGcGMxWlNUVlZ6WldRcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUdWNGRHVnVjMmx2YmlBOUlHcHpiMjR1WlhoMFpXNXphVzl1Y3o4dVd5ZFdVazFEWDNaeWJTZGRJR0Z6SUZZeFZsSk5VMk5vWlcxaExsWlNUVU5XVWswZ2ZDQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2FXWWdLR1Y0ZEdWdWMybHZiaUE5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQnpjR1ZqVm1WeWMybHZiaUE5SUdWNGRHVnVjMmx2Ymk1emNHVmpWbVZ5YzJsdmJqdGNiaUFnSUNCcFppQW9JVkJQVTFOSlFreEZYMU5RUlVOZlZrVlNVMGxQVGxNdWFHRnpLSE53WldOV1pYSnphVzl1S1NrZ2UxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLR0JXVWsxTlpYUmhURzloWkdWeVVHeDFaMmx1T2lCVmJtdHViM2R1SUZaU1RVTmZkbkp0SUhOd1pXTldaWEp6YVc5dUlGd2lKSHR6Y0dWalZtVnljMmx2Ym4xY0ltQXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2MyTm9aVzFoVFdWMFlTQTlJR1Y0ZEdWdWMybHZiaTV0WlhSaE8xeHVJQ0FnSUdsbUlDZ2hjMk5vWlcxaFRXVjBZU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z2RHaHliM2NnWVc0Z1pYSnliM0lnYVdZZ1lXTmpaWEIwVmpCTlpYUmhJR2x6SUdaaGJITmxYRzRnSUNBZ1kyOXVjM1FnYkdsalpXNXpaVlZ5YkNBOUlITmphR1Z0WVUxbGRHRXViR2xqWlc1elpWVnliRHRjYmlBZ0lDQmpiMjV6ZENCaFkyTmxjSFJNYVdObGJuTmxWWEpzYzFObGRDQTlJRzVsZHlCVFpYUW9kR2hwY3k1aFkyTmxjSFJNYVdObGJuTmxWWEpzY3lrN1hHNGdJQ0FnYVdZZ0tDRmhZMk5sY0hSTWFXTmxibk5sVlhKc2MxTmxkQzVvWVhNb2JHbGpaVzV6WlZWeWJDa3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdWbEpOVFdWMFlVeHZZV1JsY2xCc2RXZHBiam9nVkdobElHeHBZMlZ1YzJVZ2RYSnNJRndpSkh0c2FXTmxibk5sVlhKc2ZWd2lJR2x6SUc1dmRDQmhZMk5sY0hSbFpHQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0IwYUhWdFltNWhhV3hKYldGblpUb2dTRlJOVEVsdFlXZGxSV3hsYldWdWRDQjhJSFZ1WkdWbWFXNWxaQ0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0JwWmlBb2RHaHBjeTV1WldWa1ZHaDFiV0p1WVdsc1NXMWhaMlVnSmlZZ2MyTm9aVzFoVFdWMFlTNTBhSFZ0WW01aGFXeEpiV0ZuWlNBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCMGFIVnRZbTVoYVd4SmJXRm5aU0E5SUNoaGQyRnBkQ0IwYUdsekxsOWxlSFJ5WVdOMFIweFVSa2x0WVdkbEtITmphR1Z0WVUxbGRHRXVkR2gxYldKdVlXbHNTVzFoWjJVcEtTQS9QeUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lHMWxkR0ZXWlhKemFXOXVPaUFuTVNjc1hHNGdJQ0FnSUNCdVlXMWxPaUJ6WTJobGJXRk5aWFJoTG01aGJXVXNYRzRnSUNBZ0lDQjJaWEp6YVc5dU9pQnpZMmhsYldGTlpYUmhMblpsY25OcGIyNHNYRzRnSUNBZ0lDQmhkWFJvYjNKek9pQnpZMmhsYldGTlpYUmhMbUYxZEdodmNuTXNYRzRnSUNBZ0lDQmpiM0I1Y21sbmFIUkpibVp2Y20xaGRHbHZiam9nYzJOb1pXMWhUV1YwWVM1amIzQjVjbWxuYUhSSmJtWnZjbTFoZEdsdmJpeGNiaUFnSUNBZ0lHTnZiblJoWTNSSmJtWnZjbTFoZEdsdmJqb2djMk5vWlcxaFRXVjBZUzVqYjI1MFlXTjBTVzVtYjNKdFlYUnBiMjRzWEc0Z0lDQWdJQ0J5WldabGNtVnVZMlZ6T2lCelkyaGxiV0ZOWlhSaExuSmxabVZ5Wlc1alpYTXNYRzRnSUNBZ0lDQjBhR2x5WkZCaGNuUjVUR2xqWlc1elpYTTZJSE5qYUdWdFlVMWxkR0V1ZEdocGNtUlFZWEowZVV4cFkyVnVjMlZ6TEZ4dUlDQWdJQ0FnZEdoMWJXSnVZV2xzU1cxaFoyVXNYRzRnSUNBZ0lDQnNhV05sYm5ObFZYSnNPaUJ6WTJobGJXRk5aWFJoTG14cFkyVnVjMlZWY213c1hHNGdJQ0FnSUNCaGRtRjBZWEpRWlhKdGFYTnphVzl1T2lCelkyaGxiV0ZOWlhSaExtRjJZWFJoY2xCbGNtMXBjM05wYjI0c1hHNGdJQ0FnSUNCaGJHeHZkMFY0WTJWemMybDJaV3g1Vm1sdmJHVnVkRlZ6WVdkbE9pQnpZMmhsYldGTlpYUmhMbUZzYkc5M1JYaGpaWE56YVhabGJIbFdhVzlzWlc1MFZYTmhaMlVzWEc0Z0lDQWdJQ0JoYkd4dmQwVjRZMlZ6YzJsMlpXeDVVMlY0ZFdGc1ZYTmhaMlU2SUhOamFHVnRZVTFsZEdFdVlXeHNiM2RGZUdObGMzTnBkbVZzZVZObGVIVmhiRlZ6WVdkbExGeHVJQ0FnSUNBZ1kyOXRiV1Z5WTJsaGJGVnpZV2RsT2lCelkyaGxiV0ZOWlhSaExtTnZiVzFsY21OcFlXeFZjMkZuWlN4Y2JpQWdJQ0FnSUdGc2JHOTNVRzlzYVhScFkyRnNUM0pTWld4cFoybHZkWE5WYzJGblpUb2djMk5vWlcxaFRXVjBZUzVoYkd4dmQxQnZiR2wwYVdOaGJFOXlVbVZzYVdkcGIzVnpWWE5oWjJVc1hHNGdJQ0FnSUNCaGJHeHZkMEZ1ZEdsemIyTnBZV3hQY2toaGRHVlZjMkZuWlRvZ2MyTm9aVzFoVFdWMFlTNWhiR3h2ZDBGdWRHbHpiMk5wWVd4UGNraGhkR1ZWYzJGblpTeGNiaUFnSUNBZ0lHTnlaV1JwZEU1dmRHRjBhVzl1T2lCelkyaGxiV0ZOWlhSaExtTnlaV1JwZEU1dmRHRjBhVzl1TEZ4dUlDQWdJQ0FnWVd4c2IzZFNaV1JwYzNSeWFXSjFkR2x2YmpvZ2MyTm9aVzFoVFdWMFlTNWhiR3h2ZDFKbFpHbHpkSEpwWW5WMGFXOXVMRnh1SUNBZ0lDQWdiVzlrYVdacFkyRjBhVzl1T2lCelkyaGxiV0ZOWlhSaExtMXZaR2xtYVdOaGRHbHZiaXhjYmlBZ0lDQWdJRzkwYUdWeVRHbGpaVzV6WlZWeWJEb2djMk5vWlcxaFRXVjBZUzV2ZEdobGNreHBZMlZ1YzJWVmNtd3NYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdZWE41Ym1NZ1gzWXdTVzF3YjNKMEtHZHNkR1k2SUVkTVZFWXBPaUJRY205dGFYTmxQRlpTVFRCTlpYUmhJSHdnYm5Wc2JENGdlMXh1SUNBZ0lHTnZibk4wSUdwemIyNGdQU0IwYUdsekxuQmhjbk5sY2k1cWMyOXVJR0Z6SUVkTVZFWlRZMmhsYldFdVNVZE1WRVk3WEc1Y2JpQWdJQ0F2THlCbFlYSnNlU0JoWW05eWRDQnBaaUJwZENCa2IyVnpiaWQwSUhWelpTQjJjbTFjYmlBZ0lDQmpiMjV6ZENCMmNtMUZlSFFnUFNCcWMyOXVMbVY0ZEdWdWMybHZibk0vTGxaU1RTQmhjeUJXTUZaU1RTNVdVazBnZkNCMWJtUmxabWx1WldRN1hHNGdJQ0FnYVdZZ0tDRjJjbTFGZUhRcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUhOamFHVnRZVTFsZEdFZ1BTQjJjbTFGZUhRdWJXVjBZVHRjYmlBZ0lDQnBaaUFvSVhOamFHVnRZVTFsZEdFcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJSFJvY205M0lHRnVJR1Z5Y205eUlHbG1JR0ZqWTJWd2RGWXdUV1YwWVNCcGN5Qm1ZV3h6WlZ4dUlDQWdJR2xtSUNnaGRHaHBjeTVoWTJObGNIUldNRTFsZEdFcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblZsSk5UV1YwWVV4dllXUmxjbEJzZFdkcGJqb2dRWFIwWlcxd2RHVmtJSFJ2SUd4dllXUWdWbEpOTUM0d0lHMWxkR0VnWW5WMElHRmpZMlZ3ZEZZd1RXVjBZU0JwY3lCbVlXeHpaU2NwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUd4dllXUWdkR2gxYldKdVlXbHNJSFJsZUhSMWNtVmNiaUFnSUNCc1pYUWdkR1Y0ZEhWeVpUb2dWRWhTUlVVdVZHVjRkSFZ5WlNCOElHNTFiR3dnZkNCMWJtUmxabWx1WldRN1hHNGdJQ0FnYVdZZ0tIUm9hWE11Ym1WbFpGUm9kVzFpYm1GcGJFbHRZV2RsSUNZbUlITmphR1Z0WVUxbGRHRXVkR1Y0ZEhWeVpTQWhQU0J1ZFd4c0lDWW1JSE5qYUdWdFlVMWxkR0V1ZEdWNGRIVnlaU0FoUFQwZ0xURXBJSHRjYmlBZ0lDQWdJSFJsZUhSMWNtVWdQU0JoZDJGcGRDQjBhR2x6TG5CaGNuTmxjaTVuWlhSRVpYQmxibVJsYm1ONUtDZDBaWGgwZFhKbEp5d2djMk5vWlcxaFRXVjBZUzUwWlhoMGRYSmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ2JXVjBZVlpsY25OcGIyNDZJQ2N3Snl4Y2JpQWdJQ0FnSUdGc2JHOTNaV1JWYzJWeVRtRnRaVG9nYzJOb1pXMWhUV1YwWVM1aGJHeHZkMlZrVlhObGNrNWhiV1VzWEc0Z0lDQWdJQ0JoZFhSb2IzSTZJSE5qYUdWdFlVMWxkR0V1WVhWMGFHOXlMRnh1SUNBZ0lDQWdZMjl0YldWeVkybGhiRlZ6YzJGblpVNWhiV1U2SUhOamFHVnRZVTFsZEdFdVkyOXRiV1Z5WTJsaGJGVnpjMkZuWlU1aGJXVXNYRzRnSUNBZ0lDQmpiMjUwWVdOMFNXNW1iM0p0WVhScGIyNDZJSE5qYUdWdFlVMWxkR0V1WTI5dWRHRmpkRWx1Wm05eWJXRjBhVzl1TEZ4dUlDQWdJQ0FnYkdsalpXNXpaVTVoYldVNklITmphR1Z0WVUxbGRHRXViR2xqWlc1elpVNWhiV1VzWEc0Z0lDQWdJQ0J2ZEdobGNreHBZMlZ1YzJWVmNtdzZJSE5qYUdWdFlVMWxkR0V1YjNSb1pYSk1hV05sYm5ObFZYSnNMRnh1SUNBZ0lDQWdiM1JvWlhKUVpYSnRhWE56YVc5dVZYSnNPaUJ6WTJobGJXRk5aWFJoTG05MGFHVnlVR1Z5YldsemMybHZibFZ5YkN4Y2JpQWdJQ0FnSUhKbFptVnlaVzVqWlRvZ2MyTm9aVzFoVFdWMFlTNXlaV1psY21WdVkyVXNYRzRnSUNBZ0lDQnpaWGgxWVd4VmMzTmhaMlZPWVcxbE9pQnpZMmhsYldGTlpYUmhMbk5sZUhWaGJGVnpjMkZuWlU1aGJXVXNYRzRnSUNBZ0lDQjBaWGgwZFhKbE9pQjBaWGgwZFhKbElEOC9JSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQWdJSFJwZEd4bE9pQnpZMmhsYldGTlpYUmhMblJwZEd4bExGeHVJQ0FnSUNBZ2RtVnljMmx2YmpvZ2MyTm9aVzFoVFdWMFlTNTJaWEp6YVc5dUxGeHVJQ0FnSUNBZ2RtbHZiR1Z1ZEZWemMyRm5aVTVoYldVNklITmphR1Z0WVUxbGRHRXVkbWx2YkdWdWRGVnpjMkZuWlU1aGJXVXNYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdZWE41Ym1NZ1gyVjRkSEpoWTNSSFRGUkdTVzFoWjJVb2FXNWtaWGc2SUc1MWJXSmxjaWs2SUZCeWIyMXBjMlU4U0ZSTlRFbHRZV2RsUld4bGJXVnVkQ0I4SUc1MWJHdytJSHRjYmlBZ0lDQmpiMjV6ZENCcWMyOXVJRDBnZEdocGN5NXdZWEp6WlhJdWFuTnZiaUJoY3lCSFRGUkdVMk5vWlcxaExrbEhURlJHTzF4dVhHNGdJQ0FnWTI5dWMzUWdjMjkxY21ObElEMGdhbk52Ymk1cGJXRm5aWE0vTGx0cGJtUmxlRjA3WEc1Y2JpQWdJQ0JwWmlBb2MyOTFjbU5sSUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGNiaUFnSUNBZ0lDQWdZRlpTVFUxbGRHRk1iMkZrWlhKUWJIVm5hVzQ2SUVGMGRHVnRjSFFnZEc4Z2RYTmxJR2x0WVdkbGMxc2tlMmx1WkdWNGZWMGdiMllnWjJ4VVJpQmhjeUJoSUhSb2RXMWlibUZwYkNCaWRYUWdkR2hsSUdsdFlXZGxJR1J2WlhOdUozUWdaWGhwYzNSZ0xGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRkpsWmpvZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyMXlaRzl2WWk5MGFISmxaUzVxY3k5aWJHOWlMM0l4TWpRdlpYaGhiWEJzWlhNdmFuTnRMMnh2WVdSbGNuTXZSMHhVUmt4dllXUmxjaTVxY3lOTU1qUTJOMXh1WEc0Z0lDQWdMeThnWUhOdmRYSmpaUzUxY21sZ0lHMXBaMmgwSUdKbElHRWdjbVZtWlhKbGJtTmxJSFJ2SUdFZ1ptbHNaVnh1SUNBZ0lHeGxkQ0J6YjNWeVkyVlZVa2s2SUhOMGNtbHVaeUI4SUhWdVpHVm1hVzVsWkNBOUlITnZkWEpqWlM1MWNtazdYRzVjYmlBZ0lDQXZMeUJNYjJGa0lIUm9aU0JpYVc1aGNua2dZWE1nWVNCaWJHOWlYRzRnSUNBZ2FXWWdLSE52ZFhKalpTNWlkV1ptWlhKV2FXVjNJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR052Ym5OMElHSjFabVpsY2xacFpYY2dQU0JoZDJGcGRDQjBhR2x6TG5CaGNuTmxjaTVuWlhSRVpYQmxibVJsYm1ONUtDZGlkV1ptWlhKV2FXVjNKeXdnYzI5MWNtTmxMbUoxWm1abGNsWnBaWGNwTzF4dUlDQWdJQ0FnWTI5dWMzUWdZbXh2WWlBOUlHNWxkeUJDYkc5aUtGdGlkV1ptWlhKV2FXVjNYU3dnZXlCMGVYQmxPaUJ6YjNWeVkyVXViV2x0WlZSNWNHVWdmU2s3WEc0Z0lDQWdJQ0J6YjNWeVkyVlZVa2tnUFNCVlVrd3VZM0psWVhSbFQySnFaV04wVlZKTUtHSnNiMklwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoemIzVnlZMlZWVWtrZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLRnh1SUNBZ0lDQWdJQ0JnVmxKTlRXVjBZVXh2WVdSbGNsQnNkV2RwYmpvZ1FYUjBaVzF3ZENCMGJ5QjFjMlVnYVcxaFoyVnpXeVI3YVc1a1pYaDlYU0J2WmlCbmJGUkdJR0Z6SUdFZ2RHaDFiV0p1WVdsc0lHSjFkQ0IwYUdVZ2FXMWhaMlVnWTI5MWJHUnVKM1FnYkc5aFpDQndjbTl3WlhKc2VXQXNYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2JHOWhaR1Z5SUQwZ2JtVjNJRlJJVWtWRkxrbHRZV2RsVEc5aFpHVnlLQ2s3WEc0Z0lDQWdjbVYwZFhKdUlHRjNZV2wwSUd4dllXUmxjaTVzYjJGa1FYTjVibU1vY21WemIyeDJaVlZTVENoemIzVnlZMlZWVWtrc0lDaDBhR2x6TG5CaGNuTmxjaUJoY3lCaGJua3BMbTl3ZEdsdmJuTXVjR0YwYUNrcExtTmhkR05vS0NobGNuSnZjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWhsY25KdmNpazdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSjFaU1RVMWxkR0ZNYjJGa1pYSlFiSFZuYVc0NklFWmhhV3hsWkNCMGJ5QnNiMkZrSUdFZ2RHaDFiV0p1WVdsc0lHbHRZV2RsSnlrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJQ29nWVhNZ1ZFaFNSVVVnWm5KdmJTQW5kR2h5WldVbk8xeHVhVzF3YjNKMElIc2dWbEpOUlhod2NtVnpjMmx2YmsxaGJtRm5aWElnZlNCbWNtOXRJQ2N1TDJWNGNISmxjM05wYjI1ekwxWlNUVVY0Y0hKbGMzTnBiMjVOWVc1aFoyVnlKenRjYm1sdGNHOXlkQ0I3SUZaU1RVWnBjbk4wVUdWeWMyOXVJSDBnWm5KdmJTQW5MaTltYVhKemRGQmxjbk52Ymk5V1VrMUdhWEp6ZEZCbGNuTnZiaWM3WEc1cGJYQnZjblFnZXlCV1VrMUlkVzFoYm05cFpDQjlJR1p5YjIwZ0p5NHZhSFZ0WVc1dmFXUXZWbEpOU0hWdFlXNXZhV1FuTzF4dWFXMXdiM0owSUhzZ1ZsSk5URzl2YTBGMElIMGdabkp2YlNBbkxpOXNiMjlyUVhRdlZsSk5URzl2YTBGMEp6dGNibWx0Y0c5eWRDQjdJRlpTVFUxbGRHRWdmU0JtY205dElDY3VMMjFsZEdFdlZsSk5UV1YwWVNjN1hHNXBiWEJ2Y25RZ2V5QldVazFEYjNKbFVHRnlZVzFsZEdWeWN5QjlJR1p5YjIwZ0p5NHZWbEpOUTI5eVpWQmhjbUZ0WlhSbGNuTW5PMXh1WEc0dktpcGNiaUFxSUVFZ1kyeGhjM01nZEdoaGRDQnlaWEJ5WlhObGJuUnpJR0VnYzJsdVoyeGxJRlpTVFNCdGIyUmxiQzVjYmlBcUlGUm9hWE1nWTJ4aGMzTWdiMjVzZVNCcGJtTnNkV1JsY3lCamIzSmxJSE53WldNZ2IyWWdkR2hsSUZaU1RTQW9ZRlpTVFVOZmRuSnRZQ2t1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCV1VrMURiM0psSUh0Y2JpQWdMeW9xWEc0Z0lDQXFJR0JVU0ZKRlJTNUhjbTkxY0dBZ2RHaGhkQ0JqYjI1MFlXbHVjeUIwYUdVZ1pXNTBhWEpsSUZaU1RTNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQnpZMlZ1WlRvZ1ZFaFNSVVV1UjNKdmRYQTdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnZiblJoYVc1eklHMWxkR0VnWm1sbGJHUnpJRzltSUhSb1pTQldVazB1WEc0Z0lDQXFJRmx2ZFNCdGFXZG9kQ0IzWVc1MElIUnZJSEpsWm1WeUlIUm9aWE5sSUd4cFkyVnVjMlVnWm1sbGJHUnpJR0psWm05eVpTQjFjMlVnZVc5MWNpQldVazF6TGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUcxbGRHRTZJRlpTVFUxbGRHRTdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnZiblJoYVc1eklIdEFiR2x1YXlCV1VrMUlkVzFoYm05cFpIMGdiMllnZEdobElGWlNUUzVjYmlBZ0lDb2dXVzkxSUdOaGJpQmpiMjUwY205c0lHVmhZMmdnWW05dVpYTWdkWE5wYm1jZ2UwQnNhVzVySUZaU1RVaDFiV0Z1YjJsa0xtZGxkRTV2Y20xaGJHbDZaV1JDYjI1bFRtOWtaWDBnYjNJZ2UwQnNhVzVySUZaU1RVaDFiV0Z1YjJsa0xtZGxkRkpoZDBKdmJtVk9iMlJsZlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRRlJQUkU4Z1FXUmtJR0VnYkdsdWF5QjBieUJXVWswZ2MzQmxZMXh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR2gxYldGdWIybGtPaUJXVWsxSWRXMWhibTlwWkR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTI5dWRHRnBibk1nZTBCc2FXNXJJRlpTVFVWNGNISmxjM05wYjI1TllXNWhaMlZ5ZlNCdlppQjBhR1VnVmxKTkxseHVJQ0FnS2lCWmIzVWdiV2xuYUhRZ2QyRnVkQ0IwYnlCamIyNTBjbTlzSUhSb1pYTmxJR1poWTJsaGJDQmxlSEJ5WlhOemFXOXVjeUIyYVdFZ2UwQnNhVzVySUZaU1RVVjRjSEpsYzNOcGIyNU5ZVzVoWjJWeUxuTmxkRlpoYkhWbGZTNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQmxlSEJ5WlhOemFXOXVUV0Z1WVdkbGNqODZJRlpTVFVWNGNISmxjM05wYjI1TllXNWhaMlZ5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJEYjI1MFlXbHVjeUI3UUd4cGJtc2dWbEpOUm1seWMzUlFaWEp6YjI1OUlHOW1JSFJvWlNCV1VrMHVYRzRnSUNBcUlGWlNUVVpwY25OMFVHVnljMjl1SUdseklHMXZjM1JzZVNCMWMyVmtJR1p2Y2lCdFpYTm9JR04xYkd4cGJtY2dabTl5SUdacGNuTjBJSEJsY25OdmJpQjJhV1YzTGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUdacGNuTjBVR1Z5YzI5dVB6b2dWbEpOUm1seWMzUlFaWEp6YjI0N1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOdmJuUmhhVzV6SUh0QWJHbHVheUJXVWsxTWIyOXJRWFI5SUc5bUlIUm9aU0JXVWswdVhHNGdJQ0FxSUZsdmRTQnRhV2RvZENCM1lXNTBJSFJ2SUhWelpTQjdRR3hwYm1zZ1ZsSk5URzl2YTBGMExuUmhjbWRsZEgwZ2RHOGdZMjl1ZEhKdmJDQjBhR1VnWlhsbElHUnBjbVZqZEdsdmJpQnZaaUI1YjNWeUlGWlNUWE11WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYkc5dmEwRjBQem9nVmxKTlRHOXZhMEYwTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJEY21WaGRHVWdZU0J1WlhjZ1ZsSk5JR2x1YzNSaGJtTmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnY0dGeVlXMXpJRnRiVmxKTlVHRnlZVzFsZEdWeWMxMWRJSFJvWVhRZ2NtVndjbVZ6Wlc1MGN5QmpiMjF3YjI1bGJuUnpJRzltSUhSb1pTQldVazFjYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUJqYjI1emRISjFZM1J2Y2lod1lYSmhiWE02SUZaU1RVTnZjbVZRWVhKaGJXVjBaWEp6S1NCN1hHNGdJQ0FnZEdocGN5NXpZMlZ1WlNBOUlIQmhjbUZ0Y3k1elkyVnVaVHRjYmlBZ0lDQjBhR2x6TG0xbGRHRWdQU0J3WVhKaGJYTXViV1YwWVR0Y2JpQWdJQ0IwYUdsekxtaDFiV0Z1YjJsa0lEMGdjR0Z5WVcxekxtaDFiV0Z1YjJsa08xeHVJQ0FnSUhSb2FYTXVaWGh3Y21WemMybHZiazFoYm1GblpYSWdQU0J3WVhKaGJYTXVaWGh3Y21WemMybHZiazFoYm1GblpYSTdYRzRnSUNBZ2RHaHBjeTVtYVhKemRGQmxjbk52YmlBOUlIQmhjbUZ0Y3k1bWFYSnpkRkJsY25OdmJqdGNiaUFnSUNCMGFHbHpMbXh2YjJ0QmRDQTlJSEJoY21GdGN5NXNiMjlyUVhRN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dLaXBaYjNVZ2JtVmxaQ0IwYnlCallXeHNJSFJvYVhNZ2IyNGdlVzkxY2lCMWNHUmhkR1VnYkc5dmNDNHFLbHh1SUNBZ0tseHVJQ0FnS2lCVWFHbHpJR1oxYm1OMGFXOXVJSFZ3WkdGMFpYTWdaWFpsY25rZ1ZsSk5JR052YlhCdmJtVnVkSE11WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCa1pXeDBZU0JrWld4MFlWUnBiV1ZjYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUIxY0dSaGRHVW9aR1ZzZEdFNklHNTFiV0psY2lrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdWFIVnRZVzV2YVdRdWRYQmtZWFJsS0NrN1hHNWNiaUFnSUNCcFppQW9kR2hwY3k1c2IyOXJRWFFwSUh0Y2JpQWdJQ0FnSUhSb2FYTXViRzl2YTBGMExuVndaR0YwWlNoa1pXeDBZU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVaWGh3Y21WemMybHZiazFoYm1GblpYSXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVpYaHdjbVZ6YzJsdmJrMWhibUZuWlhJdWRYQmtZWFJsS0NrN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ2V5QkhURlJHTENCSFRGUkdURzloWkdWeVVHeDFaMmx1TENCSFRGUkdVR0Z5YzJWeUlIMGdabkp2YlNBbmRHaHlaV1V2WlhoaGJYQnNaWE12YW5OdEwyeHZZV1JsY25NdlIweFVSa3h2WVdSbGNpNXFjeWM3WEc1cGJYQnZjblFnZXlCV1VrMURiM0psVEc5aFpHVnlVR3gxWjJsdVQzQjBhVzl1Y3lCOUlHWnliMjBnSnk0dlZsSk5RMjl5WlV4dllXUmxjbEJzZFdkcGJrOXdkR2x2Ym5Nbk8xeHVhVzF3YjNKMElIc2dWbEpOUTI5eVpTQjlJR1p5YjIwZ0p5NHZWbEpOUTI5eVpTYzdYRzVwYlhCdmNuUWdleUJXVWsxRmVIQnlaWE56YVc5dVRHOWhaR1Z5VUd4MVoybHVJSDBnWm5KdmJTQW5MaTlsZUhCeVpYTnphVzl1Y3k5V1VrMUZlSEJ5WlhOemFXOXVURzloWkdWeVVHeDFaMmx1Snp0Y2JtbHRjRzl5ZENCN0lGWlNUVVpwY25OMFVHVnljMjl1VEc5aFpHVnlVR3gxWjJsdUlIMGdabkp2YlNBbkxpOW1hWEp6ZEZCbGNuTnZiaTlXVWsxR2FYSnpkRkJsY25OdmJreHZZV1JsY2xCc2RXZHBiaWM3WEc1cGJYQnZjblFnZXlCV1VrMUlkVzFoYm05cFpFeHZZV1JsY2xCc2RXZHBiaUI5SUdaeWIyMGdKeTR2YUhWdFlXNXZhV1F2VmxKTlNIVnRZVzV2YVdSTWIyRmtaWEpRYkhWbmFXNG5PMXh1YVcxd2IzSjBJSHNnVmxKTlRXVjBZVXh2WVdSbGNsQnNkV2RwYmlCOUlHWnliMjBnSnk0dmJXVjBZUzlXVWsxTlpYUmhURzloWkdWeVVHeDFaMmx1Snp0Y2JtbHRjRzl5ZENCN0lGWlNUVXh2YjJ0QmRFeHZZV1JsY2xCc2RXZHBiaUI5SUdaeWIyMGdKeTR2Ykc5dmEwRjBMMVpTVFV4dmIydEJkRXh2WVdSbGNsQnNkV2RwYmljN1hHNXBiWEJ2Y25RZ2RIbHdaU0I3SUZaU1RVaDFiV0Z1YjJsa0lIMGdabkp2YlNBbkxpOW9kVzFoYm05cFpDYzdYRzVwYlhCdmNuUWdkSGx3WlNCN0lGWlNUVTFsZEdFZ2ZTQm1jbTl0SUNjdUwyMWxkR0VuTzF4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVmxKTlEyOXlaVXh2WVdSbGNsQnNkV2RwYmlCcGJYQnNaVzFsYm5SeklFZE1WRVpNYjJGa1pYSlFiSFZuYVc0Z2UxeHVJQ0J3ZFdKc2FXTWdaMlYwSUc1aGJXVW9LVG9nYzNSeWFXNW5JSHRjYmlBZ0lDQXZMeUJYWlNCemFHOTFiR1FnZFhObElIUm9aU0JsZUhSbGJuTnBiMjRnYm1GdFpTQnBibk4wWldGa0lHSjFkQ0IzWlNCb1lYWmxJRzExYkhScGNHeGxJSEJzZFdkcGJuTWdabTl5SUdGdUlHVjRkR1Z1YzJsdmJpNHVMbHh1SUNBZ0lISmxkSFZ5YmlBblZsSk5RMTkyY20wbk8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlIQmhjbk5sY2pvZ1IweFVSbEJoY25ObGNqdGNibHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnWlhod2NtVnpjMmx2YmxCc2RXZHBiam9nVmxKTlJYaHdjbVZ6YzJsdmJreHZZV1JsY2xCc2RXZHBianRjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUdacGNuTjBVR1Z5YzI5dVVHeDFaMmx1T2lCV1VrMUdhWEp6ZEZCbGNuTnZia3h2WVdSbGNsQnNkV2RwYmp0Y2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHaDFiV0Z1YjJsa1VHeDFaMmx1T2lCV1VrMUlkVzFoYm05cFpFeHZZV1JsY2xCc2RXZHBianRjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUd4dmIydEJkRkJzZFdkcGJqb2dWbEpOVEc5dmEwRjBURzloWkdWeVVHeDFaMmx1TzF4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2JXVjBZVkJzZFdkcGJqb2dWbEpOVFdWMFlVeHZZV1JsY2xCc2RXZHBianRjYmx4dUlDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9jR0Z5YzJWeU9pQkhURlJHVUdGeWMyVnlMQ0J2Y0hScGIyNXpQem9nVmxKTlEyOXlaVXh2WVdSbGNsQnNkV2RwYms5d2RHbHZibk1wSUh0Y2JpQWdJQ0IwYUdsekxuQmhjbk5sY2lBOUlIQmhjbk5sY2p0Y2JseHVJQ0FnSUdOdmJuTjBJR2hsYkhCbGNsSnZiM1FnUFNCdmNIUnBiMjV6UHk1b1pXeHdaWEpTYjI5ME8xeHVJQ0FnSUdOdmJuTjBJR0YxZEc5VmNHUmhkR1ZJZFcxaGJrSnZibVZ6SUQwZ2IzQjBhVzl1Y3o4dVlYVjBiMVZ3WkdGMFpVaDFiV0Z1UW05dVpYTTdYRzVjYmlBZ0lDQjBhR2x6TG1WNGNISmxjM05wYjI1UWJIVm5hVzRnUFNCdmNIUnBiMjV6UHk1bGVIQnlaWE56YVc5dVVHeDFaMmx1SUQ4L0lHNWxkeUJXVWsxRmVIQnlaWE56YVc5dVRHOWhaR1Z5VUd4MVoybHVLSEJoY25ObGNpazdYRzRnSUNBZ2RHaHBjeTVtYVhKemRGQmxjbk52YmxCc2RXZHBiaUE5SUc5d2RHbHZibk0vTG1acGNuTjBVR1Z5YzI5dVVHeDFaMmx1SUQ4L0lHNWxkeUJXVWsxR2FYSnpkRkJsY25OdmJreHZZV1JsY2xCc2RXZHBiaWh3WVhKelpYSXBPMXh1SUNBZ0lIUm9hWE11YUhWdFlXNXZhV1JRYkhWbmFXNGdQVnh1SUNBZ0lDQWdiM0IwYVc5dWN6OHVhSFZ0WVc1dmFXUlFiSFZuYVc0Z1B6OGdibVYzSUZaU1RVaDFiV0Z1YjJsa1RHOWhaR1Z5VUd4MVoybHVLSEJoY25ObGNpd2dleUJvWld4d1pYSlNiMjkwTENCaGRYUnZWWEJrWVhSbFNIVnRZVzVDYjI1bGN5QjlLVHRjYmlBZ0lDQjBhR2x6TG14dmIydEJkRkJzZFdkcGJpQTlJRzl3ZEdsdmJuTS9MbXh2YjJ0QmRGQnNkV2RwYmlBL1B5QnVaWGNnVmxKTlRHOXZhMEYwVEc5aFpHVnlVR3gxWjJsdUtIQmhjbk5sY2l3Z2V5Qm9aV3h3WlhKU2IyOTBJSDBwTzF4dUlDQWdJSFJvYVhNdWJXVjBZVkJzZFdkcGJpQTlJRzl3ZEdsdmJuTS9MbTFsZEdGUWJIVm5hVzRnUHo4Z2JtVjNJRlpTVFUxbGRHRk1iMkZrWlhKUWJIVm5hVzRvY0dGeWMyVnlLVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJoYzNsdVl5QmhablJsY2xKdmIzUW9aMngwWmpvZ1IweFVSaWs2SUZCeWIyMXBjMlU4ZG05cFpENGdlMXh1SUNBZ0lHRjNZV2wwSUhSb2FYTXViV1YwWVZCc2RXZHBiaTVoWm5SbGNsSnZiM1FvWjJ4MFppazdYRzRnSUNBZ1lYZGhhWFFnZEdocGN5NW9kVzFoYm05cFpGQnNkV2RwYmk1aFpuUmxjbEp2YjNRb1oyeDBaaWs3WEc0Z0lDQWdZWGRoYVhRZ2RHaHBjeTVsZUhCeVpYTnphVzl1VUd4MVoybHVMbUZtZEdWeVVtOXZkQ2huYkhSbUtUdGNiaUFnSUNCaGQyRnBkQ0IwYUdsekxteHZiMnRCZEZCc2RXZHBiaTVoWm5SbGNsSnZiM1FvWjJ4MFppazdYRzRnSUNBZ1lYZGhhWFFnZEdocGN5NW1hWEp6ZEZCbGNuTnZibEJzZFdkcGJpNWhablJsY2xKdmIzUW9aMngwWmlrN1hHNWNiaUFnSUNCamIyNXpkQ0J0WlhSaElEMGdaMngwWmk1MWMyVnlSR0YwWVM1MmNtMU5aWFJoSUdGeklGWlNUVTFsZEdFZ2ZDQnVkV3hzTzF4dUlDQWdJR052Ym5OMElHaDFiV0Z1YjJsa0lEMGdaMngwWmk1MWMyVnlSR0YwWVM1MmNtMUlkVzFoYm05cFpDQmhjeUJXVWsxSWRXMWhibTlwWkNCOElHNTFiR3c3WEc1Y2JpQWdJQ0F2THlCdFpYUmhJR0Z1WkNCb2RXMWhibTlwWkNCaGNtVWdjbVZ4ZFdseVpXUWdkRzhnWW1VZ1lTQldVazB1WEc0Z0lDQWdMeThnUkc5dUozUWdZM0psWVhSbElGWlNUU0JwWmlCMGFHVjVJR0Z5WlNCdWRXeHNYRzRnSUNBZ2FXWWdLRzFsZEdFZ0ppWWdhSFZ0WVc1dmFXUXBJSHRjYmlBZ0lDQWdJR052Ym5OMElIWnliVU52Y21VZ1BTQnVaWGNnVmxKTlEyOXlaU2g3WEc0Z0lDQWdJQ0FnSUhOalpXNWxPaUJuYkhSbUxuTmpaVzVsTEZ4dUlDQWdJQ0FnSUNCbGVIQnlaWE56YVc5dVRXRnVZV2RsY2pvZ1oyeDBaaTUxYzJWeVJHRjBZUzUyY20xRmVIQnlaWE56YVc5dVRXRnVZV2RsY2l4Y2JpQWdJQ0FnSUNBZ1ptbHljM1JRWlhKemIyNDZJR2RzZEdZdWRYTmxja1JoZEdFdWRuSnRSbWx5YzNSUVpYSnpiMjRzWEc0Z0lDQWdJQ0FnSUdoMWJXRnViMmxrTEZ4dUlDQWdJQ0FnSUNCc2IyOXJRWFE2SUdkc2RHWXVkWE5sY2tSaGRHRXVkbkp0VEc5dmEwRjBMRnh1SUNBZ0lDQWdJQ0J0WlhSaExGeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJR2RzZEdZdWRYTmxja1JoZEdFdWRuSnRRMjl5WlNBOUlIWnliVU52Y21VN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc0aVhTd2libUZ0WlhNaU9sc2lVRTlUVTBsQ1RFVmZVMUJGUTE5V1JWSlRTVTlPVXlJc0lsOTJNMEVpTENKZmRqTkNJaXdpWDNGMVlYUkJJaXdpWDNGMVlYUkNJaXdpVmtWRE0xOVFUMU5KVkVsV1JWOWFJaXdpWDJWMWJHVnlRU0pkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096dEJRVWxCTzBGQlEwRTdRVUZEWVN4TlFVRkJMR0ZCUVdNc1UwRkJVU3hMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZCTzBGQmIwTXZRenM3TzBGQlIwYzdRVUZEU0N4SlFVRkJMRWxCUVZjc2JVSkJRVzFDTEVkQlFVRTdRVUZETlVJc1VVRkJRU3hKUVVGSkxFbEJRVWtzUTBGQlF5eGhRVUZoTEV0QlFVc3NUMEZCVHl4RlFVRkZPMEZCUTJ4RExGbEJRVUVzVDBGQlR5eEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETzBGQlEzUkRMRk5CUVVFN1FVRkJUU3hoUVVGQkxFbEJRVWtzU1VGQlNTeERRVUZETEdGQlFXRXNTMEZCU3l4UFFVRlBMRVZCUVVVN1dVRkRla01zVDBGQlR5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUTNCQ0xGTkJRVUU3UVVGQlRTeGhRVUZCTzBGQlEwd3NXVUZCUVN4UFFVRlBMRWRCUVVjc1EwRkJRenRCUVVOYUxGTkJRVUU3UzBGRFJqdEJRVVZFT3pzN1FVRkhSenRCUVVOSUxFbEJRVUVzU1VGQlZ5eHZRa0ZCYjBJc1IwRkJRVHRCUVVNM1FpeFJRVUZCTEVsQlFVa3NTVUZCU1N4RFFVRkRMR05CUVdNc1MwRkJTeXhQUVVGUExFVkJRVVU3UVVGRGJrTXNXVUZCUVN4UFFVRlBMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNN1FVRkRkRU1zVTBGQlFUdEJRVUZOTEdGQlFVRXNTVUZCU1N4SlFVRkpMRU5CUVVNc1kwRkJZeXhMUVVGTExFOUJRVThzUlVGQlJUdFpRVU14UXl4UFFVRlBMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRGNFSXNVMEZCUVR0QlFVRk5MR0ZCUVVFN1FVRkRUQ3haUVVGQkxFOUJRVThzUjBGQlJ5eERRVUZETzBGQlExb3NVMEZCUVR0TFFVTkdPMEZCUlVRN096dEJRVWRITzBGQlEwZ3NTVUZCUVN4SlFVRlhMRzFDUVVGdFFpeEhRVUZCTzBGQlF6VkNMRkZCUVVFc1NVRkJTU3hKUVVGSkxFTkJRVU1zWVVGQllTeExRVUZMTEU5QlFVOHNSVUZCUlR0QlFVTnNReXhaUVVGQkxFOUJRVThzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1IwRkJSeXhIUVVGSExFZEJRVWNzUTBGQlF6dEJRVU4wUXl4VFFVRkJPMEZCUVUwc1lVRkJRU3hKUVVGSkxFbEJRVWtzUTBGQlF5eGhRVUZoTEV0QlFVc3NUMEZCVHl4RlFVRkZPMWxCUTNwRExFOUJRVThzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTndRaXhUUVVGQk8wRkJRVTBzWVVGQlFUdEJRVU5NTEZsQlFVRXNUMEZCVHl4SFFVRkhMRU5CUVVNN1FVRkRXaXhUUVVGQk8wdEJRMFk3UVVGRlJDeEpRVUZCTEZkQlFVRXNRMEZCV1N4alFVRnpRaXhGUVVGQk8wRkJRMmhETEZGQlFVRXNTMEZCU3l4RlFVRkZMRU5CUVVNN1FVRjRSVlk3TzBGQlJVYzdVVUZEU1N4SlFVRk5MRU5CUVVFc1RVRkJRU3hIUVVGSExFZEJRVWNzUTBGQlF6dEJRVVZ3UWpzN1FVRkZSenRSUVVOSkxFbEJRVkVzUTBGQlFTeFJRVUZCTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUlhoQ096dEJRVVZITzFGQlEwa3NTVUZCWVN4RFFVRkJMR0ZCUVVFc1IwRkJPRUlzVFVGQlRTeERRVUZETzBGQlJYcEVPenRCUVVWSE8xRkJRMGtzU1VGQll5eERRVUZCTEdOQlFVRXNSMEZCT0VJc1RVRkJUU3hEUVVGRE8wRkJSVEZFT3p0QlFVVkhPMUZCUTBrc1NVRkJZU3hEUVVGQkxHRkJRVUVzUjBGQk9FSXNUVUZCVFN4RFFVRkRPMUZCUldwRUxFbEJRVTBzUTBGQlFTeE5RVUZCTEVkQlFYZENMRVZCUVVVc1EwRkJRenRCUVdsRWRrTXNVVUZCUVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFTkJRV2xDTEdOQlFVRXNSVUZCUVN4alFVRmpMRVZCUVVVc1EwRkJRenRCUVVNNVF5eFJRVUZCTEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1kwRkJZeXhEUVVGRE96dEJRVWR5UXl4UlFVRkJMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzWlVGQlpTeERRVUZET3pzN1FVRkpOVUlzVVVGQlFTeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRXRCUVVzc1EwRkJRenRMUVVOMFFqdEJRVVZOTEVsQlFVRXNUMEZCVHl4RFFVRkRMRWxCUVhWQ0xFVkJRVUU3UVVGRGNFTXNVVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVTjRRanRCUVVWRU96czdRVUZIUnp0QlFVTkpMRWxCUVVFc1YwRkJWeXhEUVVGRExFOUJUMnhDTEVWQlFVRTdPMEZCUTBNc1VVRkJRU3hKUVVGSkxGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4SlFVRkpMRWxCUVVrc1EwRkJReXhOUVVGTkxFbEJRVWtzUjBGQlJ5eEhRVUZITEVkQlFVY3NSMEZCUnl4SFFVRkhMRWxCUVVrc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF6dFJRVU5zUml4WlFVRlpMRWxCUVVrc1EwRkJRU3hGUVVGQkxFZEJRVUVzVDBGQlR5eExRVUZRTEVsQlFVRXNTVUZCUVN4UFFVRlBMRXRCUVZBc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNUMEZCVHl4RFFVRkZMRlZCUVZVc1RVRkJTU3hKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hIUVVGSExFTkJRVU03UVVGRk0wTXNVVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVsQlFVa3NTMEZCU3l4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTTdTMEZETDBRN1FVRkZSRHM3UVVGRlJ6dEpRVU5KTEd0Q1FVRnJRaXhIUVVGQk8wRkJRM1pDTEZGQlFVRXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eEpRVUZKTEV0QlFVc3NTVUZCU1N4RFFVRkRMR3RDUVVGclFpeEZRVUZGTEVOQlFVTXNRMEZCUXp0TFFVTXhSRHRCUVVOR096dEJRemxJUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJiMGRCTzBGQlEwOHNVMEZCVXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVlVzUlVGQlJTeERRVUZETEVWQlFVVXNVMEZCVXl4RlFVRkZPMEZCUXpkRUxFbEJRVWtzVTBGQlV5eExRVUZMTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1QwRkJUeXhMUVVGTExGbEJRVmtzUTBGQlF5eEhRVUZITEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhWUVVGVkxFOUJRVThzUlVGQlJTeEZRVUZGTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTzBGQlEyaElMRWxCUVVrc1QwRkJUeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NUMEZCVHl4RFFVRkRMRVZCUVVVc1ZVRkJWU3hQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTzBGQlF5OUVMRkZCUVZFc1UwRkJVeXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU51Unl4UlFVRlJMRk5CUVZNc1VVRkJVU3hEUVVGRExFdEJRVXNzUlVGQlJTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU4wUnl4UlFVRlJMRk5CUVZNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEUxQlFVMHNRMEZCUXl4SlFVRkpMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU1zUlVGQlJUdEJRVU4wU0N4UlFVRlJMRWxCUVVrc1EwRkJReXhEUVVGRExGTkJRVk1zUjBGQlJ5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSU3hWUVVGVkxFbEJRVWtzUlVGQlJTeERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVNNVJTeExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTlFPenRCUTNaSVFTeFRRVUZUTEhsQ1FVRjVRaXhEUVVGRExFbEJRVlVzUlVGQlJTeFRRVUZwUWl4RlFVRkZMRWxCUVc5Q0xFVkJRVUU3TzBGQlEzQkdMRWxCUVVFc1RVRkJUU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRjNRaXhEUVVGRE8wRkJSV3hFT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJhVVJIT3p0SlFVZElMRTFCUVUwc1ZVRkJWU3hIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEVsQlFVa3NRMEZCUXl4TFFVRkxMRTFCUVVFc1NVRkJRU3hKUVVGQkxFVkJRVUVzUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFTkJRVWNzVTBGQlV5eERRVUZETEVOQlFVTTdTVUZETTBNc1NVRkJTU3hWUVVGVkxFbEJRVWtzU1VGQlNTeEZRVUZGTzBGQlEzUkNMRkZCUVVFc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eHRSRUZCYlVRc1UwRkJVeXhEUVVGQkxHOURRVUZCTEVOQlFYTkRMRU5CUVVNc1EwRkJRenRCUVVOcVNDeFJRVUZCTEU5QlFVOHNTVUZCU1N4RFFVRkRPMEZCUTJJc1MwRkJRVHRCUVVWRUxFbEJRVUVzVFVGQlRTeFRRVUZUTEVkQlFVY3NWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJRenRKUVVOc1F5eEpRVUZKTEZOQlFWTXNTVUZCU1N4SlFVRkpMRVZCUVVVN1FVRkRja0lzVVVGQlFTeFBRVUZQTEVsQlFVa3NRMEZCUXp0QlFVTmlMRXRCUVVFN08wbEJSMFFzVFVGQlRTeFZRVUZWTEVkQlFVY3NRMEZCUVN4RlFVRkJMRWRCUVVFc1NVRkJTU3hEUVVGRExFMUJRVTBzVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNRMEZCUnl4VFFVRlRMRU5CUVVNc1EwRkJRenRKUVVNMVF5eEpRVUZKTEZWQlFWVXNTVUZCU1N4SlFVRkpMRVZCUVVVN1FVRkRkRUlzVVVGQlFTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRzlFUVVGdlJDeFRRVUZUTEVOQlFVRXNiME5CUVVFc1EwRkJjME1zUTBGQlF5eERRVUZETzBGQlEyeElMRkZCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVU03UVVGRFlpeExRVUZCTzBGQlJVUXNTVUZCUVN4TlFVRk5MR05CUVdNc1IwRkJSeXhWUVVGVkxFTkJRVU1zVlVGQlZTeERRVUZETEUxQlFVMHNRMEZCUXpzN1NVRkhjRVFzVFVGQlRTeFZRVUZWTEVkQlFXbENMRVZCUVVVc1EwRkJRenRCUVVOd1F5eEpRVUZCTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhOUVVGTkxFdEJRVWs3UVVGRGRrSXNVVUZCUVN4SlFVRkpMRlZCUVZVc1EwRkJReXhOUVVGTkxFZEJRVWNzWTBGQll5eEZRVUZGTzFsQlEzUkRMRWxCUVVzc1RVRkJZeXhEUVVGRExFMUJRVTBzUlVGQlJUdEJRVU14UWl4blFrRkJRU3hWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFXOUNMRU5CUVVNc1EwRkJRenRCUVVOMlF5eGhRVUZCTzBGQlEwWXNVMEZCUVR0QlFVTklMRXRCUVVNc1EwRkJReXhEUVVGRE8wRkJSVWdzU1VGQlFTeFBRVUZQTEZWQlFWVXNRMEZCUXp0QlFVTndRaXhEUVVGRE8wRkJSVVE3T3pzN096czdPMEZCVVVjN1FVRkRiVUlzVTBGQlFTdzJRa0ZCTmtJc1EwRkJReXhKUVVGVkxFVkJRVVVzVTBGQmFVSXNSVUZCUVRzN1FVRkRMMFVzVVVGQlFTeE5RVUZOTEVsQlFVa3NSMEZCYlVJc1RVRkJUU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdGQlFXRXNRMEZCUXl4TlFVRk5MRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03VVVGRGFFWXNUMEZCVHl4NVFrRkJlVUlzUTBGQlF5eEpRVUZKTEVWQlFVVXNVMEZCVXl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJRM3BFTEVOQlFVRXNRMEZCUVR0QlFVRkJMRU5CUVVFN1FVRkZSRHM3T3pzN096czdRVUZSUnp0QlFVTkhMRk5CUVdkQ0xEaENRVUU0UWl4RFFVRkRMRWxCUVZVc1JVRkJRVHM3VVVGRE4wUXNUVUZCVFN4TFFVRkxMRWRCUVhGQ0xFMUJRVTBzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4bFFVRmxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRE1VVXNVVUZCUVN4TlFVRk5MRWRCUVVjc1IwRkJSeXhKUVVGSkxFZEJRVWNzUlVGQmQwSXNRMEZCUXp0UlFVVTFReXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1MwRkJTVHRaUVVNMVFpeE5RVUZOTEUxQlFVMHNSMEZCUnl4NVFrRkJlVUlzUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRelZFTEVsQlFVa3NUVUZCVFN4SlFVRkpMRWxCUVVrc1JVRkJSVHRCUVVOc1FpeG5Ra0ZCUVN4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTjRRaXhoUVVGQk8wRkJRMGdzVTBGQlF5eERRVUZETEVOQlFVTTdRVUZGU0N4UlFVRkJMRTlCUVU4c1IwRkJSeXhEUVVGRE8wdEJRMW9zUTBGQlFTeERRVUZCTzBGQlFVRTdPMEZETTBoRU96czdPenM3UVVGTlJ6dEJRVU5oTEZOQlFVRXNPRUpCUVRoQ0xFTkJRVU1zVFVGQmEwSXNSVUZCUlN4UlFVRjNRaXhGUVVGQk96dEpRVU42Uml4TlFVRk5MR0ZCUVdFc1IwRkJSeXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVWdVJDeEpRVUZKTEV0QlFVc3NSMEZCYTBJc1NVRkJTU3hEUVVGRE8wbEJSV2hETEVsQlFVa3NZVUZCWVN4SlFVRkpMRWRCUVVjc1JVRkJSVHRCUVVONFFpeFJRVUZCTEV0QlFVc3NSMEZCUnl4RFFVRkJMRVZCUVVFc1IwRkJRU3hEUVVGQkxFVkJRVUVzUjBGQlFTeE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNRMEZCUlN4VFFVRlRMRTFCUVVFc1NVRkJRU3hKUVVGQkxFVkJRVUVzUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVrc1NVRkJTU3hEUVVGRE8wRkJRemxFTEV0QlFVRTdRVUZCVFN4VFFVRkJPMEZCVjB3c1VVRkJRU3hOUVVGTkxGbEJRVmtzUjBGQlJ5eE5RVUZOTEVOQlFVTXNXVUZCYzBNc1EwRkJRenRSUVVWdVJTeE5RVUZOTEZOQlFWTXNSMEZCUnl4WlFVRlpMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzFGQlJUZERMRWxCUVVrc1EwRkJRU3hUUVVGVExFdEJRVUVzU1VGQlFTeEpRVUZVTEZOQlFWTXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlZDeFRRVUZUTEVOQlFVVXNTVUZCU1N4TlFVRkxMRmRCUVZjc1JVRkJSVHRCUVVOdVF5eFpRVUZCTEV0QlFVc3NSMEZCUnl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRE8wRkJRM3BDTEZOQlFVRTdRVUZEUml4TFFVRkJPMEZCUlVRc1NVRkJRU3hQUVVGUExFdEJRVXNzUTBGQlF6dEJRVU5tT3p0QlEzUkRRVHRCUVVWaExFMUJRVUVzZFVKQlFYVkNMRWRCUVVjN1FVRkRja01zU1VGQlFTeEZRVUZGTEVWQlFVVXNTVUZCU1R0QlFVTlNMRWxCUVVFc1JVRkJSU3hGUVVGRkxFbEJRVWs3UVVGRFVpeEpRVUZCTEVWQlFVVXNSVUZCUlN4SlFVRkpPMEZCUTFJc1NVRkJRU3hGUVVGRkxFVkJRVVVzU1VGQlNUdEJRVU5TTEVsQlFVRXNSVUZCUlN4RlFVRkZMRWxCUVVrN1FVRkRVaXhKUVVGQkxFdEJRVXNzUlVGQlJTeFBRVUZQTzBGQlEyUXNTVUZCUVN4TFFVRkxMRVZCUVVVc1QwRkJUenRCUVVOa0xFbEJRVUVzUzBGQlN5eEZRVUZGTEU5QlFVODdRVUZEWkN4SlFVRkJMRWRCUVVjc1JVRkJSU3hMUVVGTE8wRkJRMVlzU1VGQlFTeFBRVUZQTEVWQlFVVXNVMEZCVXp0QlFVTnNRaXhKUVVGQkxFMUJRVTBzUlVGQlJTeFJRVUZSTzBGQlEyaENMRWxCUVVFc1UwRkJVeXhGUVVGRkxGZEJRVmM3UVVGRGRFSXNTVUZCUVN4UlFVRlJMRVZCUVVVc1ZVRkJWVHRCUVVOd1FpeEpRVUZCTEZGQlFWRXNSVUZCUlN4VlFVRlZPMEZCUTNCQ0xFbEJRVUVzVTBGQlV5eEZRVUZGTEZkQlFWYzdRVUZEZEVJc1NVRkJRU3hUUVVGVExFVkJRVVVzVjBGQlZ6dEJRVU4wUWl4SlFVRkJMRlZCUVZVc1JVRkJSU3haUVVGWk8wRkJRM2hDTEVsQlFVRXNUMEZCVHl4RlFVRkZMRk5CUVZNN096dEJRM0JDY0VJN096czdRVUZKUnp0QlFVTkhMRk5CUVZVc1VVRkJVU3hEUVVGRExFdEJRV0VzUlVGQlFUdEJRVU53UXl4SlFVRkJMRTlCUVU4c1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1JVRkJSU3hIUVVGSExFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTTNRenM3VFVOSVlTeHZRa0ZCYjBJc1EwRkJRVHRCUVhGQ0wwSXNTVUZCUVN4SlFVRlhMRmRCUVZjc1IwRkJRVHRCUVVOd1FpeFJRVUZCTEU5QlFVOHNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF6dExRVU51UXp0QlFVMUVMRWxCUVVFc1NVRkJWeXhoUVVGaExFZEJRVUU3VVVGRGRFSXNUMEZCVHl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUlVGQlJTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN1MwRkRMME03UVVGRlJEczdRVUZGUnp0QlFVTklMRWxCUVVFc1NVRkJWeXh0UWtGQmJVSXNSMEZCUVR0UlFVTTFRaXhOUVVGTkxFMUJRVTBzUjBGQk1FUXNSVUZCUlN4RFFVRkRPMEZCUlhwRkxGRkJRVUVzVFVGQlRTeGhRVUZoTEVkQlFVY3NTVUZCU1N4SFFVRkhMRU5CUVZNc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRk9VVXNVVUZCUVN4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeFZRVUZWTEVOQlFVTXNTMEZCU1R0QlFVTnFSU3haUVVGQkxFbEJRVWtzWVVGQllTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRCUVVNelFpeG5Ra0ZCUVN4TlFVRk5MRU5CUVVNc1NVRkJLMElzUTBGQlF5eEhRVUZITEZWQlFWVXNRMEZCUXp0QlFVTjBSQ3hoUVVGQk8wRkJRMGdzVTBGQlF5eERRVUZETEVOQlFVTTdRVUZGU0N4UlFVRkJMRTlCUVU4c1RVRkJUU3hEUVVGRE8wdEJRMlk3UVVGRlJEczdRVUZGUnp0QlFVTklMRWxCUVVFc1NVRkJWeXh0UWtGQmJVSXNSMEZCUVR0UlFVTTFRaXhOUVVGTkxFMUJRVTBzUjBGQmMwTXNSVUZCUlN4RFFVRkRPMEZCUlhKRUxGRkJRVUVzVFVGQlRTeGhRVUZoTEVkQlFVY3NTVUZCU1N4SFFVRkhMRU5CUVZNc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRk9VVXNVVUZCUVN4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeFZRVUZWTEVOQlFVTXNTMEZCU1R0QlFVTnFSU3haUVVGQkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRelZDTEdkQ1FVRkJMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eFZRVUZWTEVOQlFVTTdRVUZETTBJc1lVRkJRVHRCUVVOSUxGTkJRVU1zUTBGQlF5eERRVUZETzBGQlJVZ3NVVUZCUVN4UFFVRlBMRTFCUVUwc1EwRkJRenRMUVVObU8wRkJSVVE3TzBGQlJVYzdRVUZEU0N4SlFVRkJMRmRCUVVFc1IwRkJRVHRCUVhKRlFUczdRVUZGUnp0UlFVTkpMRWxCUVc5Q0xFTkJRVUVzYjBKQlFVRXNSMEZCUnl4RFFVRkRMRTlCUVU4c1JVRkJSU3hYUVVGWExFVkJRVVVzV1VGQldTeERRVUZETEVOQlFVTTdRVUZGYmtVN08wRkJSVWM3VVVGRFNTeEpRVUZ4UWl4RFFVRkJMSEZDUVVGQkxFZEJRVWNzUTBGQlF5eFZRVUZWTEVWQlFVVXNWMEZCVnl4RlFVRkZMRkZCUVZFc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF6dEJRVVV2UlRzN1FVRkZSenRCUVVOSkxGRkJRVUVzU1VGQlFTeERRVUZCTEc5Q1FVRnZRaXhIUVVGSExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlJUZEVPenM3UVVGSFJ6dFJRVU5MTEVsQlFWa3NRMEZCUVN4WlFVRkJMRWRCUVc5Q0xFVkJRVVVzUTBGQlF6dEJRVXN6UXpzN1FVRkZSenRSUVVOTExFbEJRV01zUTBGQlFTeGpRVUZCTEVkQlFYTkRMRVZCUVVVc1EwRkJRenM3UzBFMFF6bEVPMEZCUlVRN096czdRVUZKUnp0QlFVTkpMRWxCUVVFc1NVRkJTU3hEUVVGRExFMUJRVFJDTEVWQlFVRTdPMUZCUlhSRExFMUJRVTBzVjBGQlZ5eEhRVUZITEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU03UVVGREwwTXNVVUZCUVN4WFFVRlhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zVlVGQlZTeExRVUZKTzBGQlEycERMRmxCUVVFc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wRkJRM2hETEZOQlFVTXNRMEZCUXl4RFFVRkRPenRSUVVkSUxFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hMUVVGSk8wRkJRM3BETEZsQlFVRXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMEZCUTNSRExGTkJRVU1zUTBGQlF5eERRVUZET3p0UlFVZElMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNSMEZCUnl4TlFVRk5MRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN1VVRkRha1VzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhIUVVGSExFMUJRVTBzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF6dFJRVU51UlN4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVkQlFVY3NUVUZCVFN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUldwRkxGRkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTTdTMEZEWWp0QlFVVkVPenM3UVVGSFJ6dEpRVU5KTEV0QlFVc3NSMEZCUVR0UlFVTldMRTlCUVU4c1NVRkJTU3h2UWtGQmIwSXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dExRVU01UXp0QlFVVkVPenM3T3p0QlFVdEhPMEZCUTBrc1NVRkJRU3hoUVVGaExFTkJRVU1zU1VGQmMwTXNSVUZCUVRzN1VVRkRla1FzVDBGQlR5eERRVUZCTEVWQlFVRXNSMEZCUVN4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZKTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEVsQlFVa3NRMEZCUXp0TFFVTXhRenRCUVVWRU96czdPMEZCU1VjN1FVRkRTU3hKUVVGQkxHdENRVUZyUWl4RFFVRkRMRlZCUVhsQ0xFVkJRVUU3UVVGRGFrUXNVVUZCUVN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVTnVReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEZWQlFWVXNRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkJSeXhWUVVGVkxFTkJRVU03UzBGRE4wUTdRVUZGUkRzN096dEJRVWxITzBGQlEwa3NTVUZCUVN4dlFrRkJiMElzUTBGQlF5eFZRVUY1UWl4RlFVRkJPMUZCUTI1RUxFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlEzQkVMRkZCUVVFc1NVRkJTU3hMUVVGTExFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVTdRVUZEYUVJc1dVRkJRU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEcxRlFVRnRSU3hEUVVGRExFTkJRVU03UVVGRGJrWXNVMEZCUVR0UlFVVkVMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOdVF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1ZVRkJWU3hEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETzB0QlEzWkVPMEZCUlVRN096czdPMEZCUzBjN1FVRkRTU3hKUVVGQkxGRkJRVkVzUTBGQlF5eEpRVUZ6UXl4RlFVRkJPenRSUVVOd1JDeE5RVUZOTEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlF6VkRMRTlCUVU4c1EwRkJRU3hGUVVGQkxFZEJRVUVzVlVGQlZTeExRVUZCTEVsQlFVRXNTVUZCVml4VlFVRlZMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFWWXNWVUZCVlN4RFFVRkZMRTFCUVUwc1RVRkJTU3hKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hKUVVGSkxFTkJRVU03UzBGRGJrTTdRVUZGUkRzN096czdRVUZMUnp0SlFVTkpMRkZCUVZFc1EwRkJReXhKUVVGelF5eEZRVUZGTEUxQlFXTXNSVUZCUVR0UlFVTndSU3hOUVVGTkxGVkJRVlVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRelZETEZGQlFVRXNTVUZCU1N4VlFVRlZMRVZCUVVVN1FVRkRaQ3haUVVGQkxGVkJRVlVzUTBGQlF5eE5RVUZOTEVkQlFVY3NVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRM1JETEZOQlFVRTdTMEZEUmp0QlFVVkVPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJlVUpITzBGQlEwa3NTVUZCUVN4elFrRkJjMElzUTBGQlF5eEpRVUZ6UXl4RlFVRkJPMUZCUTJ4RkxFMUJRVTBzVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRE5VTXNVVUZCUVN4UFFVRlBMRlZCUVZVc1IwRkJSeXhEUVVGSExFVkJRVUVzVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCVXl4UFFVRkJMRU5CUVVFc1IwRkJSeXhKUVVGSkxFTkJRVU03UzBGRGVFUTdRVUZGUkRzN1FVRkZSenRKUVVOSkxFMUJRVTBzUjBGQlFUczdRVUZGV0N4UlFVRkJMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NTVUZCU1N4RFFVRkRMREpDUVVFeVFpeEZRVUZGTEVOQlFVTTdPMUZCUnpkRUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hMUVVGSk8xbEJRM1pETEZWQlFWVXNRMEZCUXl4clFrRkJhMElzUlVGQlJTeERRVUZETzBGQlEyeERMRk5CUVVNc1EwRkJReXhEUVVGRE96dFJRVWRJTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zVlVGQlZTeExRVUZKTzFsQlEzWkRMRWxCUVVrc1ZVRkJWU3hIUVVGSExFZEJRVWNzUTBGQlF6dEJRVU55UWl4WlFVRkJMRTFCUVUwc1NVRkJTU3hIUVVGSExGVkJRVlVzUTBGQlF5eGpRVUZqTEVOQlFVTTdXVUZGZGtNc1NVRkJTU3hKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZPMEZCUTJ4RUxHZENRVUZCTEZWQlFWVXNTVUZCU1N4cFFrRkJhVUlzUTBGQlF5eExRVUZMTEVOQlFVTTdRVUZEZGtNc1lVRkJRVHRaUVVWRUxFbEJRVWtzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSVHRCUVVOdVJDeG5Ra0ZCUVN4VlFVRlZMRWxCUVVrc2FVSkJRV2xDTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUTNoRExHRkJRVUU3V1VGRlJDeEpRVUZKTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVU3UVVGRGJFUXNaMEpCUVVFc1ZVRkJWU3hKUVVGSkxHbENRVUZwUWl4RFFVRkRMRXRCUVVzc1EwRkJRenRCUVVOMlF5eGhRVUZCTzBGQlJVUXNXVUZCUVN4VlFVRlZMRU5CUVVNc1YwRkJWeXhEUVVGRExFVkJRVVVzVlVGQlZTeEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTjZReXhUUVVGRExFTkJRVU1zUTBGQlF6dExRVU5LTzBGQlJVUTdPMEZCUlVjN1NVRkRTeXd5UWtGQk1rSXNSMEZCUVR0UlFVdHFReXhKUVVGSkxFdEJRVXNzUjBGQlJ5eEhRVUZITEVOQlFVTTdVVUZEYUVJc1NVRkJTU3hOUVVGTkxFZEJRVWNzUjBGQlJ5eERRVUZETzFGQlEycENMRWxCUVVrc1MwRkJTeXhIUVVGSExFZEJRVWNzUTBGQlF6dFJRVVZvUWl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEZWQlFWVXNTMEZCU1R0QlFVTjJReXhaUVVGQkxFdEJRVXNzU1VGQlNTeFZRVUZWTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU03UVVGRGVFTXNXVUZCUVN4TlFVRk5MRWxCUVVrc1ZVRkJWU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRPMEZCUXpGRExGbEJRVUVzUzBGQlN5eEpRVUZKTEZWQlFWVXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF6dEJRVU14UXl4VFFVRkRMRU5CUVVNc1EwRkJRenRSUVVWSUxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dFJRVU0zUWl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkRMMElzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBGQlJUZENMRkZCUVVFc1QwRkJUeXhGUVVGRkxFdEJRVXNzUlVGQlJTeE5RVUZOTEVWQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVNN1MwRkRha003UVVGRFJqczdRVU5zVVVRN1FVRkZZU3hOUVVGQkxEaENRVUU0UWl4SFFVRkhPMEZCUXpWRExFbEJRVUVzUzBGQlN5eEZRVUZGTEU5QlFVODdRVUZEWkN4SlFVRkJMR0ZCUVdFc1JVRkJSU3hsUVVGbE8wRkJRemxDTEVsQlFVRXNWVUZCVlN4RlFVRkZMRmxCUVZrN1FVRkRlRUlzU1VGQlFTeFhRVUZYTEVWQlFVVXNZVUZCWVR0QlFVTXhRaXhKUVVGQkxGRkJRVkVzUlVGQlJTeFZRVUZWTzBGQlEzQkNMRWxCUVVFc1dVRkJXU3hGUVVGRkxHTkJRV003UlVGRGJrSTdRVUZMU2l4TlFVRk5MRFJDUVVFMFFpeEhRVUZyUlR0SlFVTjZSeXhOUVVGTkxFVkJRVVVzT0VKQlFUaENMRU5CUVVNc1MwRkJTenRKUVVNMVF5eGpRVUZqTEVWQlFVVXNPRUpCUVRoQ0xFTkJRVU1zWVVGQllUdEpRVU0xUkN4WFFVRlhMRVZCUVVVc09FSkJRVGhDTEVOQlFVTXNWVUZCVlR0SlFVTjBSQ3hUUVVGVExFVkJRVVVzT0VKQlFUaENMRU5CUVVNc1VVRkJVVHRKUVVOc1JDeGhRVUZoTEVWQlFVVXNPRUpCUVRoQ0xFTkJRVU1zV1VGQldUdERRVU16UkRzN1FVTm9Ra1FzVFVGQlRTeE5RVUZOTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03UVVGRmFrTTdPMEZCUlVjN1RVRkRWU3c0UWtGQk9FSXNRMEZCUVR0QlFXbEVla01zU1VGQlFTeFhRVUZCTEVOQlFXMUNMRVZCUTJwQ0xGRkJRVkVzUlVGRFVpeEpRVUZKTEVWQlEwb3NWMEZCVnl4SFFXZENXaXhGUVVGQk96dEJRVU5ETEZGQlFVRXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhSUVVGUkxFTkJRVU03UVVGRGVrSXNVVUZCUVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU5xUWl4UlFVRkJMRWxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzVjBGQlZ5eERRVUZET3p0QlFVY3ZRaXhSUVVGQkxFMUJRVTBzWlVGQlpTeEhRVUZITEVOQlFVRXNSVUZCUVN4SFFVRkJMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zT0VKQlFUaENMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUXpkR0xFTkJRVU1zUTBGQlF5eGhRVUZoTEVOQlFVTXNTMEZCU1R0QlFVTnNRaXhaUVVGQkxFOUJRVkVzVVVGQlowSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1MwRkJTeXhKUVVGSkxFTkJRVU03UVVGRGJrUXNVMEZCUXl4RFFVTkdMRTFCUVVFc1NVRkJRU3hKUVVGQkxFVkJRVUVzUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFTkJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEVUN4UlFVRkJMRTFCUVUwc1dVRkJXU3hIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEdWQlFXVXNTMEZCWml4SlFVRkJMRWxCUVVFc1pVRkJaU3hMUVVGbUxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMR1ZCUVdVc1EwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlNTeEpRVUZKTEVOQlFVTTdVVUZGY2tRc1NVRkJTU3haUVVGWkxFbEJRVWtzU1VGQlNTeEZRVUZGTzBGQlEzaENMRmxCUVVFc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGRFZpeERRVUZCTEcxRVFVRkJMRVZCUTBVc1RVRkJRU3hSUVVGUkxFTkJRVU1zU1VGQlNTeE5RVUZCTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZKTEZkQlEyNUNMRU5CUVVFc1YwRkJRU3hGUVVGakxFbEJRVWtzUTBGQlFTd3JRMEZCUVN4RFFVRnBSQ3hEUVVOd1JTeERRVUZETzBGQlJVWXNXVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU53UWl4VFFVRkJPMEZCUVUwc1lVRkJRVHRCUVVOTUxGbEJRVUVzVFVGQlRTeE5RVUZOTEVkQlFVa3NVVUZCWjBJc1EwRkJReXhaUVVGWkxFTkJRV2RDTEVOQlFVTTdRVUZGT1VRc1dVRkJRU3hOUVVGTkxGbEJRVmtzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN08wRkJSM0JETEZsQlFVRXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zUzBGQlN5eERRVU5vUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhIUVVGSExGbEJRVmtzUTBGQlF5eERRVUZETEVWQlF6bENMRmRCUVZjc1EwRkJReXhEUVVGRExFZEJRVWNzV1VGQldTeERRVUZETEVOQlFVTXNSVUZET1VJc1YwRkJWeXhEUVVGRExFTkJRVU1zUjBGQlJ5eFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVTXZRaXhEUVVGRE8xbEJSVVlzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnp0blFrRkRXaXhaUVVGWk8yZENRVU5hTEZsQlFWazdaMEpCUTFvc1ZVRkJWVHRoUVVOWUxFTkJRVU03UVVGRFNDeFRRVUZCTzB0QlEwWTdRVUZGVFN4SlFVRkJMRmRCUVZjc1EwRkJReXhOUVVGakxFVkJRVUU3UVVGREwwSXNVVUZCUVN4SlFVRkpMRWxCUVVrc1EwRkJReXhOUVVGTkxFbEJRVWtzU1VGQlNTeEZRVUZGT3p0WlFVVjJRaXhQUVVGUE8wRkJRMUlzVTBGQlFUdFJRVVZFTEUxQlFVMHNSVUZCUlN4WlFVRlpMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0UlFVVnFSQ3hOUVVGTkxFMUJRVTBzUjBGQlNTeEpRVUZKTEVOQlFVTXNVVUZCWjBJc1EwRkJReXhaUVVGWkxFTkJRV2RDTEVOQlFVTTdVVUZEYmtVc1NVRkJTU3hOUVVGTkxFdEJRVXNzVTBGQlV5eEZRVUZGTzFsQlEzaENMRTlCUVU4N1FVRkRVaXhUUVVGQk8wRkJSVVFzVVVGQlFTeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNZMEZCWXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRk0wUXNTVUZCU1N4UFFVRlJMRWxCUVVrc1EwRkJReXhSUVVGblFpeERRVUZETEcxQ1FVRnRRaXhMUVVGTExGTkJRVk1zUlVGQlJUdEJRVU5zUlN4WlFVRkJMRWxCUVVrc1EwRkJReXhSUVVGblFpeERRVUZETEcxQ1FVRnRRaXhIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU51UkN4VFFVRkJPMHRCUTBZN1NVRkZUU3hyUWtGQmEwSXNSMEZCUVR0QlFVTjJRaXhSUVVGQkxFbEJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNTVUZCU1N4SlFVRkpMRVZCUVVVN08xbEJSWFpDTEU5QlFVODdRVUZEVWl4VFFVRkJPMUZCUlVRc1RVRkJUU3hGUVVGRkxGbEJRVmtzUlVGQlJTeFpRVUZaTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJSVzVFTEUxQlFVMHNUVUZCVFN4SFFVRkpMRWxCUVVrc1EwRkJReXhSUVVGblFpeERRVUZETEZsQlFWa3NRMEZCWjBJc1EwRkJRenRSUVVOdVJTeEpRVUZKTEUxQlFVMHNTMEZCU3l4VFFVRlRMRVZCUVVVN1dVRkRlRUlzVDBGQlR6dEJRVU5TTEZOQlFVRTdRVUZGUkN4UlFVRkJMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdVVUZGTVVJc1NVRkJTU3hQUVVGUkxFbEJRVWtzUTBGQlF5eFJRVUZuUWl4RFFVRkRMRzFDUVVGdFFpeExRVUZMTEZOQlFWTXNSVUZCUlR0QlFVTnNSU3haUVVGQkxFbEJRVWtzUTBGQlF5eFJRVUZuUWl4RFFVRkRMRzFDUVVGdFFpeEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTnVSQ3hUUVVGQk8wdEJRMFk3TzBGQmJFcEVPenRCUVVWSE8wRkJRMWtzT0VKQlFVRXNRMEZCUVN4dFFrRkJiVUlzUjBGRk9VSTdRVUZEUml4SlFVRkJMSE5DUVVGelFpeEZRVUZGTzBGQlEzUkNMRkZCUVVFc1MwRkJTeXhGUVVGRkxFOUJRVTg3UVVGRFpDeFJRVUZCTEdGQlFXRXNSVUZCUlN4VlFVRlZPMEZCUXpGQ0xFdEJRVUU3UVVGRFJDeEpRVUZCTEcxQ1FVRnRRaXhGUVVGRk8wRkJRMjVDTEZGQlFVRXNTMEZCU3l4RlFVRkZMRTlCUVU4N1FVRkRaaXhMUVVGQk8wRkJRMFFzU1VGQlFTeGxRVUZsTEVWQlFVVTdRVUZEWml4UlFVRkJMRXRCUVVzc1JVRkJSU3hQUVVGUE8wRkJRMlFzVVVGQlFTeGhRVUZoTEVWQlFVVXNWVUZCVlR0QlFVTjZRaXhSUVVGQkxGbEJRVmtzUlVGQlJTeHZRa0ZCYjBJN1FVRkRiRU1zVVVGQlFTeFhRVUZYTEVWQlFVVXNZMEZCWXp0QlFVTXpRaXhSUVVGQkxGRkJRVkVzUlVGQlJTd3dRa0ZCTUVJN1FVRkRjRU1zVVVGQlFTeFZRVUZWTEVWQlFVVXNhMEpCUVd0Q08wRkJReTlDTEV0QlFVRTdRMEZEUmpzN1FVTTFRa2c3TzBGQlJVYzdUVUZEVlN3MFFrRkJORUlzUTBGQlFUdEJRV2RDZGtNc1NVRkJRU3hYUVVGQkxFTkJRVzFDTEVWQlEycENMRlZCUVZVc1JVRkRWaXhMUVVGTExFVkJRMHdzVFVGQlRTeEhRV2RDVUN4RlFVRkJPMEZCUTBNc1VVRkJRU3hKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEZWQlFWVXNRMEZCUXp0QlFVTTNRaXhSUVVGQkxFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUTI1Q0xGRkJRVUVzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNN1MwRkRkRUk3UVVGRlRTeEpRVUZCTEZkQlFWY3NRMEZCUXl4TlFVRmpMRVZCUVVFN1VVRkRMMElzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhKUVVGSkxFdEJRVWs3TzBGQlF5OUNMRmxCUVVFc1NVRkJTU3hEUVVGQkxFTkJRVUVzUlVGQlFTeEhRVUZCTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNRMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVWtzU1VGQlNTeEZRVUZGTzBGQlEzQkVMR2RDUVVGQkxFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRGFFVXNZVUZCUVR0QlFVTklMRk5CUVVNc1EwRkJReXhEUVVGRE8wdEJRMG83U1VGRlRTeHJRa0ZCYTBJc1IwRkJRVHRSUVVOMlFpeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFbEJRVWtzUzBGQlNUczdRVUZETDBJc1dVRkJRU3hKUVVGSkxFTkJRVUVzUTBGQlFTeEZRVUZCTEVkQlFVRXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeE5RVUZCTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4RFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlNTeEpRVUZKTEVWQlFVVTdaMEpCUTNCRUxFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkRPMEZCUXpsRExHRkJRVUU3UVVGRFNDeFRRVUZETEVOQlFVTXNRMEZCUXp0TFFVTktPMEZCUTBZN08wRkRNMFJFTEUxQlFVMHNSMEZCUnl4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETzBGQlJXaERPenRCUVVWSE8wMUJRMVVzYVVOQlFXbERMRU5CUVVFN1FVRnJSRFZETEVsQlFVRXNWMEZCUVN4RFFVRnRRaXhGUVVOcVFpeFJRVUZSTEVWQlExSXNTMEZCU3l4RlFVTk1MRTFCUVUwc1IwRm5RbEFzUlVGQlFUczdRVUZEUXl4UlFVRkJMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZETzBGQlEzcENMRkZCUVVFc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTTdRVUZEYmtJc1VVRkJRU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXp0QlFVVnlRaXhSUVVGQkxFMUJRVTBzWVVGQllTeEhRVUZITEVOQlFVRXNSVUZCUVN4SFFVRkJMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zYVVOQlFXbERMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUXpWR0xFTkJRVU1zUTBGQlF5eGhRVUZoTEVOQlFVTXNTMEZCU1R0QlFVTnNRaXhaUVVGQkxFOUJRVkVzVVVGQlowSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1MwRkJTeXhKUVVGSkxFTkJRVU03UVVGRGJrUXNVMEZCUXl4RFFVTkdMRTFCUVVFc1NVRkJRU3hKUVVGQkxFVkJRVUVzUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFTkJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZGVUN4SlFVRkpMR0ZCUVdFc1NVRkJTU3hKUVVGSkxFVkJRVVU3UVVGRGVrSXNXVUZCUVN4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVOV0xFTkJRVUVzYzBSQlFVRXNSVUZEUlN4RFFVRkJMRVZCUVVFc1IwRkJRU3hSUVVGUkxFTkJRVU1zU1VGQlNTeE5RVUZKTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEZkQlEyNUNMRU5CUVhGRExHMURRVUZCTEVOQlFVRXNRMEZEZEVNc1EwRkJRenRCUVVWR0xGbEJRVUVzU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRka0lzVTBGQlFUdEJRVUZOTEdGQlFVRTdRVUZEVEN4WlFVRkJMRWxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlJYUkNMRmxCUVVFc1lVRkJZU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEZsQlFWa3NTMEZCU1RzN1owSkJRM0pETEUxQlFVMHNUMEZCVHl4SFFVRkhMRU5CUVVFc1JVRkJRU3hIUVVGRkxGRkJRV2RDTEVOQlFVTXNXVUZCV1N4RFFVRXJRaXhOUVVGQkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeERRVUZGTEV0QlFVc3NSVUZCUlN4RFFVRkRPMmRDUVVONFJpeEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZPMEZCUTFvc2IwSkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTTdRVUZEWWl4cFFrRkJRVHRCUVVWQkxHZENRVUZCTEZGQlFXZENMRU5CUVVNc1dVRkJXU3hEUVVGRExFZEJRVWNzVDBGQlR5eERRVUZETzJkQ1FVVXhReXhOUVVGTkxHRkJRV0VzUjBGQlJ5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8yZENRVU0zUXl4TlFVRk5MRmxCUVZrc1IwRkJSeXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMmRDUVVNMVF5eE5RVUZOTEZkQlFWY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPMmRDUVVOMFJDeE5RVUZOTEZWQlFWVXNSMEZCUnl4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMEZCUlc1RUxHZENRVUZCTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRM0JDTEc5Q1FVRkJMRWxCUVVrc1JVRkJSU3haUVVGWk8yOUNRVU5zUWl4aFFVRmhPMjlDUVVOaUxGZEJRVmM3YjBKQlExZ3NXVUZCV1R0dlFrRkRXaXhWUVVGVk8wRkJRMWdzYVVKQlFVRXNRMEZCUXl4RFFVRkRPMEZCUTB3c1lVRkJReXhEUVVGRExFTkJRVU03UVVGRFNpeFRRVUZCTzB0QlEwWTdRVUZGVFN4SlFVRkJMRmRCUVZjc1EwRkJReXhOUVVGakxFVkJRVUU3VVVGREwwSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eFJRVUZSTEV0QlFVazdXVUZEY0VNc1RVRkJUU3hOUVVGTkxFZEJRVWtzU1VGQlNTeERRVUZETEZGQlFXZENMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQmEwSXNRMEZCUXp0WlFVTjBSU3hKUVVGSkxFMUJRVTBzUzBGQlN5eFRRVUZUTEVWQlFVVTdaMEpCUTNoQ0xFOUJRVTg3UVVGRFVpeGhRVUZCTzBGQlJVUXNXVUZCUVN4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVONlJTeFpRVUZCTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExHTkJRV01zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUlhoRkxGbEJRVUVzVFVGQlRTeERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkROVUlzVTBGQlF5eERRVUZETEVOQlFVTTdTMEZEU2p0SlFVVk5MR3RDUVVGclFpeEhRVUZCTzFGQlEzWkNMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNVVUZCVVN4TFFVRkpPMWxCUTNCRExFMUJRVTBzVFVGQlRTeEhRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRm5RaXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFXdENMRU5CUVVNN1dVRkRkRVVzU1VGQlNTeE5RVUZOTEV0QlFVc3NVMEZCVXl4RlFVRkZPMmRDUVVONFFpeFBRVUZQTzBGQlExSXNZVUZCUVR0WlFVVkVMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRaUVVNelF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdRVUZGTVVNc1dVRkJRU3hOUVVGTkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTTFRaXhUUVVGRExFTkJRVU1zUTBGQlF6dExRVU5LT3p0QlFUVkpZeXhwUTBGQlFTeERRVUZCTEdsQ1FVRnBRaXhIUVVFd1F6dEJRVU40UlN4SlFVRkJMSE5DUVVGelFpeEZRVUZGTzFGQlEzUkNMRXRCUVVzN1VVRkRUQ3hoUVVGaE8xRkJRMklzVTBGQlV6dFJRVU5VTEZkQlFWYzdVVUZEV0N4cFFrRkJhVUk3VVVGRGFrSXNZMEZCWXp0UlFVTmtMR05CUVdNN1VVRkRaQ3hWUVVGVk8wRkJRMWdzUzBGQlFUdEJRVU5FTEVsQlFVRXNiVUpCUVcxQ0xFVkJRVVVzUTBGQlF5eExRVUZMTEVWQlFVVXNZVUZCWVN4RlFVRkZMRlZCUVZVc1EwRkJRenRCUVVOMlJDeEpRVUZCTEdWQlFXVXNSVUZCUlR0UlFVTm1MRXRCUVVzN1VVRkRUQ3hYUVVGWE8xRkJRMWdzWVVGQllUdFJRVU5pTEhOQ1FVRnpRanRSUVVOMFFpeHZRa0ZCYjBJN1VVRkRjRUlzTmtKQlFUWkNPMUZCUXpkQ0xIZENRVUYzUWp0QlFVTjZRaXhMUVVGQk8wTkJRMFk3TzBGRFprZzdPMEZCUlVjN1FVRkRTQ3hOUVVGTlFTeDNRa0ZCYzBJc1IwRkJSeXhKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJSVFZFT3p0QlFVVkhPMDFCUTFVc2VVSkJRWGxDTEVOQlFVRTdRVUY1UW5CRExFbEJRVUVzU1VGQlZ5eEpRVUZKTEVkQlFVRTdPMEZCUldJc1VVRkJRU3hQUVVGUExESkNRVUV5UWl4RFFVRkRPMHRCUTNCRE8wRkJSVVFzU1VGQlFTeFhRVUZCTEVOQlFXMUNMRTFCUVd0Q0xFVkJRVUU3UVVGRGJrTXNVVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF6dExRVU4wUWp0QlFVVlpMRWxCUVVFc1UwRkJVeXhEUVVGRExFbEJRVlVzUlVGQlFUczdRVUZETDBJc1dVRkJRU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEc5Q1FVRnZRaXhIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRUUVVNdlJDeERRVUZCTEVOQlFVRTdRVUZCUVN4TFFVRkJPMEZCUlVRN096czdRVUZKUnp0QlFVTlhMRWxCUVVFc1QwRkJUeXhEUVVGRExFbEJRVlVzUlVGQlFUczdXVUZET1VJc1RVRkJUU3hSUVVGUkxFZEJRVWNzVFVGQlRTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRelZETEZsQlFVRXNTVUZCU1N4UlFVRlJMRVZCUVVVN1FVRkRXaXhuUWtGQlFTeFBRVUZQTEZGQlFWRXNRMEZCUXp0QlFVTnFRaXhoUVVGQk8xbEJSVVFzVFVGQlRTeFJRVUZSTEVkQlFVY3NUVUZCVFN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlF6VkRMRmxCUVVFc1NVRkJTU3hSUVVGUkxFVkJRVVU3UVVGRFdpeG5Ra0ZCUVN4UFFVRlBMRkZCUVZFc1EwRkJRenRCUVVOcVFpeGhRVUZCTzBGQlJVUXNXVUZCUVN4UFFVRlBMRWxCUVVrc1EwRkJRenRUUVVOaUxFTkJRVUVzUTBGQlFUdEJRVUZCTEV0QlFVRTdRVUZGWVN4SlFVRkJMRk5CUVZNc1EwRkJReXhKUVVGVkxFVkJRVUU3T3p0QlFVTm9ReXhaUVVGQkxFMUJRVTBzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJkMElzUTBGQlF6czdRVUZIYkVRc1dVRkJRU3hOUVVGTkxGTkJRVk1zUjBGQlJ5eERRVUZCTEVOQlFVRXNSVUZCUVN4SFFVRkJMRWxCUVVrc1EwRkJReXhqUVVGakxFMUJRVVVzU1VGQlFTeEpRVUZCTEVWQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVOQlFVRXNUMEZCVHl4RFFVRkRMRlZCUVZVc1EwRkJReXhOUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyeEZMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVU3UVVGRFpDeG5Ra0ZCUVN4UFFVRlBMRWxCUVVrc1EwRkJRenRCUVVOaUxHRkJRVUU3V1VGRlJDeE5RVUZOTEZOQlFWTXNSMEZCUnl4RFFVRkJMRVZCUVVFc1IwRkJRU3hKUVVGSkxFTkJRVU1zVlVGQlZTeE5RVUZCTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4RFFVRkhMRlZCUVZVc1EwRkJiME1zUTBGQlF6dFpRVU51Uml4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRk8wRkJRMlFzWjBKQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1FVRkRZaXhoUVVGQk8wRkJSVVFzV1VGQlFTeE5RVUZOTEZkQlFWY3NSMEZCUnl4VFFVRlRMRU5CUVVNc1YwRkJWeXhEUVVGRE8wRkJRekZETEZsQlFVRXNTVUZCU1N4RFFVRkRRU3gzUWtGQmMwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1YwRkJWeXhEUVVGRExFVkJRVVU3UVVGRE5VTXNaMEpCUVVFc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5dzBSRUZCTkVRc1YwRkJWeXhEUVVGQkxFTkJRVUVzUTBGQlJ5eERRVUZETEVOQlFVTTdRVUZEZWtZc1owSkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTTdRVUZEWWl4aFFVRkJPMEZCUlVRc1dVRkJRU3hOUVVGTkxHbENRVUZwUWl4SFFVRkhMRk5CUVZNc1EwRkJReXhYUVVGWExFTkJRVU03V1VGRGFFUXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTzBGQlEzUkNMR2RDUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETzBGQlEySXNZVUZCUVRzN1FVRkhSQ3haUVVGQkxFMUJRVTBzWVVGQllTeEhRVUZITEVsQlFVa3NSMEZCUnl4RFFVRlRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRemxGTEZsQlFVRXNUVUZCVFN4MVFrRkJkVUlzUjBGQlJ5eEpRVUZKTEVkQlFVY3NSVUZCYTBNc1EwRkJRenRCUVVVeFJTeFpRVUZCTEVsQlFVa3NhVUpCUVdsQ0xFTkJRVU1zVFVGQlRTeEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTndReXhuUWtGQlFTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMR2xDUVVGcFFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeEZRVUZGTEdkQ1FVRm5RaXhEUVVGRExFdEJRVWs3YjBKQlF6VkZMRWxCUVVrc1owSkJRV2RDTEVsQlFVa3NTVUZCU1N4RlFVRkZPM2RDUVVNMVFpeFBRVUZQTzBGQlExSXNjVUpCUVVFN1FVRkZSQ3h2UWtGQlFTeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJUdEJRVU0xUWl4M1FrRkJRU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEcxRVFVRnRSQ3hKUVVGSkxFTkJRVUVzYlVOQlFVRXNRMEZCY1VNc1EwRkJReXhEUVVGRE8zZENRVU16Unl4UFFVRlBPMEZCUTFJc2NVSkJRVUU3UVVGRlJDeHZRa0ZCUVN4MVFrRkJkVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RlFVRkZMR2RDUVVGblFpeERRVUZETEVOQlFVTTdRVUZEZEVRc2FVSkJRVU1zUTBGQlF5eERRVUZETzBGQlEwb3NZVUZCUVR0QlFVVkVMRmxCUVVFc1NVRkJTU3hwUWtGQmFVSXNRMEZCUXl4TlFVRk5MRWxCUVVrc1NVRkJTU3hGUVVGRk8wRkJRM0JETEdkQ1FVRkJMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1owSkJRV2RDTEVOQlFVTXNTMEZCU1R0QlFVTTFSU3h2UWtGQlFTeEpRVUZKTEdGQlFXRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVU3UVVGRE0wSXNkMEpCUVVFc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGRFZpeDVSVUZCZVVVc1NVRkJTU3hEUVVGQkxEQkNRVUZCTEVOQlFUUkNMRU5CUXpGSExFTkJRVU03ZDBKQlEwWXNUMEZCVHp0QlFVTlNMSEZDUVVGQk8wRkJSVVFzYjBKQlFVRXNkVUpCUVhWQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NSVUZCUlN4blFrRkJaMElzUTBGQlF5eERRVUZETzBGQlEzUkVMR2xDUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5LTEdGQlFVRTdPMEZCUjBRc1dVRkJRU3hOUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZKTEc5Q1FVRnZRaXhGUVVGRkxFTkJRVU03TzFsQlJ6TkRMRTFCUVUwc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGRFppeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNaMEpCUVdkQ0xFTkJRVU1zUzBGQlNTeFRRVUZCTEVOQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1EwRkJRU3hGUVVGQkxFdEJRVUVzUTBGQlFTeEZRVUZCTEdGQlFVRTdPMEZCUTI1R0xHZENRVUZCTEUxQlFVMHNWVUZCVlN4SFFVRkhMRWxCUVVrc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlF6TkRMR2RDUVVGQkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8yZENRVVV6UWl4VlFVRlZMRU5CUVVNc1VVRkJVU3hIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzVFVGQlNTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeExRVUZMTEVOQlFVTTdaMEpCUTNwRUxGVkJRVlVzUTBGQlF5eGhRVUZoTEVkQlFVY3NRMEZCUVN4RlFVRkJMRWRCUVVFc1owSkJRV2RDTEVOQlFVTXNZVUZCWVN4TlFVRkpMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRTFCUVUwc1EwRkJRenRuUWtGRGNFVXNWVUZCVlN4RFFVRkRMR05CUVdNc1IwRkJSeXhEUVVGQkxFVkJRVUVzUjBGQlFTeG5Ra0ZCWjBJc1EwRkJReXhqUVVGakxFMUJRVWtzU1VGQlFTeEpRVUZCTEVWQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzVFVGQlRTeERRVUZETzJkQ1FVTjBSU3hWUVVGVkxFTkJRVU1zWVVGQllTeEhRVUZITEVOQlFVRXNSVUZCUVN4SFFVRkJMR2RDUVVGblFpeERRVUZETEdGQlFXRXNUVUZCU1N4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4TlFVRk5MRU5CUVVNN1owSkJSWEJGTEVOQlFVRXNSVUZCUVN4SFFVRkJMR2RDUVVGblFpeERRVUZETEdkQ1FVRm5RaXhOUVVGQkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeERRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRlBMRWxCUVVrc1MwRkJTU3hUUVVGQkxFTkJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNRMEZCUVN4RlFVRkJMRXRCUVVFc1EwRkJRU3hGUVVGQkxHRkJRVUU3TzI5Q1FVTjRSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NVMEZCVXl4SlFVRkpMRWxCUVVrc1EwRkJReXhMUVVGTExFdEJRVXNzVTBGQlV5eEZRVUZGTzNkQ1FVTjJSQ3hQUVVGUE8wRkJRMUlzY1VKQlFVRTdRVUZGUkN4dlFrRkJRU3hOUVVGTkxGVkJRVlVzU1VGQlNTeE5RVUZOTERaQ1FVRTJRaXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVVc1EwRkJRenRCUVVNelJTeHZRa0ZCUVN4TlFVRk5MR2RDUVVGblFpeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN08wRkJSM0JETEc5Q1FVRkJMRWxCUTBVc1EwRkJReXhWUVVGVkxFTkJRVU1zUzBGQlN5eERRVU5tTEVOQlFVTXNVMEZCVXl4TFFVTlNMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEhGQ1FVRnhRaXhEUVVGRE8wRkJRemxETEhkQ1FVRkJMR2RDUVVGblFpeEhRVUZITEZOQlFWTXNRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eE5RVUZOTEVOQlF6VkVMRVZCUTBRN2QwSkJRMEVzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZEVml4RFFVRTRRaXd5UWtGQlFTeEZRVUZCTEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUTBGQk5rSXNNRUpCUVVFc1JVRkJRU3huUWtGQlowSXNRMEZCYVVJc1pVRkJRU3hEUVVGQkxFTkJRMnhJTEVOQlFVTTdkMEpCUTBZc1QwRkJUenRCUVVOU0xIRkNRVUZCTzBGQlJVUXNiMEpCUVVFc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGRGFFSXNTVUZCU1N3MFFrRkJORUlzUTBGQlF6dDNRa0ZETDBJc1ZVRkJWVHRCUVVOV0xIZENRVUZCTEV0QlFVc3NSVUZCUlN4blFrRkJaMEk3UVVGRGRrSXNkMEpCUVVFc1RVRkJUU3hGUVVGRkxFTkJRVUVzUlVGQlFTeEhRVUZCTEVsQlFVa3NRMEZCUXl4TlFVRk5MRzFEUVVGSkxFZEJRVWM3UVVGRE0wSXNjVUpCUVVFc1EwRkJReXhEUVVOSUxFTkJRVU03YVVKQlEwZ3NRMEZCUVN4RFFVRkRMRU5CUVVNN1FVRkZTQ3huUWtGQlFTeEpRVUZKTEdkQ1FVRm5RaXhEUVVGRExHdENRVUZyUWl4SlFVRkpMR2RDUVVGblFpeERRVUZETEhGQ1FVRnhRaXhGUVVGRk96dHZRa0ZGYWtZc1RVRkJUU3hoUVVGaExFZEJRWEZDTEVWQlFVVXNRMEZCUXp0dlFrRkRNME1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhOUVVGTkxFdEJRVWs3UVVGRE4wSXNkMEpCUVVFc1RVRkJUU3hSUVVGUkxFZEJRVWtzVFVGQll5eERRVUZETEZGQlFYTkRMRU5CUVVNN1FVRkRlRVVzZDBKQlFVRXNTVUZCU1N4UlFVRlJMRVZCUVVVN1FVRkRXaXcwUWtGQlFTeGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wRkJRemxDTEhsQ1FVRkJPMEZCUTBnc2NVSkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVVklMRU5CUVVFc1JVRkJRU3hIUVVGQkxHZENRVUZuUWl4RFFVRkRMR3RDUVVGclFpeE5RVUZCTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4RFFVRkZMRTlCUVU4c1EwRkJReXhEUVVGUExFbEJRVWtzUzBGQlNTeFRRVUZCTEVOQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1EwRkJRU3hGUVVGQkxFdEJRVUVzUTBGQlFTeEZRVUZCTEdGQlFVRTdkMEpCUXpGRUxFMUJRVTBzVTBGQlV5eEhRVUZITEdGQlFXRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhSUVVGUkxFdEJRVWs3TkVKQlEyeEVMRTFCUVUwc1lVRkJZU3hIUVVGSExEaENRVUU0UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdRVUZETlVVc05FSkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTXNVVUZCVVN4TFFVRkxMR0ZCUVdFc1EwRkJRenRCUVVONlF5eDVRa0ZCUXl4RFFVRkRMRU5CUVVNN1FVRkZTQ3gzUWtGQlFTeFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1VVRkJVU3hMUVVGSk8wRkJRemRDTERSQ1FVRkJMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRMmhDTEVsQlFVa3NPRUpCUVRoQ0xFTkJRVU03WjBOQlEycERMRkZCUVZFN1owTkJRMUlzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpPMEZCUTJZc1owTkJRVUVzVjBGQlZ5eEZRVUZGTEVsQlFVa3NTMEZCU3l4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRPMEZCUXpORUxEWkNRVUZCTEVOQlFVTXNRMEZEU0N4RFFVRkRPMEZCUTBvc2VVSkJRVU1zUTBGQlF5eERRVUZETzNGQ1FVTktMRU5CUVVFc1EwRkJReXhEUVVGRE8yOUNRVVZJTEVOQlFVRXNSVUZCUVN4SFFVRkJMR2RDUVVGblFpeERRVUZETEhGQ1FVRnhRaXhOUVVGQkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeERRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRlBMRWxCUVVrc1MwRkJTU3hUUVVGQkxFTkJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNRMEZCUVN4RlFVRkJMRXRCUVVFc1EwRkJRU3hGUVVGQkxHRkJRVUU3ZDBKQlF6ZEVMRTFCUVUwc1UwRkJVeXhIUVVGSExHRkJRV0VzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4UlFVRlJMRXRCUVVrN05FSkJRMnhFTEUxQlFVMHNZVUZCWVN4SFFVRkhMRGhDUVVFNFFpeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRE5VVXNORUpCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVU1zVVVGQlVTeExRVUZMTEdGQlFXRXNRMEZCUXp0QlFVTjZReXg1UWtGQlF5eERRVUZETEVOQlFVTTdRVUZGU0N4M1FrRkJRU3hUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNVVUZCVVN4TFFVRkpPenRCUVVNM1FpdzBRa0ZCUVN4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVOb1FpeEpRVUZKTEdsRFFVRnBReXhEUVVGRE8yZERRVU53UXl4UlFVRlJPMEZCUTFJc1owTkJRVUVzVFVGQlRTeEZRVUZGTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZCTEVsQlFVa3NRMEZCUXl4TlFVRk5MRTFCUVVrc1NVRkJRU3hKUVVGQkxFVkJRVUVzUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1EwRkJReXhIUVVGSExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEYUVVc1owTkJRVUVzUzBGQlN5eEZRVUZGTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZCTEVsQlFVa3NRMEZCUXl4TFFVRkxMRTFCUVVrc1NVRkJRU3hKUVVGQkxFVkJRVUVzUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1EwRkJReXhIUVVGSExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZETDBRc05rSkJRVUVzUTBGQlF5eERRVU5JTEVOQlFVTTdRVUZEU2l4NVFrRkJReXhEUVVGRExFTkJRVU03Y1VKQlEwb3NRMEZCUVN4RFFVRkRMRU5CUVVNN1FVRkRTaXhwUWtGQlFUdEJRVVZFTEdkQ1FVRkJMRTlCUVU4c1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRoUVVONFF5eERRVUZCTEVOQlFVTXNRMEZEU0N4RFFVRkRPMEZCUlVZc1dVRkJRU3hQUVVGUExFOUJRVThzUTBGQlF6czdRVUZEYUVJc1MwRkJRVHRCUVVWaExFbEJRVUVzVTBGQlV5eERRVUZETEVsQlFWVXNSVUZCUVRzN08wRkJRMmhETEZsQlFVRXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUYzUWl4RFFVRkRPenRaUVVkc1JDeE5RVUZOTEUxQlFVMHNSMEZCUnl4RFFVRkJMRVZCUVVFc1IwRkJRU3hKUVVGSkxFTkJRVU1zVlVGQlZTeE5RVUZCTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4RFFVRkZMRWRCUVRSQ0xFTkJRVU03V1VGRE4wUXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSVHRCUVVOWUxHZENRVUZCTEU5QlFVOHNTVUZCU1N4RFFVRkRPMEZCUTJJc1lVRkJRVHRCUVVWRUxGbEJRVUVzVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1dVRkRha1FzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhGUVVGRk8wRkJRM0pDTEdkQ1FVRkJMRTlCUVU4c1NVRkJTU3hEUVVGRE8wRkJRMklzWVVGQlFUdEJRVVZFTEZsQlFVRXNUVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJTU3h2UWtGQmIwSXNSVUZCUlN4RFFVRkRPMEZCUlRORExGbEJRVUVzVFVGQlRTeHpRa0ZCYzBJc1IwRkJSeXhuUWtGQlowSXNRMEZCUXl4blFrRkJaMElzUTBGQlF6dFpRVU5xUlN4SlFVRkpMRU5CUVVNc2MwSkJRWE5DTEVWQlFVVTdRVUZETTBJc1owSkJRVUVzVDBGQlR5eFBRVUZQTEVOQlFVTTdRVUZEYUVJc1lVRkJRVHRCUVVWRUxGbEJRVUVzVFVGQlRTeHBRa0ZCYVVJc1IwRkJSeXhKUVVGSkxFZEJRVWNzUlVGQlZTeERRVUZETzFsQlJUVkRMRTFCUVUwc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGRFppeHpRa0ZCYzBJc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlR5eFhRVUZYTEV0QlFVa3NVMEZCUVN4RFFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFTkJRVUVzUlVGQlFTeExRVUZCTEVOQlFVRXNSVUZCUVN4aFFVRkJPenRCUVVNdlF5eG5Ra0ZCUVN4TlFVRk5MRmxCUVZrc1IwRkJSeXhYUVVGWExFTkJRVU1zVlVGQlZTeERRVUZETzBGQlF6VkRMR2RDUVVGQkxFMUJRVTBzV1VGQldTeEhRVU5vUWl4RFFVRkRMRmxCUVZrc1NVRkJTU3hKUVVGSkxFbEJRVWtzZVVKQlFYbENMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNXVUZCV1N4RFFVRkRMRXRCUVVzc1NVRkJTU3hEUVVGRE8yZENRVU01Uml4TlFVRk5MRWxCUVVrc1IwRkJSeXhaUVVGWkxFdEJRVm9zU1VGQlFTeEpRVUZCTEZsQlFWa3NTMEZCV2l4TFFVRkJMRU5CUVVFc1IwRkJRU3haUVVGWkxFZEJRVWtzVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXp0blFrRkZPVU1zU1VGQlNTeEpRVUZKTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTJoQ0xHOUNRVUZCTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc01rWkJRVEpHTEVOQlFVTXNRMEZCUXp0dlFrRkRNVWNzVDBGQlR6dEJRVU5TTEdsQ1FVRkJPenRCUVVkRUxHZENRVUZCTEVsQlFVa3NhVUpCUVdsQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMEZCUXk5Q0xHOUNRVUZCTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUTFZc2JVUkJRVzFFTEZsQlFWa3NRMEZCUVN4blJFRkJRU3hEUVVGclJDeERRVU5zU0N4RFFVRkRPMjlDUVVOR0xFOUJRVTg3UVVGRFVpeHBRa0ZCUVR0QlFVVkVMR2RDUVVGQkxHbENRVUZwUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVVUxUWl4blFrRkJRU3hOUVVGTkxGVkJRVlVzUjBGQlJ5eEpRVUZKTEdGQlFXRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVNelF5eG5Ra0ZCUVN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0blFrRkZNMElzVlVGQlZTeERRVUZETEZGQlFWRXNSMEZCUnl4RFFVRkJMRVZCUVVFc1IwRkJRU3hYUVVGWExFTkJRVU1zVVVGQlVTeE5RVUZKTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEV0QlFVc3NRMEZCUXpzN08yZENRVWx3UkN4SlFVRkpMRmRCUVZjc1EwRkJReXhMUVVGTExFVkJRVVU3YjBKQlEzSkNMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVOHNTVUZCU1N4TFFVRkpMRk5CUVVFc1EwRkJRU3hKUVVGQkxFVkJRVUVzUzBGQlFTeERRVUZCTEVWQlFVRXNTMEZCUVN4RFFVRkJMRVZCUVVFc1lVRkJRVHM3ZDBKQlEzWkRMRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzUzBGQlN5eFRRVUZUTEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1MwRkJTeXhUUVVGVExFVkJRVVU3TkVKQlEzWkVMRTlCUVU4N1FVRkRVaXg1UWtGQlFUdDNRa0ZGUkN4TlFVRk5MR05CUVdNc1IwRkJZU3hGUVVGRkxFTkJRVU03ZDBKQlEzQkRMRU5CUVVFc1JVRkJRU3hIUVVGQkxFbEJRVWtzUTBGQlF5eExRVUZMTEUxQlFVVXNTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRU5CUVVFc1QwRkJUeXhEUVVGRExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNTMEZCU1R0QlFVTTVRaXcwUWtGQlFTeEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJUdEJRVU16UWl4blEwRkJRU3hqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNoQ0xEWkNRVUZCTzBGQlEwZ3NlVUpCUVVNc1EwRkJReXhEUVVGRE8wRkJSVWdzZDBKQlFVRXNUVUZCVFN4blFrRkJaMElzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRPM2RDUVVWd1F5eE5RVUZOTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUTJZc1kwRkJZeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZQTEZOQlFWTXNTMEZCU1N4VFFVRkJMRU5CUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUTBGQlFTeEZRVUZCTEV0QlFVRXNRMEZCUVN4RlFVRkJMR0ZCUVVFN096UkNRVU55UXl4TlFVRk5MRlZCUVZVc1NVRkJTU3hOUVVGTkxEWkNRVUUyUWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlJTeERRVUZET3p0QlFVY3pSU3cwUWtGQlFTeEpRVU5GTEVOQlFVTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkRaaXhEUVVGRExGTkJRVk1zUzBGRFVpeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXh4UWtGQmNVSXNRMEZCUXp0QlFVTTVReXhuUTBGQlFTeG5Ra0ZCWjBJc1IwRkJSeXhUUVVGVExFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1RVRkJUU3hEUVVNMVJDeEZRVU5FTzJkRFFVTkJMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRMVlzUTBGQk9FSXNNa0pCUVVFc1JVRkJRU3hYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZ6UWl4dFFrRkJRU3hGUVVGQkxHZENRVUZuUWl4RFFVRjVRaXgxUWtGQlFTeERRVUZCTEVOQlF6bEhMRU5CUVVNN1owTkJRMFlzVDBGQlR6dEJRVU5TTERaQ1FVRkJPMEZCUlVRc05FSkJRVUVzVlVGQlZTeERRVUZETEU5QlFVOHNRMEZEYUVJc1NVRkJTU3cwUWtGQk5FSXNRMEZCUXp0blEwRkRMMElzVlVGQlZUdEJRVU5XTEdkRFFVRkJMRXRCUVVzc1JVRkJSU3huUWtGQlowSTdRVUZEZGtJc1owTkJRVUVzVFVGQlRTeEZRVUZGTEVsQlFVa3NTVUZCU1N4RFFVRkJMRVZCUVVFc1IwRkJRU3hKUVVGSkxFTkJRVU1zVFVGQlRTeE5RVUZKTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEVkQlFVY3NRMEZCUXp0QlFVTndReXcyUWtGQlFTeERRVUZETEVOQlEwZ3NRMEZCUXp0NVFrRkRTQ3hEUVVGQkxFTkJRVU1zUTBGRFNDeERRVUZETzNGQ1FVTklMRU5CUVVFc1EwRkJReXhEUVVGRE8wRkJRMG9zYVVKQlFVRTdPMEZCUjBRc1owSkJRVUVzVFVGQlRTeGpRVUZqTEVkQlFVY3NWMEZCVnl4RFFVRkRMR05CUVdNc1EwRkJRenRCUVVOc1JDeG5Ra0ZCUVN4SlFVRkpMR05CUVdNc1NVRkJTU3hqUVVGakxFTkJRVU1zVFVGQlRTeExRVUZMTEVOQlFVTXNSVUZCUlR0QlFVTnFSQ3h2UWtGQlFTeGpRVUZqTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1lVRkJZU3hMUVVGSk8wRkJRM1pETEhkQ1FVRkJMRWxCUTBVc1lVRkJZU3hEUVVGRExGbEJRVmtzUzBGQlN5eFRRVUZUT3pSQ1FVTjRReXhoUVVGaExFTkJRVU1zV1VGQldTeExRVUZMTEZOQlFWTTdRVUZEZUVNc05FSkJRVUVzWVVGQllTeERRVUZETEZkQlFWY3NTMEZCU3l4VFFVRlRMRVZCUTNaRE96UkNRVU5CTEU5QlFVODdRVUZEVWl4NVFrRkJRVHRCUVVWRU96czdPenM3UVVGTlJ6dDNRa0ZEU0N4TlFVRk5MRk5CUVZNc1IwRkJjVUlzUlVGQlJTeERRVUZETzNkQ1FVTjJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRTFCUVUwc1MwRkJTVHMwUWtGRE4wSXNTVUZCU3l4TlFVRmpMRU5CUVVNc1VVRkJVU3hGUVVGRk8wRkJRelZDTEdkRFFVRkJMRTFCUVUwc1VVRkJVU3hIUVVGMVF5eE5RVUZqTEVOQlFVTXNVVUZCVVN4RFFVRkRPMEZCUXpkRkxHZERRVUZCTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQlJUdHZRMEZETTBJc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGRFdpeEhRVUZITEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUTJoQ0xFTkJRVU1zUjBGQlJ5eExRVU5HTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1MwRkJTeXhoUVVGaExFTkJRVU1zV1VGQllUdDNRMEZEZGtNc1IwRkJSeXhEUVVGRExFbEJRVWtzUzBGQlN5eGhRVUZoTEVOQlFVTXNXVUZCWVN4SFFVRkhMRmxCUVZrN2QwTkJRM3BFTEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlEyaERMRU5CUTBZc1EwRkJRenRCUVVOSUxHbERRVUZCTzBGQlFVMHNjVU5CUVVFc1NVRkJTU3hSUVVGUkxFTkJRVU1zU1VGQlNTeExRVUZMTEdGQlFXRXNRMEZCUXl4WlFVRlpMRWxCUVVrc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSVHRCUVVNM1JpeHZRMEZCUVN4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlF6RkNMR2xEUVVGQk8wRkJRMFlzTmtKQlFVRTdRVUZEU0N4NVFrRkJReXhEUVVGRExFTkJRVU03UVVGRlNDeDNRa0ZCUVN4TlFVRk5MRzlDUVVGdlFpeEhRVUZITEdGQlFXRXNRMEZCUXl4WlFVRlpMRU5CUVVNN1FVRkRlRVFzZDBKQlFVRXNVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExGRkJRVkVzUzBGQlNUczdORUpCUlRkQ0xFbEJRVWtzYjBKQlFXOUNMRXRCUVVzc1lVRkJZU3hGUVVGRk8yZERRVU14UXl4TlFVRk5MRXRCUVVzc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNZVUZCWVN4RFFVRkRMRmRCUVZrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeGhRVUZoTEVOQlFVTXNWMEZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WjBOQlF6bEdMRTFCUVUwc1RVRkJUU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4aFFVRmhMRU5CUVVNc1YwRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEdGQlFXRXNRMEZCUXl4WFFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU12Uml4blEwRkJRU3hWUVVGVkxFTkJRVU1zVDBGQlR5eERRVU5vUWl4SlFVRkpMR2xEUVVGcFF5eERRVUZETzI5RFFVTndReXhSUVVGUk8yOURRVU5TTEV0QlFVczdiME5CUTB3c1RVRkJUVHRCUVVOUUxHbERRVUZCTEVOQlFVTXNRMEZEU0N4RFFVRkRPMmREUVVWR0xFOUJRVTg3UVVGRFVpdzJRa0ZCUVRzN1FVRkhSQ3cwUWtGQlFTeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExEUkNRVUUwUWl4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVOQlFVTTdRVUZETjBVc05FSkJRVUVzU1VGQlNTeHBRa0ZCYVVJc1JVRkJSVHRCUVVOeVFpeG5RMEZCUVN4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVOb1FpeEpRVUZKTERoQ1FVRTRRaXhEUVVGRE8yOURRVU5xUXl4UlFVRlJPMEZCUTFJc2IwTkJRVUVzU1VGQlNTeEZRVUZGTEdsQ1FVRnBRanRCUVVOMlFpeHZRMEZCUVN4WFFVRlhMRVZCUVVVc1NVRkJTU3hMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NZVUZCWVN4RFFVRkRMRmRCUVZrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNoRkxHbERRVUZCTEVOQlFVTXNRMEZEU0N4RFFVRkRPMmREUVVWR0xFOUJRVTg3UVVGRFVpdzJRa0ZCUVR0QlFVVkVMRFJDUVVGQkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFZEJRVWNzYlVKQlFXMUNMRU5CUVVNc1EwRkJRenRCUVVNelJDeDVRa0ZCUXl4RFFVRkRMRU5CUVVNN1FVRkRUQ3h4UWtGQlF5eERRVUZETEVOQlFVTTdRVUZEU2l4cFFrRkJRVHRCUVVWRUxHZENRVUZCTEU5QlFVOHNRMEZCUXl4clFrRkJhMElzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0aFFVTjRReXhEUVVGQkxFTkJRVU1zUTBGRFNDeERRVUZETzBGQlJVWXNXVUZCUVN4UFFVRlBMRTlCUVU4c1EwRkJRenM3UVVGRGFFSXNTMEZCUVRzN1FVRnNXWE5DTEhsQ1FVRkJMRU5CUVVFc2FVSkJRV2xDTEVkQlFYbEZPMEZCUXk5SExFbEJRVUVzUTBGQlF5eEZRVUZGTEVsQlFVazdRVUZEVUN4SlFVRkJMRU5CUVVNc1JVRkJSU3hKUVVGSk8wRkJRMUFzU1VGQlFTeERRVUZETEVWQlFVVXNTVUZCU1R0QlFVTlFMRWxCUVVFc1EwRkJReXhGUVVGRkxFbEJRVWs3UVVGRFVDeEpRVUZCTEVOQlFVTXNSVUZCUlN4SlFVRkpPMEZCUTFBc1NVRkJRU3hMUVVGTExFVkJRVVVzVDBGQlR6dEJRVU5rTEVsQlFVRXNSMEZCUnl4RlFVRkZMRTlCUVU4N1FVRkRXaXhKUVVGQkxFdEJRVXNzUlVGQlJTeFBRVUZQTzBGQlEyUXNTVUZCUVN4TlFVRk5MRVZCUVVVc1MwRkJTenRCUVVOaUxFbEJRVUVzUjBGQlJ5eEZRVUZGTEZOQlFWTTdRVUZEWkN4SlFVRkJMRTFCUVUwc1JVRkJSU3hSUVVGUk8wRkJRMmhDTEVsQlFVRXNVVUZCVVN4RlFVRkZMRlZCUVZVN1FVRkRjRUlzU1VGQlFTeFJRVUZSTEVWQlFVVXNWVUZCVlR0QlFVTndRaXhKUVVGQkxGTkJRVk1zUlVGQlJTeFhRVUZYT3p0QlFVVjBRaXhKUVVGQkxFOUJRVThzUlVGQlJTeFhRVUZYT3p0QlFVVndRaXhKUVVGQkxFOUJRVThzUlVGQlJTeFpRVUZaTzBGQlEzSkNMRWxCUVVFc1QwRkJUeXhGUVVGRkxGTkJRVk03UTBGRGJrSTdPMEZETlVOSU8wRkJSV0VzVFVGQlFTeDVRa0ZCZVVJc1IwRkJSenRCUVVOMlF5eEpRVUZCTEVsQlFVa3NSVUZCUlN4TlFVRk5PMEZCUTFvc1NVRkJRU3hMUVVGTExFVkJRVVVzVDBGQlR6dEJRVU5rTEVsQlFVRXNTMEZCU3l4RlFVRkZMRTlCUVU4N096dE5RMFJJTEdOQlFXTXNRMEZCUVR0QlFUQkNla0k3T3pzN08wRkJTMGM3U1VGRFNDeFhRVUZ0UWl4RFFVRkJMRkZCUVhGQ0xFVkJRVVVzWlVGQkswTXNSVUZCUVR0QlFWaHFSaXhSUVVGQkxFbEJRVUVzUTBGQlFTeHhRa0ZCY1VJc1IwRkJSeXhqUVVGakxFTkJRVU1zT0VKQlFUaENMRU5CUVVNN1FVRkRkRVVzVVVGQlFTeEpRVUZCTEVOQlFVRXNjVUpCUVhGQ0xFZEJRVWNzWTBGQll5eERRVUZETERoQ1FVRTRRaXhEUVVGRE8xRkJSWFJGTEVsQlFXdENMRU5CUVVFc2EwSkJRVUVzUjBGQlJ5eExRVUZMTEVOQlFVTTdRVUZUYWtNc1VVRkJRU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEZGQlFWRXNRMEZCUXp0QlFVTjZRaXhSUVVGQkxFbEJRVWtzUTBGQlF5eGxRVUZsTEVkQlFVY3NaVUZCWlN4RFFVRkRPMHRCUTNoRE8wRkJSVVE3T3pzN08wRkJTMGM3UVVGRFNTeEpRVUZCTEVsQlFVa3NRMEZCUXl4TlFVRnpRaXhGUVVGQk8wRkJRMmhETEZGQlFVRXNTVUZCU1N4SlFVRkpMRU5CUVVNc1VVRkJVU3hMUVVGTExFMUJRVTBzUTBGQlF5eFJRVUZSTEVWQlFVVTdRVUZEY2tNc1dVRkJRU3hOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETEhkRVFVRjNSQ3hEUVVGRExFTkJRVU03UVVGRE0wVXNVMEZCUVR0QlFVVkVMRkZCUVVFc1NVRkJTU3hEUVVGRExHVkJRV1VzUjBGQlJ5eE5RVUZOTEVOQlFVTXNaVUZCWlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExGVkJRVlVzVFVGQlRUdEJRVU5xUlN4WlFVRkJMRTFCUVUwc1JVRkJSU3hWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNSVUZCUlR0WlFVTnNReXhKUVVGSkxFVkJRVVVzVlVGQlZTeERRVUZETEVsQlFVazdRVUZEZEVJc1UwRkJRU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVVZLTEZGQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1MwRkRZanRCUVVWRU96czdRVUZIUnp0SlFVTkpMRXRCUVVzc1IwRkJRVHRCUVVOV0xGRkJRVUVzVDBGQlR5eEpRVUZKTEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRE0wVTdRVUZGUkRzN096czdPenM3UVVGUlJ6dEJRVU5JTEVsQlFVRXNTVUZCVnl4dlFrRkJiMElzUjBGQlFUdFJRVU0zUWl4UFFVRlBMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXp0TFFVTnVRenRCUVVWRU96czdPenM3T3p0QlFWRkhPMEZCUTBnc1NVRkJRU3hKUVVGWExHOUNRVUZ2UWl4SFFVRkJPMUZCUXpkQ0xFOUJRVThzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRE8wdEJRMjVETzBGQlJVUTdPenM3T3pzN096czdPMEZCVjBjN1FVRkRTU3hKUVVGQkxFdEJRVXNzUTBGQlF5eEZRVU5ZTEc5Q1FVRnZRaXhIUVVGSExHTkJRV01zUTBGQlF5dzRRa0ZCT0VJc1JVRkRjRVVzYjBKQlFXOUNMRWRCUVVjc1kwRkJZeXhEUVVGRExEaENRVUU0UWl4SFFVTnlSU3hIUVVGSExFVkJRVVVzUlVGQlFUdFJRVU5LTEVsQlFVa3NTVUZCU1N4RFFVRkRMR3RDUVVGclFpeEZRVUZGTzFsQlF6TkNMRTlCUVU4N1FVRkRVaXhUUVVGQk8wRkJRMFFzVVVGQlFTeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFZEJRVWNzYjBKQlFXOUNMRU5CUVVNN1FVRkRiRVFzVVVGQlFTeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFZEJRVWNzYjBKQlFXOUNMRU5CUVVNN1VVRkZiRVFzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhKUVVGSkxFdEJRVWs3V1VGRGNFTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eEpRVUZKTEV0QlFVazdRVUZETTBJc1owSkJRVUVzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMR2xDUVVGcFFpeEZRVUZGTzI5Q1FVTnVReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNRMEZCUXp0QlFVTTFReXh2UWtGQlFTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1MwRkJTeXhMUVVGTExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRlRVVzYVVKQlFVRTdRVUZCVFN4eFFrRkJRU3hKUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NhVUpCUVdsQ0xFVkJRVVU3YjBKQlF6RkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZETzBGQlF6VkRMRzlDUVVGQkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4TFFVRkxMRXRCUVVzc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTjRSU3hwUWtGQlFUdEJRVUZOTEhGQ1FVRkJMRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzUzBGQlN5eE5RVUZOTEVWQlFVVTdRVUZETDBJc2IwSkJRVUVzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEycERMR2xDUVVGQk8wRkJRMGdzWVVGQlF5eERRVUZETEVOQlFVTTdRVUZEVEN4VFFVRkRMRU5CUVVNc1EwRkJRenRCUVVWSUxGRkJRVUVzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhIUVVGSExFbEJRVWtzUTBGQlF6dExRVU5vUXp0QlFVVlBMRWxCUVVFc2FVSkJRV2xDTEVOQlFVTXNVMEZCYlVJc1JVRkJSU3hIUVVGbExFVkJRVVVzVTBGQmNVSXNSVUZCUlN4UFFVRnBRaXhGUVVGQk8xRkJRM1JITEVsQlFVa3NTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOa0xFbEJRVWtzUjBGQlJ5eEpRVUZKTEVsQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJUdEJRVU5xUXl4WlFVRkJMRXRCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4VFFVRlRMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVTdRVUZETlVNc1owSkJRVUVzVFVGQlRTeERRVUZETEVkQlFVY3NVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU4yUWl4TlFVRk5MRU5CUVVNc1IwRkJSeXhUUVVGVExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVNelFpeE5RVUZOTEVOQlFVTXNSMEZCUnl4VFFVRlRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlF6TkNMR2RDUVVGQkxFMUJRVTBzUjBGQlJ5eEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOdVFpeG5Ra0ZCUVN4TlFVRk5MRXRCUVVzc1IwRkJSeXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZGTTBJc1owSkJRVUVzU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVUZGTEZOQlFWTTdRVUZEZGtRc1owSkJRVUVzU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVUZGTEZOQlFWTTdRVUZEZGtRc1owSkJRVUVzU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVUZGTEZOQlFWTTdRVUZEZGtRc1owSkJRVUVzU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVUZGTEZOQlFWTTdRVUZGZGtRc1owSkJRVUVzVFVGQlRTeEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMjVDTEdkQ1FVRkJMRTFCUVUwc1MwRkJTeXhIUVVGSExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTXpRaXhuUWtGQlFTeEpRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzVDBGQlR5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlFVVXNVMEZCVXp0QlFVTjJSQ3huUWtGQlFTeEpRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzVDBGQlR5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlFVVXNVMEZCVXp0QlFVTjJSQ3huUWtGQlFTeEpRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzVDBGQlR5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlFVVXNVMEZCVXp0QlFVTjJSQ3huUWtGQlFTeEpRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzVDBGQlR5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlFVVXNVMEZCVXp0QlFVVjJSQ3huUWtGQlFTeE5RVUZOTEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGJrSXNaMEpCUVVFc1RVRkJUU3hMUVVGTExFZEJRVWNzVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUXpOQ0xHZENRVUZCTEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZCUlN4VFFVRlRPMEZCUTNaRUxHZENRVUZCTEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZCUlN4VFFVRlRPMEZCUTNaRUxHZENRVUZCTEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZCUlN4VFFVRlRPMEZCUTNaRUxHZENRVUZCTEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZCUlN4VFFVRlRPMEZCUlhaRUxHZENRVUZCTEZOQlFWTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU4yUWl4blFrRkJRU3hUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRka0lzWjBKQlFVRXNVMEZCVXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEzaENMR0ZCUVVFN1FVRkRSaXhUUVVGQk8wRkJRMFFzVVVGQlFTeFBRVUZQTEV0QlFVc3NRMEZCUXp0TFFVTmtPMGxCUlU4c2FVSkJRV2xDTEVOQlFVTXNSMEZCYzBJc1JVRkJSU3hwUWtGQk1rSXNSVUZCUVR0QlFVTXpSU3hSUVVGQkxFMUJRVTBzUjBGQlJ5eEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NSVUZCUlN4RlFVRkZMRWRCUVVjc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dFJRVU4wUlN4SFFVRkhMRU5CUVVNc1NVRkJTU3hIUVVGSExFTkJRVUVzUlVGQlJ5eEhRVUZITEVOQlFVTXNTVUZCU1N4VFFVRlRMRU5CUVVNN1FVRkRhRU1zVVVGQlFTeEhRVUZITEVOQlFVTXNZVUZCWVN4SFFVRkhMRWRCUVVjc1EwRkJReXhoUVVGaExFTkJRVU03VVVGRGRFTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFTkJRVU03UVVGRk0wTXNVVUZCUVN4TlFVRk5MRkZCUVZFc1IwRkJSeXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETzFGQlJUbENMRTFCUVUwc1lVRkJZU3hIUVVGSExGRkJRVkVzUTBGQlF5eFpRVUZaTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1FVRkRla1FzVVVGQlFTeE5RVUZOTEd0Q1FVRnJRaXhIUVVGSExHRkJRV0VzV1VGQldTeExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFZEJRVWNzUlVGQlJTeEhRVUZITEdGQlFXRXNRMEZCUXl4TFFVRkxMRU5CUVVNN1VVRkRka2NzVFVGQlRTeFRRVUZUTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTNKQ0xGRkJRVUVzUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExHdENRVUZyUWl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzFsQlEzSkVMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU03WjBKQlEySXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzSkNMR2RDUVVGQkxHdENRVUZyUWl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGVrSXNaMEpCUVVFc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVONlFpeG5Ra0ZCUVN4clFrRkJhMElzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUXpGQ0xHRkJRVUVzUTBGQlF5eERRVUZETzBGQlEwb3NVMEZCUVR0UlFVVkVMRTFCUVUwc1kwRkJZeXhIUVVGSExGRkJRVkVzUTBGQlF5eFpRVUZaTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1FVRkRNMFFzVVVGQlFTeE5RVUZOTEcxQ1FVRnRRaXhIUVVGSExHTkJRV01zV1VGQldTeExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFZEJRVWNzUlVGQlJTeEhRVUZITEdOQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNN1VVRkRNVWNzVFVGQlRTeFZRVUZWTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTNSQ0xGRkJRVUVzUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExHMUNRVUZ0UWl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzFsQlEzUkVMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU03WjBKQlEyUXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzUkNMR2RDUVVGQkxHMUNRVUZ0UWl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRE1VSXNaMEpCUVVFc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVNeFFpeG5Ra0ZCUVN4dFFrRkJiVUlzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUXpOQ0xHRkJRVUVzUTBGQlF5eERRVUZETzBGQlEwb3NVMEZCUVR0QlFVVkVMRkZCUVVFc1RVRkJUU3hMUVVGTExFZEJRVWNzVVVGQlVTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMUZCUTJ4RExFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZEVml4WlFVRkJMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zTWtOQlFUSkRMRU5CUVVNc1EwRkJRenRCUVVNNVJDeFRRVUZCTzFGQlEwUXNUVUZCVFN4WlFVRlpMRWRCUVVjc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkZOME1zVVVGQlFTeE5RVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNXVUZCV1N4RlFVRkZMRlZCUVZVc1JVRkJSU3hUUVVGVExFVkJRVVVzYVVKQlFXbENMRU5CUVVNc1EwRkJRenRSUVVNM1JpeE5RVUZOTEZkQlFWY3NSMEZCWVN4RlFVRkZMRU5CUVVNN1VVRkRha01zUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFdEJRVXNzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0WlFVTTVRaXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMnhETEZOQlFVRTdRVUZEUkN4UlFVRkJMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdPMUZCUnk5Q0xFbEJRVWtzUjBGQlJ5eERRVUZETEdOQlFXTXNSVUZCUlR0QlFVTjBRaXhaUVVGQkxFZEJRVWNzUTBGQlF5eGpRVUZqTEVkQlFVY3NSMEZCUnl4RFFVRkRMR05CUVdNc1EwRkJRenRCUVVONlF5eFRRVUZCTzFGQlEwUXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExFVkJRVVVzUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4WlFVRlpMRU5CUVVNc1JVRkJSU3hKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTJwSExGRkJRVUVzVDBGQlR5eEhRVUZITEVOQlFVTTdTMEZEV2p0SlFVVlBMR3REUVVGclF5eERRVUZETEUxQlFYTkNMRVZCUVVVc1NVRkJkVUlzUlVGQlFUdFJRVU40Uml4TlFVRk5MR2RDUVVGblFpeEhRVUZoTEVWQlFVVXNRMEZCUXp0QlFVTjBReXhSUVVGQkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeExRVUZMTEV0QlFVazdRVUZETVVNc1dVRkJRU3hKUVVGSkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRPMEZCUVVVc1owSkJRVUVzWjBKQlFXZENMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF6bEVMRk5CUVVNc1EwRkJReXhEUVVGRE96dEJRVWRJTEZGQlFVRXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEUxQlFVMHNSVUZCUlR0WlFVTTFRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNRMEZCUXp0WlFVTXZReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNRMEZCUXp0WlFVTXZReXhQUVVGUE8wRkJRMUlzVTBGQlFUdFJRVU5FTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGRE8xRkJRelZETEUxQlFVMHNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1owSkJRV2RDTEVOQlFVTXNRMEZCUXp0QlFVTXZSQ3hSUVVGQkxFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1MwRkRja0k3UVVGRlR5eEpRVUZCTEc5Q1FVRnZRaXhEUVVGRExFbEJRVzlDTEVWQlFVRTdRVUZETDBNc1VVRkJRU3hKUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NUMEZCVHl4RlFVRkZPMWxCUTNwQ0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4RFFVRkRPMEZCUXpWRExGbEJRVUVzU1VGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRemRDTEdkQ1FVRkJMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eExRVUZMTEV0QlFVc3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU40UlN4aFFVRkJPMEZCUVUwc2FVSkJRVUU3UVVGRFRDeG5Ra0ZCUVN4TlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0blFrRkRha01zVFVGQlRTeERRVUZETEVsQlFVa3NSMEZCUnl4RFFVRkJMRlZCUVVFc1JVRkJZU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdaMEpCUTNaRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4RFFVRkRPMEZCUXpsRExHZENRVUZCTEVsQlFVa3NRMEZCUXl4TlFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEzcENMR2RDUVVGQkxFbEJRVWtzUTBGQlF5eFJRVUZSTzNGQ1FVTldMRTFCUVUwc1EwRkJReXhEUVVGRExFdEJRVXNzUzBGQlN5eExRVUZMTEVOQlFVTXNTVUZCU1N4TFFVRkxMR0ZCUVdFc1EwRkJRenRCUVVNdlF5eHhRa0ZCUVN4UFFVRlBMRU5CUVVNc1EwRkJReXhMUVVGTExFdEJRVWs3YjBKQlEycENMRTFCUVUwc1YwRkJWeXhIUVVGSExFdEJRVEJDTEVOQlFVTTdRVUZETDBNc2IwSkJRVUVzU1VGQlNTeERRVUZETEd0RFFVRnJReXhEUVVGRExFMUJRVTBzUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXp0QlFVTXZSQ3hwUWtGQlF5eERRVUZETEVOQlFVTTdRVUZEVGl4aFFVRkJPMEZCUTBZc1UwRkJRVHRCUVVGTkxHRkJRVUVzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMR0ZCUVdFc1JVRkJSVHRaUVVOMFF5eE5RVUZOTEZkQlFWY3NSMEZCUnl4SlFVRjVRaXhEUVVGRE8xbEJRemxETEVsQlFVa3NRMEZCUXl4clEwRkJhME1zUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVHl4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRE8wRkJRM0JGTEZOQlFVRTdRVUZCVFN4aFFVRkJPMEZCUTB3c1dVRkJRU3hKUVVGSkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVN1owSkJRemRDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGRE8wRkJRelZETEdkQ1FVRkJMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eExRVUZMTEV0QlFVc3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU40UlN4aFFVRkJPMEZCUTBZc1UwRkJRVHRMUVVOR08wRkJSVThzU1VGQlFTeGpRVUZqTEVOQlFVTXNTVUZCYjBJc1JVRkJRVHRSUVVONlF5eEpRVUZKTEVsQlFVa3NTMEZCU3l4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlR0QlFVTnFSQ3haUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETzBGQlEySXNVMEZCUVR0QlFVRk5MR0ZCUVVFc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVTdRVUZEZGtJc1dVRkJRU3hQUVVGUExFdEJRVXNzUTBGQlF6dEJRVU5rTEZOQlFVRTdRVUZCVFN4aFFVRkJPMWxCUTB3c1QwRkJUeXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVONlF5eFRRVUZCTzB0QlEwWTdPMEZCTDFGRU96czdPMEZCU1VjN1FVRkRiMElzWTBGQk9FSXNRMEZCUVN3NFFrRkJRU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVVV4UkRzN096dEJRVWxITzBGQlEyOUNMR05CUVRoQ0xFTkJRVUVzT0VKQlFVRXNSMEZCUnl4RlFVRkZPenRCUTFBMVJEczdRVUZGUnp0QlFVTklMRTFCUVUxQkxIZENRVUZ6UWl4SFFVRkhMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU1zUzBGQlN5eEZRVUZGTEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkZOVVE3TzBGQlJVYzdUVUZEVlN3d1FrRkJNRUlzUTBGQlFUdEJRVWR5UXl4SlFVRkJMRWxCUVZjc1NVRkJTU3hIUVVGQk96dEJRVVZpTEZGQlFVRXNUMEZCVHl3MFFrRkJORUlzUTBGQlF6dExRVU55UXp0QlFVVkVMRWxCUVVFc1YwRkJRU3hEUVVGdFFpeE5RVUZyUWl4RlFVRkJPMEZCUTI1RExGRkJRVUVzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNN1MwRkRkRUk3UVVGRldTeEpRVUZCTEZOQlFWTXNRMEZCUXl4SlFVRlZMRVZCUVVFN08wRkJReTlDTEZsQlFVRXNUVUZCVFN4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFhRVUZ6UXl4RFFVRkRPenM3V1VGSmVrVXNTVUZCU1N4WFFVRlhMRXRCUVVzc1NVRkJTU3hGUVVGRk8yZENRVU40UWl4UFFVRlBPMEZCUTFJc1lVRkJRVHRwUWtGQlRTeEpRVUZKTEZkQlFWY3NTMEZCU3l4VFFVRlRMRVZCUVVVN1FVRkRjRU1zWjBKQlFVRXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkRZaXh4UjBGQmNVY3NRMEZEZEVjc1EwRkJRenRCUVVOSUxHRkJRVUU3UVVGRlJDeFpRVUZCTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1kwRkJZeXhIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRVZCUVVVc1YwRkJWeXhEUVVGRExFTkJRVU03VTBGRGRFVXNRMEZCUVN4RFFVRkJPMEZCUVVFc1MwRkJRVHRCUVVWRU96czdPenRCUVV0SE8wbEJSVmNzVDBGQlR5eERRVUZETEVsQlFWVXNSVUZCUlN4UlFVRTBRaXhGUVVGQk96dFpRVU0xUkN4SlFVRkpMRkZCUVZFc1NVRkJTU3hKUVVGSkxFVkJRVVU3UVVGRGNFSXNaMEpCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVU03UVVGRFlpeGhRVUZCTzFsQlJVUXNUVUZCVFN4UlFVRlJMRWRCUVVjc1RVRkJUU3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRCUVVOMFJDeFpRVUZCTEVsQlFVa3NVVUZCVVN4RlFVRkZPMEZCUTFvc1owSkJRVUVzVDBGQlR5eFJRVUZSTEVOQlFVTTdRVUZEYWtJc1lVRkJRVHRaUVVWRUxFMUJRVTBzVVVGQlVTeEhRVUZITEUxQlFVMHNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdRVUZEZEVRc1dVRkJRU3hKUVVGSkxGRkJRVkVzUlVGQlJUdEJRVU5hTEdkQ1FVRkJMRTlCUVU4c1VVRkJVU3hEUVVGRE8wRkJRMnBDTEdGQlFVRTdRVUZGUkN4WlFVRkJMRTlCUVU4c1NVRkJTU3hEUVVGRE8xTkJRMklzUTBGQlFTeERRVUZCTzBGQlFVRXNTMEZCUVR0SlFVVmhMRk5CUVZNc1EwRkJReXhKUVVGVkxFVkJRVVVzVVVGQmNVSXNSVUZCUVRzN08wRkJRM1pFTEZsQlFVRXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUYzUWl4RFFVRkRPenRCUVVkc1JDeFpRVUZCTEUxQlFVMHNVMEZCVXl4SFFVRkhMRU5CUVVFc1EwRkJRU3hGUVVGQkxFZEJRVUVzU1VGQlNTeERRVUZETEdOQlFXTXNUVUZCUlN4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1EwRkJRU3hQUVVGUExFTkJRVU1zVlVGQlZTeERRVUZETEUxQlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRiRVVzU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlR0QlFVTmtMR2RDUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETzBGQlEySXNZVUZCUVR0WlFVVkVMRTFCUVUwc1UwRkJVeXhIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEVsQlFVa3NRMEZCUXl4VlFVRlZMRTFCUVVFc1NVRkJRU3hKUVVGQkxFVkJRVUVzUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFTkJRVWNzVlVGQlZTeERRVUZ2UXl4RFFVRkRPMWxCUTI1R0xFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVTdRVUZEWkN4blFrRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF6dEJRVU5pTEdGQlFVRTdRVUZGUkN4WlFVRkJMRTFCUVUwc1YwRkJWeXhIUVVGSExGTkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTTdRVUZETVVNc1dVRkJRU3hKUVVGSkxFTkJRVU5CTEhkQ1FVRnpRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFhRVUZYTEVOQlFVTXNSVUZCUlR0QlFVTTFReXhuUWtGQlFTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRFpFUVVFMlJDeFhRVUZYTEVOQlFVRXNRMEZCUVN4RFFVRkhMRU5CUVVNc1EwRkJRenRCUVVNeFJpeG5Ra0ZCUVN4UFFVRlBMRWxCUVVrc1EwRkJRenRCUVVOaUxHRkJRVUU3UVVGRlJDeFpRVUZCTEUxQlFVMHNhVUpCUVdsQ0xFZEJRVWNzVTBGQlV5eERRVUZETEZkQlFWY3NRMEZCUXp0WlFVTm9SQ3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRVZCUVVVN1FVRkRkRUlzWjBKQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1FVRkRZaXhoUVVGQk8xbEJSVVFzVFVGQlRTeGxRVUZsTEVkQlFXMURMRVZCUVVVc1EwRkJRenRCUVVNelJDeFpRVUZCTEUxQlFVMHNhVUpCUVdsQ0xFZEJRVWNzVFVGQlRTdzRRa0ZCT0VJc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU55UlN4WlFVRkJMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRk5CUVZNc1JVRkJSU3hWUVVGVkxFTkJRVU1zUzBGQlNUczdRVUZETVVVc1owSkJRVUVzVFVGQlRTeFZRVUZWTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zWlVGQlpUdEJRVU5zUkN4elFrRkJSU3hwUWtGQmFVSXNRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4SlFVRkpMRXRCUVVzc1UwRkJVeXhEUVVGRE8zTkNRVU51UlN4VFFVRlRMRU5CUVVNN1owSkJSV1FzWlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXp0QlFVTnVRaXh2UWtGQlFTeE5RVUZOTEVWQlFVVXNWVUZCVlR0dlFrRkRiRUlzU1VGQlNTeEZRVUZGTEVOQlFVRXNSVUZCUVN4SFFVRkJMRlZCUVZVc1MwRkJWaXhKUVVGQkxFbEJRVUVzVlVGQlZTeDFRa0ZCVml4VlFVRlZMRU5CUVVVc1NVRkJTU3hOUVVGQkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGSkxFMUJRVTA3UVVGRGFrTXNhVUpCUVVFc1EwRkJReXhEUVVGRE8wRkJRMHdzWVVGQlF5eERRVUZETEVOQlFVTTdRVUZGU0N4WlFVRkJMRTlCUVU4c1NVRkJTU3hqUVVGakxFTkJRVU1zVVVGQlVTeEZRVUZGTEdWQlFXVXNRMEZCUXl4RFFVRkRPenRCUVVOMFJDeExRVUZCTzBsQlJXRXNVMEZCVXl4RFFVRkRMRWxCUVZVc1JVRkJSU3hSUVVGeFFpeEZRVUZCT3pzN1FVRkRka1FzV1VGQlFTeE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRWGRDTEVOQlFVTTdXVUZGYkVRc1RVRkJUU3hOUVVGTkxFZEJRVWNzUTBGQlFTeEZRVUZCTEVkQlFVRXNTVUZCU1N4RFFVRkRMRlZCUVZVc1RVRkJRU3hKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlJTeEhRVUUwUWl4RFFVRkRPMWxCUXpkRUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVTdRVUZEV0N4blFrRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF6dEJRVU5pTEdGQlFVRTdRVUZGUkN4WlFVRkJMRTFCUVUwc2FVSkJRV2xDTEVkQlFXdERMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU03V1VGRE5VVXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTzBGQlEzUkNMR2RDUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETzBGQlEySXNZVUZCUVR0WlFVVkVMRTFCUVUwc1pVRkJaU3hIUVVGdFF5eEZRVUZGTEVOQlFVTTdRVUZETTBRc1dVRkJRU3hOUVVGTkxHbENRVUZwUWl4SFFVRkhMRTFCUVUwc09FSkJRVGhDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkZja1VzV1VGQlFTeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eFRRVUZUTEVWQlFVVXNWVUZCVlN4RFFVRkRMRXRCUVVrN1owSkJRekZGTEUxQlFVMHNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdRVUZGTVVNc1owSkJRVUVzVFVGQlRTeEpRVUZKTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zWlVGQlpUdEJRVU0xUXl4elFrRkJSU3hwUWtGQmFVSXNRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4SlFVRkpMRXRCUVVzc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF6dHpRa0ZEZWtVc1UwRkJVeXhEUVVGRE8yZENRVVZrTEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNN1FVRkRia0lzYjBKQlFVRXNUVUZCVFN4RlFVRkZMRlZCUVZVN1FVRkRiRUlzYjBKQlFVRXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXh6UWtGQmMwSXNRMEZCUXl4SlFVRkpMRXRCUVVvc1NVRkJRU3hKUVVGQkxFbEJRVWtzUzBGQlNpeExRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGSkxFTkJRVVVzWlVGQlpTeERRVUZETzBGQlEzcEVMR2xDUVVGQkxFTkJRVU1zUTBGQlF6dEJRVU5NTEdGQlFVTXNRMEZCUXl4RFFVRkRPMEZCUlVnc1dVRkJRU3hQUVVGUExFbEJRVWtzWTBGQll5eERRVUZETEZGQlFWRXNSVUZCUlN4bFFVRmxMRU5CUVVNc1EwRkJRenM3UVVGRGRFUXNTMEZCUVR0QlFVVlBMRWxCUVVFc2MwSkJRWE5DTEVOQlFVTXNTVUZCZDBJc1JVRkJRVHRSUVVOeVJDeEpRVUZKTEVsQlFVa3NTMEZCU3l4cFFrRkJhVUlzUlVGQlJUdEJRVU01UWl4WlFVRkJMRTlCUVU4c2FVSkJRV2xDTEVOQlFVTTdRVUZETVVJc1UwRkJRVHRoUVVGTkxFbEJRVWtzU1VGQlNTeExRVUZMTEdsQ1FVRnBRaXhGUVVGRk8wRkJRM0pETEZsQlFVRXNUMEZCVHl4cFFrRkJhVUlzUTBGQlF6dEJRVU14UWl4VFFVRkJPMkZCUVUwc1NVRkJTU3hKUVVGSkxFdEJRVXNzVFVGQlRTeEZRVUZGTzBGQlF6RkNMRmxCUVVFc1QwRkJUeXhOUVVGTkxFTkJRVU03UVVGRFppeFRRVUZCTzBGQlFVMHNZVUZCUVR0QlFVTk1MRmxCUVVFc1QwRkJUeXhOUVVGTkxFTkJRVU03UVVGRFppeFRRVUZCTzB0QlEwWTdRVUZEUmpzN1FVTXpTa1E3UVVGRllTeE5RVUZCTEdkRFFVRm5ReXhIUVVGSE8wRkJRemxETEVsQlFVRXNTVUZCU1N4RlFVRkZMRTFCUVUwN1FVRkRXaXhKUVVGQkxFbEJRVWtzUlVGQlJTeE5RVUZOTzBGQlExb3NTVUZCUVN4bFFVRmxMRVZCUVVVc2FVSkJRV2xDTzBGQlEyeERMRWxCUVVFc1pVRkJaU3hGUVVGRkxHbENRVUZwUWpzN08wRkRSbkJETEUxQlFVMURMRTFCUVVrc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0QlFVTnFReXhOUVVGTlF5eE5RVUZKTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRGFrTXNUVUZCVFVNc1VVRkJUU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRPMEZCUlhwQ0xFMUJRVUVzYVVKQlFXdENMRk5CUVZFc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlFUdEJRVWxvUkN4SlFVRkJMRmRCUVVFc1EwRkJiVUlzVVVGQmNVSXNSVUZCUVR0QlFVTjBReXhSUVVGQkxFdEJRVXNzUlVGQlJTeERRVUZETzBGQlJWSXNVVUZCUVN4SlFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExGRkJRVkVzUTBGQlF6dEJRVVUxUWl4UlFVRkJMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzU1VGQlNTeEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVVTVRaXhSUVVGQkxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVsQlFVa3NTMEZCU1R0WlFVTnNSQ3hOUVVGTkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRmVrTXNXVUZCUVN4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUlM5Q0xGbEJRVUVzVFVGQlRTeERRVUZETEZGQlFUSkNMRU5CUVVNc1UwRkJVeXhIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU55UkN4WlFVRkJMRTFCUVUwc1EwRkJReXhSUVVFeVFpeERRVUZETEZWQlFWVXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkZka1FzV1VGQlFTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xbEJSV3BDTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTjBReXhUUVVGRExFTkJRVU1zUTBGQlF6dExRVU5LTzBsQlJVMHNUMEZCVHl4SFFVRkJPMEZCUTFvc1VVRkJRU3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4SlFVRkpMRXRCUVVrN1FVRkRkRVFzV1VGQlFTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8wRkJRM1pDTEZsQlFVRXNTVUZCU1N4RFFVRkRMRkZCUVRKQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdRVUZET1VNc1UwRkJReXhEUVVGRExFTkJRVU03UzBGRFNqdEJRVVZOTEVsQlFVRXNhVUpCUVdsQ0xFTkJRVU1zUzBGQll5eEZRVUZCTzFGQlEzSkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGSk8xbEJReTlFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJSWHBETEZsQlFVRXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVTBGQlV5eERRVUZEUml4TlFVRkpMRVZCUVVWRkxGRkJRVTBzUlVGQlJVUXNUVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkZjRVFzV1VGQlFTeE5RVUZOTEV0QlFVc3NSMEZCUjBRc1RVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlEwTXNUVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRia1FzV1VGQlFTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU4yUkN4VFFVRkRMRU5CUVVNc1EwRkJRenRCUVVWSUxGRkJRVUVzUzBGQlN5eERRVUZETEdsQ1FVRnBRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzB0QlEyaERPMEZCUTBZN08wRkRjRVJFTzBGQlNVRTdPMEZCUlVjN1FVRkRWU3hOUVVGQkxHZENRVUZuUWl4SFFVRjFRanRKUVVOc1JDeE5RVUZOTzBsQlEwNHNUMEZCVHp0SlFVTlFMRTlCUVU4N1NVRkRVQ3haUVVGWk8wbEJRMW9zVFVGQlRUdEpRVVZPTEUxQlFVMDdTVUZEVGl4VFFVRlRPMGxCUTFRc1ZVRkJWVHRKUVVOV0xFdEJRVXM3U1VGRlRDeGpRVUZqTzBsQlEyUXNZMEZCWXp0SlFVTmtMRlZCUVZVN1NVRkRWaXhWUVVGVk8wbEJSVllzWlVGQlpUdEpRVU5tTEdWQlFXVTdTVUZEWml4WFFVRlhPMGxCUTFnc1YwRkJWenRKUVVWWUxHTkJRV003U1VGRFpDeGpRVUZqTzBsQlEyUXNZMEZCWXp0SlFVTmtMRlZCUVZVN1NVRkZWaXhsUVVGbE8wbEJRMllzWlVGQlpUdEpRVU5tTEdWQlFXVTdTVUZEWml4WFFVRlhPMGxCUlZnc2NVSkJRWEZDTzBsQlEzSkNMRzFDUVVGdFFqdEpRVU51UWl4cFFrRkJhVUk3U1VGRGFrSXNiVUpCUVcxQ08wbEJRMjVDTEhWQ1FVRjFRanRKUVVOMlFpeHBRa0ZCYVVJN1NVRkRha0lzYjBKQlFXOUNPMGxCUTNCQ0xIZENRVUYzUWp0SlFVTjRRaXhyUWtGQmEwSTdTVUZEYkVJc2EwSkJRV3RDTzBsQlEyeENMSE5DUVVGelFqdEpRVU4wUWl4blFrRkJaMEk3U1VGRGFFSXNiMEpCUVc5Q08wbEJRM0JDTEhkQ1FVRjNRanRKUVVONFFpeHJRa0ZCYTBJN1NVRkZiRUlzYzBKQlFYTkNPMGxCUTNSQ0xHOUNRVUZ2UWp0SlFVTndRaXhyUWtGQmEwSTdTVUZEYkVJc2IwSkJRVzlDTzBsQlEzQkNMSGRDUVVGM1FqdEpRVU40UWl4clFrRkJhMEk3U1VGRGJFSXNjVUpCUVhGQ08wbEJRM0pDTEhsQ1FVRjVRanRKUVVONlFpeHRRa0ZCYlVJN1NVRkRia0lzYlVKQlFXMUNPMGxCUTI1Q0xIVkNRVUYxUWp0SlFVTjJRaXhwUWtGQmFVSTdTVUZEYWtJc2NVSkJRWEZDTzBsQlEzSkNMSGxDUVVGNVFqdEpRVU42UWl4dFFrRkJiVUk3T3p0QlEzSkZja0k3UVVGRlFUczdPenRCUVVsSE8wRkJRMVVzVFVGQlFTeG5Ra0ZCWjBJc1IwRkJSenRCUVVNNVFpeEpRVUZCTEVsQlFVa3NSVUZCUlN4TlFVRk5PMEZCUTFvc1NVRkJRU3hMUVVGTExFVkJRVVVzVDBGQlR6dEJRVU5rTEVsQlFVRXNTMEZCU3l4RlFVRkZMRTlCUVU4N1FVRkRaQ3hKUVVGQkxGVkJRVlVzUlVGQlJTeFpRVUZaTzBGQlEzaENMRWxCUVVFc1NVRkJTU3hGUVVGRkxFMUJRVTA3UVVGRldpeEpRVUZCTEVsQlFVa3NSVUZCUlN4TlFVRk5PMEZCUTFvc1NVRkJRU3hQUVVGUExFVkJRVVVzVTBGQlV6dEJRVU5zUWl4SlFVRkJMRkZCUVZFc1JVRkJSU3hWUVVGVk8wRkJRM0JDTEVsQlFVRXNSMEZCUnl4RlFVRkZMRXRCUVVzN1FVRkZWaXhKUVVGQkxGbEJRVmtzUlVGQlJTeGpRVUZqTzBGQlF6VkNMRWxCUVVFc1dVRkJXU3hGUVVGRkxHTkJRV003UVVGRE5VSXNTVUZCUVN4UlFVRlJMRVZCUVVVc1ZVRkJWVHRCUVVOd1FpeEpRVUZCTEZGQlFWRXNSVUZCUlN4VlFVRlZPMEZCUlhCQ0xFbEJRVUVzWVVGQllTeEZRVUZGTEdWQlFXVTdRVUZET1VJc1NVRkJRU3hoUVVGaExFVkJRVVVzWlVGQlpUdEJRVU01UWl4SlFVRkJMRk5CUVZNc1JVRkJSU3hYUVVGWE8wRkJRM1JDTEVsQlFVRXNVMEZCVXl4RlFVRkZMRmRCUVZjN1FVRkZkRUlzU1VGQlFTeFpRVUZaTEVWQlFVVXNZMEZCWXp0QlFVTTFRaXhKUVVGQkxGbEJRVmtzUlVGQlJTeGpRVUZqTzBGQlF6VkNMRWxCUVVFc1dVRkJXU3hGUVVGRkxHTkJRV003UVVGRE5VSXNTVUZCUVN4UlFVRlJMRVZCUVVVc1ZVRkJWVHRCUVVWd1FpeEpRVUZCTEdGQlFXRXNSVUZCUlN4bFFVRmxPMEZCUXpsQ0xFbEJRVUVzWVVGQllTeEZRVUZGTEdWQlFXVTdRVUZET1VJc1NVRkJRU3hoUVVGaExFVkJRVVVzWlVGQlpUdEJRVU01UWl4SlFVRkJMRk5CUVZNc1JVRkJSU3hYUVVGWE8wRkJSWFJDTEVsQlFVRXNiVUpCUVcxQ0xFVkJRVVVzY1VKQlFYRkNPMEZCUXpGRExFbEJRVUVzYVVKQlFXbENMRVZCUVVVc2JVSkJRVzFDTzBGQlEzUkRMRWxCUVVFc1pVRkJaU3hGUVVGRkxHbENRVUZwUWp0QlFVTnNReXhKUVVGQkxHbENRVUZwUWl4RlFVRkZMRzFDUVVGdFFqdEJRVU4wUXl4SlFVRkJMSEZDUVVGeFFpeEZRVUZGTEhWQ1FVRjFRanRCUVVNNVF5eEpRVUZCTEdWQlFXVXNSVUZCUlN4cFFrRkJhVUk3UVVGRGJFTXNTVUZCUVN4clFrRkJhMElzUlVGQlJTeHZRa0ZCYjBJN1FVRkRlRU1zU1VGQlFTeHpRa0ZCYzBJc1JVRkJSU3gzUWtGQmQwSTdRVUZEYUVRc1NVRkJRU3huUWtGQlowSXNSVUZCUlN4clFrRkJhMEk3UVVGRGNFTXNTVUZCUVN4blFrRkJaMElzUlVGQlJTeHJRa0ZCYTBJN1FVRkRjRU1zU1VGQlFTeHZRa0ZCYjBJc1JVRkJSU3h6UWtGQmMwSTdRVUZETlVNc1NVRkJRU3hqUVVGakxFVkJRVVVzWjBKQlFXZENPMEZCUTJoRExFbEJRVUVzYTBKQlFXdENMRVZCUVVVc2IwSkJRVzlDTzBGQlEzaERMRWxCUVVFc2MwSkJRWE5DTEVWQlFVVXNkMEpCUVhkQ08wRkJRMmhFTEVsQlFVRXNaMEpCUVdkQ0xFVkJRVVVzYTBKQlFXdENPMEZCUlhCRExFbEJRVUVzYjBKQlFXOUNMRVZCUVVVc2MwSkJRWE5DTzBGQlF6VkRMRWxCUVVFc2EwSkJRV3RDTEVWQlFVVXNiMEpCUVc5Q08wRkJRM2hETEVsQlFVRXNaMEpCUVdkQ0xFVkJRVVVzYTBKQlFXdENPMEZCUTNCRExFbEJRVUVzYTBKQlFXdENMRVZCUVVVc2IwSkJRVzlDTzBGQlEzaERMRWxCUVVFc2MwSkJRWE5DTEVWQlFVVXNkMEpCUVhkQ08wRkJRMmhFTEVsQlFVRXNaMEpCUVdkQ0xFVkJRVVVzYTBKQlFXdENPMEZCUTNCRExFbEJRVUVzYlVKQlFXMUNMRVZCUVVVc2NVSkJRWEZDTzBGQlF6RkRMRWxCUVVFc2RVSkJRWFZDTEVWQlFVVXNlVUpCUVhsQ08wRkJRMnhFTEVsQlFVRXNhVUpCUVdsQ0xFVkJRVVVzYlVKQlFXMUNPMEZCUTNSRExFbEJRVUVzYVVKQlFXbENMRVZCUVVVc2JVSkJRVzFDTzBGQlEzUkRMRWxCUVVFc2NVSkJRWEZDTEVWQlFVVXNkVUpCUVhWQ08wRkJRemxETEVsQlFVRXNaVUZCWlN4RlFVRkZMR2xDUVVGcFFqdEJRVU5zUXl4SlFVRkJMRzFDUVVGdFFpeEZRVUZGTEhGQ1FVRnhRanRCUVVNeFF5eEpRVUZCTEhWQ1FVRjFRaXhGUVVGRkxIbENRVUY1UWp0QlFVTnNSQ3hKUVVGQkxHbENRVUZwUWl4RlFVRkZMRzFDUVVGdFFqczdPMEZEY2tWNFF6dEJRVWxCT3pzN08wRkJTVWM3UVVGRFZTeE5RVUZCTEhGQ1FVRnhRaXhIUVVFMFJEdEJRVU0xUml4SlFVRkJMRWxCUVVrc1JVRkJSU3hKUVVGSk8wRkJRMVlzU1VGQlFTeExRVUZMTEVWQlFVVXNUVUZCVFR0QlFVTmlMRWxCUVVFc1MwRkJTeXhGUVVGRkxFOUJRVTg3UVVGRFpDeEpRVUZCTEZWQlFWVXNSVUZCUlN4UFFVRlBPMEZCUTI1Q0xFbEJRVUVzU1VGQlNTeEZRVUZGTEZsQlFWazdRVUZGYkVJc1NVRkJRU3hKUVVGSkxFVkJRVVVzVFVGQlRUdEJRVU5hTEVsQlFVRXNUMEZCVHl4RlFVRkZMRTFCUVUwN1FVRkRaaXhKUVVGQkxGRkJRVkVzUlVGQlJTeE5RVUZOTzBGQlEyaENMRWxCUVVFc1IwRkJSeXhGUVVGRkxFMUJRVTA3UVVGRldDeEpRVUZCTEZsQlFWa3NSVUZCUlN4TlFVRk5PMEZCUTNCQ0xFbEJRVUVzV1VGQldTeEZRVUZGTEdOQlFXTTdRVUZETlVJc1NVRkJRU3hSUVVGUkxFVkJRVVVzWTBGQll6dEJRVU40UWl4SlFVRkJMRkZCUVZFc1JVRkJSU3hWUVVGVk8wRkJSWEJDTEVsQlFVRXNZVUZCWVN4RlFVRkZMRTFCUVUwN1FVRkRja0lzU1VGQlFTeGhRVUZoTEVWQlFVVXNaVUZCWlR0QlFVTTVRaXhKUVVGQkxGTkJRVk1zUlVGQlJTeGxRVUZsTzBGQlF6RkNMRWxCUVVFc1UwRkJVeXhGUVVGRkxGZEJRVmM3UVVGRmRFSXNTVUZCUVN4WlFVRlpMRVZCUVVVc1dVRkJXVHRCUVVNeFFpeEpRVUZCTEZsQlFWa3NSVUZCUlN4alFVRmpPMEZCUXpWQ0xFbEJRVUVzV1VGQldTeEZRVUZGTEdOQlFXTTdRVUZETlVJc1NVRkJRU3hSUVVGUkxFVkJRVVVzWTBGQll6dEJRVVY0UWl4SlFVRkJMR0ZCUVdFc1JVRkJSU3haUVVGWk8wRkJRek5DTEVsQlFVRXNZVUZCWVN4RlFVRkZMR1ZCUVdVN1FVRkRPVUlzU1VGQlFTeGhRVUZoTEVWQlFVVXNaVUZCWlR0QlFVTTVRaXhKUVVGQkxGTkJRVk1zUlVGQlJTeGxRVUZsTzBGQlJURkNMRWxCUVVFc2JVSkJRVzFDTEVWQlFVVXNWVUZCVlR0QlFVTXZRaXhKUVVGQkxHbENRVUZwUWl4RlFVRkZMSEZDUVVGeFFqdEJRVU40UXl4SlFVRkJMR1ZCUVdVc1JVRkJSU3h0UWtGQmJVSTdRVUZEY0VNc1NVRkJRU3hwUWtGQmFVSXNSVUZCUlN4VlFVRlZPMEZCUXpkQ0xFbEJRVUVzY1VKQlFYRkNMRVZCUVVVc2JVSkJRVzFDTzBGQlF6RkRMRWxCUVVFc1pVRkJaU3hGUVVGRkxIVkNRVUYxUWp0QlFVTjRReXhKUVVGQkxHdENRVUZyUWl4RlFVRkZMRlZCUVZVN1FVRkRPVUlzU1VGQlFTeHpRa0ZCYzBJc1JVRkJSU3h2UWtGQmIwSTdRVUZETlVNc1NVRkJRU3huUWtGQlowSXNSVUZCUlN4M1FrRkJkMEk3UVVGRE1VTXNTVUZCUVN4blFrRkJaMElzUlVGQlJTeFZRVUZWTzBGQlF6VkNMRWxCUVVFc2IwSkJRVzlDTEVWQlFVVXNhMEpCUVd0Q08wRkJRM2hETEVsQlFVRXNZMEZCWXl4RlFVRkZMSE5DUVVGelFqdEJRVU4wUXl4SlFVRkJMR3RDUVVGclFpeEZRVUZGTEZWQlFWVTdRVUZET1VJc1NVRkJRU3h6UWtGQmMwSXNSVUZCUlN4dlFrRkJiMEk3UVVGRE5VTXNTVUZCUVN4blFrRkJaMElzUlVGQlJTeDNRa0ZCZDBJN1FVRkZNVU1zU1VGQlFTeHZRa0ZCYjBJc1JVRkJSU3hYUVVGWE8wRkJRMnBETEVsQlFVRXNhMEpCUVd0Q0xFVkJRVVVzYzBKQlFYTkNPMEZCUXpGRExFbEJRVUVzWjBKQlFXZENMRVZCUVVVc2IwSkJRVzlDTzBGQlEzUkRMRWxCUVVFc2EwSkJRV3RDTEVWQlFVVXNWMEZCVnp0QlFVTXZRaXhKUVVGQkxITkNRVUZ6UWl4RlFVRkZMRzlDUVVGdlFqdEJRVU0xUXl4SlFVRkJMR2RDUVVGblFpeEZRVUZGTEhkQ1FVRjNRanRCUVVNeFF5eEpRVUZCTEcxQ1FVRnRRaXhGUVVGRkxGZEJRVmM3UVVGRGFFTXNTVUZCUVN4MVFrRkJkVUlzUlVGQlJTeHhRa0ZCY1VJN1FVRkRPVU1zU1VGQlFTeHBRa0ZCYVVJc1JVRkJSU3g1UWtGQmVVSTdRVUZETlVNc1NVRkJRU3hwUWtGQmFVSXNSVUZCUlN4WFFVRlhPMEZCUXpsQ0xFbEJRVUVzY1VKQlFYRkNMRVZCUVVVc2JVSkJRVzFDTzBGQlF6RkRMRWxCUVVFc1pVRkJaU3hGUVVGRkxIVkNRVUYxUWp0QlFVTjRReXhKUVVGQkxHMUNRVUZ0UWl4RlFVRkZMRmRCUVZjN1FVRkRhRU1zU1VGQlFTeDFRa0ZCZFVJc1JVRkJSU3h4UWtGQmNVSTdRVUZET1VNc1NVRkJRU3hwUWtGQmFVSXNSVUZCUlN4NVFrRkJlVUk3T3p0QlEzSkZPVU03T3pzN08wRkJTMGM3UVVGRFJ5eFRRVUZWTEdkQ1FVRm5RaXhEUVVFMlFpeE5RVUZUTEVWQlFVRTdTVUZEY0VVc1NVRkJTeXhOUVVGakxFTkJRVU1zVFVGQlRTeEZRVUZGTzFGQlF6RkNMRTFCUVUwc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF6dEJRVU5xUWl4TFFVRkJPMEZCUVUwc1UwRkJRVHRSUVVOS0xFMUJRV01zUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0QlFVTXpRaXhMUVVGQk8wRkJSVVFzU1VGQlFTeFBRVUZQTEUxQlFVMHNRMEZCUXp0QlFVTm9RanM3UVVOVVFTeE5RVUZOUkN4TlFVRkpMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdRVUZEYWtNc1RVRkJUVVVzVVVGQlRTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8wRkJSWFJET3p0QlFVVkhPMDFCUTFVc1RVRkJUU3hEUVVGQk8wRkJZV3BDT3pzN1FVRkhSenRCUVVOSUxFbEJRVUVzVjBGQlFTeERRVUZ0UWl4VlFVRjVRaXhGUVVGQk8wRkJRekZETEZGQlFVRXNTVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhWUVVGVkxFTkJRVU03UVVGRk4wSXNVVUZCUVN4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eGxRVUZsTEVWQlFVVXNRMEZCUXp0TFFVTjRRenRCUVVWRU96czdPMEZCU1VjN1NVRkRTU3hsUVVGbExFZEJRVUU3VVVGRGNFSXNUVUZCVFN4SlFVRkpMRWRCUVVjc1JVRkJZU3hEUVVGRE8wRkJSVE5DTEZGQlFVRXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc2FVSkJRV2xDTEV0QlFVazdXVUZEZWtRc1RVRkJUU3hYUVVGWExFZEJRVWNzYVVKQlFYRkRMRU5CUVVNN1dVRkRNVVFzVFVGQlRTeEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6czdXVUZITTBNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJUdG5Ra0ZEVkN4UFFVRlBPMEZCUTFJc1lVRkJRVHM3UVVGSFJDeFpRVUZCUml4TlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0QlFVTjZRaXhaUVVGQlJTeFJRVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6czdXVUZITjBJc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZITzBGQlEyeENMR2RDUVVGQkxGRkJRVkVzUlVGQlJVWXNUVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJPRUk3UVVGRGNFUXNaMEpCUVVFc1VVRkJVU3hGUVVGRlJTeFJRVUZOTEVOQlFVTXNUMEZCVHl4RlFVRnpRenRoUVVNdlJDeERRVUZETzBGQlEwb3NVMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkZTQ3hSUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETzB0QlEySTdRVUZGUkRzN096dEJRVWxITzBsQlEwa3NUMEZCVHl4SFFVRkJPMUZCUTFvc1RVRkJUU3hKUVVGSkxFZEJRVWNzUlVGQllTeERRVUZETzBGQlJUTkNMRkZCUVVFc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zWTBGQll5eExRVUZKTzFsQlEzUkVMRTFCUVUwc1VVRkJVU3hIUVVGSExHTkJRV3RETEVOQlFVTTdXVUZEY0VRc1RVRkJUU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenM3V1VGSGVFTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSVHRuUWtGRFZDeFBRVUZQTzBGQlExSXNZVUZCUVRzN1dVRkhSRVlzVFVGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyeENSU3hSUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdXVUZGYkVJc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRCUVVNeFF5eFpRVUZCTEVsQlFVa3NVMEZCVXl4TFFVRlVMRWxCUVVFc1NVRkJRU3hUUVVGVExIVkNRVUZVTEZOQlFWTXNRMEZCUlN4UlFVRlJMRVZCUVVVN1owSkJRM1pDUml4TlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJRenRCUVVNM1F5eGhRVUZCTzBGQlEwUXNXVUZCUVN4SlFVRkpMRk5CUVZNc1MwRkJWQ3hKUVVGQkxFbEJRVUVzVTBGQlV5eDFRa0ZCVkN4VFFVRlRMRU5CUVVVc1VVRkJVU3hGUVVGRk8yZENRVU4yUWl4blFrRkJaMElzUTBGQlEwVXNVVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTjRSQ3hoUVVGQk96dEJRVWRFTEZsQlFVRkdMRTFCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUTNoQ0xGbEJRVUZGTEZGQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZET3p0WlFVZHdReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVYzdRVUZEWml4blFrRkJRU3hSUVVGUkxFVkJRVVZHTEUxQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVRoQ08wRkJRM0JFTEdkQ1FVRkJMRkZCUVZFc1JVRkJSVVVzVVVGQlRTeERRVUZETEU5QlFVOHNSVUZCYzBNN1lVRkRMMFFzUTBGQlF6dEJRVU5LTEZOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUlVnc1VVRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF6dExRVU5pTzBGQlJVUTdPenM3T3pzN1FVRlBSenRCUVVOSkxFbEJRVUVzVDBGQlR5eERRVUZETEZWQlFXMUNMRVZCUVVFN1FVRkRhRU1zVVVGQlFTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNZMEZCWXl4RlFVRkZMRXRCUVVzc1EwRkJReXhMUVVGSk8xbEJRemRFTEUxQlFVMHNVVUZCVVN4SFFVRkhMR05CUVd0RExFTkJRVU03V1VGRGNFUXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXpzN1dVRkhlRU1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlR0blFrRkRWQ3hQUVVGUE8wRkJRMUlzWVVGQlFUdFpRVVZFTEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdXVUZETVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJUczdaMEpCUldRc1QwRkJUenRCUVVOU0xHRkJRVUU3TzBGQlIwUXNXVUZCUVN4SlFVRkpMRXRCUVVzc1MwRkJUQ3hKUVVGQkxFbEJRVUVzUzBGQlN5eDFRa0ZCVEN4TFFVRkxMRU5CUVVVc1VVRkJVU3hGUVVGRk8yZENRVU51UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1owSkJSWGhETEVsQlFVa3NVMEZCVXl4RFFVRkRMRkZCUVZFc1JVRkJSVHRCUVVOMFFpeHZRa0ZCUVN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlEwWXNUVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTjJSQ3hwUWtGQlFUdEJRVU5HTEdGQlFVRTdRVUZGUkN4WlFVRkJMRWxCUVVrc1MwRkJTeXhMUVVGTUxFbEJRVUVzU1VGQlFTeExRVUZMTEhWQ1FVRk1MRXRCUVVzc1EwRkJSU3hSUVVGUkxFVkJRVVU3WjBKQlEyNUNMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVTBGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRuUWtGRk1VTXNTVUZCU1N4VFFVRlRMRU5CUVVNc1VVRkJVU3hGUVVGRk8wRkJRM1JDTEc5Q1FVRkJMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVVVGQlVTeERRVUZEUlN4UlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTJoRkxHbENRVUZCTzBGQlEwWXNZVUZCUVR0QlFVTklMRk5CUVVNc1EwRkJReXhEUVVGRE8wdEJRMG83UVVGRlJEczdRVUZGUnp0SlFVTkpMRk5CUVZNc1IwRkJRVHRCUVVOa0xGRkJRVUVzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVWs3V1VGRGVrUXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFJRVUUwUWl4RFFVRkRMRU5CUVVNN1dVRkZOVVFzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlR0blFrRkRWQ3hQUVVGUE8wRkJRMUlzWVVGQlFUdEJRVVZFTEZsQlFVRXNTVUZCU1N4SlFVRkpMRXRCUVVvc1NVRkJRU3hKUVVGQkxFbEJRVWtzZFVKQlFVb3NTVUZCU1N4RFFVRkZMRkZCUVZFc1JVRkJSVHRuUWtGRGJFSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUTNoRExHRkJRVUU3UVVGRlJDeFpRVUZCTEVsQlFVa3NTVUZCU1N4TFFVRktMRWxCUVVFc1NVRkJRU3hKUVVGSkxIVkNRVUZLTEVsQlFVa3NRMEZCUlN4UlFVRlJMRVZCUVVVN1owSkJRMnhDTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0QlFVTXhReXhoUVVGQk8wRkJRMGdzVTBGQlF5eERRVUZETEVOQlFVTTdTMEZEU2p0QlFVVkVPenM3TzBGQlNVYzdRVUZEU1N4SlFVRkJMRTlCUVU4c1EwRkJReXhKUVVGelFpeEZRVUZCT3p0UlFVTnVReXhQUVVGUExFTkJRVUVzUlVGQlFTeEhRVUZCTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVWtzU1VGQlFTeEpRVUZCTEVWQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzVTBGQlV5eERRVUZETzB0QlF6TkRPMEZCUlVRN096czdRVUZKUnp0QlFVTkpMRWxCUVVFc1YwRkJWeXhEUVVGRExFbEJRWE5DTEVWQlFVRTdPMEZCUTNaRExGRkJRVUVzVDBGQlR5eERRVUZCTEVWQlFVRXNSMEZCUVN4RFFVRkJMRVZCUVVFc1IwRkJRU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRkZMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGQkxFbEJRVWtzVFVGQlNTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeEpRVUZKTEVOQlFVTTdTMEZETlVNN1FVRkRSanM3UVVONlRFUXNUVUZCVFVZc1RVRkJTU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMEZCUTJwRExFMUJRVTFGTEZGQlFVMHNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF6dEJRVU4wUXl4TlFVRk5MR0ZCUVdFc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0QlFVVXhRenM3UVVGRlJ6dEJRVU5ITEUxQlFVOHNZMEZCWlN4VFFVRlJMRTFCUVUwc1EwRkJRVHRKUVVNNVFpeFBRVUZQTEdkQ1FVRm5RaXhEUVVGRExGRkJRV2RDTEVWQlFVRTdRVUZOYUVRc1VVRkJRU3hOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRenRCUVVOc1F5eFJRVUZCTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1owSkJRV2RDTEVOQlFVTTdPMUZCUnpkQ0xFMUJRVTBzYTBKQlFXdENMRWRCUVhWRUxFVkJRVVVzUTBGQlF6dFJRVU5zUml4TlFVRk5MR3RDUVVGclFpeEhRVUV3UkN4RlFVRkZMRU5CUVVNN1VVRkRja1lzVFVGQlRTeGhRVUZoTEVkQlFUQkVMRVZCUVVVc1EwRkJRenRCUVVWb1JpeFJRVUZCTEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEZGQlFWRXNTMEZCU1R0WlFVTndReXhOUVVGTkxGRkJRVkVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNWMEZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wRkJSV2hFTEZsQlFVRXNTVUZCU1N4UlFVRlJMRVZCUVVVN1FVRkRXaXhuUWtGQlFTeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMEZCUXpsRExHZENRVUZCTEUxQlFVMHNhVUpCUVdsQ0xFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNN1FVRkZha1FzWjBKQlFVRXNVVUZCVVN4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVsQlFVa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRuUWtGRGVFTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1EwRkJReXhUUVVGVExFTkJRVU1zYVVKQlFXbENMRVZCUVVVc2FVSkJRV2xDTEVWQlFVVkdMRTFCUVVrc1EwRkJReXhEUVVGRE8wRkJSVE5GTEdkQ1FVRkJMR3RDUVVGclFpeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMR2xDUVVGcFFpeERRVUZETzBGQlEycEVMR2RDUVVGQkxHdENRVUZyUWl4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExHbENRVUZwUWl4RFFVRkRPMmRDUVVOcVJDeGhRVUZoTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0QlFVTjJSQ3hoUVVGQk8wRkJRMGdzVTBGQlF5eERRVUZETEVOQlFVTTdPMUZCUjBnc1RVRkJUU3h2UWtGQmIwSXNSMEZCTUVRc1JVRkJSU3hEUVVGRE8xRkJSWFpHTEUxQlFVMHNVVUZCVVN4SFFVRXlRaXhGUVVGRkxFTkJRVU03UVVGRE5VTXNVVUZCUVN4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4UlFVRlJMRXRCUVVrN08xbEJRM0JETEUxQlFVMHNVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJReXhYUVVGWExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdRVUZGYUVRc1dVRkJRU3hKUVVGSkxGRkJRVkVzUlVGQlJUdEJRVU5hTEdkQ1FVRkJMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NhMEpCUVd0Q0xFTkJRVU1zVVVGQlVTeERRVUZyUWl4RFFVRkRPenRuUWtGSGVFVXNTVUZCU1N4bFFVRmxMRWRCUVRSQ0xGRkJRVkVzUTBGQlF6dEJRVU40UkN4blFrRkJRU3hKUVVGSkxHMUNRVUU0UXl4RFFVRkRPMEZCUTI1RUxHZENRVUZCTEVsQlFVa3NiVUpCUVdsRUxFTkJRVU03WjBKQlEzUkVMRTlCUVU4c2JVSkJRVzFDTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTJ4RExHOUNRVUZCTEdWQlFXVXNSMEZCUnl4eFFrRkJjVUlzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXp0dlFrRkRla1FzU1VGQlNTeGxRVUZsTEVsQlFVa3NTVUZCU1N4RlFVRkZPM2RDUVVNelFpeE5RVUZOTzBGQlExQXNjVUpCUVVFN1FVRkRSQ3h2UWtGQlFTeHRRa0ZCYlVJc1IwRkJSeXhyUWtGQmEwSXNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRenRCUVVNeFJDeHZRa0ZCUVN4dFFrRkJiVUlzUjBGQlJ5eHJRa0ZCYTBJc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6dEJRVU16UkN4cFFrRkJRVHM3UVVGSFJDeG5Ra0ZCUVN4TlFVRk5MRmRCUVZjc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0blFrRkRla01zVjBGQlZ5eERRVUZETEVsQlFVa3NSMEZCUnl4aFFVRmhMRWRCUVVjc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF6dEJRVVZxUkN4blFrRkJRU3hOUVVGTkxHbENRVUZwUWl4SlFVRkpMR1ZCUVdVc1IwRkJSeXhEUVVGQkxFVkJRVUVzUjBGQlFTeFJRVUZSTEVOQlFVTXNaVUZCWlN4RFFVRkRMREJEUVVGRkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFXMUNMRU5CUVVNN1FVRkZka2NzWjBKQlFVRXNhVUpCUVdsQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMEZCUTI1RExHZENRVUZCTEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1FVRkROME1zWjBKQlFVRXNTVUZCU1N4dFFrRkJiVUlzUlVGQlJUdEJRVU4yUWl4dlFrRkJRU3hYUVVGWExFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZETzBGQlF5OURMR2xDUVVGQk8yZENRVVZFTEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhGUVVGRkxFbEJRVWtzUlVGQlJTeFhRVUZYTEVWQlFVVXNRMEZCUXpzN1FVRkhNME1zWjBKQlFVRXNiMEpCUVc5Q0xFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NiVUpCUVcxQ0xFdEJRVzVDTEVsQlFVRXNTVUZCUVN4dFFrRkJiVUlzUzBGQmJrSXNTMEZCUVN4RFFVRkJMRWRCUVVFc2JVSkJRVzFDTEVkQlFVa3NTVUZCU1N4TFFVRkxMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU03UVVGRGFFWXNZVUZCUVR0QlFVTklMRk5CUVVNc1EwRkJReXhEUVVGRE8xRkJSVWdzVDBGQlR6dEJRVU5NTEZsQlFVRXNVVUZCVVN4RlFVRkZMRkZCUVhsQ08xbEJRMjVETEVsQlFVazdXVUZEU2l4dlFrRkJiMEk3V1VGRGNFSXNZVUZCWVR0VFFVTmtMRU5CUVVNN1MwRkRTRHRCUVU5RUxFbEJRVUVzVjBGQlFTeERRVUZ0UWl4UlFVRm5RaXhGUVVGQk8wRkJRMnBETEZGQlFVRXNUVUZCVFN4RlFVRkZMRkZCUVZFc1JVRkJSU3hKUVVGSkxFVkJRVVVzYjBKQlFXOUNMRVZCUVVVc1lVRkJZU3hGUVVGRkxFZEJRVWNzWTBGQll5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzFGQlJURkhMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVVZvUWl4UlFVRkJMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZETzBGQlEzcENMRkZCUVVFc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEYWtJc1VVRkJRU3hKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRWRCUVVjc2IwSkJRVzlDTEVOQlFVTTdRVUZEYkVRc1VVRkJRU3hKUVVGSkxFTkJRVU1zWTBGQll5eEhRVUZITEdGQlFXRXNRMEZCUXp0TFFVTnlRenRCUVVWRU96dEJRVVZITzBsQlEwa3NUVUZCVFN4SFFVRkJPMEZCUTFnc1VVRkJRU3huUWtGQlowSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhSUVVGUkxFdEJRVWs3V1VGRGNFTXNUVUZCVFN4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1dVRkZja1FzU1VGQlNTeFJRVUZSTEVsQlFVa3NTVUZCU1N4RlFVRkZPMmRDUVVOd1FpeE5RVUZOTEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExGRkJRVkVzUTBGQlJTeERRVUZETzJkQ1FVTm9SQ3hOUVVGTkxHMUNRVUZ0UWl4SFFVRkhMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4UlFVRlJMRU5CUVVVc1EwRkJRenRuUWtGRGJFVXNUVUZCVFN4elFrRkJjMElzUjBGQlIwVXNVVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE8yZENRVU42UlN4TlFVRk5MRmxCUVZrc1IwRkJSeXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEZGQlFWRXNRMEZCUlN4RFFVRkRPMEZCUlhCRUxHZENRVUZCTEZGQlFWRXNRMEZCUXl4VlFVRlZPMEZCUTJoQ0xIRkNRVUZCTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1ZVRkJWU3hEUVVGRE8zRkNRVU0xUWl4UlFVRlJMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTTdjVUpCUXpkQ0xGZEJRVmNzUTBGQlF5eHpRa0ZCYzBJc1EwRkJRenR4UWtGRGJrTXNVVUZCVVN4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE96dG5Ra0ZITVVJc1NVRkJTU3hSUVVGUkxFdEJRVXNzVFVGQlRTeEZRVUZGTzI5Q1FVTjJRaXhOUVVGTkxHbENRVUZwUWl4SFFVRkhMRmRCUVZjc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenR2UWtGRGRFVXNVVUZCVVN4RFFVRkRMRTFCUVU4c1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGFFUXNiMEpCUVVFc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4UlFVRlJMRU5CUVVNc1RVRkJUeXhEUVVGRExGZEJRVmNzUTBGQlF6dHZRa0ZEZGtRc1RVRkJUU3hoUVVGaExFZEJRVWNzYVVKQlFXbENMRU5CUVVNc1dVRkJXU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGFrWXNiMEpCUVVFc1VVRkJVU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1FVRkRka01zYVVKQlFVRTdRVUZEUml4aFFVRkJPMEZCUTBnc1UwRkJReXhEUVVGRExFTkJRVU03UzBGRFNqdEJRVU5HT3p0QlEzQkpSRHM3UVVGRlJ6dE5RVU5WTEZkQlFWY3NRMEZCUVR0QlFXMUNkRUk3TzBGQlJVYzdRVUZEU0N4SlFVRkJMRWxCUVZjc1VVRkJVU3hIUVVGQk8wRkJRMnBDTEZGQlFVRXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXcwUmtGQk5FWXNRMEZCUXl4RFFVRkRPMUZCUlROSExFOUJRVThzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXp0TFFVTjZRanRCUVVWRU96czdRVUZIUnp0QlFVTklMRWxCUVVFc1NVRkJWeXhYUVVGWExFZEJRVUU3UVVGRGNFSXNVVUZCUVN4UFFVRlBMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zVVVGQlVTeERRVUZETzB0QlEzSkRPMEZCUlVRN096dEJRVWRITzBGQlEwZ3NTVUZCUVN4SlFVRlhMR3RDUVVGclFpeEhRVUZCTzBGQlF6TkNMRkZCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1VVRkJVU3hEUVVGRE8wdEJRelZETzBGQlJVUTdPMEZCUlVjN1FVRkRTQ3hKUVVGQkxFbEJRVmNzVlVGQlZTeEhRVUZCT3p0QlFVVnVRaXhSUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4VlFVRlZMRU5CUVVNN1MwRkRka003UVVGRlJEczdRVUZGUnp0QlFVTklMRWxCUVVFc1NVRkJWeXhoUVVGaExFZEJRVUU3UVVGRGRFSXNVVUZCUVN4UFFVRlBMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zVlVGQlZTeERRVUZETzB0QlEzWkRPMEZCUlVRN08wRkJSVWM3UVVGRFNDeEpRVUZCTEVsQlFWY3NiMEpCUVc5Q0xFZEJRVUU3UVVGRE4wSXNVVUZCUVN4UFFVRlBMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4VlFVRlZMRU5CUVVNN1MwRkRPVU03UVVGRlJEczdRVUZGUnp0QlFVTklMRWxCUVVFc1NVRkJWeXgzUWtGQmQwSXNSMEZCUVR0QlFVTnFReXhSUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFbEJRVWtzUTBGQlF6dExRVU40UXp0QlFVVkVPenM3TzBGQlNVYzdTVUZEU0N4WFFVRnRRaXhEUVVGQkxGVkJRWGxDTEVWQlFVVXNUMEZCTkVNc1JVRkJRVHM3UVVGRGVFWXNVVUZCUVN4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVkQlFVY3NRMEZCUVN4RlFVRkJMRWRCUVVFc1QwRkJUeXhMUVVGQkxFbEJRVUVzU1VGQlVDeFBRVUZQTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVkFzVDBGQlR5eERRVUZGTEc5Q1FVRnZRaXhOUVVGQkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGSkxFbEJRVWtzUTBGQlF6dFJRVU5zUlN4SlFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExFbEJRVWtzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMUZCUXpkRExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1IwRkJSeXhKUVVGSkxHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN1MwRkRkRVU3UVVGRlJEczdPenRCUVVsSE8wRkJRMGtzU1VGQlFTeEpRVUZKTEVOQlFVTXNUVUZCYlVJc1JVRkJRVHRCUVVNM1FpeFJRVUZCTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUjBGQlJ5eE5RVUZOTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU03VVVGRGVFUXNTVUZCU1N4RFFVRkRMR05CUVdNc1IwRkJSeXhKUVVGSkxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRkRjRVFzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhIUVVGSExFbEJRVWtzWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenRCUVVWeVJTeFJRVUZCTEU5QlFVOHNTVUZCU1N4RFFVRkRPMHRCUTJJN1FVRkZSRHM3TzBGQlIwYzdTVUZEU1N4TFFVRkxMRWRCUVVFN1VVRkRWaXhQUVVGUExFbEJRVWtzVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1JVRkJSU3h2UWtGQmIwSXNSVUZCUlN4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dExRVU42Unp0QlFVVkVPenRCUVVWSE8wbEJRMGtzWlVGQlpTeEhRVUZCTzBGQlEzQkNMRkZCUVVFc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGRFZpeDFTRUZCZFVnc1EwRkRlRWdzUTBGQlF6dEJRVVZHTEZGQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVXNRMEZCUXp0TFFVTnNRenRCUVVWRU96czdPMEZCU1VjN1NVRkRTU3hyUWtGQmEwSXNSMEZCUVR0QlFVTjJRaXhSUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4bFFVRmxMRVZCUVVVc1EwRkJRenRMUVVNNVF6dEJRVVZFT3pzN08wRkJTVWM3U1VGRFNTeDVRa0ZCZVVJc1IwRkJRVHRCUVVNNVFpeFJRVUZCTEU5QlFVOHNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEdWQlFXVXNSVUZCUlN4RFFVRkRPMHRCUTNKRU8wRkJSVVE3TzBGQlJVYzdTVUZEU1N4UFFVRlBMRWRCUVVFN1FVRkRXaXhSUVVGQkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNLMFpCUVN0R0xFTkJRVU1zUTBGQlF6dEJRVVU1Unl4UlFVRkJMRTlCUVU4c1NVRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETzB0QlF6RkNPMEZCUlVRN096czdRVUZKUnp0SlFVTkpMRlZCUVZVc1IwRkJRVHRCUVVObUxGRkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8wdEJRM1JETzBGQlJVUTdPenM3UVVGSlJ6dEpRVU5KTEdsQ1FVRnBRaXhIUVVGQk8wRkJRM1JDTEZGQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1MwRkROME03UVVGRlJEczdRVUZGUnp0QlFVTkpMRWxCUVVFc1QwRkJUeXhEUVVGRExGVkJRVzFDTEVWQlFVRTdRVUZEYUVNc1VVRkJRU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEN0R1FVRXJSaXhEUVVGRExFTkJRVU03UVVGRk9VY3NVVUZCUVN4UFFVRlBMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdTMEZEY0VNN1FVRkZSRHM3T3pzN096czdPMEZCVTBjN1FVRkRTU3hKUVVGQkxGVkJRVlVzUTBGQlF5eFZRVUZ0UWl4RlFVRkJPMUZCUTI1RExFOUJRVThzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03UzBGRGFFUTdRVUZGUkRzN096czdPenRCUVU5SE8wRkJRMGtzU1VGQlFTeHBRa0ZCYVVJc1EwRkJReXhWUVVGdFFpeEZRVUZCTzFGQlF6RkRMRTlCUVU4c1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dExRVU4yUkR0QlFVVkVPenRCUVVWSE8wbEJRMGtzVTBGQlV5eEhRVUZCTzBGQlEyUXNVVUZCUVN4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExIRkhRVUZ4Unl4RFFVRkRMRU5CUVVNN1FVRkZjRWdzVVVGQlFTeFBRVUZQTEVsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVVc1EwRkJRenRMUVVNMVFqdEJRVVZFT3pzN08wRkJTVWM3U1VGRFNTeFpRVUZaTEVkQlFVRTdRVUZEYWtJc1VVRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNN1MwRkRlRU03UVVGRlJEczdRVUZGUnp0SlFVTkpMRzFDUVVGdFFpeEhRVUZCTzBGQlEzaENMRkZCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU03UzBGREwwTTdRVUZGUkRzN1FVRkZSenRCUVVOSkxFbEJRVUVzVDBGQlR5eERRVUZETEVsQlFYTkNMRVZCUVVFN1FVRkRia01zVVVGQlFTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMQ3RHUVVFclJpeERRVUZETEVOQlFVTTdRVUZGT1Vjc1VVRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkRPVUk3UVVGRlJEczdPenRCUVVsSE8wRkJRMGtzU1VGQlFTeFZRVUZWTEVOQlFVTXNTVUZCYzBJc1JVRkJRVHRSUVVOMFF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzB0QlF6RkRPMEZCUlVRN096czdRVUZKUnp0QlFVTkpMRWxCUVVFc2FVSkJRV2xDTEVOQlFVTXNTVUZCYzBJc1JVRkJRVHRSUVVNM1F5eFBRVUZQTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkRha1E3UVVGRlJEczdRVUZGUnp0QlFVTkpMRWxCUVVFc1YwRkJWeXhEUVVGRExFbEJRWE5DTEVWQlFVRTdRVUZEZGtNc1VVRkJRU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVU5XTERKSFFVRXlSeXhEUVVNMVJ5eERRVUZETzBGQlJVWXNVVUZCUVN4UFFVRlBMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTMEZEYkVNN1FVRkZSRHM3T3p0QlFVbEhPMEZCUTBrc1NVRkJRU3hqUVVGakxFTkJRVU1zU1VGQmMwSXNSVUZCUVR0UlFVTXhReXhQUVVGUExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJRemxETzBGQlJVUTdPenM3UVVGSlJ6dEJRVU5KTEVsQlFVRXNjVUpCUVhGQ0xFTkJRVU1zU1VGQmMwSXNSVUZCUVR0UlFVTnFSQ3hQUVVGUExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTMEZEY2tRN1FVRkZSRHM3T3p0QlFVbEhPMGxCUTBrc1RVRkJUU3hIUVVGQk8xRkJRMWdzU1VGQlNTeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFVkJRVVU3UVVGRE4wSXNXVUZCUVN4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN1FVRkRja01zVTBGQlFUdExRVU5HTzBGQlEwWTdPMEZETVZORU8wRkJSV0VzVFVGQlFTeDNRa0ZCZDBJc1IwRkJSenRCUVVOMFF5eEpRVUZCTEVsQlFVa3NSVUZCUlN4TlFVRk5PMEZCUTFvc1NVRkJRU3hMUVVGTExFVkJRVVVzVDBGQlR6dEJRVU5rTEVsQlFVRXNTVUZCU1N4RlFVRkZMRTFCUVUwN1FVRkRXaXhKUVVGQkxGbEJRVmtzUlVGQlJTeGpRVUZqTzBGQlF6VkNMRWxCUVVFc1dVRkJXU3hGUVVGRkxHTkJRV003UVVGRE5VSXNTVUZCUVN4UlFVRlJMRVZCUVVVc1ZVRkJWVHRCUVVOd1FpeEpRVUZCTEdGQlFXRXNSVUZCUlN4bFFVRmxPMEZCUXpsQ0xFbEJRVUVzWVVGQllTeEZRVUZGTEdWQlFXVTdRVUZET1VJc1NVRkJRU3hUUVVGVExFVkJRVVVzVjBGQlZ6dEJRVU4wUWl4SlFVRkJMRmxCUVZrc1JVRkJSU3hqUVVGak8wRkJRelZDTEVsQlFVRXNXVUZCV1N4RlFVRkZMR05CUVdNN1FVRkROVUlzU1VGQlFTeFJRVUZSTEVWQlFVVXNWVUZCVlR0QlFVTndRaXhKUVVGQkxHRkJRV0VzUlVGQlJTeGxRVUZsTzBGQlF6bENMRWxCUVVFc1lVRkJZU3hGUVVGRkxHVkJRV1U3UVVGRE9VSXNTVUZCUVN4VFFVRlRMRVZCUVVVc1YwRkJWenM3TzBGRFVIaENPenRCUVVWSE8wRkJRMGdzVFVGQlRVZ3NkMEpCUVhOQ0xFZEJRVWNzU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVVUxUkRzN1FVRkZSenRCUVVOSUxFMUJRVTBzWjBKQlFXZENMRWRCUVhGRk8wRkJRM3BHTEVsQlFVRXNhVUpCUVdsQ0xFVkJRVVVzY1VKQlFYRkNPMEZCUTNoRExFbEJRVUVzY1VKQlFYRkNMRVZCUVVVc2JVSkJRVzFDTzBGQlF6RkRMRWxCUVVFc2EwSkJRV3RDTEVWQlFVVXNjMEpCUVhOQ08wRkJRekZETEVsQlFVRXNjMEpCUVhOQ0xFVkJRVVVzYjBKQlFXOUNPME5CUXpkRExFTkJRVU03UVVGRlJqczdRVUZGUnp0TlFVTlZMSFZDUVVGMVFpeERRVUZCTzBGQldXeERMRWxCUVVFc1NVRkJWeXhKUVVGSkxFZEJRVUU3TzBGQlJXSXNVVUZCUVN4UFFVRlBMSGxDUVVGNVFpeERRVUZETzB0QlEyeERPMGxCUlVRc1YwRkJiVUlzUTBGQlFTeE5RVUZyUWl4RlFVRkZMRTlCUVhkRExFVkJRVUU3UVVGRE4wVXNVVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF6dFJRVVZ5UWl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExFOUJRVThzUzBGQlFTeEpRVUZCTEVsQlFWQXNUMEZCVHl4TFFVRlFMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEU5QlFVOHNRMEZCUlN4VlFVRlZMRU5CUVVNN1VVRkRkRU1zU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhIUVVGSExFOUJRVThzUzBGQlFTeEpRVUZCTEVsQlFWQXNUMEZCVHl4TFFVRlFMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEU5QlFVOHNRMEZCUlN4dlFrRkJiMElzUTBGQlF6dExRVU16UkR0QlFVVlpMRWxCUVVFc1UwRkJVeXhEUVVGRExFbEJRVlVzUlVGQlFUczdRVUZETDBJc1dVRkJRU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZkQlFWY3NSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVMEZEZEVRc1EwRkJRU3hEUVVGQk8wRkJRVUVzUzBGQlFUdEJRVVZFT3pzN08wRkJTVWM3UVVGRFZ5eEpRVUZCTEU5QlFVOHNRMEZCUXl4SlFVRlZMRVZCUVVFN08xbEJRemxDTEUxQlFVMHNVVUZCVVN4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTTFReXhaUVVGQkxFbEJRVWtzVVVGQlVTeEZRVUZGTzBGQlExb3NaMEpCUVVFc1QwRkJUeXhSUVVGUkxFTkJRVU03UVVGRGFrSXNZVUZCUVR0WlFVVkVMRTFCUVUwc1VVRkJVU3hIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVNMVF5eFpRVUZCTEVsQlFVa3NVVUZCVVN4RlFVRkZPMEZCUTFvc1owSkJRVUVzVDBGQlR5eFJRVUZSTEVOQlFVTTdRVUZEYWtJc1lVRkJRVHRCUVVWRUxGbEJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTTdVMEZEWWl4RFFVRkJMRU5CUVVFN1FVRkJRU3hMUVVGQk8wRkJSV0VzU1VGQlFTeFRRVUZUTEVOQlFVTXNTVUZCVlN4RlFVRkJPenM3UVVGRGFFTXNXVUZCUVN4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFYZENMRU5CUVVNN08wRkJSMnhFTEZsQlFVRXNUVUZCVFN4VFFVRlRMRWRCUVVjc1EwRkJRU3hEUVVGQkxFVkJRVUVzUjBGQlFTeEpRVUZKTEVOQlFVTXNZMEZCWXl4TlFVRkZMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGQkxFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlFVTXNUVUZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOc1JTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RlFVRkZPMEZCUTJRc1owSkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTTdRVUZEWWl4aFFVRkJPMWxCUlVRc1RVRkJUU3hUUVVGVExFZEJRVWNzUTBGQlFTeEZRVUZCTEVkQlFVRXNTVUZCU1N4RFFVRkRMRlZCUVZVc1RVRkJRU3hKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlJ5eFZRVUZWTEVOQlFXOURMRU5CUVVNN1dVRkRia1lzU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlR0QlFVTmtMR2RDUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETzBGQlEySXNZVUZCUVR0QlFVVkVMRmxCUVVFc1RVRkJUU3hYUVVGWExFZEJRVWNzVTBGQlV5eERRVUZETEZkQlFWY3NRMEZCUXp0QlFVTXhReXhaUVVGQkxFbEJRVWtzUTBGQlEwRXNkMEpCUVhOQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEZkQlFWY3NRMEZCUXl4RlFVRkZPMEZCUXpWRExHZENRVUZCTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc01FUkJRVEJFTEZkQlFWY3NRMEZCUVN4RFFVRkJMRU5CUVVjc1EwRkJReXhEUVVGRE8wRkJRM1pHTEdkQ1FVRkJMRTlCUVU4c1NVRkJTU3hEUVVGRE8wRkJRMklzWVVGQlFUdEJRVVZFTEZsQlFVRXNUVUZCVFN4alFVRmpMRWRCUVVjc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF6dFpRVU14UXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhGUVVGRk8wRkJRMjVDTEdkQ1FVRkJMRTlCUVU4c1NVRkJTU3hEUVVGRE8wRkJRMklzWVVGQlFUdEJRVVZFT3pzN08wRkJTVWM3V1VGRFNDeE5RVUZOTEhWQ1FVRjFRaXhIUVVNeFFpeGpRVUZqTEVOQlFVTXNWVUZCYTBJc1EwRkJReXh4UWtGQmNVSXNTVUZCU1N4SlFVRkpPMEZCUXk5RUxHZENRVUZCTEdOQlFXTXNRMEZCUXl4VlFVRnJRaXhEUVVGRExITkNRVUZ6UWl4SlFVRkpMRWxCUVVrc1EwRkJRenRaUVVWd1JTeE5RVUZOTEZWQlFWVXNSMEZCTWtJc1JVRkJSU3hEUVVGRE8wRkJRemxETEZsQlFVRXNTVUZCU1N4alFVRmpMRU5CUVVNc1ZVRkJWU3hKUVVGSkxFbEJRVWtzUlVGQlJUdG5Ra0ZEY2tNc1RVRkJUU3hQUVVGUExFTkJRVU1zUjBGQlJ5eERRVU5tTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRlBMRU5CUVVNc1kwRkJZeXhGUVVGRkxHVkJRV1VzUTBGQlF5eExRVUZKTEZOQlFVRXNRMEZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hEUVVGQkxFVkJRVUVzUzBGQlFTeERRVUZCTEVWQlFVRXNZVUZCUVR0dlFrRkRlRVlzU1VGQlNTeFJRVUZSTEVkQlFVY3NZMEZCYlVRc1EwRkJRenRCUVVOdVJTeHZRa0ZCUVN4TlFVRk5MRXRCUVVzc1IwRkJSeXhsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZET3p0QlFVZHVReXh2UWtGQlFTeEpRVUZKTEhWQ1FVRjFRaXhGUVVGRk8wRkJRek5DTEhkQ1FVRkJMRTFCUVUwc1lVRkJZU3hIUVVGSExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8zZENRVU5xUkN4SlFVRkpMR0ZCUVdFc1NVRkJTU3hKUVVGSkxFVkJRVVU3TkVKQlEzcENMRkZCUVZFc1IwRkJSeXhoUVVGaExFTkJRVU03UVVGRE1VSXNlVUpCUVVFN1FVRkRSaXh4UWtGQlFUdEJRVVZFTEc5Q1FVRkJMRTFCUVUwc1NVRkJTU3hIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc1RVRkJUU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZET3p0dlFrRkhOVVFzU1VGQlNTeEpRVUZKTEVsQlFVa3NTVUZCU1N4RlFVRkZPM2RDUVVOb1FpeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVFc2RVTkJRVUVzUlVGQk1FTXNVVUZCVVN4RFFVRmhMRlZCUVVFc1JVRkJRU3hMUVVGTExFTkJRV3RDTEdkQ1FVRkJMRU5CUVVFc1EwRkJReXhEUVVGRE8zZENRVU55Unl4UFFVRlBPMEZCUTFJc2NVSkJRVUU3TzBGQlIwUXNiMEpCUVVFc1ZVRkJWU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNN2FVSkJRMnBETEVOQlFVRXNRMEZCUXl4RFFVTklMRU5CUVVNN1FVRkRTQ3hoUVVGQk8xbEJSVVFzVFVGQlRTeFJRVUZSTEVkQlFVY3NTVUZCU1N4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVGRk8yZENRVU16UlN4dlFrRkJiMElzUlVGQlJTeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q08wRkJRMmhFTEdGQlFVRXNRMEZCUXl4RFFVRkRPMWxCUTBnc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMSGRDUVVGM1FpeERRVUZETEVOQlFVTTdXVUZGYkVRc1NVRkJTU3hKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTzBGQlEyNUNMR2RDUVVGQkxFMUJRVTBzVFVGQlRTeEhRVUZITEVsQlFVa3NhVUpCUVdsQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdRVUZETDBNc1owSkJRVUVzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03WjBKQlF6VkNMRTFCUVUwc1EwRkJReXhYUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4WFFVRlhMRU5CUVVNN1FVRkRiRVFzWVVGQlFUdEJRVVZFTEZsQlFVRXNUMEZCVHl4UlFVRlJMRU5CUVVNN08wRkJRMnBDTEV0QlFVRTdRVUZGWVN4SlFVRkJMRk5CUVZNc1EwRkJReXhKUVVGVkxFVkJRVUU3T3p0QlFVTm9ReXhaUVVGQkxFMUJRVTBzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJkMElzUTBGQlF6dFpRVVZzUkN4TlFVRk5MRTFCUVUwc1IwRkJSeXhEUVVGQkxFVkJRVUVzUjBGQlFTeEpRVUZKTEVOQlFVTXNWVUZCVlN4TlFVRkJMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGRkxFZEJRVFJDTEVOQlFVTTdXVUZETjBRc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJUdEJRVU5ZTEdkQ1FVRkJMRTlCUVU4c1NVRkJTU3hEUVVGRE8wRkJRMklzWVVGQlFUdEJRVVZFTEZsQlFVRXNUVUZCVFN4alFVRmpMRWRCUVN0Q0xFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTTdXVUZEYmtVc1NVRkJTU3hEUVVGRExHTkJRV01zUlVGQlJUdEJRVU51UWl4blFrRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF6dEJRVU5pTEdGQlFVRTdXVUZGUkN4TlFVRk5MRlZCUVZVc1IwRkJNa0lzUlVGQlJTeERRVUZETzBGQlF6bERMRmxCUVVFc1NVRkJTU3hqUVVGakxFTkJRVU1zVlVGQlZTeEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTnlReXhuUWtGQlFTeE5RVUZOTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUTJZc1kwRkJZeXhEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCVHl4SlFVRkpMRXRCUVVrc1UwRkJRU3hEUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEVOQlFVRXNSVUZCUVN4TFFVRkJMRU5CUVVFc1JVRkJRU3hoUVVGQk8wRkJRek5ETEc5Q1FVRkJMRTFCUVUwc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdRVUZETTBJc2IwSkJRVUVzVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVWNFFpeHZRa0ZCUVN4SlFVRkpMRkZCUVZFc1NVRkJTU3hKUVVGSkxFbEJRVWtzUzBGQlN5eEpRVUZKTEVsQlFVa3NSVUZCUlR0M1FrRkRja01zVDBGQlR6dEJRVU5TTEhGQ1FVRkJPMEZCUlVRc2IwSkJRVUVzVFVGQlRTeEpRVUZKTEVkQlFVY3NUVUZCVFN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5eE5RVUZOTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN08yOUNRVWMxUkN4SlFVRkpMRWxCUVVrc1NVRkJTU3hKUVVGSkxFVkJRVVU3ZDBKQlEyaENMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlFTeDFRMEZCUVN4RlFVRXdReXhSUVVGUkxFTkJRV0VzVlVGQlFTeEZRVUZCTEV0QlFVc3NRMEZCYTBJc1owSkJRVUVzUTBGQlFTeERRVUZETEVOQlFVTTdkMEpCUTNKSExFOUJRVTg3UVVGRFVpeHhRa0ZCUVRzN1FVRkhSQ3h2UWtGQlFTeE5RVUZOTEdGQlFXRXNSMEZCUnl4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0dlFrRkRha1FzVFVGQlRTeFhRVUZYTEVsQlFVa3NZVUZCWVN4TFFVRkJMRWxCUVVFc1NVRkJZaXhoUVVGaExFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFXSXNZVUZCWVN4SFFVRkpMRkZCUVZFc1EwRkJjME1zUTBGQlF6czdPMEZCU1hKR0xHOUNRVUZCTEVsQlFVa3NWVUZCVlN4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFbEJRVWtzUlVGQlJUdDNRa0ZEYmtNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGRFZpeERRVUZCTERCQ1FVRkJMRVZCUVRaQ0xGZEJRVmNzUTBGQmMwSXNiVUpCUVVFc1JVRkJRU3hMUVVGTExFTkJRV2xETEN0Q1FVRkJMRU5CUVVFc1EwRkRja2NzUTBGQlF6dDNRa0ZEUml4UFFVRlBPMEZCUTFJc2NVSkJRVUU3TzBGQlIwUXNiMEpCUVVFc1ZVRkJWU3hEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNN2FVSkJRM0JETEVOQlFVRXNRMEZCUXl4RFFVTklMRU5CUVVNN1FVRkRTQ3hoUVVGQk8xbEJSVVFzVFVGQlRTeFJRVUZSTEVkQlFVY3NTVUZCU1N4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVGRk8yZENRVU16UlN4dlFrRkJiMElzUlVGQlJTeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q08wRkJRMmhFTEdGQlFVRXNRMEZCUXl4RFFVRkRPMWxCUTBnc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMSGRDUVVGM1FpeERRVUZETEVOQlFVTTdXVUZGYkVRc1NVRkJTU3hKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTzBGQlEyNUNMR2RDUVVGQkxFMUJRVTBzVFVGQlRTeEhRVUZITEVsQlFVa3NhVUpCUVdsQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdRVUZETDBNc1owSkJRVUVzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03WjBKQlF6VkNMRTFCUVUwc1EwRkJReXhYUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4WFFVRlhMRU5CUVVNN1FVRkRiRVFzWVVGQlFUdEJRVVZFTEZsQlFVRXNUMEZCVHl4UlFVRlJMRU5CUVVNN08wRkJRMnBDTEV0QlFVRTdRVUZGUkRzN096dEJRVWxITzBGQlEwc3NTVUZCUVN4NVFrRkJlVUlzUTBGQlF5eFZRVUZyUXl4RlFVRkJPenRSUVVWc1JTeE5RVUZOTEc5Q1FVRnZRaXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlEzcEZMRU5CUVVNc1owSkJRV2RDTEV0QlFVc3NWVUZCVlN4RFFVRkRMR2RDUVVGblFpeERRVUZETEVsQlFVa3NTVUZCU1N4RFFVTXpSQ3hEUVVGRE96dEJRVWRHTEZGQlFVRXNTVUZCU1N4dlFrRkJiMElzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RlFVRkZPMEZCUTI1RExGbEJRVUVzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZEWWl4RFFVRkJMREJGUVVGQkxFVkJRVFpGTEc5Q1FVRnZRaXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUlN4RFFVRkJMRU5CUXk5SExFTkJRVU03UVVGRFNDeFRRVUZCTzBGQlJVUXNVVUZCUVN4UFFVRlBMRlZCUVRKQ0xFTkJRVU03UzBGRGNFTTdRVUZEUmpzN1FVTXpUMWtzVFVGQlFTeHBRa0ZCYTBJc1UwRkJVU3hMUVVGTExFTkJRVU1zWTBGQll5eERRVUZCTzBGQlVYcEVMRWxCUVVFc1YwRkJRU3hIUVVGQk8wRkJRMFVzVVVGQlFTeExRVUZMTEVWQlFVVXNRMEZCUXp0UlFVNUdMRWxCUVdFc1EwRkJRU3hoUVVGQkxFZEJRVWNzUTBGQlF5eERRVUZETzFGQlEyeENMRWxCUVdNc1EwRkJRU3hqUVVGQkxFZEJRVWNzUTBGQlF5eERRVUZETzBGQlQzcENMRkZCUVVFc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEhRVUZITEVOQlFVTTdRVUZEYWtJc1VVRkJRU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVkQlFVY3NRMEZCUXp0QlFVTnNRaXhSUVVGQkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NSMEZCUnl4RFFVRkRPMEZCUTNwQ0xGRkJRVUVzU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4SFFVRkhMRU5CUVVNN1FVRkZNVUlzVVVGQlFTeEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEZsQlFWa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZGtVc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eFZRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wRkJSVGRETEZGQlFVRXNTVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eGxRVUZsTEVOQlFVTXNTVUZCU1N4WFFVRlhMRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNoRkxGRkJRVUVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03VVVGRkwwSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRE8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJRenRMUVVObU8wbEJSVTBzVFVGQlRTeEhRVUZCTzFGQlExZ3NTVUZCU1N4dlFrRkJiMElzUjBGQlJ5eExRVUZMTEVOQlFVTTdRVUZGYWtNc1VVRkJRU3hKUVVGSkxFbEJRVWtzUTBGQlF5eGhRVUZoTEV0QlFVc3NTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHRCUVVOeVF5eFpRVUZCTEVsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dFpRVU5vUXl4dlFrRkJiMElzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZETjBJc1UwRkJRVHRCUVVWRUxGRkJRVUVzU1VGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4TFFVRkxMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVU3UVVGRGRrTXNXVUZCUVN4SlFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTTdXVUZEYkVNc2IwSkJRVzlDTEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCUXpkQ0xGTkJRVUU3UVVGRlJDeFJRVUZCTEVsQlFVa3NiMEpCUVc5Q0xFVkJRVVU3V1VGRGVFSXNTVUZCU1N4RFFVRkRMR05CUVdNc1JVRkJSU3hEUVVGRE8wRkJRM1pDTEZOQlFVRTdTMEZEUmp0SlFVVlBMR05CUVdNc1IwRkJRVHRCUVVOd1FpeFJRVUZCTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJSWFpETEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1dVRkRNMElzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hKUVVGSkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTTdRVUZGTVVNc1dVRkJRU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMR05CUVdNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRlRWNzVTBGQlFUdEJRVVZFTEZGQlFVRXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhYUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETzB0QlEyeERPMGxCUlU4c1YwRkJWeXhIUVVGQk8xRkJRMnBDTEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkRNMElzV1VGQlFTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTm9SQ3hUUVVGQk8wRkJSVVFzVVVGQlFTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU03UzBGRGNFTTdRVUZEUmpzN1FVTXZSRmtzVFVGQlFTd3lRa0ZCTkVJc1UwRkJVU3hMUVVGTExFTkJRVU1zWTBGQll5eERRVUZCTzBGQlVXNUZMRWxCUVVFc1YwRkJRU3hIUVVGQk8wRkJRMFVzVVVGQlFTeExRVUZMTEVWQlFVVXNRMEZCUXp0QlFVVlNMRkZCUVVFc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eEhRVUZITEVOQlFVTTdRVUZEYkVJc1VVRkJRU3hKUVVGSkxFTkJRVU1zWTBGQll5eEhRVUZITEVkQlFVY3NRMEZCUXp0UlFVVXhRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8xRkJRMmhETEVsQlFVa3NRMEZCUXl4WlFVRlpMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdRVUZGZUVNc1VVRkJRU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxGbEJRVmtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOd1JTeEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdRVUZGTjBNc1VVRkJRU3hKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxGZEJRVmNzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOeVJTeFJRVUZCTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzFGQlJTOUNMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlF6dFJRVU51UWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU03UzBGRFpqdEpRVVZOTEUxQlFVMHNSMEZCUVR0UlFVTllMRWxCUVVrc2IwSkJRVzlDTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUldwRExGRkJRVUVzU1VGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4TFFVRkxMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVU3UVVGRGRrTXNXVUZCUVN4SlFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTTdXVUZEYkVNc2IwSkJRVzlDTEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCUXpkQ0xGTkJRVUU3VVVGRlJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMWxCUTNoRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU5zUXl4dlFrRkJiMElzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZETjBJc1UwRkJRVHRCUVVWRUxGRkJRVUVzU1VGQlNTeHZRa0ZCYjBJc1JVRkJSVHRaUVVONFFpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1FVRkRka0lzVTBGQlFUdExRVU5HTzBsQlJVOHNZMEZCWXl4SFFVRkJPMUZCUTNCQ0xFdEJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdXVUZETTBJc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NTVUZCU1N4SlFVRkpMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU03V1VGRkwwSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dFpRVU4yUkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTTFSQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNM1JDeFRRVUZCTzBGQlJVUXNVVUZCUVN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVWQlFVVXNTVUZCU1N4RFFVRkRMR05CUVdNc1JVRkJSU3hKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdVVUZETVVVc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlJUbEZMRkZCUVVFc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYkVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkZlRVlzVVVGQlFTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU03UzBGRGJFTTdTVUZGVHl4WFFVRlhMRWRCUVVFN1VVRkRha0lzUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0WlFVTXpRaXhOUVVGTkxFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8wRkJSWGhDTEZsQlFVRXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGNFTXNXVUZCUVN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hGUVVGRkxFZEJRVWNzUTBGQlF5eEZRVUZGTEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOdVJDeFpRVUZCTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRVZCUVVVc1IwRkJSeXhEUVVGRExFVkJRVVVzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTNKRUxGTkJRVUU3VVVGRFJDeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUlc1RExGRkJRVUVzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRE8wdEJRM0JETzBGQlEwWTdPMEZEZUVWRUxFMUJRVTFITEZGQlFVMHNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF6dEJRVU4wUXl4TlFVRk5ReXhSUVVGTkxFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNN1FVRkRkRU1zVFVGQlRVZ3NUVUZCU1N4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETzBGQlEycERMRTFCUVUxRExFMUJRVWtzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRCUVVWcVF5eE5RVUZOTEdGQlFXRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXp0QlFVTXpReXhOUVVGTkxGbEJRVmtzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEdGQlFXRXNSVUZCUlN4aFFVRmhMRU5CUVVNc1EwRkJRenRCUVVNdlJTeE5RVUZOTEdWQlFXVXNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVVMVF5eE5RVUZCTEdWQlFXZENMRk5CUVZFc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlFUdEJRVTA1UXl4SlFVRkJMRmRCUVVFc1EwRkJiVUlzVFVGQmFVSXNSVUZCUVR0QlFVTnNReXhSUVVGQkxFdEJRVXNzUlVGQlJTeERRVUZETzBGQlExSXNVVUZCUVN4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUlRsQ0xGRkJRVUVzU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkZlRUlzVVVGQlFUdEJRVU5GTEZsQlFVRXNUVUZCVFN4UlFVRlJMRWRCUVVjc1NVRkJTU3hwUWtGQmFVSXNSVUZCUlN4RFFVRkRPMEZCUTNwRExGbEJRVUVzVVVGQlVTeERRVUZETEUxQlFVMHNSMEZCUnl4SFFVRkhMRU5CUVVNN1FVRkZkRUlzV1VGQlFTeE5RVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhwUWtGQmFVSXNRMEZCUXp0QlFVTXpReXhuUWtGQlFTeExRVUZMTEVWQlFVVXNVVUZCVVR0QlFVTm1MR2RDUVVGQkxGZEJRVmNzUlVGQlJTeEpRVUZKTzBGQlEycENMR2RDUVVGQkxFOUJRVThzUlVGQlJTeEhRVUZITzJkQ1FVTmFMRWxCUVVrc1JVRkJSU3hMUVVGTExFTkJRVU1zVlVGQlZUdEJRVU4wUWl4blFrRkJRU3hUUVVGVExFVkJRVVVzUzBGQlN6dEJRVU5vUWl4blFrRkJRU3hWUVVGVkxFVkJRVVVzUzBGQlN6dEJRVU5zUWl4aFFVRkJMRU5CUVVNc1EwRkJRenRCUVVWSUxGbEJRVUVzU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUTNKRUxGbEJRVUVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03UVVGRE0wSXNVMEZCUVR0QlFVVkVMRkZCUVVFN1FVRkRSU3haUVVGQkxFMUJRVTBzVVVGQlVTeEhRVUZITEVsQlFVa3NhVUpCUVdsQ0xFVkJRVVVzUTBGQlF6dEJRVU42UXl4WlFVRkJMRkZCUVZFc1EwRkJReXhOUVVGTkxFZEJRVWNzUjBGQlJ5eERRVUZETzBGQlJYUkNMRmxCUVVFc1RVRkJUU3hSUVVGUkxFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU03UVVGRE0wTXNaMEpCUVVFc1MwRkJTeXhGUVVGRkxGRkJRVkU3UVVGRFppeG5Ra0ZCUVN4WFFVRlhMRVZCUVVVc1NVRkJTVHRCUVVOcVFpeG5Ra0ZCUVN4UFFVRlBMRVZCUVVVc1IwRkJSenRuUWtGRFdpeEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRlZCUVZVN1FVRkRkRUlzWjBKQlFVRXNVMEZCVXl4RlFVRkZMRXRCUVVzN1FVRkRhRUlzWjBKQlFVRXNWVUZCVlN4RlFVRkZMRXRCUVVzN1FVRkRiRUlzWVVGQlFTeERRVUZETEVOQlFVTTdRVUZGU0N4WlFVRkJMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU51UkN4WlFVRkJMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUTNwQ0xGTkJRVUU3UVVGRlJDeFJRVUZCTzBGQlEwVXNXVUZCUVN4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGSkxESkNRVUV5UWl4RlFVRkZMRU5CUVVNN1FVRkRia1FzV1VGQlFTeFJRVUZSTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWRCUVVjc1EwRkJRenRCUVVWMFFpeFpRVUZCTEUxQlFVMHNVVUZCVVN4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExHbENRVUZwUWl4RFFVRkRPMEZCUXpORExHZENRVUZCTEV0QlFVc3NSVUZCUlN4UlFVRlJPMEZCUTJZc1owSkJRVUVzVTBGQlV5eEZRVUZGTEV0QlFVczdRVUZEYUVJc1owSkJRVUVzVlVGQlZTeEZRVUZGTEV0QlFVczdRVUZEYkVJc1lVRkJRU3hEUVVGRExFTkJRVU03UVVGRlNDeFpRVUZCTEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zV1VGQldTeERRVUZETEZGQlFWRXNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRCUVVNNVJDeFpRVUZCTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1lVRkJZU3hIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU4yUXl4WlFVRkJMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMEZCUXpWQ0xGTkJRVUU3UzBGRFJqdEpRVVZOTEU5QlFVOHNSMEZCUVR0QlFVTmFMRkZCUVVFc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1FVRkRha01zVVVGQlFTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dEJRVVZxUXl4UlFVRkJMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMEZCUTI1RExGRkJRVUVzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRmJrTXNVVUZCUVN4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExGRkJRVkVzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0QlFVTndReXhSUVVGQkxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8wdEJRM0pETzBGQlJVMHNTVUZCUVN4cFFrRkJhVUlzUTBGQlF5eExRVUZqTEVWQlFVRTdPMEZCUlhKRExGRkJRVUVzVFVGQlRTeEhRVUZITEVkQlFVY3NTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNN1VVRkRla1FzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhIUVVGSExFZEJRVWNzUTBGQlF6dEJRVU51UXl4UlFVRkJMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUldoRExGRkJRVUVzVFVGQlRTeExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNN1VVRkROMFFzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU4yUXl4UlFVRkJMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPenRCUVVkc1F5eFJRVUZCTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTkVMRTFCUVVrc1EwRkJReXhEUVVGRE8wRkJRelZETEZGQlFVRXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXgzUWtGQmQwSXNRMEZCUTBVc1VVRkJUU3hEUVVGRExFTkJRVU03TzBGQlIyaEVMRkZCUVVGQkxGRkJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXh6UWtGQmMwSXNRMEZCUTBNc1VVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6czdVVUZITDBRc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRTQ3hOUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU5zUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTkZMRkZCUVUwc1EwRkJReXhEUVVGRE8xRkJSWFJETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlEwWXNUVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRjRU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRFJTeFJRVUZOTEVOQlFVTXNRMEZCUXp0QlFVTjRReXhSUVVGQkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RFFVRkRMRkZCUVZFc1EwRkJRME1zVVVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExHVkJRV1VzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTI1R0xFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RFFVRkRMRkZCUVZFc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6czdVVUZIYkVRc1RVRkJUU3hGUVVGRkxFMUJRVTBzUlVGQlJTeFZRVUZWTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRE8wRkJRemxETEZGQlFVRXNTVUZCU1N4TlFVRk5MRWxCUVVrc1NVRkJTU3hKUVVGSkxGVkJRVlVzUlVGQlJUdFpRVU5vUXl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTkdMRTFCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlEwUXNUVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkRlRU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlEwTXNUVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRNVU1zV1VGQlFTeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF6dFpRVU51UXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTkVMRTFCUVVrc1EwRkJReXhEUVVGRE8wRkJRM1JETEZOQlFVRTdPMEZCUjBRc1VVRkJRU3hMUVVGTExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UzBGRGFFTTdRVUZEUmpzN1FVTXpTRVFzVFVGQlRTeFRRVUZUTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRGRFTXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdRVUZGYmtNN096czdPenM3UVVGUFJ6dEJRVU5oTEZOQlFVRXNjMEpCUVhOQ0xFTkJRVU1zVFVGQmMwSXNSVUZCUlN4SFFVRnhRaXhGUVVGQk8wbEJRMnhHTEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUlVGQlJTeEhRVUZITEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRja1FzU1VGQlFTeFBRVUZQTEVkQlFVY3NRMEZCUXp0QlFVTmlPenRCUTJSQk96czdPenM3T3pzN08wRkJWVWM3UVVGRFJ5eFRRVUZWTEcxQ1FVRnRRaXhEUVVGRExFMUJRWEZDTEVWQlFVRTdTVUZEZGtRc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM1pJT3p0QlEyWkJPenM3T3pzN096czdRVUZUUnp0QlFVTkhMRk5CUVZVc1lVRkJZU3hEUVVGRExFdEJRV0VzUlVGQlFUdEJRVU42UXl4SlFVRkJMRTFCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEY0VRc1QwRkJUeXhMUVVGTExFZEJRVWNzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1UwRkJVeXhEUVVGRE8wRkJRek5ET3p0QlEweEJMRTFCUVUxSkxHbENRVUZsTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkZla1FzVFVGQlRTeEpRVUZKTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRGFrTXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdRVUZEYWtNc1RVRkJUU3hKUVVGSkxFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1FVRkRha01zVFVGQlRVWXNVVUZCVFN4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETzBGQlEzUkRMRTFCUVUxRExGRkJRVTBzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRCUVVOMFF5eE5RVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF6dEJRVU4wUXl4TlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXp0QlFVTjBReXhOUVVGTlJTeFRRVUZQTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03UVVGRmJFTTdPMEZCUlVjN1RVRkRWU3hUUVVGVExFTkJRVUU3UVVFNFEzQkNPenRCUVVWSE8wRkJRMGdzU1VGQlFTeEpRVUZYTEVkQlFVY3NSMEZCUVR0UlFVTmFMRTlCUVU4c1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF6dExRVU5zUWp0QlFVVkVPenRCUVVWSE8wbEJRMGdzU1VGQlZ5eEhRVUZITEVOQlFVTXNTMEZCWVN4RlFVRkJPMEZCUXpGQ0xGRkJRVUVzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRiRUlzVVVGQlFTeEpRVUZKTEVOQlFVTXNXVUZCV1N4SFFVRkhMRWxCUVVrc1EwRkJRenRMUVVNeFFqdEJRVTlFT3p0QlFVVkhPMEZCUTBnc1NVRkJRU3hKUVVGWExFdEJRVXNzUjBGQlFUdFJRVU5rTEU5QlFVOHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJRenRMUVVOd1FqdEJRVVZFT3p0QlFVVkhPMGxCUTBnc1NVRkJWeXhMUVVGTExFTkJRVU1zUzBGQllTeEZRVUZCTzBGQlF6VkNMRkZCUVVFc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTTdRVUZEY0VJc1VVRkJRU3hKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEVsQlFVa3NRMEZCUXp0TFFVTXhRanRCUVZsRU96dEJRVVZITzBGQlEwZ3NTVUZCUVN4SlFVRlhMRXRCUVVzc1IwRkJRVHRCUVVOa0xGRkJRVUVzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4NVJFRkJlVVFzUTBGQlF5eERRVUZETzFGQlJYaEZMRTlCUVU4c1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJReXhEUVVGRE8wdEJRM3BETzBGQlJVUTdPenM3TzBGQlMwYzdTVUZEU0N4WFFVRnRRaXhEUVVGQkxGRkJRWEZDTEVWQlFVVXNUMEZCZVVJc1JVRkJRVHRCUVhaSGJrVTdPMEZCUlVjN1FVRkRTU3hSUVVGQkxFbEJRVUVzUTBGQlFTeHJRa0ZCYTBJc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0QlFWbG9SRHM3T3pzN1FVRkxSenRSUVVOSkxFbEJRVlVzUTBGQlFTeFZRVUZCTEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCVlhwQ096czdPMEZCU1VjN1FVRkRTU3hSUVVGQkxFbEJRVUVzUTBGQlFTeFRRVUZUTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRnZSV3hFTEZGQlFVRXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhSUVVGUkxFTkJRVU03UVVGRGVrSXNVVUZCUVN4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF6dEJRVVYyUWl4UlFVRkJMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUjBGQlJ5eERRVUZETzBGQlEyaENMRkZCUVVFc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eEhRVUZITEVOQlFVTTdRVUZEYkVJc1VVRkJRU3hKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVVjZRaXhSUVVGQkxFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1IwRkJSeXhKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1NVRkJTU3hMUVVGTExFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTXNRMEZCUXp0TFFVTjJSanRCUVVWRU96czdPenRCUVV0SE8wRkJRMGtzU1VGQlFTeFJRVUZSTEVOQlFVTXNUVUZCYlVJc1JVRkJRVHRCUVVOcVF5eFJRVUZCTEU5QlFVOHNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMHRCUXpOSE8wRkJSVVE3T3pzN096dEJRVTFITzBGQlEwa3NTVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJhVUlzUlVGQlFUdEJRVU16UWl4UlFVRkJMRWxCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzUzBGQlN5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RlFVRkZPMEZCUTNKRExGbEJRVUVzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl4dFJFRkJiVVFzUTBGQlF5eERRVUZETzBGQlEzUkZMRk5CUVVFN1VVRkZSQ3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8wRkJRM2hFTEZGQlFVRXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETzBGQlF6bENMRkZCUVVFc1NVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRPMEZCUTNCRExGRkJRVUVzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJRelZDTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0QlFVVjBReXhSUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETzB0QlEySTdRVUZGUkRzN096dEJRVWxITzBsQlEwa3NTMEZCU3l4SFFVRkJPMEZCUTFZc1VVRkJRU3hQUVVGUExFbEJRVWtzVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVNNVJEdEJRVVZFT3p0QlFVVkhPMGxCUTBrc1MwRkJTeXhIUVVGQk8wRkJRMVlzVVVGQlFTeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWRCUVVjc1EwRkJRenRCUVVOb1FpeFJRVUZCTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1IwRkJSeXhEUVVGRE8wRkJRMnhDTEZGQlFVRXNTVUZCU1N4RFFVRkRMRmxCUVZrc1IwRkJSeXhKUVVGSkxFTkJRVU03UzBGRE1VSTdRVUZGUkRzN096dEJRVWxITzBGQlEwa3NTVUZCUVN4elFrRkJjMElzUTBGQlF5eE5RVUZ4UWl4RlFVRkJPMUZCUTJwRUxFMUJRVTBzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExFMUJRVTBzUTBGQlJTeERRVUZETzBGQlJXNUVMRkZCUVVFc1QwRkJUeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03UzBGRE5VVTdRVUZGUkRzN096czdRVUZMUnp0QlFVTkpMRWxCUVVFc2QwSkJRWGRDTEVOQlFVTXNUVUZCZDBJc1JVRkJRVHRSUVVOMFJDeE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eE5RVUZOTEVOQlFVVXNRMEZCUXp0QlFVVnVSQ3hSUVVGQkxFOUJRVThzYzBKQlFYTkNMRU5CUVVNc1NVRkJTU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzB0QlF6ZERPMEZCUlVRN096czdRVUZKUnp0QlFVTkpMRWxCUVVFc2MwSkJRWE5DTEVOQlFVTXNUVUZCZDBJc1JVRkJRVHRSUVVOd1JDeEpRVUZKTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTkVMR2xDUVVGbExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVWQlFVVTdXVUZETlVRc1QwRkJUeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4M1FrRkJkMElzUTBGQlF5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUXpWRUxGTkJRVUU3UVVGRlJDeFJRVUZCTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUlVGQlJTeHBRa0ZCYVVJc1EwRkJReXhIUVVGSExHMUNRVUZ0UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dEJRVU5zUml4UlFVRkJReXhUUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NSVUZCUlN4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUjBGQlJ5eG5Ra0ZCWjBJc1JVRkJSU3hwUWtGQmFVSXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVVM1JTeFBRVUZQTEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVOQkxGTkJRVThzUTBGQlF5eERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVOQlFVTTdTMEZEZEVjN1FVRkZSRHM3T3p0QlFVbEhPMEZCUTBrc1NVRkJRU3gxUWtGQmRVSXNRMEZCUXl4TlFVRnhRaXhGUVVGQk8wRkJRMnhFTEZGQlFVRXNTVUZCU1N4RFFVRkRMSGRDUVVGM1FpeERRVUZEUml4UlFVRk5MRU5CUVVNc1EwRkJRenRCUVVOMFF5eFJRVUZCTEVsQlFVa3NRMEZCUXl4elFrRkJjMElzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVVndReXhSUVVGQkxFOUJRVThzVFVGQlRUdGhRVU5XTEVsQlFVa3NRMEZCUTBNc2FVSkJRV1VzUTBGQlF6dGhRVU55UWl4bFFVRmxMRU5CUVVORUxGRkJRVTBzUTBGQlF6dGhRVU4yUWl4bFFVRmxMRU5CUVVNc1RVRkJUU3hEUVVGRE8yRkJRM1pDTEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRFJTeFRRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRPMHRCUTNaRE8wRkJSVVE3T3pzN096czdPMEZCVVVjN1FVRkRTU3hKUVVGQkxFMUJRVTBzUTBGQlF5eFJRVUYxUWl4RlFVRkJPenRSUVVWdVF5eE5RVUZOTEdOQlFXTXNSMEZCUjBnc1VVRkJUVHRCUVVNeFFpeGhRVUZCTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTTdZVUZEYmtNc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXgzUWtGQmQwSXNRMEZCUTBNc1VVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzSkZMRTFCUVUwc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU5zUkN4TlFVRk5MRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eGxRVUZsTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU03TzBGQlJ5OUdMRkZCUVVFc1RVRkJUU3hEUVVGRExGZEJRVmNzUlVGQlJTeFpRVUZaTEVOQlFVTXNSMEZCUnl4dFFrRkJiVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRlRVVzVFVGQlRTeERRVUZETEZOQlFWTXNSVUZCUlN4VlFVRlZMRU5CUVVNc1IwRkJSeXh0UWtGQmJVSXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRSUVVNdlJDeE5RVUZOTEVkQlFVY3NSMEZCUnl4aFFVRmhMRU5CUVVNc1UwRkJVeXhIUVVGSExGZEJRVmNzUTBGQlF5eERRVUZETzFGQlEyNUVMRTFCUVUwc1MwRkJTeXhIUVVGSExHRkJRV0VzUTBGQlF5eFpRVUZaTEVkQlFVY3NWVUZCVlN4RFFVRkRMRU5CUVVNN08xRkJSM1pFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eFBRVUZQTEVkQlFVY3NSMEZCUnl4RFFVRkRPMUZCUXpGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZETzBGQlJUbERMRkZCUVVFc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdTMEZETVVJN1FVRkZSRHM3T3pzN1FVRkxSenRCUVVOSkxFbEJRVUVzVFVGQlRTeERRVUZETEV0QlFXRXNSVUZCUVR0UlFVTjZRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVsQlFVa3NTVUZCU1N4SlFVRkpMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVU3UVVGRE1VTXNXVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTnFSQ3hUUVVGQk8xRkJSVVFzU1VGQlNTeEpRVUZKTEVOQlFVTXNXVUZCV1N4RlFVRkZPMEZCUTNKQ0xGbEJRVUVzU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkZNVUlzV1VGQlFTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMR0ZCUVdFc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVOd1JDeFRRVUZCTzB0QlEwWTdPMEZCTVZGelFpeFRRVUZCTEVOQlFVRXNWMEZCVnl4SFFVRkhMRXRCUVVzc1EwRkJRenM3UVVOb1FqZERMRTFCUVUwc1pVRkJaU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzBGQlJYcEVMRTFCUVUwc1RVRkJUU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRPMEZCUTNSRExFMUJRVTBzVFVGQlRTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8wRkJRM1JETEUxQlFVMHNUMEZCVHl4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dEJRVVYwUkRzN08wRkJSMGM3VFVGRFZTeHZRa0ZCYjBJc1EwRkJRVHRCUVRCRUwwSTdPenM3T3pzN08wRkJVVWM3U1VGRFNDeFhRVU5GTEVOQlFVRXNVVUZCY1VJc1JVRkRja0lzZFVKQlFUQkRMRVZCUXpGRExIVkNRVUV3UXl4RlFVTXhReXh2UWtGQmRVTXNSVUZEZGtNc2EwSkJRWEZETEVWQlFVRTdRVUZGY2tNc1VVRkJRU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEZGQlFWRXNRMEZCUXp0QlFVVjZRaXhSUVVGQkxFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1IwRkJSeXgxUWtGQmRVSXNRMEZCUXp0QlFVTjJSQ3hSUVVGQkxFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1IwRkJSeXgxUWtGQmRVSXNRMEZCUXp0QlFVTjJSQ3hSUVVGQkxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1IwRkJSeXh2UWtGQmIwSXNRMEZCUXp0QlFVTnFSQ3hSUVVGQkxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1IwRkJSeXhyUWtGQmEwSXNRMEZCUXp0QlFVVTNReXhSUVVGQkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN08xRkJSMnhFTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRSUVVNdlF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNN1VVRkRhRVFzU1VGQlNTeERRVUZETERKQ1FVRXlRaXhIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRPMUZCUXpGRUxFbEJRVWtzUTBGQlF5dzBRa0ZCTkVJc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXp0UlFVVXpSQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFJRVU40UkN4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVVeFJDeFJRVUZCTEVsQlFVa3NUMEZCVHl4RlFVRkZPMWxCUTFnc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdXVUZETDBNc2MwSkJRWE5DTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVU4c1JVRkJSU3hKUVVGSkxFTkJRVU1zTWtKQlFUSkNMRU5CUVVNc1EwRkJRenRCUVVNelJTeFRRVUZCTzBGQlJVUXNVVUZCUVN4SlFVRkpMRkZCUVZFc1JVRkJSVHRaUVVOYUxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMWxCUTJwRUxITkNRVUZ6UWl4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETERSQ1FVRTBRaXhEUVVGRExFTkJRVU03UVVGRE4wVXNVMEZCUVR0TFFVTkdPMEZCUlVRN096czdPMEZCUzBjN1NVRkRTU3hoUVVGaExFTkJRVU1zUjBGQlZ5eEZRVUZGTEV0QlFXRXNSVUZCUVR0UlFVTTNReXhOUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFJRVU40UkN4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRSUVVNeFJDeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdVVUZEZWtVc1RVRkJUU3hyUWtGQmEwSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE96dEJRVVV6UlN4UlFVRkJMRWxCUVVrc1QwRkJUeXhGUVVGRk8xbEJRMWdzU1VGQlNTeExRVUZMTEVkQlFVY3NSMEZCUnl4RlFVRkZPMEZCUTJZc1owSkJRVUVzVDBGQlR5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVNNVJTeGhRVUZCTzBGQlFVMHNhVUpCUVVFN1FVRkRUQ3huUWtGQlFTeFBRVUZQTEVOQlFVTXNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRNVVVzWVVGQlFUdFpRVVZFTEVsQlFVa3NSMEZCUnl4SFFVRkhMRWRCUVVjc1JVRkJSVHRCUVVOaUxHZENRVUZCTEU5QlFVOHNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGREwwVXNZVUZCUVR0QlFVRk5MR2xDUVVGQk8wRkJRMHdzWjBKQlFVRXNUMEZCVHl4RFFVRkRMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRemRGTEdGQlFVRTdRVUZGUkN4WlFVRkJMRTFCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdRVUZETjBJc1dVRkJRU3hKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03T3pzN1dVRkxjRU1zYVVKQlFXdENMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJSWFJHTEZsQlFVRXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zTWtKQlFUSkNMRU5CUVVNc1EwRkJRenM3TzBGQlNUbERMRmxCUVVFc1QwRkJUeXhEUVVGRExGVkJRVlU3UVVGRFppeHBRa0ZCUVN4SlFVRkpMRU5CUVVNc2FVSkJRV3RDTEVOQlFVTXNWVUZCVlN4RFFVRkRPMmxDUVVOdVF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUTJoQ0xHbENRVUZCTEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU03UVVGRE5VSXNhVUpCUVVFc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8wRkJRM0JETEZOQlFVRTdPMEZCUjBRc1VVRkJRU3hKUVVGSkxGRkJRVkVzUlVGQlJUdFpRVU5hTEVsQlFVa3NTMEZCU3l4SFFVRkhMRWRCUVVjc1JVRkJSVHRCUVVObUxHZENRVUZCTEU5QlFVOHNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRE9VVXNZVUZCUVR0QlFVRk5MR2xDUVVGQk8wRkJRMHdzWjBKQlFVRXNUMEZCVHl4RFFVRkRMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRekZGTEdGQlFVRTdXVUZGUkN4SlFVRkpMRWRCUVVjc1IwRkJSeXhIUVVGSExFVkJRVVU3UVVGRFlpeG5Ra0ZCUVN4UFFVRlBMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlF5OUZMR0ZCUVVFN1FVRkJUU3hwUWtGQlFUdEJRVU5NTEdkQ1FVRkJMRTlCUVU4c1EwRkJReXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU0zUlN4aFFVRkJPMEZCUlVRc1dVRkJRU3hOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMEZCUXpkQ0xGbEJRVUVzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZET3pzN08xbEJTM0JETEd0Q1FVRnRRaXhEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVVYyUml4WlFVRkJMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETERSQ1FVRTBRaXhEUVVGRExFTkJRVU03T3p0QlFVa3ZReXhaUVVGQkxGRkJRVkVzUTBGQlF5eFZRVUZWTzBGQlEyaENMR2xDUVVGQkxFbEJRVWtzUTBGQlF5eHJRa0ZCYlVJc1EwRkJReXhWUVVGVkxFTkJRVU03YVVKQlEzQkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRGFFSXNhVUpCUVVFc1YwRkJWeXhEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXp0QlFVTTFRaXhwUWtGQlFTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdRVUZEY2tNc1UwRkJRVHRMUVVOR08wRkJSVVE3TzBGQlJVYzdRVUZEU1N4SlFVRkJMRTFCUVUwc1EwRkJReXhMUVVGclFpeEZRVUZCTzBGQlF6bENMRkZCUVVFc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eHZSVUZCYjBVc1EwRkJReXhEUVVGRE8xRkJSVzVHTEUxQlFVMHNSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRPVU1zVFVGQlRTeExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVVm9SQ3hSUVVGQkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNSMEZCUnl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8wdEJRMmhETzBGQlJVUTdPenM3UVVGSlJ6dEJRVU5MTEVsQlFVRXNjMEpCUVhOQ0xFTkJRVU1zVFVGQmQwSXNSVUZCUVR0UlFVTnlSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zWlVGQlpTeERRVUZETEVkQlFVY3NTVUZCU1N4RlFVRkZPMEZCUXpWRUxGbEJRVUVzVDBGQlR5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1FVRkRNVUlzVTBGQlFUdEJRVVZFTEZGQlFVRXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeEZRVUZGTEdsQ1FVRnBRaXhEUVVGRExFZEJRVWNzYlVKQlFXMUNMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBGQlEyeEdMRkZCUVVFc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhGUVVGRkxFZEJRVWNzWjBKQlFXZENMRVZCUVVVc2FVSkJRV2xDTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkZOMFVzVVVGQlFTeFBRVUZQTEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UzBGRGNrTTdPMEZCT1UxRU96dEJRVVZITzBGQlEyOUNMRzlDUVVGSkxFTkJRVUVzU1VGQlFTeEhRVUZITEUxQlFVMDdPMEZEYUVKMFF6czdPMEZCUjBjN1RVRkRWU3d3UWtGQk1FSXNRMEZCUVR0QlFXZERja003T3pzN096czdPMEZCVVVjN1NVRkRTQ3hYUVVORkxFTkJRVUVzVjBGQmFVTXNSVUZEYWtNc2RVSkJRVEJETEVWQlF6RkRMSFZDUVVFd1F5eEZRVU14UXl4dlFrRkJkVU1zUlVGRGRrTXNhMEpCUVhGRExFVkJRVUU3UVVGRmNrTXNVVUZCUVN4SlFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExGZEJRVmNzUTBGQlF6dEJRVVV2UWl4UlFVRkJMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNSMEZCUnl4MVFrRkJkVUlzUTBGQlF6dEJRVU4yUkN4UlFVRkJMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNSMEZCUnl4MVFrRkJkVUlzUTBGQlF6dEJRVU4yUkN4UlFVRkJMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNSMEZCUnl4dlFrRkJiMElzUTBGQlF6dEJRVU5xUkN4UlFVRkJMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNSMEZCUnl4clFrRkJhMElzUTBGQlF6dExRVU01UXp0QlFVVkVPenM3T3p0QlFVdEhPMGxCUTBrc1lVRkJZU3hEUVVGRExFZEJRVmNzUlVGQlJTeExRVUZoTEVWQlFVRTdVVUZETjBNc1NVRkJTU3hMUVVGTExFZEJRVWNzUjBGQlJ5eEZRVUZGTzFsQlEyWXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUXpORExGbEJRVUVzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hGUVVGRkxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUXpGRkxGTkJRVUU3UVVGQlRTeGhRVUZCTzFsQlEwd3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTNwRExGbEJRVUVzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTTNSU3hUUVVGQk8xRkJSVVFzU1VGQlNTeEhRVUZITEVkQlFVY3NSMEZCUnl4RlFVRkZPMWxCUTJJc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFJRVUZSTEVOQlFVTXNWVUZCVlN4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRek5ETEZsQlFVRXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMmhHTEZOQlFVRTdRVUZCVFN4aFFVRkJPMWxCUTB3c1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFJRVUZSTEVOQlFVTXNWMEZCVnl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRelZETEZsQlFVRXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNNVJTeFRRVUZCTzB0QlEwWTdRVUZGUkRzN1FVRkZSenRCUVVOSkxFbEJRVUVzVFVGQlRTeERRVUZETEV0QlFXdENMRVZCUVVFN1FVRkRPVUlzVVVGQlFTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRzlGUVVGdlJTeERRVUZETEVOQlFVTTdVVUZGYmtZc1RVRkJUU3hIUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU01UXl4TlFVRk5MRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNSMEZCUnl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJSV2hFTEZGQlFVRXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhIUVVGSExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdTMEZEYUVNN08wRkJla1pFT3p0QlFVVkhPMEZCUTI5Q0xEQkNRVUZKTEVOQlFVRXNTVUZCUVN4SFFVRkhMRmxCUVZrN08wMURXQzlDTEdsQ1FVRnBRaXhEUVVGQk8wRkJXVFZDT3pzN096dEJRVXRITzBsQlEwZ3NWMEZCYlVJc1EwRkJRU3hoUVVGeFFpeEZRVUZGTEZkQlFXMUNMRVZCUVVFN1FVRkRNMFFzVVVGQlFTeEpRVUZKTEVOQlFVTXNZVUZCWVN4SFFVRkhMR0ZCUVdFc1EwRkJRenRCUVVOdVF5eFJRVUZCTEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1YwRkJWeXhEUVVGRE8wdEJRMmhETzBGQlJVUTdPenRCUVVkSE8wRkJRMGtzU1VGQlFTeEhRVUZITEVOQlFVTXNSMEZCVnl4RlFVRkJPMEZCUTNCQ0xGRkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPMHRCUXpsRU8wRkJRMFk3TzBGRGJFSkVPenRCUVVWSE8wRkJRMGdzVFVGQlRVb3NkMEpCUVhOQ0xFZEJRVWNzU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVVUxUkRzN08wRkJSMGM3UVVGRFNDeE5RVUZOTEhWQ1FVRjFRaXhIUVVGSExFbEJRVWtzUTBGQlF6dEJRVVZ5UXpzN1FVRkZSenROUVVOVkxIRkNRVUZ4UWl4RFFVRkJPMEZCVldoRExFbEJRVUVzU1VGQlZ5eEpRVUZKTEVkQlFVRTdPMEZCUldJc1VVRkJRU3hQUVVGUExIVkNRVUYxUWl4RFFVRkRPMHRCUTJoRE8wbEJSVVFzVjBGQmJVSXNRMEZCUVN4TlFVRnJRaXhGUVVGRkxFOUJRWE5ETEVWQlFVRTdRVUZETTBVc1VVRkJRU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXp0UlFVVnlRaXhKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEU5QlFVOHNTMEZCUVN4SlFVRkJMRWxCUVZBc1QwRkJUeXhMUVVGUUxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRTlCUVU4c1EwRkJSU3hWUVVGVkxFTkJRVU03UzBGRGRrTTdRVUZGV1N4SlFVRkJMRk5CUVZNc1EwRkJReXhKUVVGVkxFVkJRVUU3TzBGQlF5OUNMRmxCUVVFc1RVRkJUU3hYUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4WFFVRnpReXhEUVVGRE96czdXVUZKZWtVc1NVRkJTU3hYUVVGWExFdEJRVXNzU1VGQlNTeEZRVUZGTzJkQ1FVTjRRaXhQUVVGUE8wRkJRMUlzWVVGQlFUdHBRa0ZCVFN4SlFVRkpMRmRCUVZjc1MwRkJTeXhUUVVGVExFVkJRVVU3UVVGRGNFTXNaMEpCUVVFc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eG5SMEZCWjBjc1EwRkJReXhEUVVGRE8wRkJRMjVJTEdGQlFVRTdRVUZGUkN4WlFVRkJMRTFCUVUwc2IwSkJRVzlDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXh2UWtGQmQwUXNRMEZCUXp0WlFVVndSeXhKUVVGSkxHOUNRVUZ2UWl4TFFVRkxMRWxCUVVrc1JVRkJSVHRuUWtGRGFrTXNUMEZCVHp0QlFVTlNMR0ZCUVVFN2FVSkJRVTBzU1VGQlNTeHZRa0ZCYjBJc1MwRkJTeXhUUVVGVExFVkJRVVU3UVVGRE4wTXNaMEpCUVVFc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGRFlpd3lSMEZCTWtjc1EwRkROVWNzUTBGQlF6dEJRVU5JTEdGQlFVRTdRVUZGUkN4WlFVRkJMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVTBGQlV5eEhRVUZITEUxQlFVMHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzVjBGQlZ5eEZRVUZGTEc5Q1FVRnZRaXhEUVVGRExFTkJRVU03VTBGRGRrWXNRMEZCUVN4RFFVRkJPMEZCUVVFc1MwRkJRVHRCUVVWRU96czdPenM3UVVGTlJ6dEJRVU5YTEVsQlFVRXNUMEZCVHl4RFFVTnVRaXhKUVVGVkxFVkJRMVlzVVVGQk5FSXNSVUZETlVJc1YwRkJkME1zUlVGQlFUczdRVUZGZUVNc1dVRkJRU3hKUVVGSkxGRkJRVkVzU1VGQlNTeEpRVUZKTEVsQlFVa3NWMEZCVnl4SlFVRkpMRWxCUVVrc1JVRkJSVHRCUVVNelF5eG5Ra0ZCUVN4UFFVRlBMRWxCUVVrc1EwRkJRenRCUVVOaUxHRkJRVUU3UVVGRlJDeFpRVUZCTEUxQlFVMHNVVUZCVVN4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVWQlFVVXNVVUZCVVN4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRE8wRkJRMjVGTEZsQlFVRXNTVUZCU1N4UlFVRlJMRVZCUVVVN1FVRkRXaXhuUWtGQlFTeFBRVUZQTEZGQlFWRXNRMEZCUXp0QlFVTnFRaXhoUVVGQk8wRkJSVVFzV1VGQlFTeE5RVUZOTEZGQlFWRXNSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeEZRVUZGTEZGQlFWRXNSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJRenRCUVVOdVJTeFpRVUZCTEVsQlFVa3NVVUZCVVN4RlFVRkZPMEZCUTFvc1owSkJRVUVzVDBGQlR5eFJRVUZSTEVOQlFVTTdRVUZEYWtJc1lVRkJRVHRCUVVWRUxGbEJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTTdVMEZEWWl4RFFVRkJMRU5CUVVFN1FVRkJRU3hMUVVGQk8wRkJSV0VzU1VGQlFTeFRRVUZUTEVOQlEzSkNMRWxCUVZVc1JVRkRWaXhSUVVGeFFpeEZRVU55UWl4WFFVRnBReXhGUVVGQk96czdRVUZGYWtNc1dVRkJRU3hOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVhkQ0xFTkJRVU03TzBGQlIyeEVMRmxCUVVFc1RVRkJUU3hUUVVGVExFZEJRVWNzUTBGQlFTeERRVUZCTEVWQlFVRXNSMEZCUVN4SlFVRkpMRU5CUVVNc1kwRkJZeXhOUVVGRkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeERRVUZCTEU5QlFVOHNRMEZCUXl4VlFVRlZMRU5CUVVNc1RVRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5zUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRk8wRkJRMlFzWjBKQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1FVRkRZaXhoUVVGQk8xbEJSVVFzVFVGQlRTeFRRVUZUTEVkQlFVY3NRMEZCUVN4RlFVRkJMRWRCUVVFc1NVRkJTU3hEUVVGRExGVkJRVlVzVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNRMEZCUnl4VlFVRlZMRU5CUVc5RExFTkJRVU03V1VGRGJrWXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSVHRCUVVOa0xHZENRVUZCTEU5QlFVOHNTVUZCU1N4RFFVRkRPMEZCUTJJc1lVRkJRVHRCUVVWRUxGbEJRVUVzVFVGQlRTeFhRVUZYTEVkQlFVY3NVMEZCVXl4RFFVRkRMRmRCUVZjc1EwRkJRenRCUVVNeFF5eFpRVUZCTEVsQlFVa3NRMEZCUTBFc2QwSkJRWE5DTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGRk8wRkJRelZETEdkQ1FVRkJMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zZDBSQlFYZEVMRmRCUVZjc1EwRkJRU3hEUVVGQkxFTkJRVWNzUTBGQlF5eERRVUZETzBGQlEzSkdMR2RDUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETzBGQlEySXNZVUZCUVR0QlFVVkVMRmxCUVVFc1RVRkJUU3haUVVGWkxFZEJRVWNzVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXp0WlFVTjBReXhKUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTzBGQlEycENMR2RDUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETzBGQlEySXNZVUZCUVR0QlFVVkVMRmxCUVVFc1RVRkJUU3hyUWtGQmEwSXNSMEZCUnl4WlFVRlpMRU5CUVVNc1NVRkJTU3hMUVVGTExGbEJRVmtzUjBGQlJ5eEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCUlRORkxGbEJRVUVzVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEZsQlFWa3NRMEZCUXl4MVFrRkJkVUlzUlVGQlJTeHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8wRkJReTlHTEZsQlFVRXNUVUZCVFN4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRmxCUVZrc1EwRkJReXgxUWtGQmRVSXNSVUZCUlN4clFrRkJhMElzUTBGQlF5eERRVUZETzBGQlF5OUdMRmxCUVVFc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExGbEJRVmtzUTBGQlF5eHZRa0ZCYjBJc1JVRkJSU3hyUWtGQmEwSXNRMEZCUXl4RFFVRkRPMEZCUXpWR0xGbEJRVUVzVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEZsQlFWa3NRMEZCUXl4clFrRkJhMElzUlVGQlJTeHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8wRkJSVEZHTEZsQlFVRXNTVUZCU1N4UFFVRlBMRU5CUVVNN1FVRkZXaXhaUVVGQkxFbEJRVWtzV1VGQldTeERRVUZETEVsQlFVa3NTMEZCU3l4WlFVRlpMRVZCUVVVN1FVRkRkRU1zWjBKQlFVRXNUMEZCVHl4SFFVRkhMRWxCUVVrc01FSkJRVEJDTEVOQlFVTXNWMEZCVnl4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTI1R0xHRkJRVUU3UVVGQlRTeHBRa0ZCUVR0QlFVTk1MR2RDUVVGQkxFOUJRVThzUjBGQlJ5eEpRVUZKTEc5Q1FVRnZRaXhEUVVGRExGRkJRVkVzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU14UlN4aFFVRkJPMWxCUlVRc1RVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4UlFVRlJMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRmNrUXNXVUZCUVN4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVFc1JVRkJRU3hIUVVGQkxGbEJRVmtzUTBGQlF5eHJRa0ZCYTBJc1RVRkJTU3hKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hEUVVGRExFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVWNlJpeFpRVUZCTEU5QlFVOHNUVUZCVFN4RFFVRkRPenRCUVVObUxFdEJRVUU3U1VGRlR5eHBRa0ZCYVVJc1EwRkRka0lzWTBGQmMwUXNSVUZEZEVRc2EwSkJRVEJDTEVWQlFVRTdPMEZCUlRGQ0xGRkJRVUVzU1VGQlNTeGhRVUZoTEVkQlFVY3NRMEZCUVN4RlFVRkJMRWRCUVVFc1kwRkJZeXhMUVVGa0xFbEJRVUVzU1VGQlFTeGpRVUZqTEV0QlFXUXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzWTBGQll5eERRVUZGTEdGQlFXRXNUVUZCU1N4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4SlFVRkpMRU5CUVVNN1FVRkRNVVFzVVVGQlFTeE5RVUZOTEZkQlFWY3NSMEZCUnl4RFFVRkJMRVZCUVVFc1IwRkJRU3hqUVVGakxFdEJRV1FzU1VGQlFTeEpRVUZCTEdOQlFXTXNTMEZCWkN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeGpRVUZqTEVOQlFVVXNWMEZCVnl4TlFVRkpMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMR3RDUVVGclFpeERRVUZET3pzN08xRkJTM1JGTEVsQlFVa3NZVUZCWVN4SFFVRkhMSFZDUVVGMVFpeEZRVUZGTzBGQlF6TkRMRmxCUVVFc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGRFZpeHhSMEZCY1Vjc1EwRkRkRWNzUTBGQlF6dFpRVU5HTEdGQlFXRXNSMEZCUnl4MVFrRkJkVUlzUTBGQlF6dEJRVU42UXl4VFFVRkJPMEZCUlVRc1VVRkJRU3hQUVVGUExFbEJRVWtzYVVKQlFXbENMRU5CUVVNc1lVRkJZU3hGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETzB0QlF6RkVPMEZCUldFc1NVRkJRU3hUUVVGVExFTkJRM0pDTEVsQlFWVXNSVUZEVml4UlFVRnhRaXhGUVVOeVFpeFhRVUZwUXl4RlFVRkJPenM3UVVGRmFrTXNXVUZCUVN4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFYZENMRU5CUVVNN08xbEJSMnhFTEUxQlFVMHNUVUZCVFN4SFFVRkhMRU5CUVVFc1JVRkJRU3hIUVVGQkxFbEJRVWtzUTBGQlF5eFZRVUZWTEUxQlFVRXNTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRU5CUVVVc1IwRkJORUlzUTBGQlF6dFpRVU0zUkN4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRMWdzWjBKQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1FVRkRZaXhoUVVGQk8wRkJSVVFzV1VGQlFTeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTTdXVUZETjBNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RlFVRkZPMEZCUTNSQ0xHZENRVUZCTEU5QlFVOHNTVUZCU1N4RFFVRkRPMEZCUTJJc1lVRkJRVHRCUVVWRUxGbEJRVUVzVFVGQlRTeHJRa0ZCYTBJc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXl4alFVRmpMRXRCUVVzc1dVRkJXU3hIUVVGSExFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZGTVVZc1dVRkJRU3hOUVVGTkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zYVVKQlFXbENMRU5CUVVNc2NVSkJRWEZDTEVWQlFVVXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF6dEJRVU51Unl4WlFVRkJMRTFCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4eFFrRkJjVUlzUlVGQlJTeHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8wRkJRMjVITEZsQlFVRXNUVUZCVFN4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMR2xDUVVGcFFpeERRVUZETEd0Q1FVRnJRaXhGUVVGRkxHdENRVUZyUWl4RFFVRkRMRU5CUVVNN1FVRkRhRWNzV1VGQlFTeE5RVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zWjBKQlFXZENMRVZCUVVVc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXp0QlFVVTVSaXhaUVVGQkxFbEJRVWtzVDBGQlR5eERRVUZETzBGQlJWb3NXVUZCUVN4SlFVRkpMR2xDUVVGcFFpeERRVUZETEdOQlFXTXNTMEZCU3l4WlFVRlpMRVZCUVVVN1FVRkRja1FzWjBKQlFVRXNUMEZCVHl4SFFVRkhMRWxCUVVrc01FSkJRVEJDTEVOQlFVTXNWMEZCVnl4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTI1R0xHRkJRVUU3UVVGQlRTeHBRa0ZCUVR0QlFVTk1MR2RDUVVGQkxFOUJRVThzUjBGQlJ5eEpRVUZKTEc5Q1FVRnZRaXhEUVVGRExGRkJRVkVzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU14UlN4aFFVRkJPMWxCUlVRc1RVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4UlFVRlJMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03V1VGRmNrUXNTVUZCU1N4cFFrRkJhVUlzUTBGQlF5eHhRa0ZCY1VJc1JVRkJSVHRCUVVNelF5eG5Ra0ZCUVN4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVTXpRaXhEUVVGQkxFVkJRVUVzUjBGQlFTeHBRa0ZCYVVJc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4RFFVRkRMRTFCUVVFc1NVRkJRU3hKUVVGQkxFVkJRVUVzUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVrc1IwRkJSeXhGUVVOb1JDeE5RVUZCTEdsQ1FVRnBRaXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRU5CUVVNc1RVRkJTU3hKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hKUVVGSkxFVkJRMnBFTEVWQlFVVXNRMEZCUVN4RlFVRkJMRWRCUVVFc2FVSkJRV2xDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUTBGQlF5eE5RVUZCTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZKTEVkQlFVY3NRMEZCUXl4RFFVTndSQ3hEUVVGRE8wRkJRMGdzWVVGQlFUdEJRVUZOTEdsQ1FVRkJPMmRDUVVOTUxFMUJRVTBzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVNdlF5eGhRVUZCT3p0QlFVZEVMRmxCUVVFc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFsQlJYSkRMRWxCUVVrc1QwRkJUeXhaUVVGWkxHOUNRVUZ2UWl4RlFVRkZPMEZCUXpORExHZENRVUZCTEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOMlF5eGhRVUZCTzBGQlJVUXNXVUZCUVN4UFFVRlBMRTFCUVUwc1EwRkJRenM3UVVGRFppeExRVUZCTzBsQlJVOHNhMEpCUVd0Q0xFTkJRM2hDTEdWQlFYVkVMRVZCUTNaRUxHdENRVUV3UWl4RlFVRkJPenRSUVVVeFFpeE5RVUZOTEV0QlFVc3NSMEZCUnl4bFFVRmxMRXRCUVVFc1NVRkJRU3hKUVVGbUxHVkJRV1VzUzBGQlppeExRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hsUVVGbExFTkJRVVVzUzBGQlN5eERRVUZETzFGQlEzSkRMRWxCUVVrc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4dFFrRkJiVUlzUlVGQlJUdEJRVU5xUkN4WlFVRkJMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zWjBWQlFXZEZMRU5CUVVNc1EwRkJRenRCUVVOb1JpeFRRVUZCTzBGQlJVUXNVVUZCUVN4SlFVRkpMRTFCUVUwc1IwRkJSeXhEUVVGQkxFVkJRVUVzUjBGQlFTeGxRVUZsTEV0QlFXWXNTVUZCUVN4SlFVRkJMR1ZCUVdVc1MwRkJaaXhMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4bFFVRmxMRU5CUVVVc1RVRkJUU3hOUVVGSkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxFbEJRVWtzUTBGQlF6dEJRVU0zUXl4UlFVRkJMRTFCUVUwc1RVRkJUU3hIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEdWQlFXVXNTMEZCWml4SlFVRkJMRWxCUVVFc1pVRkJaU3hMUVVGbUxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMR1ZCUVdVc1EwRkJSU3hOUVVGTkxFMUJRVWtzU1VGQlFTeEpRVUZCTEVWQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzYTBKQlFXdENMRU5CUVVNN096czdVVUZMTjBRc1NVRkJTU3hOUVVGTkxFZEJRVWNzZFVKQlFYVkNMRVZCUVVVN1FVRkRjRU1zV1VGQlFTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMR2RIUVVGblJ5eERRVUZETEVOQlFVTTdXVUZETDBjc1RVRkJUU3hIUVVGSExIVkNRVUYxUWl4RFFVRkRPMEZCUTJ4RExGTkJRVUU3UVVGRlJDeFJRVUZCTEU5QlFVOHNTVUZCU1N4cFFrRkJhVUlzUTBGQlF5eE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1MwRkRPVU03U1VGRlR5eGhRVUZoTEVOQlFVTXNVVUZCY1VJc1JVRkJSU3hQUVVGNVFpeEZRVUZCTzFGQlEzQkZMRTFCUVUwc1RVRkJUU3hIUVVGSExFbEJRVWtzVTBGQlV5eERRVUZETEZGQlFWRXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRSUVVWb1JDeEpRVUZKTEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVN1FVRkRia0lzV1VGQlFTeE5RVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkpMR1ZCUVdVc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU16UXl4WlFVRkJMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMWxCUXpWQ0xFMUJRVTBzUTBGQlF5eFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhYUVVGWExFTkJRVU03UVVGRGJFUXNVMEZCUVR0QlFVVkVMRkZCUVVFc1QwRkJUeXhOUVVGTkxFTkJRVU03UzBGRFpqdEJRVU5HT3p0QlEzUlJSRHRCUVVWQk96dEJRVVZITzBGQlExVXNUVUZCUVN4cFFrRkJhVUlzUjBGQlJ6dEJRVU12UWl4SlFVRkJMRWxCUVVrc1JVRkJSU3hOUVVGTk8wRkJRMW9zU1VGQlFTeFZRVUZWTEVWQlFVVXNXVUZCV1RzN08wRkRVREZDT3p0QlFVVkhPMEZCUTJFc1UwRkJRU3hWUVVGVkxFTkJRVU1zUjBGQlZ5eEZRVUZGTEVsQlFWa3NSVUZCUVRzN1FVRkZiRVFzU1VGQlFTeEpRVUZKTEU5QlFVOHNSMEZCUnl4TFFVRkxMRkZCUVZFc1NVRkJTU3hIUVVGSExFdEJRVXNzUlVGQlJUdEJRVUZGTEZGQlFVRXNUMEZCVHl4RlFVRkZMRU5CUVVNN08wRkJSM0pFTEVsQlFVRXNTVUZCU1N4bFFVRmxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVU3VVVGRGFrUXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zZDBKQlFYZENMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGNrUXNTMEZCUVRzN1FVRkhSQ3hKUVVGQkxFbEJRVWtzYTBKQlFXdENMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF6dEJRVUZGTEZGQlFVRXNUMEZCVHl4SFFVRkhMRU5CUVVNN08wRkJSemRETEVsQlFVRXNTVUZCU1N4bFFVRmxMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF6dEJRVUZGTEZGQlFVRXNUMEZCVHl4SFFVRkhMRU5CUVVNN08wRkJSekZETEVsQlFVRXNTVUZCU1N4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF6dEJRVUZGTEZGQlFVRXNUMEZCVHl4SFFVRkhMRU5CUVVNN08wbEJSM1pETEU5QlFVOHNTVUZCU1N4SFFVRkhMRWRCUVVjc1EwRkJRenRCUVVOd1FqczdRVU5hUVRzN1FVRkZSenRCUVVOSUxFMUJRVTBzYzBKQlFYTkNMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF5eExRVUZMTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVVMVJEczdRVUZGUnp0TlFVTlZMRzFDUVVGdFFpeERRVUZCTzBGQmRVSTVRaXhKUVVGQkxFbEJRVmNzU1VGQlNTeEhRVUZCT3p0QlFVVmlMRkZCUVVFc1QwRkJUeXh4UWtGQmNVSXNRMEZCUXp0TFFVTTVRanRKUVVWRUxGZEJRVzFDTEVOQlFVRXNUVUZCYTBJc1JVRkJSU3hQUVVGdlF5eEZRVUZCT3p0QlFVTjZSU3hSUVVGQkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRPMEZCUlhKQ0xGRkJRVUVzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEU5QlFVOHNTMEZCUVN4SlFVRkJMRWxCUVZBc1QwRkJUeXhMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRlFMRTlCUVU4c1EwRkJSU3hyUWtGQmEwSXNUVUZCUVN4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCU1N4SlFVRkpMRU5CUVVNN1FVRkRPVVFzVVVGQlFTeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFZEJRVWNzUTBGQlFTeEZRVUZCTEVkQlFVRXNUMEZCVHl4TFFVRlFMRWxCUVVFc1NVRkJRU3hQUVVGUExFdEJRVkFzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1QwRkJUeXhEUVVGRkxHbENRVUZwUWl4TlFVRkJMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkpMRU5CUVVNc0swSkJRU3RDTEVOQlFVTXNRMEZCUXp0QlFVTjZSaXhSUVVGQkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NRMEZCUVN4RlFVRkJMRWRCUVVFc1QwRkJUeXhMUVVGQkxFbEJRVUVzU1VGQlVDeFBRVUZQTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVkFzVDBGQlR5eERRVUZGTEZsQlFWa3NUVUZCUVN4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCU1N4SlFVRkpMRU5CUVVNN1MwRkRia1E3UVVGRldTeEpRVUZCTEZOQlFWTXNRMEZCUXl4SlFVRlZMRVZCUVVFN08wRkJReTlDTEZsQlFVRXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFZEJRVWNzVFVGQlRTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJRMnhFTEVOQlFVRXNRMEZCUVR0QlFVRkJMRXRCUVVFN1FVRkZZU3hKUVVGQkxFOUJRVThzUTBGQlF5eEpRVUZWTEVWQlFVRTdPMWxCUXpsQ0xFMUJRVTBzVVVGQlVTeEhRVUZITEUxQlFVMHNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU0xUXl4SlFVRkpMRkZCUVZFc1NVRkJTU3hKUVVGSkxFVkJRVVU3UVVGRGNFSXNaMEpCUVVFc1QwRkJUeXhSUVVGUkxFTkJRVU03UVVGRGFrSXNZVUZCUVR0WlFVVkVMRTFCUVUwc1VVRkJVU3hIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVNMVF5eEpRVUZKTEZGQlFWRXNTVUZCU1N4SlFVRkpMRVZCUVVVN1FVRkRjRUlzWjBKQlFVRXNUMEZCVHl4UlFVRlJMRU5CUVVNN1FVRkRha0lzWVVGQlFUdEJRVVZFTEZsQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1UwRkRZaXhEUVVGQkxFTkJRVUU3UVVGQlFTeExRVUZCTzBGQlJXRXNTVUZCUVN4VFFVRlRMRU5CUVVNc1NVRkJWU3hGUVVGQk96czdRVUZEYUVNc1dVRkJRU3hOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVhkQ0xFTkJRVU03TzBGQlIyeEVMRmxCUVVFc1RVRkJUU3hUUVVGVExFZEJRVWNzUTBGQlFTeERRVUZCTEVWQlFVRXNSMEZCUVN4SlFVRkpMRU5CUVVNc1kwRkJZeXhOUVVGRkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeERRVUZCTEU5QlFVOHNRMEZCUXl4VlFVRlZMRU5CUVVNc1RVRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5zUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRk8wRkJRMlFzWjBKQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1FVRkRZaXhoUVVGQk8xbEJSVVFzVFVGQlRTeFRRVUZUTEVkQlFVY3NRMEZCUVN4RlFVRkJMRWRCUVVFc1NVRkJTU3hEUVVGRExGVkJRVlVzVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNRMEZCUnl4VlFVRlZMRU5CUVc5RExFTkJRVU03V1VGRGJrWXNTVUZCU1N4VFFVRlRMRWxCUVVrc1NVRkJTU3hGUVVGRk8wRkJRM0pDTEdkQ1FVRkJMRTlCUVU4c1NVRkJTU3hEUVVGRE8wRkJRMklzWVVGQlFUdEJRVVZFTEZsQlFVRXNUVUZCVFN4WFFVRlhMRWRCUVVjc1UwRkJVeXhEUVVGRExGZEJRVmNzUTBGQlF6dEJRVU14UXl4WlFVRkJMRWxCUVVrc1EwRkJReXh6UWtGQmMwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1YwRkJWeXhEUVVGRExFVkJRVVU3UVVGRE5VTXNaMEpCUVVFc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eHpSRUZCYzBRc1YwRkJWeXhEUVVGQkxFTkJRVUVzUTBGQlJ5eERRVUZETEVOQlFVTTdRVUZEYmtZc1owSkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTTdRVUZEWWl4aFFVRkJPMEZCUlVRc1dVRkJRU3hOUVVGTkxGVkJRVlVzUjBGQlJ5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRPMWxCUTJ4RExFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVTdRVUZEWml4blFrRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF6dEJRVU5pTEdGQlFVRTdPMEZCUjBRc1dVRkJRU3hOUVVGTkxGVkJRVlVzUjBGQlJ5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RFFVRkRPMWxCUTNwRExFMUJRVTBzYjBKQlFXOUNMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03UVVGRE4wUXNXVUZCUVN4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVGRk8wRkJRM3BETEdkQ1FVRkJMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zZVVOQlFYbERMRlZCUVZVc1EwRkJRU3hwUWtGQlFTeERRVUZ0UWl4RFFVRkRMRU5CUVVNN1FVRkRla1lzWVVGQlFUdFpRVVZFTEVsQlFVa3NZMEZCWXl4SFFVRnBReXhUUVVGVExFTkJRVU03V1VGRE4wUXNTVUZCU1N4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVsQlFVa3NWVUZCVlN4RFFVRkRMR05CUVdNc1NVRkJTU3hKUVVGSkxFVkJRVVU3UVVGRGFFVXNaMEpCUVVFc1kwRkJZeXhIUVVGSExFTkJRVUVzUlVGQlFTeEpRVUZETEUxQlFVMHNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEZWQlFWVXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhOUVVGQkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGSkxGTkJRVk1zUTBGQlF6dEJRVU42Uml4aFFVRkJPMWxCUlVRc1QwRkJUenRCUVVOTUxHZENRVUZCTEZkQlFWY3NSVUZCUlN4SFFVRkhPMmRDUVVOb1FpeEpRVUZKTEVWQlFVVXNWVUZCVlN4RFFVRkRMRWxCUVVrN1owSkJRM0pDTEU5QlFVOHNSVUZCUlN4VlFVRlZMRU5CUVVNc1QwRkJUenRuUWtGRE0wSXNUMEZCVHl4RlFVRkZMRlZCUVZVc1EwRkJReXhQUVVGUE8yZENRVU16UWl4dlFrRkJiMElzUlVGQlJTeFZRVUZWTEVOQlFVTXNiMEpCUVc5Q08yZENRVU55UkN4clFrRkJhMElzUlVGQlJTeFZRVUZWTEVOQlFVTXNhMEpCUVd0Q08yZENRVU5xUkN4VlFVRlZMRVZCUVVVc1ZVRkJWU3hEUVVGRExGVkJRVlU3WjBKQlEycERMR3RDUVVGclFpeEZRVUZGTEZWQlFWVXNRMEZCUXl4clFrRkJhMEk3WjBKQlEycEVMR05CUVdNN1owSkJRMlFzVlVGQlZTeEZRVUZGTEZWQlFWVXNRMEZCUXl4VlFVRlZPMmRDUVVOcVF5eG5Ra0ZCWjBJc1JVRkJSU3hWUVVGVkxFTkJRVU1zWjBKQlFXZENPMmRDUVVNM1F5dzBRa0ZCTkVJc1JVRkJSU3hWUVVGVkxFTkJRVU1zTkVKQlFUUkNPMmRDUVVOeVJTd3lRa0ZCTWtJc1JVRkJSU3hWUVVGVkxFTkJRVU1zTWtKQlFUSkNPMmRDUVVOdVJTeGxRVUZsTEVWQlFVVXNWVUZCVlN4RFFVRkRMR1ZCUVdVN1owSkJRek5ETERoQ1FVRTRRaXhGUVVGRkxGVkJRVlVzUTBGQlF5dzRRa0ZCT0VJN1owSkJRM3BGTERCQ1FVRXdRaXhGUVVGRkxGVkJRVlVzUTBGQlF5d3dRa0ZCTUVJN1owSkJRMnBGTEdOQlFXTXNSVUZCUlN4VlFVRlZMRU5CUVVNc1kwRkJZenRuUWtGRGVrTXNiVUpCUVcxQ0xFVkJRVVVzVlVGQlZTeERRVUZETEcxQ1FVRnRRanRuUWtGRGJrUXNXVUZCV1N4RlFVRkZMRlZCUVZVc1EwRkJReXhaUVVGWk8yZENRVU55UXl4bFFVRmxMRVZCUVVVc1ZVRkJWU3hEUVVGRExHVkJRV1U3WVVGRE5VTXNRMEZCUXpzN1FVRkRTQ3hMUVVGQk8wRkJSV0VzU1VGQlFTeFRRVUZUTEVOQlFVTXNTVUZCVlN4RlFVRkJPenM3UVVGRGFFTXNXVUZCUVN4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFYZENMRU5CUVVNN08xbEJSMnhFTEUxQlFVMHNUVUZCVFN4SFFVRkhMRU5CUVVFc1JVRkJRU3hIUVVGQkxFbEJRVWtzUTBGQlF5eFZRVUZWTEUxQlFVRXNTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRU5CUVVVc1IwRkJORUlzUTBGQlF6dFpRVU0zUkN4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRMWdzWjBKQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1FVRkRZaXhoUVVGQk8wRkJSVVFzV1VGQlFTeE5RVUZOTEZWQlFWVXNSMEZCUnl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRE8xbEJReTlDTEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVN1FVRkRaaXhuUWtGQlFTeFBRVUZQTEVsQlFVa3NRMEZCUXp0QlFVTmlMR0ZCUVVFN08wRkJSMFFzV1VGQlFTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1JVRkJSVHRCUVVOMFFpeG5Ra0ZCUVN4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExEaEZRVUU0UlN4RFFVRkRMRU5CUVVNN1FVRkRha2NzWVVGQlFUczdRVUZIUkN4WlFVRkJMRWxCUVVrc1QwRkJlVU1zUTBGQlF6dEJRVU01UXl4WlFVRkJMRWxCUVVrc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4SlFVRkpMRlZCUVZVc1EwRkJReXhQUVVGUExFbEJRVWtzU1VGQlNTeEpRVUZKTEZWQlFWVXNRMEZCUXl4UFFVRlBMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVU3UVVGRGRFWXNaMEpCUVVFc1QwRkJUeXhIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc1UwRkJVeXhGUVVGRkxGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTXhSU3hoUVVGQk8xbEJSVVFzVDBGQlR6dEJRVU5NTEdkQ1FVRkJMRmRCUVZjc1JVRkJSU3hIUVVGSE8yZENRVU5vUWl4bFFVRmxMRVZCUVVVc1ZVRkJWU3hEUVVGRExHVkJRV1U3WjBKQlF6TkRMRTFCUVUwc1JVRkJSU3hWUVVGVkxFTkJRVU1zVFVGQlRUdG5Ra0ZEZWtJc2IwSkJRVzlDTEVWQlFVVXNWVUZCVlN4RFFVRkRMRzlDUVVGdlFqdG5Ra0ZEY2tRc2EwSkJRV3RDTEVWQlFVVXNWVUZCVlN4RFFVRkRMR3RDUVVGclFqdG5Ra0ZEYWtRc1YwRkJWeXhGUVVGRkxGVkJRVlVzUTBGQlF5eFhRVUZYTzJkQ1FVTnVReXhsUVVGbExFVkJRVVVzVlVGQlZTeERRVUZETEdWQlFXVTdaMEpCUXpORExHdENRVUZyUWl4RlFVRkZMRlZCUVZVc1EwRkJReXhyUWtGQmEwSTdaMEpCUTJwRUxGTkJRVk1zUlVGQlJTeFZRVUZWTEVOQlFVTXNVMEZCVXp0blFrRkRMMElzWjBKQlFXZENMRVZCUVVVc1ZVRkJWU3hEUVVGRExHZENRVUZuUWp0QlFVTTNReXhuUWtGQlFTeFBRVUZQTEVWQlFVVXNUMEZCVHl4TFFVRkJMRWxCUVVFc1NVRkJVQ3hQUVVGUExFdEJRVkFzUzBGQlFTeERRVUZCTEVkQlFVRXNUMEZCVHl4SFFVRkpMRk5CUVZNN1owSkJRemRDTEV0QlFVc3NSVUZCUlN4VlFVRlZMRU5CUVVNc1MwRkJTenRuUWtGRGRrSXNUMEZCVHl4RlFVRkZMRlZCUVZVc1EwRkJReXhQUVVGUE8yZENRVU16UWl4cFFrRkJhVUlzUlVGQlJTeFZRVUZWTEVOQlFVTXNhVUpCUVdsQ08yRkJRMmhFTEVOQlFVTTdPMEZCUTBnc1MwRkJRVHRCUVVWaExFbEJRVUVzYVVKQlFXbENMRU5CUVVNc1MwRkJZU3hGUVVGQk96czdRVUZETTBNc1dVRkJRU3hOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVhkQ0xFTkJRVU03V1VGRmJFUXNUVUZCVFN4TlFVRk5MRWRCUVVjc1EwRkJRU3hGUVVGQkxFZEJRVUVzU1VGQlNTeERRVUZETEUxQlFVMHNUVUZCUVN4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1EwRkJSeXhMUVVGTExFTkJRVU1zUTBGQlF6dFpRVVZ3UXl4SlFVRkpMRTFCUVUwc1NVRkJTU3hKUVVGSkxFVkJRVVU3UVVGRGJFSXNaMEpCUVVFc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGRFZpdzRRMEZCT0VNc1MwRkJTeXhEUVVGQkxHOUVRVUZCTEVOQlFYTkVMRU5CUXpGSExFTkJRVU03UVVGRFJpeG5Ra0ZCUVN4UFFVRlBMRWxCUVVrc1EwRkJRenRCUVVOaUxHRkJRVUU3T3p0QlFVdEVMRmxCUVVFc1NVRkJTU3hUUVVGVExFZEJRWFZDTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNN08wRkJSeTlETEZsQlFVRXNTVUZCU1N4TlFVRk5MRU5CUVVNc1ZVRkJWU3hKUVVGSkxFbEJRVWtzUlVGQlJUdEJRVU0zUWl4blFrRkJRU3hOUVVGTkxGVkJRVlVzUjBGQlJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1lVRkJZU3hEUVVGRExGbEJRVmtzUlVGQlJTeE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1FVRkRjRVlzWjBKQlFVRXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hKUVVGSkxFTkJRVU1zUTBGQlF5eFZRVUZWTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSU3hOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTXZSQ3huUWtGQlFTeFRRVUZUTEVkQlFVY3NSMEZCUnl4RFFVRkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU4yUXl4aFFVRkJPMWxCUlVRc1NVRkJTU3hUUVVGVExFbEJRVWtzU1VGQlNTeEZRVUZGTzBGQlEzSkNMR2RDUVVGQkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlExWXNPRU5CUVRoRExFdEJRVXNzUTBGQlFTdzJSRUZCUVN4RFFVRXJSQ3hEUVVOdVNDeERRVUZETzBGQlEwWXNaMEpCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVU03UVVGRFlpeGhRVUZCTzBGQlJVUXNXVUZCUVN4TlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXp0WlFVTjJReXhQUVVGUExFMUJRVTBzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1UwRkJVeXhGUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZqTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNTMEZCU3l4TFFVRkpPMEZCUTNSSExHZENRVUZCTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGNrSXNaMEpCUVVFc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eDFSRUZCZFVRc1EwRkJReXhEUVVGRE8wRkJRM1JGTEdkQ1FVRkJMRTlCUVU4c1NVRkJTU3hEUVVGRE8wRkJRMlFzWVVGQlF5eERRVUZETEVOQlFVTTdPMEZCUTBvc1MwRkJRVHRCUVVOR096dEJReTlOUkRzN08wRkJSMGM3VFVGRFZTeFBRVUZQTEVOQlFVRTdRVUZ6UTJ4Q096czdPMEZCU1VjN1FVRkRTQ3hKUVVGQkxGZEJRVUVzUTBGQmJVSXNUVUZCZVVJc1JVRkJRVHRCUVVNeFF5eFJRVUZCTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dEJRVU14UWl4UlFVRkJMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXp0QlFVTjRRaXhSUVVGQkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJRenRCUVVOb1F5eFJRVUZCTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUjBGQlJ5eE5RVUZOTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU03UVVGRGJFUXNVVUZCUVN4SlFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTTdRVUZEZEVNc1VVRkJRU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNN1MwRkROMEk3UVVGRlJEczdPenM3TzBGQlRVYzdRVUZEU1N4SlFVRkJMRTFCUVUwc1EwRkJReXhMUVVGaExFVkJRVUU3UVVGRGVrSXNVVUZCUVN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETzFGQlJYWkNMRWxCUVVrc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJUdEJRVU5tTEZsQlFVRXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdRVUZETTBJc1UwRkJRVHRSUVVWRUxFbEJRVWtzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhGUVVGRk8wRkJRekZDTEZsQlFVRXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUTJwRExGTkJRVUU3UzBGRFJqdEJRVU5HT3p0TlEzWkZXU3h0UWtGQmJVSXNRMEZCUVR0QlFVTTVRaXhKUVVGQkxFbEJRVmNzU1VGQlNTeEhRVUZCT3p0QlFVVmlMRkZCUVVFc1QwRkJUeXhWUVVGVkxFTkJRVU03UzBGRGJrSTdTVUZWUkN4WFFVRnRRaXhEUVVGQkxFMUJRV3RDTEVWQlFVVXNUMEZCYjBNc1JVRkJRVHM3UVVGRGVrVXNVVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF6dFJRVVZ5UWl4TlFVRk5MRlZCUVZVc1IwRkJSeXhQUVVGUExFdEJRVUVzU1VGQlFTeEpRVUZRTEU5QlFVOHNTMEZCVUN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeFBRVUZQTEVOQlFVVXNWVUZCVlN4RFFVRkRPMUZCUTNaRExFMUJRVTBzYjBKQlFXOUNMRWRCUVVjc1QwRkJUeXhMUVVGQkxFbEJRVUVzU1VGQlVDeFBRVUZQTEV0QlFWQXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzVDBGQlR5eERRVUZGTEc5Q1FVRnZRaXhEUVVGRE8wRkJSVE5FTEZGQlFVRXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEhRVUZITEVOQlFVRXNSVUZCUVN4SFFVRkJMRTlCUVU4c1lVRkJVQ3hQUVVGUExFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVZBc1QwRkJUeXhEUVVGRkxHZENRVUZuUWl4TlFVRkpMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRWxCUVVrc2VVSkJRWGxDTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRNMFlzVVVGQlFTeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFZEJRVWNzUTBGQlFTeEZRVUZCTEVkQlFVRXNUMEZCVHl4aFFVRlFMRTlCUVU4c1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCVUN4UFFVRlBMRU5CUVVVc2FVSkJRV2xDTEUxQlFVa3NTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNTVUZCU1N3d1FrRkJNRUlzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTTVSaXhSUVVGQkxFbEJRVWtzUTBGQlF5eGpRVUZqTzBGQlEycENMRmxCUVVFc1EwRkJRU3hGUVVGQkxFZEJRVUVzVDBGQlR5eExRVUZRTEVsQlFVRXNTVUZCUVN4UFFVRlBMSFZDUVVGUUxFOUJRVThzUTBGQlJTeGpRVUZqTEUxQlFVa3NTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNTVUZCU1N4MVFrRkJkVUlzUTBGQlF5eE5RVUZOTEVWQlFVVXNSVUZCUlN4VlFVRlZMRVZCUVVVc2IwSkJRVzlDTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTNaSExFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NRMEZCUVN4RlFVRkJMRWRCUVVFc1QwRkJUeXhMUVVGUUxFbEJRVUVzU1VGQlFTeFBRVUZQTEhWQ1FVRlFMRTlCUVU4c1EwRkJSU3haUVVGWkxFMUJRVWtzU1VGQlFTeEpRVUZCTEVWQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzU1VGQlNTeHhRa0ZCY1VJc1EwRkJReXhOUVVGTkxFVkJRVVVzUlVGQlJTeFZRVUZWTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUXk5R0xGRkJRVUVzU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4RFFVRkJMRVZCUVVFc1IwRkJRU3hQUVVGUExHRkJRVkFzVDBGQlR5eExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGUUxFOUJRVThzUTBGQlJTeFZRVUZWTEUxQlFVa3NTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNTVUZCU1N4dFFrRkJiVUlzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0TFFVTXhSVHRCUVVWWkxFbEJRVUVzVTBGQlV5eERRVUZETEVsQlFWVXNSVUZCUVRzN1dVRkRMMElzVFVGQlRTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU4wUXl4TlFVRk5MRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUXpGRExFMUJRVTBzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTTFReXhOUVVGTkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRM2hETEUxQlFVMHNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVVM1F5eFpRVUZCTEUxQlFVMHNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQmVVSXNRMEZCUXp0QlFVTnlSQ3haUVVGQkxFMUJRVTBzVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1YwRkJhVU1zUTBGQlF6czdPMWxCU1dwRkxFbEJRVWtzU1VGQlNTeEpRVUZKTEZGQlFWRXNSVUZCUlR0QlFVTndRaXhuUWtGQlFTeE5RVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRTlCUVU4c1EwRkJRenR2UWtGRE1VSXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTE8wRkJRMnBDTEc5Q1FVRkJMR2xDUVVGcFFpeEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc2IwSkJRVzlDTzBGQlEzSkVMRzlDUVVGQkxGZEJRVmNzUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMR05CUVdNN2IwSkJRM3BETEZGQlFWRTdRVUZEVWl4dlFrRkJRU3hOUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRPMjlDUVVNdlFpeEpRVUZKTzBGQlEwd3NhVUpCUVVFc1EwRkJReXhEUVVGRE8wRkJSVWdzWjBKQlFVRXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETzBGQlEycERMR0ZCUVVFN1UwRkRSaXhEUVVGQkxFTkJRVUU3UVVGQlFTeExRVUZCTzBGQlEwWTdPenM3SW4wPVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgVlJNQ29yZSB9IGZyb20gJ0BwaXhpdi90aHJlZS12cm0tY29yZSc7XG5pbXBvcnQgeyBWUk1Ob2RlQ29uc3RyYWludE1hbmFnZXIgfSBmcm9tICdAcGl4aXYvdGhyZWUtdnJtLW5vZGUtY29uc3RyYWludCc7XG5pbXBvcnQgeyBWUk1TcHJpbmdCb25lTWFuYWdlciB9IGZyb20gJ0BwaXhpdi90aHJlZS12cm0tc3ByaW5nYm9uZSc7XG5pbXBvcnQgeyBWUk1QYXJhbWV0ZXJzIH0gZnJvbSAnLi9WUk1QYXJhbWV0ZXJzJztcblxuLyoqXG4gKiBBIGNsYXNzIHRoYXQgcmVwcmVzZW50cyBhIHNpbmdsZSBWUk0gbW9kZWwuXG4gKi9cbmV4cG9ydCBjbGFzcyBWUk0gZXh0ZW5kcyBWUk1Db3JlIHtcbiAgLyoqXG4gICAqIENvbnRhaW5zIG1hdGVyaWFscyBvZiB0aGUgVlJNLlxuICAgKiBgdXBkYXRlYCBtZXRob2Qgb2YgdGhlc2UgbWF0ZXJpYWxzIHdpbGwgYmUgY2FsbGVkIHZpYSBpdHMge0BsaW5rIFZSTS51cGRhdGV9IG1ldGhvZC5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBtYXRlcmlhbHM/OiBUSFJFRS5NYXRlcmlhbFtdO1xuXG4gIC8qKlxuICAgKiBBIHtAbGluayBWUk1TcHJpbmdCb25lTWFuYWdlcn0gbWFuaXB1bGF0ZXMgYWxsIHNwcmluZyBib25lcyBhdHRhY2hlZCBvbiB0aGUgVlJNLlxuICAgKiBVc3VhbGx5IHlvdSBkb24ndCBoYXZlIHRvIGNhcmUgYWJvdXQgdGhpcyBwcm9wZXJ0eS5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBzcHJpbmdCb25lTWFuYWdlcj86IFZSTVNwcmluZ0JvbmVNYW5hZ2VyO1xuXG4gIC8qKlxuICAgKiBBIHtAbGluayBWUk1Ob2RlQ29uc3RyYWludE1hbmFnZXJ9IG1hbmlwdWxhdGVzIGFsbCBjb25zdHJhaW50cyBhdHRhY2hlZCBvbiB0aGUgVlJNLlxuICAgKiBVc3VhbGx5IHlvdSBkb24ndCBoYXZlIHRvIGNhcmUgYWJvdXQgdGhpcyBwcm9wZXJ0eS5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBub2RlQ29uc3RyYWludE1hbmFnZXI/OiBWUk1Ob2RlQ29uc3RyYWludE1hbmFnZXI7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBWUk0gaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgW1tWUk1QYXJhbWV0ZXJzXV0gdGhhdCByZXByZXNlbnRzIGNvbXBvbmVudHMgb2YgdGhlIFZSTVxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHBhcmFtczogVlJNUGFyYW1ldGVycykge1xuICAgIHN1cGVyKHBhcmFtcyk7XG5cbiAgICB0aGlzLm1hdGVyaWFscyA9IHBhcmFtcy5tYXRlcmlhbHM7XG4gICAgdGhpcy5zcHJpbmdCb25lTWFuYWdlciA9IHBhcmFtcy5zcHJpbmdCb25lTWFuYWdlcjtcbiAgICB0aGlzLm5vZGVDb25zdHJhaW50TWFuYWdlciA9IHBhcmFtcy5ub2RlQ29uc3RyYWludE1hbmFnZXI7XG4gIH1cblxuICAvKipcbiAgICogKipZb3UgbmVlZCB0byBjYWxsIHRoaXMgb24geW91ciB1cGRhdGUgbG9vcC4qKlxuICAgKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHVwZGF0ZXMgZXZlcnkgVlJNIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEBwYXJhbSBkZWx0YSBkZWx0YVRpbWVcbiAgICovXG4gIHB1YmxpYyB1cGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWQge1xuICAgIHN1cGVyLnVwZGF0ZShkZWx0YSk7XG5cbiAgICBpZiAodGhpcy5ub2RlQ29uc3RyYWludE1hbmFnZXIpIHtcbiAgICAgIHRoaXMubm9kZUNvbnN0cmFpbnRNYW5hZ2VyLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNwcmluZ0JvbmVNYW5hZ2VyKSB7XG4gICAgICB0aGlzLnNwcmluZ0JvbmVNYW5hZ2VyLnVwZGF0ZShkZWx0YSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubWF0ZXJpYWxzKSB7XG4gICAgICB0aGlzLm1hdGVyaWFscy5mb3JFYWNoKChtYXRlcmlhbDogYW55KSA9PiB7XG4gICAgICAgIGlmIChtYXRlcmlhbC51cGRhdGUpIHtcbiAgICAgICAgICBtYXRlcmlhbC51cGRhdGUoZGVsdGEpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19lc0RlY29yYXRlKGN0b3IsIGRlc2NyaXB0b3JJbiwgZGVjb3JhdG9ycywgY29udGV4dEluLCBpbml0aWFsaXplcnMsIGV4dHJhSW5pdGlhbGl6ZXJzKSB7XHJcbiAgICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cclxuICAgIHZhciBraW5kID0gY29udGV4dEluLmtpbmQsIGtleSA9IGtpbmQgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDoga2luZCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCI7XHJcbiAgICB2YXIgdGFyZ2V0ID0gIWRlc2NyaXB0b3JJbiAmJiBjdG9yID8gY29udGV4dEluW1wic3RhdGljXCJdID8gY3RvciA6IGN0b3IucHJvdG90eXBlIDogbnVsbDtcclxuICAgIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xyXG4gICAgdmFyIF8sIGRvbmUgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbikgY29udGV4dFtwXSA9IHAgPT09IFwiYWNjZXNzXCIgPyB7fSA6IGNvbnRleHRJbltwXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbi5hY2Nlc3MpIGNvbnRleHQuYWNjZXNzW3BdID0gY29udGV4dEluLmFjY2Vzc1twXTtcclxuICAgICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAoMCwgZGVjb3JhdG9yc1tpXSkoa2luZCA9PT0gXCJhY2Nlc3NvclwiID8geyBnZXQ6IGRlc2NyaXB0b3IuZ2V0LCBzZXQ6IGRlc2NyaXB0b3Iuc2V0IH0gOiBkZXNjcmlwdG9yW2tleV0sIGNvbnRleHQpO1xyXG4gICAgICAgIGlmIChraW5kID09PSBcImFjY2Vzc29yXCIpIHtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xyXG4gICAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuZ2V0KSkgZGVzY3JpcHRvci5nZXQgPSBfO1xyXG4gICAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xyXG4gICAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuaW5pdCkpIGluaXRpYWxpemVycy5wdXNoKF8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgaWYgKGtpbmQgPT09IFwiZmllbGRcIikgaW5pdGlhbGl6ZXJzLnB1c2goXyk7XHJcbiAgICAgICAgICAgIGVsc2UgZGVzY3JpcHRvcltrZXldID0gXztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGFyZ2V0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSwgZGVzY3JpcHRvcik7XHJcbiAgICBkb25lID0gdHJ1ZTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XHJcbiAgICB2YXIgdXNlVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5pdGlhbGl6ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVzZVZhbHVlID8gdmFsdWUgOiB2b2lkIDA7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wcm9wS2V5KHgpIHtcclxuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcclxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikgbmFtZSA9IG5hbWUuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQobmFtZS5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIjtcclxuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwgXCJuYW1lXCIsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogcHJlZml4ID8gXCJcIi5jb25jYXQocHJlZml4LCBcIiBcIiwgbmFtZSkgOiBuYW1lIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbn0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XHJcbiAgICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcclxuICAgIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XHJcbn1cclxuIiwiLyohXG4gKiBAcGl4aXYvdGhyZWUtdnJtLW1hdGVyaWFscy1tdG9vbiB2Mi4wLjFcbiAqIE1Ub29uICh0b29uIG1hdGVyaWFsKSBtb2R1bGUgZm9yIEBwaXhpdi90aHJlZS12cm1cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAtMjAyMyBwaXhpdiBJbmMuXG4gKiBAcGl4aXYvdGhyZWUtdnJtLW1hdGVyaWFscy1tdG9vbiBpcyBkaXN0cmlidXRlZCB1bmRlciBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BpeGl2L3RocmVlLXZybS9ibG9iL3JlbGVhc2UvTElDRU5TRVxuICovXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxuXG52YXIgdmVydGV4U2hhZGVyID0gXCIvLyAjZGVmaW5lIFBIT05HXFxuXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuXFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcbiAgdmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG5cXG4vLyAjaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2lmZGVmIE1UT09OX1VTRV9VVlxcbiAgdmFyeWluZyB2ZWMyIHZVdjtcXG5cXG4gIC8vIENPTVBBVDogcHJlLXIxNTEgdXNlcyBhIGNvbW1vbiB1dlRyYW5zZm9ybVxcbiAgI2lmIFRIUkVFX1ZSTV9USFJFRV9SRVZJU0lPTiA8IDE1MVxcbiAgICB1bmlmb3JtIG1hdDMgdXZUcmFuc2Zvcm07XFxuICAjZW5kaWZcXG4jZW5kaWZcXG5cXG4vLyAjaW5jbHVkZSA8dXYyX3BhcnNfdmVydGV4Plxcbi8vIENPTUFQVDogcHJlLXIxNTEgdXNlcyB1djIgZm9yIGxpZ2h0TWFwIGFuZCBhb01hcFxcbiNpZiBUSFJFRV9WUk1fVEhSRUVfUkVWSVNJT04gPCAxNTFcXG4gICNpZiBkZWZpbmVkKCBVU0VfTElHSFRNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU9NQVAgKVxcbiAgICBhdHRyaWJ1dGUgdmVjMiB1djI7XFxuICAgIHZhcnlpbmcgdmVjMiB2VXYyO1xcbiAgICB1bmlmb3JtIG1hdDMgdXYyVHJhbnNmb3JtO1xcbiAgI2VuZGlmXFxuI2VuZGlmXFxuXFxuLy8gI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4vLyAjaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG5cXG4jaWZkZWYgVVNFX09VVExJTkVXSURUSE1VTFRJUExZVEVYVFVSRVxcbiAgdW5pZm9ybSBzYW1wbGVyMkQgb3V0bGluZVdpZHRoTXVsdGlwbHlUZXh0dXJlO1xcbiAgdW5pZm9ybSBtYXQzIG91dGxpbmVXaWR0aE11bHRpcGx5VGV4dHVyZVV2VHJhbnNmb3JtO1xcbiNlbmRpZlxcblxcbnVuaWZvcm0gZmxvYXQgb3V0bGluZVdpZHRoRmFjdG9yO1xcblxcbnZvaWQgbWFpbigpIHtcXG5cXG4gIC8vICNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuICAjaWZkZWYgTVRPT05fVVNFX1VWXFxuICAgIC8vIENPTVBBVDogcHJlLXIxNTEgdXNlcyBhIGNvbW1vbiB1dlRyYW5zZm9ybVxcbiAgICAjaWYgVEhSRUVfVlJNX1RIUkVFX1JFVklTSU9OID49IDE1MVxcbiAgICAgIHZVdiA9IHV2O1xcbiAgICAjZWxzZVxcbiAgICAgIHZVdiA9ICggdXZUcmFuc2Zvcm0gKiB2ZWMzKCB1diwgMSApICkueHk7XFxuICAgICNlbmRpZlxcbiAgI2VuZGlmXFxuXFxuICAvLyAjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG4gIC8vIENPTUFQVDogcHJlLXIxNTEgdXNlcyB1djIgZm9yIGxpZ2h0TWFwIGFuZCBhb01hcFxcbiAgI2lmIFRIUkVFX1ZSTV9USFJFRV9SRVZJU0lPTiA8IDE1MVxcbiAgICAjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG4gICAgICB2VXYyID0gKCB1djJUcmFuc2Zvcm0gKiB2ZWMzKCB1djIsIDEgKSApLnh5O1xcbiAgICAjZW5kaWZcXG4gICNlbmRpZlxcblxcbiAgI2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXG4gICNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuICAjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcbiAgI2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG4gICNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXG4gIC8vIHdlIG5lZWQgdGhpcyB0byBjb21wdXRlIHRoZSBvdXRsaW5lIHByb3Blcmx5XFxuICBvYmplY3ROb3JtYWwgPSBub3JtYWxpemUoIG9iamVjdE5vcm1hbCApO1xcblxcbiAgI2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcbiAgI2lmbmRlZiBGTEFUX1NIQURFRCAvLyBOb3JtYWwgY29tcHV0ZWQgd2l0aCBkZXJpdmF0aXZlcyB3aGVuIEZMQVRfU0hBREVEXFxuICAgIHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuICAjZW5kaWZcXG5cXG4gICNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFxuICAjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcbiAgI2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG4gIC8vICNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcbiAgI2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcbiAgI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG4gICNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcbiAgdlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuXFxuICBmbG9hdCBvdXRsaW5lVGV4ID0gMS4wO1xcblxcbiAgI2lmZGVmIE9VVExJTkVcXG4gICAgI2lmZGVmIFVTRV9PVVRMSU5FV0lEVEhNVUxUSVBMWVRFWFRVUkVcXG4gICAgICB2ZWMyIG91dGxpbmVXaWR0aE11bHRpcGx5VGV4dHVyZVV2ID0gKCBvdXRsaW5lV2lkdGhNdWx0aXBseVRleHR1cmVVdlRyYW5zZm9ybSAqIHZlYzMoIHZVdiwgMSApICkueHk7XFxuICAgICAgb3V0bGluZVRleCA9IHRleHR1cmUyRCggb3V0bGluZVdpZHRoTXVsdGlwbHlUZXh0dXJlLCBvdXRsaW5lV2lkdGhNdWx0aXBseVRleHR1cmVVdiApLmc7XFxuICAgICNlbmRpZlxcblxcbiAgICAjaWZkZWYgT1VUTElORV9XSURUSF9XT1JMRFxcbiAgICAgIGZsb2F0IHdvcmxkTm9ybWFsTGVuZ3RoID0gbGVuZ3RoKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcbiAgICAgIHZlYzMgb3V0bGluZU9mZnNldCA9IG91dGxpbmVXaWR0aEZhY3RvciAqIG91dGxpbmVUZXggKiB3b3JsZE5vcm1hbExlbmd0aCAqIG9iamVjdE5vcm1hbDtcXG4gICAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBvdXRsaW5lT2Zmc2V0ICsgdHJhbnNmb3JtZWQsIDEuMCApO1xcbiAgICAjZW5kaWZcXG5cXG4gICAgI2lmZGVmIE9VVExJTkVfV0lEVEhfU0NSRUVOXFxuICAgICAgdmVjMyBjbGlwTm9ybWFsID0gKCBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggb2JqZWN0Tm9ybWFsLCAwLjAgKSApLnh5ejtcXG4gICAgICB2ZWMyIHByb2plY3RlZE5vcm1hbCA9IG5vcm1hbGl6ZSggY2xpcE5vcm1hbC54eSApO1xcbiAgICAgIHByb2plY3RlZE5vcm1hbC54ICo9IHByb2plY3Rpb25NYXRyaXhbIDAgXS54IC8gcHJvamVjdGlvbk1hdHJpeFsgMSBdLnk7XFxuICAgICAgZ2xfUG9zaXRpb24ueHkgKz0gMi4wICogb3V0bGluZVdpZHRoRmFjdG9yICogb3V0bGluZVRleCAqIHByb2plY3RlZE5vcm1hbC54eTtcXG4gICAgI2VuZGlmXFxuXFxuICAgIGdsX1Bvc2l0aW9uLnogKz0gMUUtNiAqIGdsX1Bvc2l0aW9uLnc7IC8vIGFudGktYXJ0aWZhY3QgbWFnaWNcXG4gICNlbmRpZlxcblxcbiAgI2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG4gIC8vICNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxcbiAgI2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuICAjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG5cXG59XCI7XG5cbnZhciBmcmFnbWVudFNoYWRlciA9IFwiLy8gI2RlZmluZSBQSE9OR1xcblxcbnVuaWZvcm0gdmVjMyBsaXRGYWN0b3I7XFxuXFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcblxcbnVuaWZvcm0gdmVjMyBzaGFkZUNvbG9yRmFjdG9yO1xcbiNpZmRlZiBVU0VfU0hBREVNVUxUSVBMWVRFWFRVUkVcXG4gIHVuaWZvcm0gc2FtcGxlcjJEIHNoYWRlTXVsdGlwbHlUZXh0dXJlO1xcbiAgdW5pZm9ybSBtYXQzIHNoYWRlTXVsdGlwbHlUZXh0dXJlVXZUcmFuc2Zvcm07XFxuI2VuZGlmXFxuXFxudW5pZm9ybSBmbG9hdCBzaGFkaW5nU2hpZnRGYWN0b3I7XFxudW5pZm9ybSBmbG9hdCBzaGFkaW5nVG9vbnlGYWN0b3I7XFxuXFxuI2lmZGVmIFVTRV9TSEFESU5HU0hJRlRURVhUVVJFXFxuICB1bmlmb3JtIHNhbXBsZXIyRCBzaGFkaW5nU2hpZnRUZXh0dXJlO1xcbiAgdW5pZm9ybSBtYXQzIHNoYWRpbmdTaGlmdFRleHR1cmVVdlRyYW5zZm9ybTtcXG4gIHVuaWZvcm0gZmxvYXQgc2hhZGluZ1NoaWZ0VGV4dHVyZVNjYWxlO1xcbiNlbmRpZlxcblxcbnVuaWZvcm0gZmxvYXQgZ2lFcXVhbGl6YXRpb25GYWN0b3I7XFxuXFxudW5pZm9ybSB2ZWMzIHBhcmFtZXRyaWNSaW1Db2xvckZhY3RvcjtcXG4jaWZkZWYgVVNFX1JJTU1VTFRJUExZVEVYVFVSRVxcbiAgdW5pZm9ybSBzYW1wbGVyMkQgcmltTXVsdGlwbHlUZXh0dXJlO1xcbiAgdW5pZm9ybSBtYXQzIHJpbU11bHRpcGx5VGV4dHVyZVV2VHJhbnNmb3JtO1xcbiNlbmRpZlxcbnVuaWZvcm0gZmxvYXQgcmltTGlnaHRpbmdNaXhGYWN0b3I7XFxudW5pZm9ybSBmbG9hdCBwYXJhbWV0cmljUmltRnJlc25lbFBvd2VyRmFjdG9yO1xcbnVuaWZvcm0gZmxvYXQgcGFyYW1ldHJpY1JpbUxpZnRGYWN0b3I7XFxuXFxuI2lmZGVmIFVTRV9NQVRDQVBURVhUVVJFXFxuICB1bmlmb3JtIHZlYzMgbWF0Y2FwRmFjdG9yO1xcbiAgdW5pZm9ybSBzYW1wbGVyMkQgbWF0Y2FwVGV4dHVyZTtcXG4gIHVuaWZvcm0gbWF0MyBtYXRjYXBUZXh0dXJlVXZUcmFuc2Zvcm07XFxuI2VuZGlmXFxuXFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gZmxvYXQgZW1pc3NpdmVJbnRlbnNpdHk7XFxuXFxudW5pZm9ybSB2ZWMzIG91dGxpbmVDb2xvckZhY3RvcjtcXG51bmlmb3JtIGZsb2F0IG91dGxpbmVMaWdodGluZ01peEZhY3RvcjtcXG5cXG4jaWZkZWYgVVNFX1VWQU5JTUFUSU9OTUFTS1RFWFRVUkVcXG4gIHVuaWZvcm0gc2FtcGxlcjJEIHV2QW5pbWF0aW9uTWFza1RleHR1cmU7XFxuICB1bmlmb3JtIG1hdDMgdXZBbmltYXRpb25NYXNrVGV4dHVyZVV2VHJhbnNmb3JtO1xcbiNlbmRpZlxcblxcbnVuaWZvcm0gZmxvYXQgdXZBbmltYXRpb25TY3JvbGxYT2Zmc2V0O1xcbnVuaWZvcm0gZmxvYXQgdXZBbmltYXRpb25TY3JvbGxZT2Zmc2V0O1xcbnVuaWZvcm0gZmxvYXQgdXZBbmltYXRpb25Sb3RhdGlvblBoYXNlO1xcblxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50Plxcblxcbi8vICNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpZiAoIGRlZmluZWQoIE1UT09OX1VTRV9VViApICYmICFkZWZpbmVkKCBNVE9PTl9VVlNfVkVSVEVYX09OTFkgKSApXFxuICB2YXJ5aW5nIHZlYzIgdlV2O1xcbiNlbmRpZlxcblxcbi8vICNpbmNsdWRlIDx1djJfcGFyc19mcmFnbWVudD5cXG4vLyBDT01BUFQ6IHByZS1yMTUxIHVzZXMgdXYyIGZvciBsaWdodE1hcCBhbmQgYW9NYXBcXG4jaWYgVEhSRUVfVlJNX1RIUkVFX1JFVklTSU9OIDwgMTUxXFxuICAjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG4gICAgdmFyeWluZyB2ZWMyIHZVdjI7XFxuICAjZW5kaWZcXG4jZW5kaWZcXG5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuXFxuI2lmZGVmIFVTRV9NQVBcXG4gIHVuaWZvcm0gbWF0MyBtYXBVdlRyYW5zZm9ybTtcXG4jZW5kaWZcXG5cXG4vLyAjaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG5cXG4jaWYgVEhSRUVfVlJNX1RIUkVFX1JFVklTSU9OID49IDEzMlxcbiAgI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxcbiNlbmRpZlxcblxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50Plxcbi8vICNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcblxcbiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG4gIHVuaWZvcm0gbWF0MyBlbWlzc2l2ZU1hcFV2VHJhbnNmb3JtO1xcbiNlbmRpZlxcblxcbi8vICNpbmNsdWRlIDxlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQ+XFxuLy8gI2luY2x1ZGUgPGVudm1hcF9wYXJzX2ZyYWdtZW50Plxcbi8vICNpbmNsdWRlIDxjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50Plxcblxcbi8vICNpbmNsdWRlIDxic2Rmcz5cXG4vLyBDT01QQVQ6IHByZS1yMTUxIGRvZXNuJ3QgaGF2ZSBCUkRGX0xhbWJlcnQgaW4gPGNvbW1vbj5cXG4jaWYgVEhSRUVfVlJNX1RIUkVFX1JFVklTSU9OIDwgMTUxXFxuICB2ZWMzIEJSREZfTGFtYmVydCggY29uc3QgaW4gdmVjMyBkaWZmdXNlQ29sb3IgKSB7XFxuICAgIHJldHVybiBSRUNJUFJPQ0FMX1BJICogZGlmZnVzZUNvbG9yO1xcbiAgfVxcbiNlbmRpZlxcblxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG5cXG4jaWYgVEhSRUVfVlJNX1RIUkVFX1JFVklTSU9OID49IDEzMlxcbiAgI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxcbiNlbmRpZlxcblxcbi8vICNpbmNsdWRlIDxsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudD5cXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG5cXG4jaWYgVEhSRUVfVlJNX1RIUkVFX1JFVklTSU9OIDwgMTMyXFxuICAjaWZuZGVmIEZMQVRfU0hBREVEXFxuICAgIHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiAgI2VuZGlmXFxuI2VuZGlmXFxuXFxuc3RydWN0IE1Ub29uTWF0ZXJpYWwge1xcbiAgdmVjMyBkaWZmdXNlQ29sb3I7XFxuICB2ZWMzIHNoYWRlQ29sb3I7XFxuICBmbG9hdCBzaGFkaW5nU2hpZnQ7XFxufTtcXG5cXG5mbG9hdCBsaW5lYXJzdGVwKCBmbG9hdCBhLCBmbG9hdCBiLCBmbG9hdCB0ICkge1xcbiAgcmV0dXJuIGNsYW1wKCAoIHQgLSBhICkgLyAoIGIgLSBhICksIDAuMCwgMS4wICk7XFxufVxcblxcbi8qKlxcbiAqIENvbnZlcnQgTmRvdEwgaW50byB0b29uIHNoYWRpbmcgZmFjdG9yIHVzaW5nIHNoYWRpbmdTaGlmdCBhbmQgc2hhZGluZ1Rvb255XFxuICovXFxuZmxvYXQgZ2V0U2hhZGluZyhcXG4gIGNvbnN0IGluIGZsb2F0IGRvdE5MLFxcbiAgY29uc3QgaW4gZmxvYXQgc2hhZG93LFxcbiAgY29uc3QgaW4gZmxvYXQgc2hhZGluZ1NoaWZ0XFxuKSB7XFxuICBmbG9hdCBzaGFkaW5nID0gZG90Tkw7XFxuICBzaGFkaW5nID0gc2hhZGluZyArIHNoYWRpbmdTaGlmdDtcXG4gIHNoYWRpbmcgPSBsaW5lYXJzdGVwKCAtMS4wICsgc2hhZGluZ1Rvb255RmFjdG9yLCAxLjAgLSBzaGFkaW5nVG9vbnlGYWN0b3IsIHNoYWRpbmcgKTtcXG4gIHNoYWRpbmcgKj0gc2hhZG93O1xcbiAgcmV0dXJuIHNoYWRpbmc7XFxufVxcblxcbi8qKlxcbiAqIE1peCBkaWZmdXNlQ29sb3IgYW5kIHNoYWRlQ29sb3IgdXNpbmcgc2hhZGluZyBmYWN0b3IgYW5kIGxpZ2h0IGNvbG9yXFxuICovXFxudmVjMyBnZXREaWZmdXNlKFxcbiAgY29uc3QgaW4gTVRvb25NYXRlcmlhbCBtYXRlcmlhbCxcXG4gIGNvbnN0IGluIGZsb2F0IHNoYWRpbmcsXFxuICBpbiB2ZWMzIGxpZ2h0Q29sb3JcXG4pIHtcXG4gICNpZmRlZiBERUJVR19MSVRTSEFERVJBVEVcXG4gICAgcmV0dXJuIHZlYzMoIEJSREZfTGFtYmVydCggc2hhZGluZyAqIGxpZ2h0Q29sb3IgKSApO1xcbiAgI2VuZGlmXFxuXFxuICAjaWYgVEhSRUVfVlJNX1RIUkVFX1JFVklTSU9OIDwgMTMyXFxuICAgICNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcbiAgICAgIGxpZ2h0Q29sb3IgKj0gUEk7XFxuICAgICNlbmRpZlxcbiAgI2VuZGlmXFxuXFxuICB2ZWMzIGNvbCA9IGxpZ2h0Q29sb3IgKiBCUkRGX0xhbWJlcnQoIG1peCggbWF0ZXJpYWwuc2hhZGVDb2xvciwgbWF0ZXJpYWwuZGlmZnVzZUNvbG9yLCBzaGFkaW5nICkgKTtcXG5cXG4gIC8vIFRoZSBcXFwiY29tbWVudCBvdXQgaWYgeW91IHdhbnQgdG8gUEJSIGFic29sdXRlbHlcXFwiIGxpbmVcXG4gICNpZmRlZiBWMF9DT01QQVRfU0hBREVcXG4gICAgY29sID0gbWluKCBjb2wsIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcbiAgI2VuZGlmXFxuXFxuICByZXR1cm4gY29sO1xcbn1cXG5cXG52b2lkIFJFX0RpcmVjdF9NVG9vbiggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gTVRvb25NYXRlcmlhbCBtYXRlcmlhbCwgY29uc3QgaW4gZmxvYXQgc2hhZG93LCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG4gIGZsb2F0IGRvdE5MID0gY2xhbXAoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSwgLTEuMCwgMS4wICk7XFxuICB2ZWMzIGlycmFkaWFuY2UgPSBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXG4gICNpZiBUSFJFRV9WUk1fVEhSRUVfUkVWSVNJT04gPCAxMzJcXG4gICAgI2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuICAgICAgaXJyYWRpYW5jZSAqPSBQSTtcXG4gICAgI2VuZGlmXFxuICAjZW5kaWZcXG5cXG4gIC8vIGRpcmVjdFNwZWN1bGFyIHdpbGwgYmUgdXNlZCBmb3IgcmltIGxpZ2h0aW5nLCBub3QgYW4gYWN0dWFsIHNwZWN1bGFyXFxuICByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBpcnJhZGlhbmNlO1xcblxcbiAgaXJyYWRpYW5jZSAqPSBkb3ROTDtcXG5cXG4gIGZsb2F0IHNoYWRpbmcgPSBnZXRTaGFkaW5nKCBkb3ROTCwgc2hhZG93LCBtYXRlcmlhbC5zaGFkaW5nU2hpZnQgKTtcXG5cXG4gIC8vIHRvb24gc2hhZGVkIGRpZmZ1c2VcXG4gIHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gZ2V0RGlmZnVzZSggbWF0ZXJpYWwsIHNoYWRpbmcsIGRpcmVjdExpZ2h0LmNvbG9yICk7XFxufVxcblxcbnZvaWQgUkVfSW5kaXJlY3REaWZmdXNlX01Ub29uKCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIE1Ub29uTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcbiAgLy8gaW5kaXJlY3QgZGlmZnVzZSB3aWxsIHVzZSBkaWZmdXNlQ29sb3IsIG5vIHNoYWRlQ29sb3IgaW52b2x2ZWRcXG4gIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG5cXG4gIC8vIGRpcmVjdFNwZWN1bGFyIHdpbGwgYmUgdXNlZCBmb3IgcmltIGxpZ2h0aW5nLCBub3QgYW4gYWN0dWFsIHNwZWN1bGFyXFxuICByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBpcnJhZGlhbmNlO1xcbn1cXG5cXG4jZGVmaW5lIFJFX0RpcmVjdCBSRV9EaXJlY3RfTVRvb25cXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZSBSRV9JbmRpcmVjdERpZmZ1c2VfTVRvb25cXG4jZGVmaW5lIE1hdGVyaWFsX0xpZ2h0UHJvYmVMT0QoIG1hdGVyaWFsICkgKDApXFxuXFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50Plxcbi8vICNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuXFxuLy8gI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpZmRlZiBVU0VfTk9STUFMTUFQXFxuXFxuICB1bmlmb3JtIHNhbXBsZXIyRCBub3JtYWxNYXA7XFxuICB1bmlmb3JtIG1hdDMgbm9ybWFsTWFwVXZUcmFuc2Zvcm07XFxuICB1bmlmb3JtIHZlYzIgbm9ybWFsU2NhbGU7XFxuXFxuI2VuZGlmXFxuXFxuLy8gQ09NUEFUOiBVU0VfTk9STUFMTUFQX09CSkVDVFNQQUNFIHVzZWQgdG8gYmUgT0JKRUNUU1BBQ0VfTk9STUFMTUFQIGluIHByZS1yMTUxXFxuI2lmIGRlZmluZWQoIFVTRV9OT1JNQUxNQVBfT0JKRUNUU1BBQ0UgKSB8fCBkZWZpbmVkKCBPQkpFQ1RTUEFDRV9OT1JNQUxNQVAgKVxcblxcbiAgdW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcXG5cXG4jZW5kaWZcXG5cXG4vLyBDT01QQVQ6IFVTRV9OT1JNQUxNQVBfVEFOR0VOVFNQQUNFIHVzZWQgdG8gYmUgVEFOR0VOVFNQQUNFX05PUk1BTE1BUCBpbiBwcmUtcjE1MVxcbiNpZiAhIGRlZmluZWQgKCBVU0VfVEFOR0VOVCApICYmICggZGVmaW5lZCAoIFVTRV9OT1JNQUxNQVBfVEFOR0VOVFNQQUNFICkgfHwgZGVmaW5lZCAoIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAgKSApXFxuXFxuICAvLyBQZXItUGl4ZWwgVGFuZ2VudCBTcGFjZSBOb3JtYWwgTWFwcGluZ1xcbiAgLy8gaHR0cDovL2hhY2tzb2ZsaWZlLmJsb2dzcG90LmNoLzIwMDkvMTEvcGVyLXBpeGVsLXRhbmdlbnQtc3BhY2Utbm9ybWFsLW1hcHBpbmcuaHRtbFxcblxcbiAgLy8gdGhyZWUtdnJtIHNwZWNpZmljIGNoYW5nZTogaXQgcmVxdWlyZXMgYHV2YCBhcyBhbiBpbnB1dCBpbiBvcmRlciB0byBzdXBwb3J0IHV2IHNjcm9sbHNcXG5cXG4gIC8vIFRlbXBvcmFyeSBjb21wYXQgYWdhaW5zdCBzaGFkZXIgY2hhbmdlIEAgVGhyZWUuanMgcjEyNiwgcjE1MVxcbiAgI2lmIFRIUkVFX1ZSTV9USFJFRV9SRVZJU0lPTiA+PSAxNTFcXG5cXG4gICAgbWF0MyBnZXRUYW5nZW50RnJhbWUoIHZlYzMgZXllX3BvcywgdmVjMyBzdXJmX25vcm0sIHZlYzIgdXYgKSB7XFxuXFxuICAgICAgdmVjMyBxMCA9IGRGZHgoIGV5ZV9wb3MueHl6ICk7XFxuICAgICAgdmVjMyBxMSA9IGRGZHkoIGV5ZV9wb3MueHl6ICk7XFxuICAgICAgdmVjMiBzdDAgPSBkRmR4KCB1di5zdCApO1xcbiAgICAgIHZlYzIgc3QxID0gZEZkeSggdXYuc3QgKTtcXG5cXG4gICAgICB2ZWMzIE4gPSBzdXJmX25vcm07XFxuXFxuICAgICAgdmVjMyBxMXBlcnAgPSBjcm9zcyggcTEsIE4gKTtcXG4gICAgICB2ZWMzIHEwcGVycCA9IGNyb3NzKCBOLCBxMCApO1xcblxcbiAgICAgIHZlYzMgVCA9IHExcGVycCAqIHN0MC54ICsgcTBwZXJwICogc3QxLng7XFxuICAgICAgdmVjMyBCID0gcTFwZXJwICogc3QwLnkgKyBxMHBlcnAgKiBzdDEueTtcXG5cXG4gICAgICBmbG9hdCBkZXQgPSBtYXgoIGRvdCggVCwgVCApLCBkb3QoIEIsIEIgKSApO1xcbiAgICAgIGZsb2F0IHNjYWxlID0gKCBkZXQgPT0gMC4wICkgPyAwLjAgOiBpbnZlcnNlc3FydCggZGV0ICk7XFxuXFxuICAgICAgcmV0dXJuIG1hdDMoIFQgKiBzY2FsZSwgQiAqIHNjYWxlLCBOICk7XFxuXFxuICAgIH1cXG5cXG4gICNlbGlmIFRIUkVFX1ZSTV9USFJFRV9SRVZJU0lPTiA+PSAxMjZcXG5cXG4gICAgdmVjMyBwZXJ0dXJiTm9ybWFsMkFyYiggdmVjMiB1diwgdmVjMyBleWVfcG9zLCB2ZWMzIHN1cmZfbm9ybSwgdmVjMyBtYXBOLCBmbG9hdCBmYWNlRGlyZWN0aW9uICkge1xcblxcbiAgICAgIHZlYzMgcTAgPSB2ZWMzKCBkRmR4KCBleWVfcG9zLnggKSwgZEZkeCggZXllX3Bvcy55ICksIGRGZHgoIGV5ZV9wb3MueiApICk7XFxuICAgICAgdmVjMyBxMSA9IHZlYzMoIGRGZHkoIGV5ZV9wb3MueCApLCBkRmR5KCBleWVfcG9zLnkgKSwgZEZkeSggZXllX3Bvcy56ICkgKTtcXG4gICAgICB2ZWMyIHN0MCA9IGRGZHgoIHV2LnN0ICk7XFxuICAgICAgdmVjMiBzdDEgPSBkRmR5KCB1di5zdCApO1xcblxcbiAgICAgIHZlYzMgTiA9IG5vcm1hbGl6ZSggc3VyZl9ub3JtICk7XFxuXFxuICAgICAgdmVjMyBxMXBlcnAgPSBjcm9zcyggcTEsIE4gKTtcXG4gICAgICB2ZWMzIHEwcGVycCA9IGNyb3NzKCBOLCBxMCApO1xcblxcbiAgICAgIHZlYzMgVCA9IHExcGVycCAqIHN0MC54ICsgcTBwZXJwICogc3QxLng7XFxuICAgICAgdmVjMyBCID0gcTFwZXJwICogc3QwLnkgKyBxMHBlcnAgKiBzdDEueTtcXG5cXG4gICAgICAvLyB0aHJlZS12cm0gc3BlY2lmaWMgY2hhbmdlOiBXb3JrYXJvdW5kIGZvciB0aGUgaXNzdWUgdGhhdCBoYXBwZW5zIHdoZW4gZGVsdGEgb2YgdXYgPSAwLjBcXG4gICAgICAvLyBUT0RPOiBJcyB0aGlzIHN0aWxsIHJlcXVpcmVkPyBPciBzaGFsbCBJIG1ha2UgYSBQUiBhYm91dCBpdD9cXG4gICAgICBpZiAoIGxlbmd0aCggVCApID09IDAuMCB8fCBsZW5ndGgoIEIgKSA9PSAwLjAgKSB7XFxuICAgICAgICByZXR1cm4gc3VyZl9ub3JtO1xcbiAgICAgIH1cXG5cXG4gICAgICBmbG9hdCBkZXQgPSBtYXgoIGRvdCggVCwgVCApLCBkb3QoIEIsIEIgKSApO1xcbiAgICAgIGZsb2F0IHNjYWxlID0gKCBkZXQgPT0gMC4wICkgPyAwLjAgOiBmYWNlRGlyZWN0aW9uICogaW52ZXJzZXNxcnQoIGRldCApO1xcblxcbiAgICAgIHJldHVybiBub3JtYWxpemUoIFQgKiAoIG1hcE4ueCAqIHNjYWxlICkgKyBCICogKCBtYXBOLnkgKiBzY2FsZSApICsgTiAqIG1hcE4ueiApO1xcblxcbiAgICB9XFxuXFxuICAjZWxzZVxcblxcbiAgICB2ZWMzIHBlcnR1cmJOb3JtYWwyQXJiKCB2ZWMyIHV2LCB2ZWMzIGV5ZV9wb3MsIHZlYzMgc3VyZl9ub3JtLCB2ZWMzIG1hcE4gKSB7XFxuXFxuICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgQWRyZW5vIDNYWCBkRmQqKCB2ZWMzICkgYnVnLiBTZWUgIzk5ODhcXG5cXG4gICAgICB2ZWMzIHEwID0gdmVjMyggZEZkeCggZXllX3Bvcy54ICksIGRGZHgoIGV5ZV9wb3MueSApLCBkRmR4KCBleWVfcG9zLnogKSApO1xcbiAgICAgIHZlYzMgcTEgPSB2ZWMzKCBkRmR5KCBleWVfcG9zLnggKSwgZEZkeSggZXllX3Bvcy55ICksIGRGZHkoIGV5ZV9wb3MueiApICk7XFxuICAgICAgdmVjMiBzdDAgPSBkRmR4KCB1di5zdCApO1xcbiAgICAgIHZlYzIgc3QxID0gZEZkeSggdXYuc3QgKTtcXG5cXG4gICAgICBmbG9hdCBzY2FsZSA9IHNpZ24oIHN0MS50ICogc3QwLnMgLSBzdDAudCAqIHN0MS5zICk7IC8vIHdlIGRvIG5vdCBjYXJlIGFib3V0IHRoZSBtYWduaXR1ZGVcXG5cXG4gICAgICB2ZWMzIFMgPSAoIHEwICogc3QxLnQgLSBxMSAqIHN0MC50ICkgKiBzY2FsZTtcXG4gICAgICB2ZWMzIFQgPSAoIC0gcTAgKiBzdDEucyArIHExICogc3QwLnMgKSAqIHNjYWxlO1xcblxcbiAgICAgIC8vIHRocmVlLXZybSBzcGVjaWZpYyBjaGFuZ2U6IFdvcmthcm91bmQgZm9yIHRoZSBpc3N1ZSB0aGF0IGhhcHBlbnMgd2hlbiBkZWx0YSBvZiB1diA9IDAuMFxcbiAgICAgIC8vIFRPRE86IElzIHRoaXMgc3RpbGwgcmVxdWlyZWQ/IE9yIHNoYWxsIEkgbWFrZSBhIFBSIGFib3V0IGl0P1xcblxcbiAgICAgIGlmICggbGVuZ3RoKCBTICkgPT0gMC4wIHx8IGxlbmd0aCggVCApID09IDAuMCApIHtcXG4gICAgICAgIHJldHVybiBzdXJmX25vcm07XFxuICAgICAgfVxcblxcbiAgICAgIFMgPSBub3JtYWxpemUoIFMgKTtcXG4gICAgICBUID0gbm9ybWFsaXplKCBUICk7XFxuICAgICAgdmVjMyBOID0gbm9ybWFsaXplKCBzdXJmX25vcm0gKTtcXG5cXG4gICAgICAjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFxuICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBBZHJlbm8gR1BVcyBnbF9Gcm9udEZhY2luZyBidWcuIFNlZSAjMTU4NTAgYW5kICMxMDMzMVxcblxcbiAgICAgICAgYm9vbCBmcm9udEZhY2luZyA9IGRvdCggY3Jvc3MoIFMsIFQgKSwgTiApID4gMC4wO1xcblxcbiAgICAgICAgbWFwTi54eSAqPSAoIGZsb2F0KCBmcm9udEZhY2luZyApICogMi4wIC0gMS4wICk7XFxuXFxuICAgICAgI2Vsc2VcXG5cXG4gICAgICAgIG1hcE4ueHkgKj0gKCBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSAqIDIuMCAtIDEuMCApO1xcblxcbiAgICAgICNlbmRpZlxcblxcbiAgICAgIG1hdDMgdHNuID0gbWF0MyggUywgVCwgTiApO1xcbiAgICAgIHJldHVybiBub3JtYWxpemUoIHRzbiAqIG1hcE4gKTtcXG5cXG4gICAgfVxcblxcbiAgI2VuZGlmXFxuXFxuI2VuZGlmXFxuXFxuLy8gI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50Plxcblxcbi8vID09IHBvc3QgY29ycmVjdGlvbiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XFxudm9pZCBwb3N0Q29ycmVjdGlvbigpIHtcXG4gICNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG4gICNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuICAjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcbiAgI2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuICAjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cXG5cXG4vLyA9PSBtYWluIHByb2NlZHVyZSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxcbnZvaWQgbWFpbigpIHtcXG4gICNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFxuICB2ZWMyIHV2ID0gdmVjMigwLjUsIDAuNSk7XFxuXFxuICAjaWYgKCBkZWZpbmVkKCBNVE9PTl9VU0VfVVYgKSAmJiAhZGVmaW5lZCggTVRPT05fVVZTX1ZFUlRFWF9PTkxZICkgKVxcbiAgICB1diA9IHZVdjtcXG5cXG4gICAgZmxvYXQgdXZBbmltTWFzayA9IDEuMDtcXG4gICAgI2lmZGVmIFVTRV9VVkFOSU1BVElPTk1BU0tURVhUVVJFXFxuICAgICAgdmVjMiB1dkFuaW1hdGlvbk1hc2tUZXh0dXJlVXYgPSAoIHV2QW5pbWF0aW9uTWFza1RleHR1cmVVdlRyYW5zZm9ybSAqIHZlYzMoIHV2LCAxICkgKS54eTtcXG4gICAgICB1dkFuaW1NYXNrID0gdGV4dHVyZTJEKCB1dkFuaW1hdGlvbk1hc2tUZXh0dXJlLCB1dkFuaW1hdGlvbk1hc2tUZXh0dXJlVXYgKS5iO1xcbiAgICAjZW5kaWZcXG5cXG4gICAgdXYgPSB1diArIHZlYzIoIHV2QW5pbWF0aW9uU2Nyb2xsWE9mZnNldCwgdXZBbmltYXRpb25TY3JvbGxZT2Zmc2V0ICkgKiB1dkFuaW1NYXNrO1xcbiAgICBmbG9hdCB1dlJvdENvcyA9IGNvcyggdXZBbmltYXRpb25Sb3RhdGlvblBoYXNlICogdXZBbmltTWFzayApO1xcbiAgICBmbG9hdCB1dlJvdFNpbiA9IHNpbiggdXZBbmltYXRpb25Sb3RhdGlvblBoYXNlICogdXZBbmltTWFzayApO1xcbiAgICB1diA9IG1hdDIoIHV2Um90Q29zLCAtdXZSb3RTaW4sIHV2Um90U2luLCB1dlJvdENvcyApICogKCB1diAtIDAuNSApICsgMC41O1xcbiAgI2VuZGlmXFxuXFxuICAjaWZkZWYgREVCVUdfVVZcXG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCggMC4wLCAwLjAsIDAuMCwgMS4wICk7XFxuICAgICNpZiAoIGRlZmluZWQoIE1UT09OX1VTRV9VViApICYmICFkZWZpbmVkKCBNVE9PTl9VVlNfVkVSVEVYX09OTFkgKSApXFxuICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCggdXYsIDAuMCwgMS4wICk7XFxuICAgICNlbmRpZlxcbiAgICByZXR1cm47XFxuICAjZW5kaWZcXG5cXG4gIHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggbGl0RmFjdG9yLCBvcGFjaXR5ICk7XFxuICBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcbiAgdmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZSAqIGVtaXNzaXZlSW50ZW5zaXR5O1xcblxcbiAgI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcbiAgLy8gI2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG4gICNpZmRlZiBVU0VfTUFQXFxuICAgIHZlYzIgbWFwVXYgPSAoIG1hcFV2VHJhbnNmb3JtICogdmVjMyggdXYsIDEgKSApLnh5O1xcbiAgICB2ZWM0IHNhbXBsZWREaWZmdXNlQ29sb3IgPSB0ZXh0dXJlMkQoIG1hcCwgbWFwVXYgKTtcXG4gICAgI2lmZGVmIERFQ09ERV9WSURFT19URVhUVVJFXFxuICAgICAgc2FtcGxlZERpZmZ1c2VDb2xvciA9IHZlYzQoIG1peCggcG93KCBzYW1wbGVkRGlmZnVzZUNvbG9yLnJnYiAqIDAuOTQ3ODY3Mjk4NiArIHZlYzMoIDAuMDUyMTMyNzAxNCApLCB2ZWMzKCAyLjQgKSApLCBzYW1wbGVkRGlmZnVzZUNvbG9yLnJnYiAqIDAuMDc3Mzk5MzgwOCwgdmVjMyggbGVzc1RoYW5FcXVhbCggc2FtcGxlZERpZmZ1c2VDb2xvci5yZ2IsIHZlYzMoIDAuMDQwNDUgKSApICkgKSwgc2FtcGxlZERpZmZ1c2VDb2xvci53ICk7XFxuICAgICNlbmRpZlxcbiAgICBkaWZmdXNlQ29sb3IgKj0gc2FtcGxlZERpZmZ1c2VDb2xvcjtcXG4gICNlbmRpZlxcblxcbiAgLy8gI2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcbiAgI2lmICggZGVmaW5lZCggVVNFX0NPTE9SICkgJiYgIWRlZmluZWQoIElHTk9SRV9WRVJURVhfQ09MT1IgKSApXFxuICAgIGRpZmZ1c2VDb2xvci5yZ2IgKj0gdkNvbG9yO1xcbiAgI2VuZGlmXFxuXFxuICAvLyAjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFxuICAjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcbiAgLy8gI2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxcblxcbiAgLy8gI2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG4gIGZsb2F0IGZhY2VEaXJlY3Rpb24gPSBnbF9Gcm9udEZhY2luZyA/IDEuMCA6IC0xLjA7XFxuXFxuICAjaWZkZWYgRkxBVF9TSEFERURcXG5cXG4gICAgdmVjMyBmZHggPSBkRmR4KCB2Vmlld1Bvc2l0aW9uICk7XFxuICAgIHZlYzMgZmR5ID0gZEZkeSggdlZpZXdQb3NpdGlvbiApO1xcbiAgICB2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZSggY3Jvc3MoIGZkeCwgZmR5ICkgKTtcXG5cXG4gICNlbHNlXFxuXFxuICAgIHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCB2Tm9ybWFsICk7XFxuXFxuICAgICNpZmRlZiBET1VCTEVfU0lERURcXG5cXG4gICAgICBub3JtYWwgKj0gZmFjZURpcmVjdGlvbjtcXG5cXG4gICAgI2VuZGlmXFxuXFxuICAjZW5kaWZcXG5cXG4gICNpZmRlZiBVU0VfTk9STUFMTUFQXFxuXFxuICAgIHZlYzIgbm9ybWFsTWFwVXYgPSAoIG5vcm1hbE1hcFV2VHJhbnNmb3JtICogdmVjMyggdXYsIDEgKSApLnh5O1xcblxcbiAgI2VuZGlmXFxuXFxuICAjaWZkZWYgVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0VcXG5cXG4gICAgI2lmZGVmIFVTRV9UQU5HRU5UXFxuXFxuICAgICAgbWF0MyB0Ym4gPSBtYXQzKCBub3JtYWxpemUoIHZUYW5nZW50ICksIG5vcm1hbGl6ZSggdkJpdGFuZ2VudCApLCBub3JtYWwgKTtcXG5cXG4gICAgI2Vsc2VcXG5cXG4gICAgICBtYXQzIHRibiA9IGdldFRhbmdlbnRGcmFtZSggLSB2Vmlld1Bvc2l0aW9uLCBub3JtYWwsIG5vcm1hbE1hcFV2ICk7XFxuXFxuICAgICNlbmRpZlxcblxcbiAgICAjaWYgZGVmaW5lZCggRE9VQkxFX1NJREVEICkgJiYgISBkZWZpbmVkKCBGTEFUX1NIQURFRCApXFxuXFxuICAgICAgdGJuWzBdICo9IGZhY2VEaXJlY3Rpb247XFxuICAgICAgdGJuWzFdICo9IGZhY2VEaXJlY3Rpb247XFxuXFxuICAgICNlbmRpZlxcblxcbiAgI2VuZGlmXFxuXFxuICAjaWZkZWYgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVBcXG5cXG4gICAgI2lmZGVmIFVTRV9UQU5HRU5UXFxuXFxuICAgICAgbWF0MyB0Ym4yID0gbWF0Myggbm9ybWFsaXplKCB2VGFuZ2VudCApLCBub3JtYWxpemUoIHZCaXRhbmdlbnQgKSwgbm9ybWFsICk7XFxuXFxuICAgICNlbHNlXFxuXFxuICAgICAgbWF0MyB0Ym4yID0gZ2V0VGFuZ2VudEZyYW1lKCAtIHZWaWV3UG9zaXRpb24sIG5vcm1hbCwgdkNsZWFyY29hdE5vcm1hbE1hcFV2ICk7XFxuXFxuICAgICNlbmRpZlxcblxcbiAgICAjaWYgZGVmaW5lZCggRE9VQkxFX1NJREVEICkgJiYgISBkZWZpbmVkKCBGTEFUX1NIQURFRCApXFxuXFxuICAgICAgdGJuMlswXSAqPSBmYWNlRGlyZWN0aW9uO1xcbiAgICAgIHRibjJbMV0gKj0gZmFjZURpcmVjdGlvbjtcXG5cXG4gICAgI2VuZGlmXFxuXFxuICAjZW5kaWZcXG5cXG4gIC8vIG5vbiBwZXJ0dXJiZWQgbm9ybWFsIGZvciBjbGVhcmNvYXQgYW1vbmcgb3RoZXJzXFxuXFxuICB2ZWMzIGdlb21ldHJ5Tm9ybWFsID0gbm9ybWFsO1xcblxcbiAgI2lmZGVmIE9VVExJTkVcXG4gICAgbm9ybWFsICo9IC0xLjA7XFxuICAjZW5kaWZcXG5cXG4gIC8vICNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXG4gIC8vIENPTVBBVDogVVNFX05PUk1BTE1BUF9PQkpFQ1RTUEFDRSB1c2VkIHRvIGJlIE9CSkVDVFNQQUNFX05PUk1BTE1BUCBpbiBwcmUtcjE1MVxcbiAgI2lmIGRlZmluZWQoIFVTRV9OT1JNQUxNQVBfT0JKRUNUU1BBQ0UgKSB8fCBkZWZpbmVkKCBPQkpFQ1RTUEFDRV9OT1JNQUxNQVAgKVxcblxcbiAgICBub3JtYWwgPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgbm9ybWFsTWFwVXYgKS54eXogKiAyLjAgLSAxLjA7IC8vIG92ZXJyaWRlcyBib3RoIGZsYXRTaGFkaW5nIGFuZCBhdHRyaWJ1dGUgbm9ybWFsc1xcblxcbiAgICAjaWZkZWYgRkxJUF9TSURFRFxcblxcbiAgICAgIG5vcm1hbCA9IC0gbm9ybWFsO1xcblxcbiAgICAjZW5kaWZcXG5cXG4gICAgI2lmZGVmIERPVUJMRV9TSURFRFxcblxcbiAgICAgIC8vIFRlbXBvcmFyeSBjb21wYXQgYWdhaW5zdCBzaGFkZXIgY2hhbmdlIEAgVGhyZWUuanMgcjEyNlxcbiAgICAgIC8vIFNlZTogIzIxMjA1LCAjMjEzMDcsICMyMTI5OVxcbiAgICAgICNpZiBUSFJFRV9WUk1fVEhSRUVfUkVWSVNJT04gPj0gMTI2XFxuXFxuICAgICAgICBub3JtYWwgPSBub3JtYWwgKiBmYWNlRGlyZWN0aW9uO1xcblxcbiAgICAgICNlbHNlXFxuXFxuICAgICAgICBub3JtYWwgPSBub3JtYWwgKiAoIGZsb2F0KCBnbF9Gcm9udEZhY2luZyApICogMi4wIC0gMS4wICk7XFxuXFxuICAgICAgI2VuZGlmXFxuXFxuICAgICNlbmRpZlxcblxcbiAgICBub3JtYWwgPSBub3JtYWxpemUoIG5vcm1hbE1hdHJpeCAqIG5vcm1hbCApO1xcblxcbiAgLy8gQ09NUEFUOiBVU0VfTk9STUFMTUFQX1RBTkdFTlRTUEFDRSB1c2VkIHRvIGJlIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAgaW4gcHJlLXIxNTFcXG4gICNlbGlmIGRlZmluZWQoIFVTRV9OT1JNQUxNQVBfVEFOR0VOVFNQQUNFICkgfHwgZGVmaW5lZCggVEFOR0VOVFNQQUNFX05PUk1BTE1BUCApXFxuXFxuICAgIHZlYzMgbWFwTiA9IHRleHR1cmUyRCggbm9ybWFsTWFwLCBub3JtYWxNYXBVdiApLnh5eiAqIDIuMCAtIDEuMDtcXG4gICAgbWFwTi54eSAqPSBub3JtYWxTY2FsZTtcXG5cXG4gICAgLy8gQ09NUEFUOiBwcmUtcjE1MVxcbiAgICAjaWYgVEhSRUVfVlJNX1RIUkVFX1JFVklTSU9OID49IDE1MSB8fCBkZWZpbmVkKCBVU0VfVEFOR0VOVCApXFxuXFxuICAgICAgbm9ybWFsID0gbm9ybWFsaXplKCB0Ym4gKiBtYXBOICk7XFxuXFxuICAgICNlbHNlXFxuXFxuICAgICAgLy8gcHJlLXIxMjZcXG4gICAgICAjaWYgVEhSRUVfVlJNX1RIUkVFX1JFVklTSU9OID49IDEyNlxcblxcbiAgICAgICAgbm9ybWFsID0gcGVydHVyYk5vcm1hbDJBcmIoIHV2LCAtdlZpZXdQb3NpdGlvbiwgbm9ybWFsLCBtYXBOLCBmYWNlRGlyZWN0aW9uICk7XFxuXFxuICAgICAgI2Vsc2VcXG5cXG4gICAgICAgIG5vcm1hbCA9IHBlcnR1cmJOb3JtYWwyQXJiKCB1diwgLXZWaWV3UG9zaXRpb24sIG5vcm1hbCwgbWFwTiApO1xcblxcbiAgICAgICNlbmRpZlxcblxcbiAgICAjZW5kaWZcXG5cXG4gICNlbmRpZlxcblxcbiAgLy8gI2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxcbiAgI2lmZGVmIFVTRV9FTUlTU0lWRU1BUFxcbiAgICB2ZWMyIGVtaXNzaXZlTWFwVXYgPSAoIGVtaXNzaXZlTWFwVXZUcmFuc2Zvcm0gKiB2ZWMzKCB1diwgMSApICkueHk7XFxuICAgIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSAqPSB0ZXh0dXJlMkQoIGVtaXNzaXZlTWFwLCBlbWlzc2l2ZU1hcFV2ICkucmdiO1xcbiAgI2VuZGlmXFxuXFxuICAjaWZkZWYgREVCVUdfTk9STUFMXFxuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoIDAuNSArIDAuNSAqIG5vcm1hbCwgMS4wICk7XFxuICAgIHJldHVybjtcXG4gICNlbmRpZlxcblxcbiAgLy8gLS0gTVRvb246IGxpZ2h0aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuICAvLyBhY2N1bXVsYXRpb25cXG4gIC8vICNpbmNsdWRlIDxsaWdodHNfcGhvbmdfZnJhZ21lbnQ+XFxuICBNVG9vbk1hdGVyaWFsIG1hdGVyaWFsO1xcblxcbiAgbWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5cXG4gIG1hdGVyaWFsLnNoYWRlQ29sb3IgPSBzaGFkZUNvbG9yRmFjdG9yO1xcbiAgI2lmZGVmIFVTRV9TSEFERU1VTFRJUExZVEVYVFVSRVxcbiAgICB2ZWMyIHNoYWRlTXVsdGlwbHlUZXh0dXJlVXYgPSAoIHNoYWRlTXVsdGlwbHlUZXh0dXJlVXZUcmFuc2Zvcm0gKiB2ZWMzKCB1diwgMSApICkueHk7XFxuICAgIG1hdGVyaWFsLnNoYWRlQ29sb3IgKj0gdGV4dHVyZTJEKCBzaGFkZU11bHRpcGx5VGV4dHVyZSwgc2hhZGVNdWx0aXBseVRleHR1cmVVdiApLnJnYjtcXG4gICNlbmRpZlxcblxcbiAgI2lmICggZGVmaW5lZCggVVNFX0NPTE9SICkgJiYgIWRlZmluZWQoIElHTk9SRV9WRVJURVhfQ09MT1IgKSApXFxuICAgIG1hdGVyaWFsLnNoYWRlQ29sb3IucmdiICo9IHZDb2xvcjtcXG4gICNlbmRpZlxcblxcbiAgbWF0ZXJpYWwuc2hhZGluZ1NoaWZ0ID0gc2hhZGluZ1NoaWZ0RmFjdG9yO1xcbiAgI2lmZGVmIFVTRV9TSEFESU5HU0hJRlRURVhUVVJFXFxuICAgIHZlYzIgc2hhZGluZ1NoaWZ0VGV4dHVyZVV2ID0gKCBzaGFkaW5nU2hpZnRUZXh0dXJlVXZUcmFuc2Zvcm0gKiB2ZWMzKCB1diwgMSApICkueHk7XFxuICAgIG1hdGVyaWFsLnNoYWRpbmdTaGlmdCArPSB0ZXh0dXJlMkQoIHNoYWRpbmdTaGlmdFRleHR1cmUsIHNoYWRpbmdTaGlmdFRleHR1cmVVdiApLnIgKiBzaGFkaW5nU2hpZnRUZXh0dXJlU2NhbGU7XFxuICAjZW5kaWZcXG5cXG4gIC8vICNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFxuICAvLyBNVG9vbiBTcGVjaWZpYyBjaGFuZ2VzOlxcbiAgLy8gU2luY2Ugd2Ugd2FudCB0byB0YWtlIHNoYWRvd3MgaW50byBhY2NvdW50IG9mIHNoYWRpbmcgaW5zdGVhZCBvZiBpcnJhZGlhbmNlLFxcbiAgLy8gd2UgaGFkIHRvIG1vZGlmeSB0aGUgY29kZXMgdGhhdCBtdWx0aXBsaWVzIHRoZSByZXN1bHRzIG9mIHNoYWRvd21hcCBpbnRvIGNvbG9yIG9mIGRpcmVjdCBsaWdodHMuXFxuXFxuICBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5O1xcblxcbiAgZ2VvbWV0cnkucG9zaXRpb24gPSAtIHZWaWV3UG9zaXRpb247XFxuICBnZW9tZXRyeS5ub3JtYWwgPSBub3JtYWw7XFxuICBnZW9tZXRyeS52aWV3RGlyID0gKCBpc09ydGhvZ3JhcGhpYyApID8gdmVjMyggMCwgMCwgMSApIDogbm9ybWFsaXplKCB2Vmlld1Bvc2l0aW9uICk7XFxuXFxuICAjaWZkZWYgQ0xFQVJDT0FUXFxuXFxuICAgIGdlb21ldHJ5LmNsZWFyY29hdE5vcm1hbCA9IGNsZWFyY29hdE5vcm1hbDtcXG5cXG4gICNlbmRpZlxcblxcbiAgSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodDtcXG5cXG4gIC8vIHNpbmNlIHRoZXNlIHZhcmlhYmxlcyB3aWxsIGJlIHVzZWQgaW4gdW5yb2xsZWQgbG9vcCwgd2UgaGF2ZSB0byBkZWZpbmUgaW4gcHJpb3JcXG4gIGZsb2F0IHNoYWRvdztcXG5cXG4gICNpZiAoIE5VTV9QT0lOVF9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0IClcXG5cXG4gICAgUG9pbnRMaWdodCBwb2ludExpZ2h0O1xcbiAgICAjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxcbiAgICBQb2ludExpZ2h0U2hhZG93IHBvaW50TGlnaHRTaGFkb3c7XFxuICAgICNlbmRpZlxcblxcbiAgICAjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuICAgIGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XFxuXFxuICAgICAgcG9pbnRMaWdodCA9IHBvaW50TGlnaHRzWyBpIF07XFxuXFxuICAgICAgI2lmIFRIUkVFX1ZSTV9USFJFRV9SRVZJU0lPTiA+PSAxMzJcXG4gICAgICAgIGdldFBvaW50TGlnaHRJbmZvKCBwb2ludExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG4gICAgICAjZWxzZVxcbiAgICAgICAgZ2V0UG9pbnREaXJlY3RMaWdodElycmFkaWFuY2UoIHBvaW50TGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcbiAgICAgICNlbmRpZlxcblxcbiAgICAgIHNoYWRvdyA9IDEuMDtcXG4gICAgICAjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIClcXG4gICAgICBwb2ludExpZ2h0U2hhZG93ID0gcG9pbnRMaWdodFNoYWRvd3NbIGkgXTtcXG4gICAgICBzaGFkb3cgPSBhbGwoIGJ2ZWMyKCBkaXJlY3RMaWdodC52aXNpYmxlLCByZWNlaXZlU2hhZG93ICkgKSA/IGdldFBvaW50U2hhZG93KCBwb2ludFNoYWRvd01hcFsgaSBdLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd01hcFNpemUsIHBvaW50TGlnaHRTaGFkb3cuc2hhZG93QmlhcywgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dSYWRpdXMsIHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0sIHBvaW50TGlnaHRTaGFkb3cuc2hhZG93Q2FtZXJhTmVhciwgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dDYW1lcmFGYXIgKSA6IDEuMDtcXG4gICAgICAjZW5kaWZcXG5cXG4gICAgICBSRV9EaXJlY3QoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHNoYWRvdywgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXG4gICAgfVxcbiAgICAjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcbiAgI2VuZGlmXFxuXFxuICAjaWYgKCBOVU1fU1BPVF9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0IClcXG5cXG4gICAgU3BvdExpZ2h0IHNwb3RMaWdodDtcXG4gICAgI2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiBOVU1fU1BPVF9MSUdIVF9TSEFET1dTID4gMFxcbiAgICBTcG90TGlnaHRTaGFkb3cgc3BvdExpZ2h0U2hhZG93O1xcbiAgICAjZW5kaWZcXG5cXG4gICAgI3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcbiAgICBmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVFM7IGkgKysgKSB7XFxuXFxuICAgICAgc3BvdExpZ2h0ID0gc3BvdExpZ2h0c1sgaSBdO1xcblxcbiAgICAgICNpZiBUSFJFRV9WUk1fVEhSRUVfUkVWSVNJT04gPj0gMTMyXFxuICAgICAgICBnZXRTcG90TGlnaHRJbmZvKCBzcG90TGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcbiAgICAgICNlbHNlXFxuICAgICAgICBnZXRTcG90RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBzcG90TGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcbiAgICAgICNlbmRpZlxcblxcbiAgICAgIHNoYWRvdyA9IDEuMDtcXG4gICAgICAjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgKVxcbiAgICAgIHNwb3RMaWdodFNoYWRvdyA9IHNwb3RMaWdodFNoYWRvd3NbIGkgXTtcXG4gICAgICBzaGFkb3cgPSBhbGwoIGJ2ZWMyKCBkaXJlY3RMaWdodC52aXNpYmxlLCByZWNlaXZlU2hhZG93ICkgKSA/IGdldFNoYWRvdyggc3BvdFNoYWRvd01hcFsgaSBdLCBzcG90TGlnaHRTaGFkb3cuc2hhZG93TWFwU2l6ZSwgc3BvdExpZ2h0U2hhZG93LnNoYWRvd0JpYXMsIHNwb3RMaWdodFNoYWRvdy5zaGFkb3dSYWRpdXMsIHZTcG90U2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcbiAgICAgICNlbmRpZlxcblxcbiAgICAgIFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgc2hhZG93LCByZWZsZWN0ZWRMaWdodCApO1xcblxcbiAgICB9XFxuICAgICNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFxuICAjZW5kaWZcXG5cXG4gICNpZiAoIE5VTV9ESVJfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXFxuXFxuICAgIERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodDtcXG4gICAgI2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwXFxuICAgIERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgZGlyZWN0aW9uYWxMaWdodFNoYWRvdztcXG4gICAgI2VuZGlmXFxuXFxuICAgICNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG4gICAgZm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFxuICAgICAgZGlyZWN0aW9uYWxMaWdodCA9IGRpcmVjdGlvbmFsTGlnaHRzWyBpIF07XFxuXFxuICAgICAgI2lmIFRIUkVFX1ZSTV9USFJFRV9SRVZJU0lPTiA+PSAxMzJcXG4gICAgICAgIGdldERpcmVjdGlvbmFsTGlnaHRJbmZvKCBkaXJlY3Rpb25hbExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG4gICAgICAjZWxzZVxcbiAgICAgICAgZ2V0RGlyZWN0aW9uYWxEaXJlY3RMaWdodElycmFkaWFuY2UoIGRpcmVjdGlvbmFsTGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcbiAgICAgICNlbmRpZlxcblxcbiAgICAgIHNoYWRvdyA9IDEuMDtcXG4gICAgICAjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9ESVJfTElHSFRfU0hBRE9XUyApXFxuICAgICAgZGlyZWN0aW9uYWxMaWdodFNoYWRvdyA9IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBpIF07XFxuICAgICAgc2hhZG93ID0gYWxsKCBidmVjMiggZGlyZWN0TGlnaHQudmlzaWJsZSwgcmVjZWl2ZVNoYWRvdyApICkgPyBnZXRTaGFkb3coIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBpIF0sIGRpcmVjdGlvbmFsTGlnaHRTaGFkb3cuc2hhZG93TWFwU2l6ZSwgZGlyZWN0aW9uYWxMaWdodFNoYWRvdy5zaGFkb3dCaWFzLCBkaXJlY3Rpb25hbExpZ2h0U2hhZG93LnNoYWRvd1JhZGl1cywgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcbiAgICAgICNlbmRpZlxcblxcbiAgICAgIFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgc2hhZG93LCByZWZsZWN0ZWRMaWdodCApO1xcblxcbiAgICB9XFxuICAgICNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFxuICAjZW5kaWZcXG5cXG4gIC8vICNpZiAoIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdF9SZWN0QXJlYSApXFxuXFxuICAvLyAgIFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodDtcXG5cXG4gIC8vICAgI3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcbiAgLy8gICBmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUkVDVF9BUkVBX0xJR0hUUzsgaSArKyApIHtcXG5cXG4gIC8vICAgICByZWN0QXJlYUxpZ2h0ID0gcmVjdEFyZWFMaWdodHNbIGkgXTtcXG4gIC8vICAgICBSRV9EaXJlY3RfUmVjdEFyZWEoIHJlY3RBcmVhTGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXG4gIC8vICAgfVxcbiAgLy8gICAjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcbiAgLy8gI2VuZGlmXFxuXFxuICAjaWYgZGVmaW5lZCggUkVfSW5kaXJlY3REaWZmdXNlIClcXG5cXG4gICAgdmVjMyBpYmxJcnJhZGlhbmNlID0gdmVjMyggMC4wICk7XFxuXFxuICAgIHZlYzMgaXJyYWRpYW5jZSA9IGdldEFtYmllbnRMaWdodElycmFkaWFuY2UoIGFtYmllbnRMaWdodENvbG9yICk7XFxuXFxuICAgICNpZiBUSFJFRV9WUk1fVEhSRUVfUkVWSVNJT04gPj0gMTMzXFxuICAgICAgaXJyYWRpYW5jZSArPSBnZXRMaWdodFByb2JlSXJyYWRpYW5jZSggbGlnaHRQcm9iZSwgZ2VvbWV0cnkubm9ybWFsICk7XFxuICAgICNlbHNlXFxuICAgICAgaXJyYWRpYW5jZSArPSBnZXRMaWdodFByb2JlSXJyYWRpYW5jZSggbGlnaHRQcm9iZSwgZ2VvbWV0cnkgKTtcXG4gICAgI2VuZGlmXFxuXFxuICAgICNpZiAoIE5VTV9IRU1JX0xJR0hUUyA+IDAgKVxcblxcbiAgICAgICNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG4gICAgICBmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fSEVNSV9MSUdIVFM7IGkgKysgKSB7XFxuXFxuICAgICAgICAjaWYgVEhSRUVfVlJNX1RIUkVFX1JFVklTSU9OID49IDEzM1xcbiAgICAgICAgICBpcnJhZGlhbmNlICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnkubm9ybWFsICk7XFxuICAgICAgICAjZWxzZVxcbiAgICAgICAgICBpcnJhZGlhbmNlICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnkgKTtcXG4gICAgICAgICNlbmRpZlxcblxcbiAgICAgIH1cXG4gICAgICAjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcbiAgICAjZW5kaWZcXG5cXG4gICNlbmRpZlxcblxcbiAgLy8gI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxcblxcbiAgLy8gICB2ZWMzIHJhZGlhbmNlID0gdmVjMyggMC4wICk7XFxuICAvLyAgIHZlYzMgY2xlYXJjb2F0UmFkaWFuY2UgPSB2ZWMzKCAwLjAgKTtcXG5cXG4gIC8vICNlbmRpZlxcblxcbiAgI2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcbiAgI2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9lbmQ+XFxuXFxuICAvLyBtb2R1bGF0aW9uXFxuICAjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFxuICB2ZWMzIGNvbCA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2U7XFxuXFxuICAjaWZkZWYgREVCVUdfTElUU0hBREVSQVRFXFxuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoIGNvbCwgZGlmZnVzZUNvbG9yLmEgKTtcXG4gICAgcG9zdENvcnJlY3Rpb24oKTtcXG4gICAgcmV0dXJuO1xcbiAgI2VuZGlmXFxuXFxuICAvLyAtLSBNVG9vbjogcmltIGxpZ2h0aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuICB2ZWMzIHZpZXdEaXIgPSBub3JtYWxpemUoIHZWaWV3UG9zaXRpb24gKTtcXG5cXG4gICNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcbiAgICByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciAvPSBQSTtcXG4gICNlbmRpZlxcbiAgdmVjMyByaW1NaXggPSBtaXgoIHZlYzMoIDEuMCApLCByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciwgMS4wICk7XFxuXFxuICB2ZWMzIHJpbSA9IHBhcmFtZXRyaWNSaW1Db2xvckZhY3RvciAqIHBvdyggc2F0dXJhdGUoIDEuMCAtIGRvdCggdmlld0Rpciwgbm9ybWFsICkgKyBwYXJhbWV0cmljUmltTGlmdEZhY3RvciApLCBwYXJhbWV0cmljUmltRnJlc25lbFBvd2VyRmFjdG9yICk7XFxuXFxuICAjaWZkZWYgVVNFX01BVENBUFRFWFRVUkVcXG4gICAge1xcbiAgICAgIHZlYzMgeCA9IG5vcm1hbGl6ZSggdmVjMyggdmlld0Rpci56LCAwLjAsIC12aWV3RGlyLnggKSApO1xcbiAgICAgIHZlYzMgeSA9IGNyb3NzKCB2aWV3RGlyLCB4ICk7IC8vIGd1YXJhbnRlZWQgdG8gYmUgbm9ybWFsaXplZFxcbiAgICAgIHZlYzIgc3BoZXJlVXYgPSAwLjUgKyAwLjUgKiB2ZWMyKCBkb3QoIHgsIG5vcm1hbCApLCAtZG90KCB5LCBub3JtYWwgKSApO1xcbiAgICAgIHNwaGVyZVV2ID0gKCBtYXRjYXBUZXh0dXJlVXZUcmFuc2Zvcm0gKiB2ZWMzKCBzcGhlcmVVdiwgMSApICkueHk7XFxuICAgICAgdmVjMyBtYXRjYXAgPSB0ZXh0dXJlMkQoIG1hdGNhcFRleHR1cmUsIHNwaGVyZVV2ICkucmdiO1xcbiAgICAgIHJpbSArPSBtYXRjYXBGYWN0b3IgKiBtYXRjYXA7XFxuICAgIH1cXG4gICNlbmRpZlxcblxcbiAgI2lmZGVmIFVTRV9SSU1NVUxUSVBMWVRFWFRVUkVcXG4gICAgdmVjMiByaW1NdWx0aXBseVRleHR1cmVVdiA9ICggcmltTXVsdGlwbHlUZXh0dXJlVXZUcmFuc2Zvcm0gKiB2ZWMzKCB1diwgMSApICkueHk7XFxuICAgIHJpbSAqPSB0ZXh0dXJlMkQoIHJpbU11bHRpcGx5VGV4dHVyZSwgcmltTXVsdGlwbHlUZXh0dXJlVXYgKS5yZ2I7XFxuICAjZW5kaWZcXG5cXG4gIGNvbCArPSByaW1NaXggKiByaW07XFxuXFxuICAvLyAtLSBNVG9vbjogRW1pc3Npb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4gIGNvbCArPSB0b3RhbEVtaXNzaXZlUmFkaWFuY2U7XFxuXFxuICAvLyAjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcbiAgLy8gLS0gQWxtb3N0IGRvbmUhIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuICAjaWYgZGVmaW5lZCggT1VUTElORSApXFxuICAgIGNvbCA9IG91dGxpbmVDb2xvckZhY3Rvci5yZ2IgKiBtaXgoIHZlYzMoIDEuMCApLCBjb2wsIG91dGxpbmVMaWdodGluZ01peEZhY3RvciApO1xcbiAgI2VuZGlmXFxuXFxuICBnbF9GcmFnQ29sb3IgPSB2ZWM0KCBjb2wsIGRpZmZ1c2VDb2xvci5hICk7XFxuICBwb3N0Q29ycmVjdGlvbigpO1xcbn1cXG5cIjtcblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4vKipcbiAqIFNwZWNpZmllcnMgb2YgZGVidWcgbW9kZSBvZiB7QGxpbmsgTVRvb25NYXRlcmlhbH0uXG4gKlxuICogU2VlOiB7QGxpbmsgTVRvb25NYXRlcmlhbC5kZWJ1Z01vZGV9XG4gKi9cbmNvbnN0IE1Ub29uTWF0ZXJpYWxEZWJ1Z01vZGUgPSB7XG4gICAgLyoqXG4gICAgICogUmVuZGVyIG5vcm1hbGx5LlxuICAgICAqL1xuICAgIE5vbmU6ICdub25lJyxcbiAgICAvKipcbiAgICAgKiBWaXN1YWxpemUgbm9ybWFscyBvZiB0aGUgc3VyZmFjZS5cbiAgICAgKi9cbiAgICBOb3JtYWw6ICdub3JtYWwnLFxuICAgIC8qKlxuICAgICAqIFZpc3VhbGl6ZSBsaXQvc2hhZGUgb2YgdGhlIHN1cmZhY2UuXG4gICAgICovXG4gICAgTGl0U2hhZGVSYXRlOiAnbGl0U2hhZGVSYXRlJyxcbiAgICAvKipcbiAgICAgKiBWaXN1YWxpemUgVVYgb2YgdGhlIHN1cmZhY2UuXG4gICAgICovXG4gICAgVVY6ICd1dicsXG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbmNvbnN0IE1Ub29uTWF0ZXJpYWxPdXRsaW5lV2lkdGhNb2RlID0ge1xuICAgIE5vbmU6ICdub25lJyxcbiAgICBXb3JsZENvb3JkaW5hdGVzOiAnd29ybGRDb29yZGluYXRlcycsXG4gICAgU2NyZWVuQ29vcmRpbmF0ZXM6ICdzY3JlZW5Db29yZGluYXRlcycsXG59O1xuXG5jb25zdCBlbmNvZGluZ0NvbG9yU3BhY2VNYXAgPSB7XG4gICAgMzAwMDogJycsXG4gICAgMzAwMTogJ3NyZ2InLFxufTtcbi8qKlxuICogQSBjb21wYXQgZnVuY3Rpb24gdG8gZ2V0IHRleHR1cmUgY29sb3Igc3BhY2UuXG4gKlxuICogQ09NUEFUOiBwcmUtcjE1MlxuICogU3RhcnRpbmcgZnJvbSBUaHJlZS5qcyByMTUyLCBgdGV4dHVyZS5lbmNvZGluZ2AgaXMgcmVuYW1lZCB0byBgdGV4dHVyZS5jb2xvclNwYWNlYC5cbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBoYW5kbGUgdGhlIGNvbWFwdC5cbiAqXG4gKiBAcGFyYW0gdGV4dHVyZSBUaGUgdGV4dHVyZSB5b3Ugd2FudCB0byBnZXQgdGhlIGNvbG9yIHNwYWNlIGZyb21cbiAqL1xuZnVuY3Rpb24gZ2V0VGV4dHVyZUNvbG9yU3BhY2UodGV4dHVyZSkge1xuICAgIGlmIChwYXJzZUludChUSFJFRS5SRVZJU0lPTiwgMTApID49IDE1Mikge1xuICAgICAgICByZXR1cm4gdGV4dHVyZS5jb2xvclNwYWNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVuY29kaW5nQ29sb3JTcGFjZU1hcFt0ZXh0dXJlLmVuY29kaW5nXTtcbiAgICB9XG59XG5cbi8qIHRzbGludDpkaXNhYmxlOm1lbWJlci1vcmRlcmluZyAqL1xuLyoqXG4gKiBNVG9vbiBpcyBhIG1hdGVyaWFsIHNwZWNpZmljYXRpb24gdGhhdCBoYXMgdmFyaW91cyBmZWF0dXJlcy5cbiAqIFRoZSBzcGVjIGFuZCBpbXBsZW1lbnRhdGlvbiBhcmUgb3JpZ2luYWxseSBmb3VuZGVkIGZvciBVbml0eSBlbmdpbmUgYW5kIHRoaXMgaXMgYSBwb3J0IG9mIHRoZSBtYXRlcmlhbC5cbiAqXG4gKiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9TYW50YXJoL01Ub29uXG4gKi9cbmNsYXNzIE1Ub29uTWF0ZXJpYWwgZXh0ZW5kcyBUSFJFRS5TaGFkZXJNYXRlcmlhbCB7XG4gICAgZ2V0IGNvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5saXRGYWN0b3IudmFsdWU7XG4gICAgfVxuICAgIHNldCBjb2xvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmxpdEZhY3Rvci52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgbWFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5tYXAudmFsdWU7XG4gICAgfVxuICAgIHNldCBtYXAodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5tYXAudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IG5vcm1hbE1hcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgbm9ybWFsTWFwKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBub3JtYWxTY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWU7XG4gICAgfVxuICAgIHNldCBub3JtYWxTY2FsZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBlbWlzc2l2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuZW1pc3NpdmUudmFsdWU7XG4gICAgfVxuICAgIHNldCBlbWlzc2l2ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmVtaXNzaXZlLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBlbWlzc2l2ZUludGVuc2l0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuZW1pc3NpdmVJbnRlbnNpdHkudmFsdWU7XG4gICAgfVxuICAgIHNldCBlbWlzc2l2ZUludGVuc2l0eSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmVtaXNzaXZlSW50ZW5zaXR5LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBlbWlzc2l2ZU1hcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuZW1pc3NpdmVNYXAudmFsdWU7XG4gICAgfVxuICAgIHNldCBlbWlzc2l2ZU1hcCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmVtaXNzaXZlTWFwLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBzaGFkZUNvbG9yRmFjdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5zaGFkZUNvbG9yRmFjdG9yLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgc2hhZGVDb2xvckZhY3Rvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnNoYWRlQ29sb3JGYWN0b3IudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHNoYWRlTXVsdGlwbHlUZXh0dXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5zaGFkZU11bHRpcGx5VGV4dHVyZS52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHNoYWRlTXVsdGlwbHlUZXh0dXJlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuc2hhZGVNdWx0aXBseVRleHR1cmUudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHNoYWRpbmdTaGlmdEZhY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuc2hhZGluZ1NoaWZ0RmFjdG9yLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgc2hhZGluZ1NoaWZ0RmFjdG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuc2hhZGluZ1NoaWZ0RmFjdG9yLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBzaGFkaW5nU2hpZnRUZXh0dXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5zaGFkaW5nU2hpZnRUZXh0dXJlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgc2hhZGluZ1NoaWZ0VGV4dHVyZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnNoYWRpbmdTaGlmdFRleHR1cmUudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHNoYWRpbmdTaGlmdFRleHR1cmVTY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuc2hhZGluZ1NoaWZ0VGV4dHVyZVNjYWxlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgc2hhZGluZ1NoaWZ0VGV4dHVyZVNjYWxlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuc2hhZGluZ1NoaWZ0VGV4dHVyZVNjYWxlLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBzaGFkaW5nVG9vbnlGYWN0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnNoYWRpbmdUb29ueUZhY3Rvci52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHNoYWRpbmdUb29ueUZhY3Rvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnNoYWRpbmdUb29ueUZhY3Rvci52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgZ2lFcXVhbGl6YXRpb25GYWN0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmdpRXF1YWxpemF0aW9uRmFjdG9yLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgZ2lFcXVhbGl6YXRpb25GYWN0b3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5naUVxdWFsaXphdGlvbkZhY3Rvci52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgbWF0Y2FwRmFjdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5tYXRjYXBGYWN0b3IudmFsdWU7XG4gICAgfVxuICAgIHNldCBtYXRjYXBGYWN0b3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5tYXRjYXBGYWN0b3IudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IG1hdGNhcFRleHR1cmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLm1hdGNhcFRleHR1cmUudmFsdWU7XG4gICAgfVxuICAgIHNldCBtYXRjYXBUZXh0dXJlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMubWF0Y2FwVGV4dHVyZS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgcGFyYW1ldHJpY1JpbUNvbG9yRmFjdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5wYXJhbWV0cmljUmltQ29sb3JGYWN0b3IudmFsdWU7XG4gICAgfVxuICAgIHNldCBwYXJhbWV0cmljUmltQ29sb3JGYWN0b3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5wYXJhbWV0cmljUmltQ29sb3JGYWN0b3IudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHJpbU11bHRpcGx5VGV4dHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmltTXVsdGlwbHlUZXh0dXJlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgcmltTXVsdGlwbHlUZXh0dXJlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucmltTXVsdGlwbHlUZXh0dXJlLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCByaW1MaWdodGluZ01peEZhY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmltTGlnaHRpbmdNaXhGYWN0b3IudmFsdWU7XG4gICAgfVxuICAgIHNldCByaW1MaWdodGluZ01peEZhY3Rvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnJpbUxpZ2h0aW5nTWl4RmFjdG9yLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBwYXJhbWV0cmljUmltRnJlc25lbFBvd2VyRmFjdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5wYXJhbWV0cmljUmltRnJlc25lbFBvd2VyRmFjdG9yLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgcGFyYW1ldHJpY1JpbUZyZXNuZWxQb3dlckZhY3Rvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnBhcmFtZXRyaWNSaW1GcmVzbmVsUG93ZXJGYWN0b3IudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHBhcmFtZXRyaWNSaW1MaWZ0RmFjdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5wYXJhbWV0cmljUmltTGlmdEZhY3Rvci52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHBhcmFtZXRyaWNSaW1MaWZ0RmFjdG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucGFyYW1ldHJpY1JpbUxpZnRGYWN0b3IudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IG91dGxpbmVXaWR0aE11bHRpcGx5VGV4dHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMub3V0bGluZVdpZHRoTXVsdGlwbHlUZXh0dXJlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgb3V0bGluZVdpZHRoTXVsdGlwbHlUZXh0dXJlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMub3V0bGluZVdpZHRoTXVsdGlwbHlUZXh0dXJlLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBvdXRsaW5lV2lkdGhGYWN0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLm91dGxpbmVXaWR0aEZhY3Rvci52YWx1ZTtcbiAgICB9XG4gICAgc2V0IG91dGxpbmVXaWR0aEZhY3Rvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLm91dGxpbmVXaWR0aEZhY3Rvci52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgb3V0bGluZUNvbG9yRmFjdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5vdXRsaW5lQ29sb3JGYWN0b3IudmFsdWU7XG4gICAgfVxuICAgIHNldCBvdXRsaW5lQ29sb3JGYWN0b3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5vdXRsaW5lQ29sb3JGYWN0b3IudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IG91dGxpbmVMaWdodGluZ01peEZhY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMub3V0bGluZUxpZ2h0aW5nTWl4RmFjdG9yLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgb3V0bGluZUxpZ2h0aW5nTWl4RmFjdG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMub3V0bGluZUxpZ2h0aW5nTWl4RmFjdG9yLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCB1dkFuaW1hdGlvbk1hc2tUZXh0dXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy51dkFuaW1hdGlvbk1hc2tUZXh0dXJlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgdXZBbmltYXRpb25NYXNrVGV4dHVyZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnV2QW5pbWF0aW9uTWFza1RleHR1cmUudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHV2QW5pbWF0aW9uU2Nyb2xsWE9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMudXZBbmltYXRpb25TY3JvbGxYT2Zmc2V0LnZhbHVlO1xuICAgIH1cbiAgICBzZXQgdXZBbmltYXRpb25TY3JvbGxYT2Zmc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMudXZBbmltYXRpb25TY3JvbGxYT2Zmc2V0LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCB1dkFuaW1hdGlvblNjcm9sbFlPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnV2QW5pbWF0aW9uU2Nyb2xsWU9mZnNldC52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHV2QW5pbWF0aW9uU2Nyb2xsWU9mZnNldCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnV2QW5pbWF0aW9uU2Nyb2xsWU9mZnNldC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgdXZBbmltYXRpb25Sb3RhdGlvblBoYXNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy51dkFuaW1hdGlvblJvdGF0aW9uUGhhc2UudmFsdWU7XG4gICAgfVxuICAgIHNldCB1dkFuaW1hdGlvblJvdGF0aW9uUGhhc2UodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy51dkFuaW1hdGlvblJvdGF0aW9uUGhhc2UudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGlzIGlzIGB0cnVlYCwgdmVydGV4IGNvbG9ycyB3aWxsIGJlIGlnbm9yZWQuXG4gICAgICogYHRydWVgIGJ5IGRlZmF1bHQuXG4gICAgICovXG4gICAgZ2V0IGlnbm9yZVZlcnRleENvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWdub3JlVmVydGV4Q29sb3I7XG4gICAgfVxuICAgIHNldCBpZ25vcmVWZXJ0ZXhDb2xvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9pZ25vcmVWZXJ0ZXhDb2xvciA9IHZhbHVlO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlcmUgaXMgYSBsaW5lIG9mIHRoZSBzaGFkZXIgY2FsbGVkIFwiY29tbWVudCBvdXQgaWYgeW91IHdhbnQgdG8gUEJSIGFic29sdXRlbHlcIiBpbiBWUk0wLjAgTVRvb24uXG4gICAgICogV2hlbiB0aGlzIGlzIHRydWUsIHRoZSBtYXRlcmlhbCBlbmFibGVzIHRoZSBsaW5lIHRvIG1ha2UgaXQgY29tcGF0aWJsZSB3aXRoIHRoZSBsZWdhY3kgcmVuZGVyaW5nIG9mIFZSTS5cbiAgICAgKiBVc3VhbGx5IG5vdCByZWNvbW1lbmRlZCB0byB0dXJuIHRoaXMgb24uXG4gICAgICogYGZhbHNlYCBieSBkZWZhdWx0LlxuICAgICAqL1xuICAgIGdldCB2MENvbXBhdFNoYWRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdjBDb21wYXRTaGFkZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlcmUgaXMgYSBsaW5lIG9mIHRoZSBzaGFkZXIgY2FsbGVkIFwiY29tbWVudCBvdXQgaWYgeW91IHdhbnQgdG8gUEJSIGFic29sdXRlbHlcIiBpbiBWUk0wLjAgTVRvb24uXG4gICAgICogV2hlbiB0aGlzIGlzIHRydWUsIHRoZSBtYXRlcmlhbCBlbmFibGVzIHRoZSBsaW5lIHRvIG1ha2UgaXQgY29tcGF0aWJsZSB3aXRoIHRoZSBsZWdhY3kgcmVuZGVyaW5nIG9mIFZSTS5cbiAgICAgKiBVc3VhbGx5IG5vdCByZWNvbW1lbmRlZCB0byB0dXJuIHRoaXMgb24uXG4gICAgICogYGZhbHNlYCBieSBkZWZhdWx0LlxuICAgICAqL1xuICAgIHNldCB2MENvbXBhdFNoYWRlKHYpIHtcbiAgICAgICAgdGhpcy5fdjBDb21wYXRTaGFkZSA9IHY7XG4gICAgICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWJ1ZyBtb2RlIGZvciB0aGUgbWF0ZXJpYWwuXG4gICAgICogWW91IGNhbiB2aXN1YWxpemUgc2V2ZXJhbCBjb21wb25lbnRzIGZvciBkaWFnbm9zaXMgdXNpbmcgZGVidWcgbW9kZS5cbiAgICAgKlxuICAgICAqIFNlZToge0BsaW5rIE1Ub29uTWF0ZXJpYWxEZWJ1Z01vZGV9XG4gICAgICovXG4gICAgZ2V0IGRlYnVnTW9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlYnVnTW9kZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVidWcgbW9kZSBmb3IgdGhlIG1hdGVyaWFsLlxuICAgICAqIFlvdSBjYW4gdmlzdWFsaXplIHNldmVyYWwgY29tcG9uZW50cyBmb3IgZGlhZ25vc2lzIHVzaW5nIGRlYnVnIG1vZGUuXG4gICAgICpcbiAgICAgKiBTZWU6IHtAbGluayBNVG9vbk1hdGVyaWFsRGVidWdNb2RlfVxuICAgICAqL1xuICAgIHNldCBkZWJ1Z01vZGUobSkge1xuICAgICAgICB0aGlzLl9kZWJ1Z01vZGUgPSBtO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0IG91dGxpbmVXaWR0aE1vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vdXRsaW5lV2lkdGhNb2RlO1xuICAgIH1cbiAgICBzZXQgb3V0bGluZVdpZHRoTW9kZShtKSB7XG4gICAgICAgIHRoaXMuX291dGxpbmVXaWR0aE1vZGUgPSBtO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0IGlzT3V0bGluZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzT3V0bGluZTtcbiAgICB9XG4gICAgc2V0IGlzT3V0bGluZShiKSB7XG4gICAgICAgIHRoaXMuX2lzT3V0bGluZSA9IGI7XG4gICAgICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkb25seSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIHRoaXMgaXMgYSBbW01Ub29uTWF0ZXJpYWxdXS5cbiAgICAgKi9cbiAgICBnZXQgaXNNVG9vbk1hdGVyaWFsKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHsgdmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlciB9KTtcbiAgICAgICAgdGhpcy51dkFuaW1hdGlvblNjcm9sbFhTcGVlZEZhY3RvciA9IDAuMDtcbiAgICAgICAgdGhpcy51dkFuaW1hdGlvblNjcm9sbFlTcGVlZEZhY3RvciA9IDAuMDtcbiAgICAgICAgdGhpcy51dkFuaW1hdGlvblJvdGF0aW9uU3BlZWRGYWN0b3IgPSAwLjA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoZSBtYXRlcmlhbCBpcyBhZmZlY3RlZCBieSBmb2cuXG4gICAgICAgICAqIGB0cnVlYCBieSBkZWZhdWx0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mb2cgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogV2lsbCBiZSByZWFkIGluIFdlYkdMUHJvZ3JhbXNcbiAgICAgICAgICpcbiAgICAgICAgICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2Jsb2IvNGY1MjM2YWMzZDZmNDFkOTA0YWE1ODQwMWI0MDU1NGU4ZmJkY2IxNS9zcmMvcmVuZGVyZXJzL3dlYmdsL1dlYkdMUHJvZ3JhbXMuanMjTDE5MC1MMTkxXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5vcm1hbE1hcFR5cGUgPSBUSFJFRS5UYW5nZW50U3BhY2VOb3JtYWxNYXA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIHRoaXMgaXMgYHRydWVgLCB2ZXJ0ZXggY29sb3JzIHdpbGwgYmUgaWdub3JlZC5cbiAgICAgICAgICogYHRydWVgIGJ5IGRlZmF1bHQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9pZ25vcmVWZXJ0ZXhDb2xvciA9IHRydWU7XG4gICAgICAgIHRoaXMuX3YwQ29tcGF0U2hhZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZGVidWdNb2RlID0gTVRvb25NYXRlcmlhbERlYnVnTW9kZS5Ob25lO1xuICAgICAgICB0aGlzLl9vdXRsaW5lV2lkdGhNb2RlID0gTVRvb25NYXRlcmlhbE91dGxpbmVXaWR0aE1vZGUuTm9uZTtcbiAgICAgICAgdGhpcy5faXNPdXRsaW5lID0gZmFsc2U7XG4gICAgICAgIC8vIG92ZXJyaWRlIGRlcHRoV3JpdGUgd2l0aCB0cmFuc3BhcmVudFdpdGhaV3JpdGVcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMudHJhbnNwYXJlbnRXaXRoWldyaXRlKSB7XG4gICAgICAgICAgICBwYXJhbWV0ZXJzLmRlcHRoV3JpdGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBwYXJhbWV0ZXJzLnRyYW5zcGFyZW50V2l0aFpXcml0ZTtcbiAgICAgICAgLy8gPT0gZW5hYmxpbmcgYnVuY2ggb2Ygc3R1ZmYgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIHBhcmFtZXRlcnMuZm9nID0gdHJ1ZTtcbiAgICAgICAgcGFyYW1ldGVycy5saWdodHMgPSB0cnVlO1xuICAgICAgICBwYXJhbWV0ZXJzLmNsaXBwaW5nID0gdHJ1ZTtcbiAgICAgICAgLy8gQ09NUEFUOiBwcmUtcjEyOVxuICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvcHVsbC8yMTc4OFxuICAgICAgICBpZiAocGFyc2VJbnQoVEhSRUUuUkVWSVNJT04sIDEwKSA8IDEyOSkge1xuICAgICAgICAgICAgcGFyYW1ldGVycy5za2lubmluZyA9IHBhcmFtZXRlcnMuc2tpbm5pbmcgfHwgZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ09NUEFUOiBwcmUtcjEzMVxuICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvcHVsbC8yMjE2OVxuICAgICAgICBpZiAocGFyc2VJbnQoVEhSRUUuUkVWSVNJT04sIDEwKSA8IDEzMSkge1xuICAgICAgICAgICAgcGFyYW1ldGVycy5tb3JwaFRhcmdldHMgPSBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0cyB8fCBmYWxzZTtcbiAgICAgICAgICAgIHBhcmFtZXRlcnMubW9ycGhOb3JtYWxzID0gcGFyYW1ldGVycy5tb3JwaE5vcm1hbHMgfHwgZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gPT0gdW5pZm9ybXMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSBUSFJFRS5Vbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIFRIUkVFLlVuaWZvcm1zTGliLmNvbW1vbixcbiAgICAgICAgICAgIFRIUkVFLlVuaWZvcm1zTGliLm5vcm1hbG1hcCxcbiAgICAgICAgICAgIFRIUkVFLlVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxuICAgICAgICAgICAgVEhSRUUuVW5pZm9ybXNMaWIuZm9nLFxuICAgICAgICAgICAgVEhSRUUuVW5pZm9ybXNMaWIubGlnaHRzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxpdEZhY3RvcjogeyB2YWx1ZTogbmV3IFRIUkVFLkNvbG9yKDEuMCwgMS4wLCAxLjApIH0sXG4gICAgICAgICAgICAgICAgbWFwVXZUcmFuc2Zvcm06IHsgdmFsdWU6IG5ldyBUSFJFRS5NYXRyaXgzKCkgfSxcbiAgICAgICAgICAgICAgICBjb2xvckFscGhhOiB7IHZhbHVlOiAxLjAgfSxcbiAgICAgICAgICAgICAgICBub3JtYWxNYXBVdlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IFRIUkVFLk1hdHJpeDMoKSB9LFxuICAgICAgICAgICAgICAgIHNoYWRlQ29sb3JGYWN0b3I6IHsgdmFsdWU6IG5ldyBUSFJFRS5Db2xvcigwLjk3LCAwLjgxLCAwLjg2KSB9LFxuICAgICAgICAgICAgICAgIHNoYWRlTXVsdGlwbHlUZXh0dXJlOiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgc2hhZGVNdWx0aXBseVRleHR1cmVVdlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IFRIUkVFLk1hdHJpeDMoKSB9LFxuICAgICAgICAgICAgICAgIHNoYWRpbmdTaGlmdEZhY3RvcjogeyB2YWx1ZTogMC4wIH0sXG4gICAgICAgICAgICAgICAgc2hhZGluZ1NoaWZ0VGV4dHVyZTogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgIHNoYWRpbmdTaGlmdFRleHR1cmVVdlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IFRIUkVFLk1hdHJpeDMoKSB9LFxuICAgICAgICAgICAgICAgIHNoYWRpbmdTaGlmdFRleHR1cmVTY2FsZTogeyB2YWx1ZTogMS4wIH0sXG4gICAgICAgICAgICAgICAgc2hhZGluZ1Rvb255RmFjdG9yOiB7IHZhbHVlOiAwLjkgfSxcbiAgICAgICAgICAgICAgICBnaUVxdWFsaXphdGlvbkZhY3RvcjogeyB2YWx1ZTogMC45IH0sXG4gICAgICAgICAgICAgICAgbWF0Y2FwRmFjdG9yOiB7IHZhbHVlOiBuZXcgVEhSRUUuQ29sb3IoMC4wLCAwLjAsIDAuMCkgfSxcbiAgICAgICAgICAgICAgICBtYXRjYXBUZXh0dXJlOiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgbWF0Y2FwVGV4dHVyZVV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgVEhSRUUuTWF0cml4MygpIH0sXG4gICAgICAgICAgICAgICAgcGFyYW1ldHJpY1JpbUNvbG9yRmFjdG9yOiB7IHZhbHVlOiBuZXcgVEhSRUUuQ29sb3IoMC4wLCAwLjAsIDAuMCkgfSxcbiAgICAgICAgICAgICAgICByaW1NdWx0aXBseVRleHR1cmU6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICByaW1NdWx0aXBseVRleHR1cmVVdlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IFRIUkVFLk1hdHJpeDMoKSB9LFxuICAgICAgICAgICAgICAgIHJpbUxpZ2h0aW5nTWl4RmFjdG9yOiB7IHZhbHVlOiAwLjAgfSxcbiAgICAgICAgICAgICAgICBwYXJhbWV0cmljUmltRnJlc25lbFBvd2VyRmFjdG9yOiB7IHZhbHVlOiAxLjAgfSxcbiAgICAgICAgICAgICAgICBwYXJhbWV0cmljUmltTGlmdEZhY3RvcjogeyB2YWx1ZTogMC4wIH0sXG4gICAgICAgICAgICAgICAgZW1pc3NpdmU6IHsgdmFsdWU6IG5ldyBUSFJFRS5Db2xvcigwLjAsIDAuMCwgMC4wKSB9LFxuICAgICAgICAgICAgICAgIGVtaXNzaXZlSW50ZW5zaXR5OiB7IHZhbHVlOiAxLjAgfSxcbiAgICAgICAgICAgICAgICBlbWlzc2l2ZU1hcFV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgVEhSRUUuTWF0cml4MygpIH0sXG4gICAgICAgICAgICAgICAgb3V0bGluZVdpZHRoTXVsdGlwbHlUZXh0dXJlOiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgb3V0bGluZVdpZHRoTXVsdGlwbHlUZXh0dXJlVXZUcmFuc2Zvcm06IHsgdmFsdWU6IG5ldyBUSFJFRS5NYXRyaXgzKCkgfSxcbiAgICAgICAgICAgICAgICBvdXRsaW5lV2lkdGhGYWN0b3I6IHsgdmFsdWU6IDAuNSB9LFxuICAgICAgICAgICAgICAgIG91dGxpbmVDb2xvckZhY3RvcjogeyB2YWx1ZTogbmV3IFRIUkVFLkNvbG9yKDAuMCwgMC4wLCAwLjApIH0sXG4gICAgICAgICAgICAgICAgb3V0bGluZUxpZ2h0aW5nTWl4RmFjdG9yOiB7IHZhbHVlOiAxLjAgfSxcbiAgICAgICAgICAgICAgICB1dkFuaW1hdGlvbk1hc2tUZXh0dXJlOiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgdXZBbmltYXRpb25NYXNrVGV4dHVyZVV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgVEhSRUUuTWF0cml4MygpIH0sXG4gICAgICAgICAgICAgICAgdXZBbmltYXRpb25TY3JvbGxYT2Zmc2V0OiB7IHZhbHVlOiAwLjAgfSxcbiAgICAgICAgICAgICAgICB1dkFuaW1hdGlvblNjcm9sbFlPZmZzZXQ6IHsgdmFsdWU6IDAuMCB9LFxuICAgICAgICAgICAgICAgIHV2QW5pbWF0aW9uUm90YXRpb25QaGFzZTogeyB2YWx1ZTogMC4wIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFyYW1ldGVycy51bmlmb3JtcyxcbiAgICAgICAgXSk7XG4gICAgICAgIC8vID09IGZpbmFsbHkgY29tcGlsZSB0aGUgc2hhZGVyIHByb2dyYW0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICB0aGlzLnNldFZhbHVlcyhwYXJhbWV0ZXJzKTtcbiAgICAgICAgLy8gPT0gdXBsb2FkIHVuaWZvcm1zIHRoYXQgbmVlZCB0byB1cGxvYWQgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIHRoaXMuX3VwbG9hZFVuaWZvcm1zV29ya2Fyb3VuZCgpO1xuICAgICAgICAvLyA9PSB1cGRhdGUgc2hhZGVyIHN0dWZmID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgdGhpcy5jdXN0b21Qcm9ncmFtQ2FjaGVLZXkgPSAoKSA9PiBbXG4gICAgICAgICAgICAuLi5PYmplY3QuZW50cmllcyh0aGlzLl9nZW5lcmF0ZURlZmluZXMoKSkubWFwKChbdG9rZW4sIG1hY3JvXSkgPT4gYCR7dG9rZW59OiR7bWFjcm99YCksXG4gICAgICAgICAgICB0aGlzLm1hdGNhcFRleHR1cmUgPyBgbWF0Y2FwVGV4dHVyZUNvbG9yU3BhY2U6JHtnZXRUZXh0dXJlQ29sb3JTcGFjZSh0aGlzLm1hdGNhcFRleHR1cmUpfWAgOiAnJyxcbiAgICAgICAgICAgIHRoaXMuc2hhZGVNdWx0aXBseVRleHR1cmVcbiAgICAgICAgICAgICAgICA/IGBzaGFkZU11bHRpcGx5VGV4dHVyZUNvbG9yU3BhY2U6JHtnZXRUZXh0dXJlQ29sb3JTcGFjZSh0aGlzLnNoYWRlTXVsdGlwbHlUZXh0dXJlKX1gXG4gICAgICAgICAgICAgICAgOiAnJyxcbiAgICAgICAgICAgIHRoaXMucmltTXVsdGlwbHlUZXh0dXJlID8gYHJpbU11bHRpcGx5VGV4dHVyZUNvbG9yU3BhY2U6JHtnZXRUZXh0dXJlQ29sb3JTcGFjZSh0aGlzLnJpbU11bHRpcGx5VGV4dHVyZSl9YCA6ICcnLFxuICAgICAgICBdLmpvaW4oJywnKTtcbiAgICAgICAgdGhpcy5vbkJlZm9yZUNvbXBpbGUgPSAoc2hhZGVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0aHJlZVJldmlzaW9uID0gcGFyc2VJbnQoVEhSRUUuUkVWSVNJT04sIDEwKTtcbiAgICAgICAgICAgIGNvbnN0IGRlZmluZXMgPSBPYmplY3QuZW50cmllcyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX2dlbmVyYXRlRGVmaW5lcygpKSwgdGhpcy5kZWZpbmVzKSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChbdG9rZW4sIG1hY3JvXSkgPT4gISFtYWNybylcbiAgICAgICAgICAgICAgICAubWFwKChbdG9rZW4sIG1hY3JvXSkgPT4gYCNkZWZpbmUgJHt0b2tlbn0gJHttYWNyb31gKVxuICAgICAgICAgICAgICAgIC5qb2luKCdcXG4nKSArICdcXG4nO1xuICAgICAgICAgICAgLy8gLS0gZ2VuZXJhdGUgc2hhZGVyIGNvZGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgc2hhZGVyLnZlcnRleFNoYWRlciA9IGRlZmluZXMgKyBzaGFkZXIudmVydGV4U2hhZGVyO1xuICAgICAgICAgICAgc2hhZGVyLmZyYWdtZW50U2hhZGVyID0gZGVmaW5lcyArIHNoYWRlci5mcmFnbWVudFNoYWRlcjtcbiAgICAgICAgICAgIC8vIC0tIGNvbXBhdCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIC8vIENPTVBBVDogcHJlLXIxMzJcbiAgICAgICAgICAgIC8vIFRocmVlLmpzIHIxMzIgaW50cm9kdWNlcyBuZXcgc2hhZGVyIGNodW5rcyA8bm9ybWFsX3BhcnNfZnJhZ21lbnQ+IGFuZCA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XG4gICAgICAgICAgICBpZiAodGhyZWVSZXZpc2lvbiA8IDEzMikge1xuICAgICAgICAgICAgICAgIHNoYWRlci5mcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlci5yZXBsYWNlKCcjaW5jbHVkZSA8bm9ybWFsX3BhcnNfZnJhZ21lbnQ+JywgJycpO1xuICAgICAgICAgICAgICAgIHNoYWRlci5mcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlci5yZXBsYWNlKCcjaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+JywgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhpcyBtYXRlcmlhbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZWx0YSBkZWx0YVRpbWUgc2luY2UgbGFzdCB1cGRhdGVcbiAgICAgKi9cbiAgICB1cGRhdGUoZGVsdGEpIHtcbiAgICAgICAgdGhpcy5fdXBsb2FkVW5pZm9ybXNXb3JrYXJvdW5kKCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVVWQW5pbWF0aW9uKGRlbHRhKTtcbiAgICB9XG4gICAgY29weShzb3VyY2UpIHtcbiAgICAgICAgc3VwZXIuY29weShzb3VyY2UpO1xuICAgICAgICAvLyB1bmlmb3JtcyBhcmUgYWxyZWFkeSBjb3BpZWQgYXQgdGhpcyBtb21lbnRcbiAgICAgICAgLy8gQmVnaW5uaW5nIGZyb20gcjEzMywgdW5pZm9ybSB0ZXh0dXJlcyB3aWxsIGJlIGNsb25lZCBpbnN0ZWFkIG9mIHJlZmVyZW5jZVxuICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvYmxvYi9hODgxM2JlMDRhODQ5YmQxNTVmN2NmNmYxYjIzZDhlZTJlMGZiNDhiL2V4YW1wbGVzL2pzbS9sb2FkZXJzL0dMVEZMb2FkZXIuanMjTDMwNDdcbiAgICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2Jsb2IvYTg4MTNiZTA0YTg0OWJkMTU1ZjdjZjZmMWIyM2Q4ZWUyZTBmYjQ4Yi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvVW5pZm9ybXNVdGlscy5qcyNMMjJcbiAgICAgICAgLy8gVGhpcyB3aWxsIGxlYXZlIHRoZWlyIGAudmVyc2lvbmAgdG8gYmUgYDBgXG4gICAgICAgIC8vIGFuZCB0aGVzZSB0ZXh0dXJlcyB3b24ndCBiZSB1cGxvYWRlZCB0byBHUFVcbiAgICAgICAgLy8gV2UgYXJlIGdvaW5nIHRvIHdvcmthcm91bmQgdGhpcyBpbiBoZXJlXG4gICAgICAgIC8vIEkndmUgb3BlbmVkIGFuIGlzc3VlIGZvciB0aGlzOiBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2lzc3Vlcy8yMjcxOFxuICAgICAgICB0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG4gICAgICAgIHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcbiAgICAgICAgdGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcbiAgICAgICAgdGhpcy5zaGFkZU11bHRpcGx5VGV4dHVyZSA9IHNvdXJjZS5zaGFkZU11bHRpcGx5VGV4dHVyZTtcbiAgICAgICAgdGhpcy5zaGFkaW5nU2hpZnRUZXh0dXJlID0gc291cmNlLnNoYWRpbmdTaGlmdFRleHR1cmU7XG4gICAgICAgIHRoaXMubWF0Y2FwVGV4dHVyZSA9IHNvdXJjZS5tYXRjYXBUZXh0dXJlO1xuICAgICAgICB0aGlzLnJpbU11bHRpcGx5VGV4dHVyZSA9IHNvdXJjZS5yaW1NdWx0aXBseVRleHR1cmU7XG4gICAgICAgIHRoaXMub3V0bGluZVdpZHRoTXVsdGlwbHlUZXh0dXJlID0gc291cmNlLm91dGxpbmVXaWR0aE11bHRpcGx5VGV4dHVyZTtcbiAgICAgICAgdGhpcy51dkFuaW1hdGlvbk1hc2tUZXh0dXJlID0gc291cmNlLnV2QW5pbWF0aW9uTWFza1RleHR1cmU7XG4gICAgICAgIC8vID09IGNvcHkgbWVtYmVycyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICB0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcbiAgICAgICAgdGhpcy51dkFuaW1hdGlvblNjcm9sbFhTcGVlZEZhY3RvciA9IHNvdXJjZS51dkFuaW1hdGlvblNjcm9sbFhTcGVlZEZhY3RvcjtcbiAgICAgICAgdGhpcy51dkFuaW1hdGlvblNjcm9sbFlTcGVlZEZhY3RvciA9IHNvdXJjZS51dkFuaW1hdGlvblNjcm9sbFlTcGVlZEZhY3RvcjtcbiAgICAgICAgdGhpcy51dkFuaW1hdGlvblJvdGF0aW9uU3BlZWRGYWN0b3IgPSBzb3VyY2UudXZBbmltYXRpb25Sb3RhdGlvblNwZWVkRmFjdG9yO1xuICAgICAgICB0aGlzLmlnbm9yZVZlcnRleENvbG9yID0gc291cmNlLmlnbm9yZVZlcnRleENvbG9yO1xuICAgICAgICB0aGlzLnYwQ29tcGF0U2hhZGUgPSBzb3VyY2UudjBDb21wYXRTaGFkZTtcbiAgICAgICAgdGhpcy5kZWJ1Z01vZGUgPSBzb3VyY2UuZGVidWdNb2RlO1xuICAgICAgICB0aGlzLm91dGxpbmVXaWR0aE1vZGUgPSBzb3VyY2Uub3V0bGluZVdpZHRoTW9kZTtcbiAgICAgICAgdGhpcy5pc091dGxpbmUgPSBzb3VyY2UuaXNPdXRsaW5lO1xuICAgICAgICAvLyA9PSB1cGRhdGUgc2hhZGVyIHN0dWZmID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgVVYgYW5pbWF0aW9uIHN0YXRlLlxuICAgICAqIEludGVuZGVkIHRvIGJlIGNhbGxlZCB2aWEge0BsaW5rIHVwZGF0ZX0uXG4gICAgICogQHBhcmFtIGRlbHRhIGRlbHRhVGltZVxuICAgICAqL1xuICAgIF91cGRhdGVVVkFuaW1hdGlvbihkZWx0YSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnV2QW5pbWF0aW9uU2Nyb2xsWE9mZnNldC52YWx1ZSArPSBkZWx0YSAqIHRoaXMudXZBbmltYXRpb25TY3JvbGxYU3BlZWRGYWN0b3I7XG4gICAgICAgIHRoaXMudW5pZm9ybXMudXZBbmltYXRpb25TY3JvbGxZT2Zmc2V0LnZhbHVlICs9IGRlbHRhICogdGhpcy51dkFuaW1hdGlvblNjcm9sbFlTcGVlZEZhY3RvcjtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy51dkFuaW1hdGlvblJvdGF0aW9uUGhhc2UudmFsdWUgKz0gZGVsdGEgKiB0aGlzLnV2QW5pbWF0aW9uUm90YXRpb25TcGVlZEZhY3RvcjtcbiAgICAgICAgdGhpcy51bmlmb3Jtc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGxvYWQgdW5pZm9ybXMgdGhhdCBuZWVkIHRvIHVwbG9hZCBidXQgZG9lc24ndCBhdXRvbWF0aWNhbGx5IGJlY2F1c2Ugb2YgcmVhc29ucy5cbiAgICAgKiBJbnRlbmRlZCB0byBiZSBjYWxsZWQgdmlhIHtAbGluayBjb25zdHJ1Y3Rvcn0gYW5kIHtAbGluayB1cGRhdGV9LlxuICAgICAqL1xuICAgIF91cGxvYWRVbmlmb3Jtc1dvcmthcm91bmQoKSB7XG4gICAgICAgIC8vIHdvcmthcm91bmQ6IHNpbmNlIG9wYWNpdHkgaXMgZGVmaW5lZCBhcyBhIHByb3BlcnR5IGluIFRIUkVFLk1hdGVyaWFsXG4gICAgICAgIC8vIGFuZCBjYW5ub3QgYmUgb3ZlcnJpZGRlbiBhcyBhbiBhY2Nlc3NvcixcbiAgICAgICAgLy8gV2UgYXJlIGdvaW5nIHRvIHVwZGF0ZSBvcGFjaXR5IGhlcmVcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gdGhpcy5vcGFjaXR5O1xuICAgICAgICAvLyB3b3JrYXJvdW5kOiB0ZXh0dXJlIHRyYW5zZm9ybXMgYXJlIG5vdCB1cGRhdGVkIGF1dG9tYXRpY2FsbHlcbiAgICAgICAgdGhpcy5fdXBkYXRlVGV4dHVyZU1hdHJpeCh0aGlzLnVuaWZvcm1zLm1hcCwgdGhpcy51bmlmb3Jtcy5tYXBVdlRyYW5zZm9ybSk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVRleHR1cmVNYXRyaXgodGhpcy51bmlmb3Jtcy5ub3JtYWxNYXAsIHRoaXMudW5pZm9ybXMubm9ybWFsTWFwVXZUcmFuc2Zvcm0pO1xuICAgICAgICB0aGlzLl91cGRhdGVUZXh0dXJlTWF0cml4KHRoaXMudW5pZm9ybXMuZW1pc3NpdmVNYXAsIHRoaXMudW5pZm9ybXMuZW1pc3NpdmVNYXBVdlRyYW5zZm9ybSk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVRleHR1cmVNYXRyaXgodGhpcy51bmlmb3Jtcy5zaGFkZU11bHRpcGx5VGV4dHVyZSwgdGhpcy51bmlmb3Jtcy5zaGFkZU11bHRpcGx5VGV4dHVyZVV2VHJhbnNmb3JtKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlVGV4dHVyZU1hdHJpeCh0aGlzLnVuaWZvcm1zLnNoYWRpbmdTaGlmdFRleHR1cmUsIHRoaXMudW5pZm9ybXMuc2hhZGluZ1NoaWZ0VGV4dHVyZVV2VHJhbnNmb3JtKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlVGV4dHVyZU1hdHJpeCh0aGlzLnVuaWZvcm1zLm1hdGNhcFRleHR1cmUsIHRoaXMudW5pZm9ybXMubWF0Y2FwVGV4dHVyZVV2VHJhbnNmb3JtKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlVGV4dHVyZU1hdHJpeCh0aGlzLnVuaWZvcm1zLnJpbU11bHRpcGx5VGV4dHVyZSwgdGhpcy51bmlmb3Jtcy5yaW1NdWx0aXBseVRleHR1cmVVdlRyYW5zZm9ybSk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVRleHR1cmVNYXRyaXgodGhpcy51bmlmb3Jtcy5vdXRsaW5lV2lkdGhNdWx0aXBseVRleHR1cmUsIHRoaXMudW5pZm9ybXMub3V0bGluZVdpZHRoTXVsdGlwbHlUZXh0dXJlVXZUcmFuc2Zvcm0pO1xuICAgICAgICB0aGlzLl91cGRhdGVUZXh0dXJlTWF0cml4KHRoaXMudW5pZm9ybXMudXZBbmltYXRpb25NYXNrVGV4dHVyZSwgdGhpcy51bmlmb3Jtcy51dkFuaW1hdGlvbk1hc2tUZXh0dXJlVXZUcmFuc2Zvcm0pO1xuICAgICAgICAvLyBDT01QQVQgd29ya2Fyb3VuZDogc3RhcnRpbmcgZnJvbSByMTMyLCBhbHBoYVRlc3QgYmVjb21lcyBhIHVuaWZvcm0gaW5zdGVhZCBvZiBwcmVwcm9jZXNzb3IgdmFsdWVcbiAgICAgICAgY29uc3QgdGhyZWVSZXZpc2lvbiA9IHBhcnNlSW50KFRIUkVFLlJFVklTSU9OLCAxMCk7XG4gICAgICAgIGlmICh0aHJlZVJldmlzaW9uID49IDEzMikge1xuICAgICAgICAgICAgdGhpcy51bmlmb3Jtcy5hbHBoYVRlc3QudmFsdWUgPSB0aGlzLmFscGhhVGVzdDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuaWZvcm1zTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBtYXAgb2JqZWN0IG9mIHByZXByb2Nlc3NvciB0b2tlbiBhbmQgbWFjcm8gb2YgdGhlIHNoYWRlciBwcm9ncmFtLlxuICAgICAqL1xuICAgIF9nZW5lcmF0ZURlZmluZXMoKSB7XG4gICAgICAgIGNvbnN0IHRocmVlUmV2aXNpb24gPSBwYXJzZUludChUSFJFRS5SRVZJU0lPTiwgMTApO1xuICAgICAgICBjb25zdCB1c2VVdkluVmVydCA9IHRoaXMub3V0bGluZVdpZHRoTXVsdGlwbHlUZXh0dXJlICE9PSBudWxsO1xuICAgICAgICBjb25zdCB1c2VVdkluRnJhZyA9IHRoaXMubWFwICE9PSBudWxsIHx8XG4gICAgICAgICAgICB0aGlzLmVtaXNzaXZlTWFwICE9PSBudWxsIHx8XG4gICAgICAgICAgICB0aGlzLnNoYWRlTXVsdGlwbHlUZXh0dXJlICE9PSBudWxsIHx8XG4gICAgICAgICAgICB0aGlzLnNoYWRpbmdTaGlmdFRleHR1cmUgIT09IG51bGwgfHxcbiAgICAgICAgICAgIHRoaXMucmltTXVsdGlwbHlUZXh0dXJlICE9PSBudWxsIHx8XG4gICAgICAgICAgICB0aGlzLnV2QW5pbWF0aW9uTWFza1RleHR1cmUgIT09IG51bGw7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyBUZW1wb3JhcnkgY29tcGF0IGFnYWluc3Qgc2hhZGVyIGNoYW5nZSBAIFRocmVlLmpzIHIxMjZcbiAgICAgICAgICAgIC8vIFNlZTogIzIxMjA1LCAjMjEzMDcsICMyMTI5OVxuICAgICAgICAgICAgVEhSRUVfVlJNX1RIUkVFX1JFVklTSU9OOiB0aHJlZVJldmlzaW9uLFxuICAgICAgICAgICAgT1VUTElORTogdGhpcy5faXNPdXRsaW5lLFxuICAgICAgICAgICAgTVRPT05fVVNFX1VWOiB1c2VVdkluVmVydCB8fCB1c2VVdkluRnJhZyxcbiAgICAgICAgICAgIE1UT09OX1VWU19WRVJURVhfT05MWTogdXNlVXZJblZlcnQgJiYgIXVzZVV2SW5GcmFnLFxuICAgICAgICAgICAgVjBfQ09NUEFUX1NIQURFOiB0aGlzLl92MENvbXBhdFNoYWRlLFxuICAgICAgICAgICAgVVNFX1NIQURFTVVMVElQTFlURVhUVVJFOiB0aGlzLnNoYWRlTXVsdGlwbHlUZXh0dXJlICE9PSBudWxsLFxuICAgICAgICAgICAgVVNFX1NIQURJTkdTSElGVFRFWFRVUkU6IHRoaXMuc2hhZGluZ1NoaWZ0VGV4dHVyZSAhPT0gbnVsbCxcbiAgICAgICAgICAgIFVTRV9NQVRDQVBURVhUVVJFOiB0aGlzLm1hdGNhcFRleHR1cmUgIT09IG51bGwsXG4gICAgICAgICAgICBVU0VfUklNTVVMVElQTFlURVhUVVJFOiB0aGlzLnJpbU11bHRpcGx5VGV4dHVyZSAhPT0gbnVsbCxcbiAgICAgICAgICAgIFVTRV9PVVRMSU5FV0lEVEhNVUxUSVBMWVRFWFRVUkU6IHRoaXMuX2lzT3V0bGluZSAmJiB0aGlzLm91dGxpbmVXaWR0aE11bHRpcGx5VGV4dHVyZSAhPT0gbnVsbCxcbiAgICAgICAgICAgIFVTRV9VVkFOSU1BVElPTk1BU0tURVhUVVJFOiB0aGlzLnV2QW5pbWF0aW9uTWFza1RleHR1cmUgIT09IG51bGwsXG4gICAgICAgICAgICBJR05PUkVfVkVSVEVYX0NPTE9SOiB0aGlzLl9pZ25vcmVWZXJ0ZXhDb2xvciA9PT0gdHJ1ZSxcbiAgICAgICAgICAgIERFQlVHX05PUk1BTDogdGhpcy5fZGVidWdNb2RlID09PSAnbm9ybWFsJyxcbiAgICAgICAgICAgIERFQlVHX0xJVFNIQURFUkFURTogdGhpcy5fZGVidWdNb2RlID09PSAnbGl0U2hhZGVSYXRlJyxcbiAgICAgICAgICAgIERFQlVHX1VWOiB0aGlzLl9kZWJ1Z01vZGUgPT09ICd1dicsXG4gICAgICAgICAgICBPVVRMSU5FX1dJRFRIX1dPUkxEOiB0aGlzLl9pc091dGxpbmUgJiYgdGhpcy5fb3V0bGluZVdpZHRoTW9kZSA9PT0gTVRvb25NYXRlcmlhbE91dGxpbmVXaWR0aE1vZGUuV29ybGRDb29yZGluYXRlcyxcbiAgICAgICAgICAgIE9VVExJTkVfV0lEVEhfU0NSRUVOOiB0aGlzLl9pc091dGxpbmUgJiYgdGhpcy5fb3V0bGluZVdpZHRoTW9kZSA9PT0gTVRvb25NYXRlcmlhbE91dGxpbmVXaWR0aE1vZGUuU2NyZWVuQ29vcmRpbmF0ZXMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIF91cGRhdGVUZXh0dXJlTWF0cml4KHNyYywgZHN0KSB7XG4gICAgICAgIGlmIChzcmMudmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChzcmMudmFsdWUubWF0cml4QXV0b1VwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHNyYy52YWx1ZS51cGRhdGVNYXRyaXgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRzdC52YWx1ZS5jb3B5KHNyYy52YWx1ZS5tYXRyaXgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBjb2xvclNwYWNlRW5jb2RpbmdNYXAgPSB7XG4gICAgJyc6IDMwMDAsXG4gICAgc3JnYjogMzAwMSxcbn07XG4vKipcbiAqIEEgY29tcGF0IGZ1bmN0aW9uIHRvIHNldCB0ZXh0dXJlIGNvbG9yIHNwYWNlLlxuICpcbiAqIENPTVBBVDogcHJlLXIxNTJcbiAqIFN0YXJ0aW5nIGZyb20gVGhyZWUuanMgcjE1MiwgYHRleHR1cmUuZW5jb2RpbmdgIGlzIHJlbmFtZWQgdG8gYHRleHR1cmUuY29sb3JTcGFjZWAuXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgaGFuZGxlIHRoZSBjb21hcHQuXG4gKlxuICogQHBhcmFtIHRleHR1cmUgVGhlIHRleHR1cmUgeW91IHdhbnQgdG8gc2V0IHRoZSBjb2xvciBzcGFjZSB0b1xuICogQHBhcmFtIGNvbG9yU3BhY2UgVGhlIGNvbG9yIHNwYWNlIHlvdSB3YW50IHRvIHNldCB0byB0aGUgdGV4dHVyZVxuICovXG5mdW5jdGlvbiBzZXRUZXh0dXJlQ29sb3JTcGFjZSh0ZXh0dXJlLCBjb2xvclNwYWNlKSB7XG4gICAgaWYgKHBhcnNlSW50KFRIUkVFLlJFVklTSU9OLCAxMCkgPj0gMTUyKSB7XG4gICAgICAgIHRleHR1cmUuY29sb3JTcGFjZSA9IGNvbG9yU3BhY2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0ZXh0dXJlLmVuY29kaW5nID0gY29sb3JTcGFjZUVuY29kaW5nTWFwW2NvbG9yU3BhY2VdO1xuICAgIH1cbn1cblxuLyoqXG4gKiBNYXRlcmlhbFBhcmFtZXRlcnMgaGF0ZXMgYHVuZGVmaW5lZGAuIFRoaXMgaGVscGVyIGF1dG9tYXRpY2FsbHkgcmVqZWN0cyBhc3NpZ24gb2YgdGhlc2UgYHVuZGVmaW5lZGAuXG4gKiBJdCBhbHNvIGhhbmRsZXMgYXN5bmNocm9ub3VzIHByb2Nlc3Mgb2YgdGV4dHVyZXMuXG4gKiBNYWtlIHN1cmUgYXdhaXQgZm9yIHtAbGluayBHTFRGTVRvb25NYXRlcmlhbFBhcmFtc0Fzc2lnbkhlbHBlci5wZW5kaW5nfS5cbiAqL1xuY2xhc3MgR0xURk1Ub29uTWF0ZXJpYWxQYXJhbXNBc3NpZ25IZWxwZXIge1xuICAgIGdldCBwZW5kaW5nKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwodGhpcy5fcGVuZGluZ3MpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIsIG1hdGVyaWFsUGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX3BhcnNlciA9IHBhcnNlcjtcbiAgICAgICAgdGhpcy5fbWF0ZXJpYWxQYXJhbXMgPSBtYXRlcmlhbFBhcmFtcztcbiAgICAgICAgdGhpcy5fcGVuZGluZ3MgPSBbXTtcbiAgICB9XG4gICAgYXNzaWduUHJpbWl0aXZlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsUGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3NpZ25Db2xvcihrZXksIHZhbHVlLCBjb252ZXJ0U1JHQlRvTGluZWFyKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXRlcmlhbFBhcmFtc1trZXldID0gbmV3IFRIUkVFLkNvbG9yKCkuZnJvbUFycmF5KHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChjb252ZXJ0U1JHQlRvTGluZWFyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWxQYXJhbXNba2V5XS5jb252ZXJ0U1JHQlRvTGluZWFyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXNzaWduVGV4dHVyZShrZXksIHRleHR1cmUsIGlzQ29sb3JUZXh0dXJlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9taXNlID0gKCgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGV4dHVyZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuX3BhcnNlci5hc3NpZ25UZXh0dXJlKHRoaXMuX21hdGVyaWFsUGFyYW1zLCBrZXksIHRleHR1cmUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDb2xvclRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRleHR1cmVDb2xvclNwYWNlKHRoaXMuX21hdGVyaWFsUGFyYW1zW2tleV0sICdzcmdiJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSkoKTtcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdzLnB1c2gocHJvbWlzZSk7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzc2lnblRleHR1cmVCeUluZGV4KGtleSwgdGV4dHVyZUluZGV4LCBpc0NvbG9yVGV4dHVyZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXNzaWduVGV4dHVyZShrZXksIHRleHR1cmVJbmRleCAhPSBudWxsID8geyBpbmRleDogdGV4dHVyZUluZGV4IH0gOiB1bmRlZmluZWQsIGlzQ29sb3JUZXh0dXJlKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4vKipcbiAqIFBvc3NpYmxlIHNwZWMgdmVyc2lvbnMgaXQgcmVjb2duaXplcy5cbiAqL1xuY29uc3QgUE9TU0lCTEVfU1BFQ19WRVJTSU9OUyA9IG5ldyBTZXQoWycxLjAnLCAnMS4wLWJldGEnXSk7XG5jbGFzcyBNVG9vbk1hdGVyaWFsTG9hZGVyUGx1Z2luIHtcbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIE1Ub29uTWF0ZXJpYWxMb2FkZXJQbHVnaW4uRVhURU5TSU9OX05BTUU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICAgICAgdGhpcy5yZW5kZXJPcmRlck9mZnNldCA9IChfYSA9IG9wdGlvbnMucmVuZGVyT3JkZXJPZmZzZXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7XG4gICAgICAgIHRoaXMudjBDb21wYXRTaGFkZSA9IChfYiA9IG9wdGlvbnMudjBDb21wYXRTaGFkZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XG4gICAgICAgIHRoaXMuZGVidWdNb2RlID0gKF9jID0gb3B0aW9ucy5kZWJ1Z01vZGUpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICdub25lJztcbiAgICAgICAgdGhpcy5fbVRvb25NYXRlcmlhbFNldCA9IG5ldyBTZXQoKTtcbiAgICB9XG4gICAgYmVmb3JlUm9vdCgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZVVubGl0RXh0ZW5zaW9uSWZNVG9vbkV4aXN0cygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWZ0ZXJSb290KGdsdGYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGdsdGYudXNlckRhdGEudnJtTVRvb25NYXRlcmlhbHMgPSBBcnJheS5mcm9tKHRoaXMuX21Ub29uTWF0ZXJpYWxTZXQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0TWF0ZXJpYWxUeXBlKG1hdGVyaWFsSW5kZXgpIHtcbiAgICAgICAgY29uc3QgdjFFeHRlbnNpb24gPSB0aGlzLl9nZXRNVG9vbkV4dGVuc2lvbihtYXRlcmlhbEluZGV4KTtcbiAgICAgICAgaWYgKHYxRXh0ZW5zaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gTVRvb25NYXRlcmlhbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZXh0ZW5kTWF0ZXJpYWxQYXJhbXMobWF0ZXJpYWxJbmRleCwgbWF0ZXJpYWxQYXJhbXMpIHtcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gdGhpcy5fZ2V0TVRvb25FeHRlbnNpb24obWF0ZXJpYWxJbmRleCk7XG4gICAgICAgIGlmIChleHRlbnNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9leHRlbmRNYXRlcmlhbFBhcmFtcyhleHRlbnNpb24sIG1hdGVyaWFsUGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbG9hZE1lc2gobWVzaEluZGV4KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlciA9IHRoaXMucGFyc2VyO1xuICAgICAgICAgICAgY29uc3QganNvbiA9IHBhcnNlci5qc29uO1xuICAgICAgICAgICAgY29uc3QgbWVzaERlZiA9IChfYSA9IGpzb24ubWVzaGVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbbWVzaEluZGV4XTtcbiAgICAgICAgICAgIGlmIChtZXNoRGVmID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1Ub29uTWF0ZXJpYWxMb2FkZXJQbHVnaW46IEF0dGVtcHQgdG8gdXNlIG1lc2hlc1ske21lc2hJbmRleH1dIG9mIGdsVEYgYnV0IHRoZSBtZXNoIGRvZXNuJ3QgZXhpc3RgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByaW1pdGl2ZXNEZWYgPSBtZXNoRGVmLnByaW1pdGl2ZXM7XG4gICAgICAgICAgICBjb25zdCBtZXNoT3JHcm91cCA9IHlpZWxkIHBhcnNlci5sb2FkTWVzaChtZXNoSW5kZXgpO1xuICAgICAgICAgICAgaWYgKHByaW1pdGl2ZXNEZWYubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzaCA9IG1lc2hPckdyb3VwO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsSW5kZXggPSBwcmltaXRpdmVzRGVmWzBdLm1hdGVyaWFsO1xuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBQcmltaXRpdmUobWVzaCwgbWF0ZXJpYWxJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSBtZXNoT3JHcm91cDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByaW1pdGl2ZXNEZWYubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzaCA9IGdyb3VwLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbEluZGV4ID0gcHJpbWl0aXZlc0RlZltpXS5tYXRlcmlhbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsSW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBQcmltaXRpdmUobWVzaCwgbWF0ZXJpYWxJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVzaE9yR3JvdXA7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgdXNlIG9mIGBLSFJfbWF0ZXJpYWxzX3VubGl0YCBmcm9tIGl0cyBgbWF0ZXJpYWxzYCBpZiB0aGUgbWF0ZXJpYWwgaXMgdXNpbmcgTVRvb24uXG4gICAgICpcbiAgICAgKiBTaW5jZSBHTFRGTG9hZGVyIGhhdmUgc28gbWFueSBoYXJkY29kZWQgcHJvY2VkdXJlIHJlbGF0ZWQgdG8gYEtIUl9tYXRlcmlhbHNfdW5saXRgXG4gICAgICogd2UgaGF2ZSB0byBkZWxldGUgdGhlIGV4dGVuc2lvbiBiZWZvcmUgd2Ugc3RhcnQgdG8gcGFyc2UgdGhlIGdsVEYuXG4gICAgICovXG4gICAgX3JlbW92ZVVubGl0RXh0ZW5zaW9uSWZNVG9vbkV4aXN0cygpIHtcbiAgICAgICAgY29uc3QgcGFyc2VyID0gdGhpcy5wYXJzZXI7XG4gICAgICAgIGNvbnN0IGpzb24gPSBwYXJzZXIuanNvbjtcbiAgICAgICAgY29uc3QgbWF0ZXJpYWxEZWZzID0ganNvbi5tYXRlcmlhbHM7XG4gICAgICAgIG1hdGVyaWFsRGVmcyA9PT0gbnVsbCB8fCBtYXRlcmlhbERlZnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1hdGVyaWFsRGVmcy5tYXAoKG1hdGVyaWFsRGVmLCBpTWF0ZXJpYWwpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IHRoaXMuX2dldE1Ub29uRXh0ZW5zaW9uKGlNYXRlcmlhbCk7XG4gICAgICAgICAgICBpZiAoZXh0ZW5zaW9uICYmICgoX2EgPSBtYXRlcmlhbERlZi5leHRlbnNpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbJ0tIUl9tYXRlcmlhbHNfdW5saXQnXSkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgbWF0ZXJpYWxEZWYuZXh0ZW5zaW9uc1snS0hSX21hdGVyaWFsc191bmxpdCddO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2dldE1Ub29uRXh0ZW5zaW9uKG1hdGVyaWFsSW5kZXgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgcGFyc2VyID0gdGhpcy5wYXJzZXI7XG4gICAgICAgIGNvbnN0IGpzb24gPSBwYXJzZXIuanNvbjtcbiAgICAgICAgY29uc3QgbWF0ZXJpYWxEZWYgPSAoX2EgPSBqc29uLm1hdGVyaWFscykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW21hdGVyaWFsSW5kZXhdO1xuICAgICAgICBpZiAobWF0ZXJpYWxEZWYgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBNVG9vbk1hdGVyaWFsTG9hZGVyUGx1Z2luOiBBdHRlbXB0IHRvIHVzZSBtYXRlcmlhbHNbJHttYXRlcmlhbEluZGV4fV0gb2YgZ2xURiBidXQgdGhlIG1hdGVyaWFsIGRvZXNuJ3QgZXhpc3RgKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gKF9iID0gbWF0ZXJpYWxEZWYuZXh0ZW5zaW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iW01Ub29uTWF0ZXJpYWxMb2FkZXJQbHVnaW4uRVhURU5TSU9OX05BTUVdO1xuICAgICAgICBpZiAoZXh0ZW5zaW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3BlY1ZlcnNpb24gPSBleHRlbnNpb24uc3BlY1ZlcnNpb247XG4gICAgICAgIGlmICghUE9TU0lCTEVfU1BFQ19WRVJTSU9OUy5oYXMoc3BlY1ZlcnNpb24pKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYE1Ub29uTWF0ZXJpYWxMb2FkZXJQbHVnaW46IFVua25vd24gJHtNVG9vbk1hdGVyaWFsTG9hZGVyUGx1Z2luLkVYVEVOU0lPTl9OQU1FfSBzcGVjVmVyc2lvbiBcIiR7c3BlY1ZlcnNpb259XCJgKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbjtcbiAgICB9XG4gICAgX2V4dGVuZE1hdGVyaWFsUGFyYW1zKGV4dGVuc2lvbiwgbWF0ZXJpYWxQYXJhbXMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gUmVtb3ZpbmcgbWF0ZXJpYWwgcGFyYW1zIHRoYXQgaXMgbm90IHJlcXVpcmVkIHRvIHN1cHJlc3Mgd2FybmluZ3MuXG4gICAgICAgICAgICBkZWxldGUgbWF0ZXJpYWxQYXJhbXMubWV0YWxuZXNzO1xuICAgICAgICAgICAgZGVsZXRlIG1hdGVyaWFsUGFyYW1zLnJvdWdobmVzcztcbiAgICAgICAgICAgIGNvbnN0IGFzc2lnbkhlbHBlciA9IG5ldyBHTFRGTVRvb25NYXRlcmlhbFBhcmFtc0Fzc2lnbkhlbHBlcih0aGlzLnBhcnNlciwgbWF0ZXJpYWxQYXJhbXMpO1xuICAgICAgICAgICAgYXNzaWduSGVscGVyLmFzc2lnblByaW1pdGl2ZSgndHJhbnNwYXJlbnRXaXRoWldyaXRlJywgZXh0ZW5zaW9uLnRyYW5zcGFyZW50V2l0aFpXcml0ZSk7XG4gICAgICAgICAgICBhc3NpZ25IZWxwZXIuYXNzaWduQ29sb3IoJ3NoYWRlQ29sb3JGYWN0b3InLCBleHRlbnNpb24uc2hhZGVDb2xvckZhY3Rvcik7XG4gICAgICAgICAgICBhc3NpZ25IZWxwZXIuYXNzaWduVGV4dHVyZSgnc2hhZGVNdWx0aXBseVRleHR1cmUnLCBleHRlbnNpb24uc2hhZGVNdWx0aXBseVRleHR1cmUsIHRydWUpO1xuICAgICAgICAgICAgYXNzaWduSGVscGVyLmFzc2lnblByaW1pdGl2ZSgnc2hhZGluZ1NoaWZ0RmFjdG9yJywgZXh0ZW5zaW9uLnNoYWRpbmdTaGlmdEZhY3Rvcik7XG4gICAgICAgICAgICBhc3NpZ25IZWxwZXIuYXNzaWduVGV4dHVyZSgnc2hhZGluZ1NoaWZ0VGV4dHVyZScsIGV4dGVuc2lvbi5zaGFkaW5nU2hpZnRUZXh0dXJlLCB0cnVlKTtcbiAgICAgICAgICAgIGFzc2lnbkhlbHBlci5hc3NpZ25QcmltaXRpdmUoJ3NoYWRpbmdTaGlmdFRleHR1cmVTY2FsZScsIChfYSA9IGV4dGVuc2lvbi5zaGFkaW5nU2hpZnRUZXh0dXJlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2NhbGUpO1xuICAgICAgICAgICAgYXNzaWduSGVscGVyLmFzc2lnblByaW1pdGl2ZSgnc2hhZGluZ1Rvb255RmFjdG9yJywgZXh0ZW5zaW9uLnNoYWRpbmdUb29ueUZhY3Rvcik7XG4gICAgICAgICAgICBhc3NpZ25IZWxwZXIuYXNzaWduUHJpbWl0aXZlKCdnaUVxdWFsaXphdGlvbkZhY3RvcicsIGV4dGVuc2lvbi5naUVxdWFsaXphdGlvbkZhY3Rvcik7XG4gICAgICAgICAgICBhc3NpZ25IZWxwZXIuYXNzaWduQ29sb3IoJ21hdGNhcEZhY3RvcicsIGV4dGVuc2lvbi5tYXRjYXBGYWN0b3IpO1xuICAgICAgICAgICAgYXNzaWduSGVscGVyLmFzc2lnblRleHR1cmUoJ21hdGNhcFRleHR1cmUnLCBleHRlbnNpb24ubWF0Y2FwVGV4dHVyZSwgdHJ1ZSk7XG4gICAgICAgICAgICBhc3NpZ25IZWxwZXIuYXNzaWduQ29sb3IoJ3BhcmFtZXRyaWNSaW1Db2xvckZhY3RvcicsIGV4dGVuc2lvbi5wYXJhbWV0cmljUmltQ29sb3JGYWN0b3IpO1xuICAgICAgICAgICAgYXNzaWduSGVscGVyLmFzc2lnblRleHR1cmUoJ3JpbU11bHRpcGx5VGV4dHVyZScsIGV4dGVuc2lvbi5yaW1NdWx0aXBseVRleHR1cmUsIHRydWUpO1xuICAgICAgICAgICAgYXNzaWduSGVscGVyLmFzc2lnblByaW1pdGl2ZSgncmltTGlnaHRpbmdNaXhGYWN0b3InLCBleHRlbnNpb24ucmltTGlnaHRpbmdNaXhGYWN0b3IpO1xuICAgICAgICAgICAgYXNzaWduSGVscGVyLmFzc2lnblByaW1pdGl2ZSgncGFyYW1ldHJpY1JpbUZyZXNuZWxQb3dlckZhY3RvcicsIGV4dGVuc2lvbi5wYXJhbWV0cmljUmltRnJlc25lbFBvd2VyRmFjdG9yKTtcbiAgICAgICAgICAgIGFzc2lnbkhlbHBlci5hc3NpZ25QcmltaXRpdmUoJ3BhcmFtZXRyaWNSaW1MaWZ0RmFjdG9yJywgZXh0ZW5zaW9uLnBhcmFtZXRyaWNSaW1MaWZ0RmFjdG9yKTtcbiAgICAgICAgICAgIGFzc2lnbkhlbHBlci5hc3NpZ25QcmltaXRpdmUoJ291dGxpbmVXaWR0aE1vZGUnLCBleHRlbnNpb24ub3V0bGluZVdpZHRoTW9kZSk7XG4gICAgICAgICAgICBhc3NpZ25IZWxwZXIuYXNzaWduUHJpbWl0aXZlKCdvdXRsaW5lV2lkdGhGYWN0b3InLCBleHRlbnNpb24ub3V0bGluZVdpZHRoRmFjdG9yKTtcbiAgICAgICAgICAgIGFzc2lnbkhlbHBlci5hc3NpZ25UZXh0dXJlKCdvdXRsaW5lV2lkdGhNdWx0aXBseVRleHR1cmUnLCBleHRlbnNpb24ub3V0bGluZVdpZHRoTXVsdGlwbHlUZXh0dXJlLCBmYWxzZSk7XG4gICAgICAgICAgICBhc3NpZ25IZWxwZXIuYXNzaWduQ29sb3IoJ291dGxpbmVDb2xvckZhY3RvcicsIGV4dGVuc2lvbi5vdXRsaW5lQ29sb3JGYWN0b3IpO1xuICAgICAgICAgICAgYXNzaWduSGVscGVyLmFzc2lnblByaW1pdGl2ZSgnb3V0bGluZUxpZ2h0aW5nTWl4RmFjdG9yJywgZXh0ZW5zaW9uLm91dGxpbmVMaWdodGluZ01peEZhY3Rvcik7XG4gICAgICAgICAgICBhc3NpZ25IZWxwZXIuYXNzaWduVGV4dHVyZSgndXZBbmltYXRpb25NYXNrVGV4dHVyZScsIGV4dGVuc2lvbi51dkFuaW1hdGlvbk1hc2tUZXh0dXJlLCBmYWxzZSk7XG4gICAgICAgICAgICBhc3NpZ25IZWxwZXIuYXNzaWduUHJpbWl0aXZlKCd1dkFuaW1hdGlvblNjcm9sbFhTcGVlZEZhY3RvcicsIGV4dGVuc2lvbi51dkFuaW1hdGlvblNjcm9sbFhTcGVlZEZhY3Rvcik7XG4gICAgICAgICAgICBhc3NpZ25IZWxwZXIuYXNzaWduUHJpbWl0aXZlKCd1dkFuaW1hdGlvblNjcm9sbFlTcGVlZEZhY3RvcicsIGV4dGVuc2lvbi51dkFuaW1hdGlvblNjcm9sbFlTcGVlZEZhY3Rvcik7XG4gICAgICAgICAgICBhc3NpZ25IZWxwZXIuYXNzaWduUHJpbWl0aXZlKCd1dkFuaW1hdGlvblJvdGF0aW9uU3BlZWRGYWN0b3InLCBleHRlbnNpb24udXZBbmltYXRpb25Sb3RhdGlvblNwZWVkRmFjdG9yKTtcbiAgICAgICAgICAgIGFzc2lnbkhlbHBlci5hc3NpZ25QcmltaXRpdmUoJ3YwQ29tcGF0U2hhZGUnLCB0aGlzLnYwQ29tcGF0U2hhZGUpO1xuICAgICAgICAgICAgYXNzaWduSGVscGVyLmFzc2lnblByaW1pdGl2ZSgnZGVidWdNb2RlJywgdGhpcy5kZWJ1Z01vZGUpO1xuICAgICAgICAgICAgeWllbGQgYXNzaWduSGVscGVyLnBlbmRpbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIHdpbGwgZG8gdHdvIHByb2Nlc3NlcyB0aGF0IGlzIHJlcXVpcmVkIHRvIHJlbmRlciBNVG9vbiBwcm9wZXJseS5cbiAgICAgKlxuICAgICAqIC0gU2V0IHJlbmRlciBvcmRlclxuICAgICAqIC0gR2VuZXJhdGUgb3V0bGluZVxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc2ggQSB0YXJnZXQgR0xURiBwcmltaXRpdmVcbiAgICAgKiBAcGFyYW0gbWF0ZXJpYWxJbmRleCBUaGUgbWF0ZXJpYWwgaW5kZXggb2YgdGhlIHByaW1pdGl2ZVxuICAgICAqL1xuICAgIF9zZXR1cFByaW1pdGl2ZShtZXNoLCBtYXRlcmlhbEluZGV4KSB7XG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IHRoaXMuX2dldE1Ub29uRXh0ZW5zaW9uKG1hdGVyaWFsSW5kZXgpO1xuICAgICAgICBpZiAoZXh0ZW5zaW9uKSB7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJPcmRlciA9IHRoaXMuX3BhcnNlUmVuZGVyT3JkZXIoZXh0ZW5zaW9uKTtcbiAgICAgICAgICAgIG1lc2gucmVuZGVyT3JkZXIgPSByZW5kZXJPcmRlciArIHRoaXMucmVuZGVyT3JkZXJPZmZzZXQ7XG4gICAgICAgICAgICB0aGlzLl9nZW5lcmF0ZU91dGxpbmUobWVzaCk7XG4gICAgICAgICAgICB0aGlzLl9hZGRUb01hdGVyaWFsU2V0KG1lc2gpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIG91dGxpbmUgZm9yIHRoZSBnaXZlbiBtZXNoLCBpZiBpdCBuZWVkcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNoIFRoZSB0YXJnZXQgbWVzaFxuICAgICAqL1xuICAgIF9nZW5lcmF0ZU91dGxpbmUobWVzaCkge1xuICAgICAgICAvLyBPSywgaXQncyB0aGUgaGFja3kgcGFydC5cbiAgICAgICAgLy8gV2UgYXJlIGdvaW5nIHRvIGR1cGxpY2F0ZSB0aGUgTVRvb25NYXRlcmlhbCBmb3Igb3V0bGluZSB1c2UuXG4gICAgICAgIC8vIFRoZW4gd2UgYXJlIGdvaW5nIHRvIGNyZWF0ZSB0d28gZ2VvbWV0cnkgZ3JvdXBzIGFuZCByZWZlciBzYW1lIGJ1ZmZlciBidXQgZGlmZmVyZW50IG1hdGVyaWFsLlxuICAgICAgICAvLyBJdCdzIGhvdyB3ZSBkcmF3IHR3byBtYXRlcmlhbHMgYXQgb25jZSB1c2luZyBhIHNpbmdsZSBtZXNoLlxuICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIG1hdGVyaWFsIGlzIG10b29uXG4gICAgICAgIGNvbnN0IHN1cmZhY2VNYXRlcmlhbCA9IG1lc2gubWF0ZXJpYWw7XG4gICAgICAgIGlmICghKHN1cmZhY2VNYXRlcmlhbCBpbnN0YW5jZW9mIE1Ub29uTWF0ZXJpYWwpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hlY2sgd2hldGhlciB3ZSByZWFsbHkgaGF2ZSB0byBwcmVwYXJlIG91dGxpbmUgb3Igbm90XG4gICAgICAgIGlmIChzdXJmYWNlTWF0ZXJpYWwub3V0bGluZVdpZHRoTW9kZSA9PT0gJ25vbmUnIHx8IHN1cmZhY2VNYXRlcmlhbC5vdXRsaW5lV2lkdGhGYWN0b3IgPD0gMC4wKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWFrZSBpdHMgbWF0ZXJpYWwgYW4gYXJyYXlcbiAgICAgICAgbWVzaC5tYXRlcmlhbCA9IFtzdXJmYWNlTWF0ZXJpYWxdOyAvLyBtZXNoLm1hdGVyaWFsIGlzIGd1YXJhbnRlZWQgdG8gYmUgYSBNYXRlcmlhbCBpbiBHTFRGTG9hZGVyXG4gICAgICAgIC8vIGR1cGxpY2F0ZSB0aGUgbWF0ZXJpYWwgZm9yIG91dGxpbmUgdXNlXG4gICAgICAgIGNvbnN0IG91dGxpbmVNYXRlcmlhbCA9IHN1cmZhY2VNYXRlcmlhbC5jbG9uZSgpO1xuICAgICAgICBvdXRsaW5lTWF0ZXJpYWwubmFtZSArPSAnIChPdXRsaW5lKSc7XG4gICAgICAgIG91dGxpbmVNYXRlcmlhbC5pc091dGxpbmUgPSB0cnVlO1xuICAgICAgICBvdXRsaW5lTWF0ZXJpYWwuc2lkZSA9IFRIUkVFLkJhY2tTaWRlO1xuICAgICAgICBtZXNoLm1hdGVyaWFsLnB1c2gob3V0bGluZU1hdGVyaWFsKTtcbiAgICAgICAgLy8gbWFrZSB0d28gZ2VvbWV0cnkgZ3JvdXBzIG91dCBvZiBhIHNhbWUgYnVmZmVyXG4gICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbWVzaC5nZW9tZXRyeTsgLy8gbWVzaC5nZW9tZXRyeSBpcyBndWFyYW50ZWVkIHRvIGJlIGEgQnVmZmVyR2VvbWV0cnkgaW4gR0xURkxvYWRlclxuICAgICAgICBjb25zdCBwcmltaXRpdmVWZXJ0aWNlcyA9IGdlb21ldHJ5LmluZGV4ID8gZ2VvbWV0cnkuaW5kZXguY291bnQgOiBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmNvdW50IC8gMztcbiAgICAgICAgZ2VvbWV0cnkuYWRkR3JvdXAoMCwgcHJpbWl0aXZlVmVydGljZXMsIDApO1xuICAgICAgICBnZW9tZXRyeS5hZGRHcm91cCgwLCBwcmltaXRpdmVWZXJ0aWNlcywgMSk7XG4gICAgfVxuICAgIF9hZGRUb01hdGVyaWFsU2V0KG1lc2gpIHtcbiAgICAgICAgY29uc3QgbWF0ZXJpYWxPck1hdGVyaWFscyA9IG1lc2gubWF0ZXJpYWw7XG4gICAgICAgIGNvbnN0IG1hdGVyaWFsU2V0ID0gbmV3IFNldCgpO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtYXRlcmlhbE9yTWF0ZXJpYWxzKSkge1xuICAgICAgICAgICAgbWF0ZXJpYWxPck1hdGVyaWFscy5mb3JFYWNoKChtYXRlcmlhbCkgPT4gbWF0ZXJpYWxTZXQuYWRkKG1hdGVyaWFsKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtYXRlcmlhbFNldC5hZGQobWF0ZXJpYWxPck1hdGVyaWFscyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBtYXRlcmlhbCBvZiBtYXRlcmlhbFNldCkge1xuICAgICAgICAgICAgaWYgKG1hdGVyaWFsIGluc3RhbmNlb2YgTVRvb25NYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21Ub29uTWF0ZXJpYWxTZXQuYWRkKG1hdGVyaWFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfcGFyc2VSZW5kZXJPcmRlcihleHRlbnNpb24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAvLyB0cmFuc3BhcmVudFdpdGhaV3JpdGUgcmFuZ2VzIGZyb20gMCB0byArOVxuICAgICAgICAvLyBtZXJlIHRyYW5zcGFyZW50IHJhbmdlcyBmcm9tIC05IHRvIDBcbiAgICAgICAgY29uc3QgZW5hYmxlZFpXcml0ZSA9IGV4dGVuc2lvbi50cmFuc3BhcmVudFdpdGhaV3JpdGU7XG4gICAgICAgIHJldHVybiAoZW5hYmxlZFpXcml0ZSA/IDAgOiAxOSkgKyAoKF9hID0gZXh0ZW5zaW9uLnJlbmRlclF1ZXVlT2Zmc2V0TnVtYmVyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwKTtcbiAgICB9XG59XG5NVG9vbk1hdGVyaWFsTG9hZGVyUGx1Z2luLkVYVEVOU0lPTl9OQU1FID0gJ1ZSTUNfbWF0ZXJpYWxzX210b29uJztcblxuZXhwb3J0IHsgTVRvb25NYXRlcmlhbCwgTVRvb25NYXRlcmlhbERlYnVnTW9kZSwgTVRvb25NYXRlcmlhbExvYWRlclBsdWdpbiwgTVRvb25NYXRlcmlhbE91dGxpbmVXaWR0aE1vZGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEdoeVpXVXRkbkp0TFcxaGRHVnlhV0ZzY3kxdGRHOXZiaTV0YjJSMWJHVXVhbk1pTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTkwYzJ4cFlpOTBjMnhwWWk1bGN6WXVhbk1pTENJdUxpOXpjbU12VFZSdmIyNU5ZWFJsY21saGJFUmxZblZuVFc5a1pTNTBjeUlzSWk0dUwzTnlZeTlOVkc5dmJrMWhkR1Z5YVdGc1QzVjBiR2x1WlZkcFpIUm9UVzlrWlM1MGN5SXNJaTR1TDNOeVl5OTFkR2xzY3k5blpYUlVaWGgwZFhKbFEyOXNiM0pUY0dGalpTNTBjeUlzSWk0dUwzTnlZeTlOVkc5dmJrMWhkR1Z5YVdGc0xuUnpJaXdpTGk0dmMzSmpMM1YwYVd4ekwzTmxkRlJsZUhSMWNtVkRiMnh2Y2xOd1lXTmxMblJ6SWl3aUxpNHZjM0pqTDBkTVZFWk5WRzl2YmsxaGRHVnlhV0ZzVUdGeVlXMXpRWE56YVdkdVNHVnNjR1Z5TG5Seklpd2lMaTR2YzNKakwwMVViMjl1VFdGMFpYSnBZV3hNYjJGa1pYSlFiSFZuYVc0dWRITWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh5WEc1RGIzQjVjbWxuYUhRZ0tHTXBJRTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2Ymk1Y2NseHVYSEpjYmxCbGNtMXBjM05wYjI0Z2RHOGdkWE5sTENCamIzQjVMQ0J0YjJScFpua3NJR0Z1WkM5dmNpQmthWE4wY21saWRYUmxJSFJvYVhNZ2MyOW1kSGRoY21VZ1ptOXlJR0Z1ZVZ4eVhHNXdkWEp3YjNObElIZHBkR2dnYjNJZ2QybDBhRzkxZENCbVpXVWdhWE1nYUdWeVpXSjVJR2R5WVc1MFpXUXVYSEpjYmx4eVhHNVVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUlFRk9SQ0JVU0VVZ1FWVlVTRTlTSUVSSlUwTk1RVWxOVXlCQlRFd2dWMEZTVWtGT1ZFbEZVeUJYU1ZSSVhISmNibEpGUjBGU1JDQlVUeUJVU0VsVElGTlBSbFJYUVZKRklFbE9RMHhWUkVsT1J5QkJURXdnU1UxUVRFbEZSQ0JYUVZKU1FVNVVTVVZUSUU5R0lFMUZVa05JUVU1VVFVSkpURWxVV1Z4eVhHNUJUa1FnUmtsVVRrVlRVeTRnU1U0Z1RrOGdSVlpGVGxRZ1UwaEJURXdnVkVoRklFRlZWRWhQVWlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCVFVFVkRTVUZNTENCRVNWSkZRMVFzWEhKY2JrbE9SRWxTUlVOVUxDQlBVaUJEVDA1VFJWRlZSVTVVU1VGTUlFUkJUVUZIUlZNZ1QxSWdRVTVaSUVSQlRVRkhSVk1nVjBoQlZGTlBSVlpGVWlCU1JWTlZURlJKVGtjZ1JsSlBUVnh5WEc1TVQxTlRJRTlHSUZWVFJTd2dSRUZVUVNCUFVpQlFVazlHU1ZSVExDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1RrVkhURWxIUlU1RFJTQlBVbHh5WEc1UFZFaEZVaUJVVDFKVVNVOVZVeUJCUTFSSlQwNHNJRUZTU1ZOSlRrY2dUMVZVSUU5R0lFOVNJRWxPSUVOUFRrNUZRMVJKVDA0Z1YwbFVTQ0JVU0VVZ1ZWTkZJRTlTWEhKY2JsQkZVa1pQVWsxQlRrTkZJRTlHSUZSSVNWTWdVMDlHVkZkQlVrVXVYSEpjYmlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FJQ292WEhKY2JpOHFJR2RzYjJKaGJDQlNaV1pzWldOMExDQlFjbTl0YVhObElDb3ZYSEpjYmx4eVhHNTJZWElnWlhoMFpXNWtVM1JoZEdsamN5QTlJR1oxYm1OMGFXOXVLR1FzSUdJcElIdGNjbHh1SUNBZ0lHVjRkR1Z1WkZOMFlYUnBZM01nUFNCUFltcGxZM1F1YzJWMFVISnZkRzkwZVhCbFQyWWdmSHhjY2x4dUlDQWdJQ0FnSUNBb2V5QmZYM0J5YjNSdlgxODZJRnRkSUgwZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVNBbUppQm1kVzVqZEdsdmJpQW9aQ3dnWWlrZ2V5QmtMbDlmY0hKdmRHOWZYeUE5SUdJN0lIMHBJSHg4WEhKY2JpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z0tHUXNJR0lwSUhzZ1ptOXlJQ2gyWVhJZ2NDQnBiaUJpS1NCcFppQW9UMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLR0lzSUhBcEtTQmtXM0JkSUQwZ1lsdHdYVHNnZlR0Y2NseHVJQ0FnSUhKbGRIVnliaUJsZUhSbGJtUlRkR0YwYVdOektHUXNJR0lwTzF4eVhHNTlPMXh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZaWGgwWlc1a2N5aGtMQ0JpS1NCN1hISmNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHSWdJVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJpSUNFOVBTQnVkV3hzS1Z4eVhHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pEYkdGemN5QmxlSFJsYm1SeklIWmhiSFZsSUZ3aUlDc2dVM1J5YVc1bktHSXBJQ3NnWENJZ2FYTWdibTkwSUdFZ1kyOXVjM1J5ZFdOMGIzSWdiM0lnYm5Wc2JGd2lLVHRjY2x4dUlDQWdJR1Y0ZEdWdVpGTjBZWFJwWTNNb1pDd2dZaWs3WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJmWHlncElIc2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpQTlJR1E3SUgxY2NseHVJQ0FnSUdRdWNISnZkRzkwZVhCbElEMGdZaUE5UFQwZ2JuVnNiQ0EvSUU5aWFtVmpkQzVqY21WaGRHVW9ZaWtnT2lBb1gxOHVjSEp2ZEc5MGVYQmxJRDBnWWk1d2NtOTBiM1I1Y0dVc0lHNWxkeUJmWHlncEtUdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJSFpoY2lCZlgyRnpjMmxuYmlBOUlHWjFibU4wYVc5dUtDa2dlMXh5WEc0Z0lDQWdYMTloYzNOcFoyNGdQU0JQWW1wbFkzUXVZWE56YVdkdUlIeDhJR1oxYm1OMGFXOXVJRjlmWVhOemFXZHVLSFFwSUh0Y2NseHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnpMQ0JwSUQwZ01Td2diaUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUdrZ1BDQnVPeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2N5QTlJR0Z5WjNWdFpXNTBjMXRwWFR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnY0NCcGJpQnpLU0JwWmlBb1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tITXNJSEFwS1NCMFczQmRJRDBnYzF0d1hUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnWDE5aGMzTnBaMjR1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektUdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmY21WemRDaHpMQ0JsS1NCN1hISmNiaUFnSUNCMllYSWdkQ0E5SUh0OU8xeHlYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2NDQnBiaUJ6S1NCcFppQW9UMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLSE1zSUhBcElDWW1JR1V1YVc1a1pYaFBaaWh3S1NBOElEQXBYSEpjYmlBZ0lDQWdJQ0FnZEZ0d1hTQTlJSE5iY0YwN1hISmNiaUFnSUNCcFppQW9jeUFoUFNCdWRXeHNJQ1ltSUhSNWNHVnZaaUJQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsVGVXMWliMnh6SUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lwWEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUhBZ1BTQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpLSE1wT3lCcElEd2djQzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aUzVwYm1SbGVFOW1LSEJiYVYwcElEd2dNQ0FtSmlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG5CeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bExtTmhiR3dvY3l3Z2NGdHBYU2twWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFczQmJhVjFkSUQwZ2MxdHdXMmxkWFR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z2REdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWkdWamIzSmhkR1VvWkdWamIzSmhkRzl5Y3l3Z2RHRnlaMlYwTENCclpYa3NJR1JsYzJNcElIdGNjbHh1SUNBZ0lIWmhjaUJqSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUN3Z2NpQTlJR01nUENBeklEOGdkR0Z5WjJWMElEb2daR1Z6WXlBOVBUMGdiblZzYkNBL0lHUmxjMk1nUFNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLSFJoY21kbGRDd2dhMlY1S1NBNklHUmxjMk1zSUdRN1hISmNiaUFnSUNCcFppQW9kSGx3Wlc5bUlGSmxabXhsWTNRZ1BUMDlJRndpYjJKcVpXTjBYQ0lnSmlZZ2RIbHdaVzltSUZKbFpteGxZM1F1WkdWamIzSmhkR1VnUFQwOUlGd2lablZ1WTNScGIyNWNJaWtnY2lBOUlGSmxabXhsWTNRdVpHVmpiM0poZEdVb1pHVmpiM0poZEc5eWN5d2dkR0Z5WjJWMExDQnJaWGtzSUdSbGMyTXBPMXh5WEc0Z0lDQWdaV3h6WlNCbWIzSWdLSFpoY2lCcElEMGdaR1ZqYjNKaGRHOXljeTVzWlc1bmRHZ2dMU0F4T3lCcElENDlJREE3SUdrdExTa2dhV1lnS0dRZ1BTQmtaV052Y21GMGIzSnpXMmxkS1NCeUlEMGdLR01nUENBeklEOGdaQ2h5S1NBNklHTWdQaUF6SUQ4Z1pDaDBZWEpuWlhRc0lHdGxlU3dnY2lrZ09pQmtLSFJoY21kbGRDd2dhMlY1S1NrZ2ZId2djanRjY2x4dUlDQWdJSEpsZEhWeWJpQmpJRDRnTXlBbUppQnlJQ1ltSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBZWEpuWlhRc0lHdGxlU3dnY2lrc0lISTdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDNCaGNtRnRLSEJoY21GdFNXNWtaWGdzSUdSbFkyOXlZWFJ2Y2lrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNoMFlYSm5aWFFzSUd0bGVTa2dleUJrWldOdmNtRjBiM0lvZEdGeVoyVjBMQ0JyWlhrc0lIQmhjbUZ0U1c1a1pYZ3BPeUI5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyVnpSR1ZqYjNKaGRHVW9ZM1J2Y2l3Z1pHVnpZM0pwY0hSdmNrbHVMQ0JrWldOdmNtRjBiM0p6TENCamIyNTBaWGgwU1c0c0lHbHVhWFJwWVd4cGVtVnljeXdnWlhoMGNtRkpibWwwYVdGc2FYcGxjbk1wSUh0Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUdGalkyVndkQ2htS1NCN0lHbG1JQ2htSUNFOVBTQjJiMmxrSURBZ0ppWWdkSGx3Wlc5bUlHWWdJVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWtaMWJtTjBhVzl1SUdWNGNHVmpkR1ZrWENJcE95QnlaWFIxY200Z1pqc2dmVnh5WEc0Z0lDQWdkbUZ5SUd0cGJtUWdQU0JqYjI1MFpYaDBTVzR1YTJsdVpDd2dhMlY1SUQwZ2EybHVaQ0E5UFQwZ1hDSm5aWFIwWlhKY0lpQS9JRndpWjJWMFhDSWdPaUJyYVc1a0lEMDlQU0JjSW5ObGRIUmxjbHdpSUQ4Z1hDSnpaWFJjSWlBNklGd2lkbUZzZFdWY0lqdGNjbHh1SUNBZ0lIWmhjaUIwWVhKblpYUWdQU0FoWkdWelkzSnBjSFJ2Y2tsdUlDWW1JR04wYjNJZ1B5QmpiMjUwWlhoMFNXNWJYQ0p6ZEdGMGFXTmNJbDBnUHlCamRHOXlJRG9nWTNSdmNpNXdjbTkwYjNSNWNHVWdPaUJ1ZFd4c08xeHlYRzRnSUNBZ2RtRnlJR1JsYzJOeWFYQjBiM0lnUFNCa1pYTmpjbWx3ZEc5eVNXNGdmSHdnS0hSaGNtZGxkQ0EvSUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9kR0Z5WjJWMExDQmpiMjUwWlhoMFNXNHVibUZ0WlNrZ09pQjdmU2s3WEhKY2JpQWdJQ0IyWVhJZ1h5d2daRzl1WlNBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlHUmxZMjl5WVhSdmNuTXViR1Z1WjNSb0lDMGdNVHNnYVNBK1BTQXdPeUJwTFMwcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1kyOXVkR1Y0ZENBOUlIdDlPMXh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhBZ2FXNGdZMjl1ZEdWNGRFbHVLU0JqYjI1MFpYaDBXM0JkSUQwZ2NDQTlQVDBnWENKaFkyTmxjM05jSWlBL0lIdDlJRG9nWTI5dWRHVjRkRWx1VzNCZE8xeHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSEFnYVc0Z1kyOXVkR1Y0ZEVsdUxtRmpZMlZ6Y3lrZ1kyOXVkR1Y0ZEM1aFkyTmxjM05iY0YwZ1BTQmpiMjUwWlhoMFNXNHVZV05qWlhOelczQmRPMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuUmxlSFF1WVdSa1NXNXBkR2xoYkdsNlpYSWdQU0JtZFc1amRHbHZiaUFvWmlrZ2V5QnBaaUFvWkc5dVpTa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWtOaGJtNXZkQ0JoWkdRZ2FXNXBkR2xoYkdsNlpYSnpJR0ZtZEdWeUlHUmxZMjl5WVhScGIyNGdhR0Z6SUdOdmJYQnNaWFJsWkZ3aUtUc2daWGgwY21GSmJtbDBhV0ZzYVhwbGNuTXVjSFZ6YUNoaFkyTmxjSFFvWmlCOGZDQnVkV3hzS1NrN0lIMDdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlDZ3dMQ0JrWldOdmNtRjBiM0p6VzJsZEtTaHJhVzVrSUQwOVBTQmNJbUZqWTJWemMyOXlYQ0lnUHlCN0lHZGxkRG9nWkdWelkzSnBjSFJ2Y2k1blpYUXNJSE5sZERvZ1pHVnpZM0pwY0hSdmNpNXpaWFFnZlNBNklHUmxjMk55YVhCMGIzSmJhMlY1WFN3Z1kyOXVkR1Y0ZENrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0d0cGJtUWdQVDA5SUZ3aVlXTmpaWE56YjNKY0lpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21WemRXeDBJRDA5UFNCMmIybGtJREFwSUdOdmJuUnBiblZsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVnpkV3gwSUQwOVBTQnVkV3hzSUh4OElIUjVjR1Z2WmlCeVpYTjFiSFFnSVQwOUlGd2liMkpxWldOMFhDSXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKUFltcGxZM1FnWlhod1pXTjBaV1JjSWlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGZJRDBnWVdOalpYQjBLSEpsYzNWc2RDNW5aWFFwS1NCa1pYTmpjbWx3ZEc5eUxtZGxkQ0E5SUY4N1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGZJRDBnWVdOalpYQjBLSEpsYzNWc2RDNXpaWFFwS1NCa1pYTmpjbWx3ZEc5eUxuTmxkQ0E5SUY4N1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGZJRDBnWVdOalpYQjBLSEpsYzNWc2RDNXBibWwwS1NrZ2FXNXBkR2xoYkdsNlpYSnpMbkIxYzJnb1h5azdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tGOGdQU0JoWTJObGNIUW9jbVZ6ZFd4MEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYTJsdVpDQTlQVDBnWENKbWFXVnNaRndpS1NCcGJtbDBhV0ZzYVhwbGNuTXVjSFZ6YUNoZktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JrWlhOamNtbHdkRzl5VzJ0bGVWMGdQU0JmTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lHbG1JQ2gwWVhKblpYUXBJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoMFlYSm5aWFFzSUdOdmJuUmxlSFJKYmk1dVlXMWxMQ0JrWlhOamNtbHdkRzl5S1R0Y2NseHVJQ0FnSUdSdmJtVWdQU0IwY25WbE8xeHlYRzU5TzF4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmY25WdVNXNXBkR2xoYkdsNlpYSnpLSFJvYVhOQmNtY3NJR2x1YVhScFlXeHBlbVZ5Y3l3Z2RtRnNkV1VwSUh0Y2NseHVJQ0FnSUhaaGNpQjFjMlZXWVd4MVpTQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF5TzF4eVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCcGJtbDBhV0ZzYVhwbGNuTXViR1Z1WjNSb095QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlIVnpaVlpoYkhWbElEOGdhVzVwZEdsaGJHbDZaWEp6VzJsZExtTmhiR3dvZEdocGMwRnlaeXdnZG1Gc2RXVXBJRG9nYVc1cGRHbGhiR2w2WlhKelcybGRMbU5oYkd3b2RHaHBjMEZ5WnlrN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnZFhObFZtRnNkV1VnUHlCMllXeDFaU0E2SUhadmFXUWdNRHRjY2x4dWZUdGNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgzQnliM0JMWlhrb2VDa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIUjVjR1Z2WmlCNElEMDlQU0JjSW5ONWJXSnZiRndpSUQ4Z2VDQTZJRndpWENJdVkyOXVZMkYwS0hncE8xeHlYRzU5TzF4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmYzJWMFJuVnVZM1JwYjI1T1lXMWxLR1lzSUc1aGJXVXNJSEJ5WldacGVDa2dlMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ1WVcxbElEMDlQU0JjSW5ONWJXSnZiRndpS1NCdVlXMWxJRDBnYm1GdFpTNWtaWE5qY21sd2RHbHZiaUEvSUZ3aVcxd2lMbU52Ym1OaGRDaHVZVzFsTG1SbGMyTnlhWEIwYVc5dUxDQmNJbDFjSWlrZ09pQmNJbHdpTzF4eVhHNGdJQ0FnY21WMGRYSnVJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobUxDQmNJbTVoYldWY0lpd2dleUJqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzSUhaaGJIVmxPaUJ3Y21WbWFYZ2dQeUJjSWx3aUxtTnZibU5oZENod2NtVm1hWGdzSUZ3aUlGd2lMQ0J1WVcxbEtTQTZJRzVoYldVZ2ZTazdYSEpjYm4wN1hISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5dFpYUmhaR0YwWVNodFpYUmhaR0YwWVV0bGVTd2diV1YwWVdSaGRHRldZV3gxWlNrZ2UxeHlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQlNaV1pzWldOMElEMDlQU0JjSW05aWFtVmpkRndpSUNZbUlIUjVjR1Z2WmlCU1pXWnNaV04wTG0xbGRHRmtZWFJoSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lwSUhKbGRIVnliaUJTWldac1pXTjBMbTFsZEdGa1lYUmhLRzFsZEdGa1lYUmhTMlY1TENCdFpYUmhaR0YwWVZaaGJIVmxLVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZllYZGhhWFJsY2loMGFHbHpRWEpuTENCZllYSm5kVzFsYm5SekxDQlFMQ0JuWlc1bGNtRjBiM0lwSUh0Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUdGa2IzQjBLSFpoYkhWbEtTQjdJSEpsZEhWeWJpQjJZV3gxWlNCcGJuTjBZVzVqWlc5bUlGQWdQeUIyWVd4MVpTQTZJRzVsZHlCUUtHWjFibU4wYVc5dUlDaHlaWE52YkhabEtTQjdJSEpsYzI5c2RtVW9kbUZzZFdVcE95QjlLVHNnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlBb1VDQjhmQ0FvVUNBOUlGQnliMjFwYzJVcEtTaG1kVzVqZEdsdmJpQW9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWm5Wc1ptbHNiR1ZrS0haaGJIVmxLU0I3SUhSeWVTQjdJSE4wWlhBb1oyVnVaWEpoZEc5eUxtNWxlSFFvZG1Gc2RXVXBLVHNnZlNCallYUmphQ0FvWlNrZ2V5QnlaV3BsWTNRb1pTazdJSDBnZlZ4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlISmxhbVZqZEdWa0tIWmhiSFZsS1NCN0lIUnllU0I3SUhOMFpYQW9aMlZ1WlhKaGRHOXlXMXdpZEdoeWIzZGNJbDBvZG1Gc2RXVXBLVHNnZlNCallYUmphQ0FvWlNrZ2V5QnlaV3BsWTNRb1pTazdJSDBnZlZ4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlITjBaWEFvY21WemRXeDBLU0I3SUhKbGMzVnNkQzVrYjI1bElEOGdjbVZ6YjJ4MlpTaHlaWE4xYkhRdWRtRnNkV1VwSURvZ1lXUnZjSFFvY21WemRXeDBMblpoYkhWbEtTNTBhR1Z1S0daMWJHWnBiR3hsWkN3Z2NtVnFaV04wWldRcE95QjlYSEpjYmlBZ0lDQWdJQ0FnYzNSbGNDZ29aMlZ1WlhKaGRHOXlJRDBnWjJWdVpYSmhkRzl5TG1Gd2NHeDVLSFJvYVhOQmNtY3NJRjloY21kMWJXVnVkSE1nZkh3Z1cxMHBLUzV1WlhoMEtDa3BPMXh5WEc0Z0lDQWdmU2s3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyZGxibVZ5WVhSdmNpaDBhR2x6UVhKbkxDQmliMlI1S1NCN1hISmNiaUFnSUNCMllYSWdYeUE5SUhzZ2JHRmlaV3c2SURBc0lITmxiblE2SUdaMWJtTjBhVzl1S0NrZ2V5QnBaaUFvZEZzd1hTQW1JREVwSUhSb2NtOTNJSFJiTVYwN0lISmxkSFZ5YmlCMFd6RmRPeUI5TENCMGNubHpPaUJiWFN3Z2IzQnpPaUJiWFNCOUxDQm1MQ0I1TENCMExDQm5PMXh5WEc0Z0lDQWdjbVYwZFhKdUlHY2dQU0I3SUc1bGVIUTZJSFpsY21Jb01Da3NJRndpZEdoeWIzZGNJam9nZG1WeVlpZ3hLU3dnWENKeVpYUjFjbTVjSWpvZ2RtVnlZaWd5S1NCOUxDQjBlWEJsYjJZZ1UzbHRZbTlzSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnSmlZZ0tHZGJVM2x0WW05c0xtbDBaWEpoZEc5eVhTQTlJR1oxYm1OMGFXOXVLQ2tnZXlCeVpYUjFjbTRnZEdocGN6c2dmU2tzSUdjN1hISmNiaUFnSUNCbWRXNWpkR2x2YmlCMlpYSmlLRzRwSUhzZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNoMktTQjdJSEpsZEhWeWJpQnpkR1Z3S0Z0dUxDQjJYU2s3SUgwN0lIMWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlITjBaWEFvYjNBcElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1ppa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWtkbGJtVnlZWFJ2Y2lCcGN5QmhiSEpsWVdSNUlHVjRaV04xZEdsdVp5NWNJaWs3WEhKY2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0djZ0ppWWdLR2NnUFNBd0xDQnZjRnN3WFNBbUppQW9YeUE5SURBcEtTd2dYeWtnZEhKNUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1lnUFNBeExDQjVJQ1ltSUNoMElEMGdiM0JiTUYwZ0ppQXlJRDhnZVZ0Y0luSmxkSFZ5Ymx3aVhTQTZJRzl3V3pCZElEOGdlVnRjSW5Sb2NtOTNYQ0pkSUh4OElDZ29kQ0E5SUhsYlhDSnlaWFIxY201Y0lsMHBJQ1ltSUhRdVkyRnNiQ2g1S1N3Z01Da2dPaUI1TG01bGVIUXBJQ1ltSUNFb2RDQTlJSFF1WTJGc2JDaDVMQ0J2Y0ZzeFhTa3BMbVJ2Ym1VcElISmxkSFZ5YmlCME8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9lU0E5SURBc0lIUXBJRzl3SUQwZ1cyOXdXekJkSUNZZ01pd2dkQzUyWVd4MVpWMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb2IzQmJNRjBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTURvZ1kyRnpaU0F4T2lCMElEMGdiM0E3SUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQTBPaUJmTG14aFltVnNLeXM3SUhKbGRIVnliaUI3SUhaaGJIVmxPaUJ2Y0ZzeFhTd2daRzl1WlRvZ1ptRnNjMlVnZlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTlRvZ1h5NXNZV0psYkNzck95QjVJRDBnYjNCYk1WMDdJRzl3SUQwZ1d6QmRPeUJqYjI1MGFXNTFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdOem9nYjNBZ1BTQmZMbTl3Y3k1d2IzQW9LVHNnWHk1MGNubHpMbkJ2Y0NncE95QmpiMjUwYVc1MVpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0VvZENBOUlGOHVkSEo1Y3l3Z2RDQTlJSFF1YkdWdVozUm9JRDRnTUNBbUppQjBXM1F1YkdWdVozUm9JQzBnTVYwcElDWW1JQ2h2Y0Zzd1hTQTlQVDBnTmlCOGZDQnZjRnN3WFNBOVBUMGdNaWtwSUhzZ1h5QTlJREE3SUdOdmJuUnBiblZsT3lCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOXdXekJkSUQwOVBTQXpJQ1ltSUNnaGRDQjhmQ0FvYjNCYk1WMGdQaUIwV3pCZElDWW1JRzl3V3pGZElEd2dkRnN6WFNrcEtTQjdJRjh1YkdGaVpXd2dQU0J2Y0ZzeFhUc2dZbkpsWVdzN0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iM0JiTUYwZ1BUMDlJRFlnSmlZZ1h5NXNZV0psYkNBOElIUmJNVjBwSUhzZ1h5NXNZV0psYkNBOUlIUmJNVjA3SUhRZ1BTQnZjRHNnWW5KbFlXczdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZENBbUppQmZMbXhoWW1Wc0lEd2dkRnN5WFNrZ2V5QmZMbXhoWW1Wc0lEMGdkRnN5WFRzZ1h5NXZjSE11Y0hWemFDaHZjQ2s3SUdKeVpXRnJPeUI5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSYk1sMHBJRjh1YjNCekxuQnZjQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjh1ZEhKNWN5NXdiM0FvS1RzZ1kyOXVkR2x1ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYjNBZ1BTQmliMlI1TG1OaGJHd29kR2hwYzBGeVp5d2dYeWs3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dleUJ2Y0NBOUlGczJMQ0JsWFRzZ2VTQTlJREE3SUgwZ1ptbHVZV3hzZVNCN0lHWWdQU0IwSUQwZ01Ec2dmVnh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHZjRnN3WFNBbUlEVXBJSFJvY205M0lHOXdXekZkT3lCeVpYUjFjbTRnZXlCMllXeDFaVG9nYjNCYk1GMGdQeUJ2Y0ZzeFhTQTZJSFp2YVdRZ01Dd2daRzl1WlRvZ2RISjFaU0I5TzF4eVhHNGdJQ0FnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ2RtRnlJRjlmWTNKbFlYUmxRbWx1WkdsdVp5QTlJRTlpYW1WamRDNWpjbVZoZEdVZ1B5QW9ablZ1WTNScGIyNG9ieXdnYlN3Z2F5d2dheklwSUh0Y2NseHVJQ0FnSUdsbUlDaHJNaUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQnJNaUE5SUdzN1hISmNiaUFnSUNCMllYSWdaR1Z6WXlBOUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvYlN3Z2F5azdYSEpjYmlBZ0lDQnBaaUFvSVdSbGMyTWdmSHdnS0Z3aVoyVjBYQ0lnYVc0Z1pHVnpZeUEvSUNGdExsOWZaWE5OYjJSMWJHVWdPaUJrWlhOakxuZHlhWFJoWW14bElIeDhJR1JsYzJNdVkyOXVabWxuZFhKaFlteGxLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lHUmxjMk1nUFNCN0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc0lHZGxkRG9nWm5WdVkzUnBiMjRvS1NCN0lISmxkSFZ5YmlCdFcydGRPeUI5SUgwN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29ieXdnYXpJc0lHUmxjMk1wTzF4eVhHNTlLU0E2SUNobWRXNWpkR2x2YmlodkxDQnRMQ0JyTENCck1pa2dlMXh5WEc0Z0lDQWdhV1lnS0dzeUlEMDlQU0IxYm1SbFptbHVaV1FwSUdzeUlEMGdhenRjY2x4dUlDQWdJRzliYXpKZElEMGdiVnRyWFR0Y2NseHVmU2s3WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTlsZUhCdmNuUlRkR0Z5S0cwc0lHOHBJSHRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJSEFnYVc0Z2JTa2dhV1lnS0hBZ0lUMDlJRndpWkdWbVlYVnNkRndpSUNZbUlDRlBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29ieXdnY0NrcElGOWZZM0psWVhSbFFtbHVaR2x1WnlodkxDQnRMQ0J3S1R0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZkbUZzZFdWektHOHBJSHRjY2x4dUlDQWdJSFpoY2lCeklEMGdkSGx3Wlc5bUlGTjViV0p2YkNBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUNZbUlGTjViV0p2YkM1cGRHVnlZWFJ2Y2l3Z2JTQTlJSE1nSmlZZ2IxdHpYU3dnYVNBOUlEQTdYSEpjYmlBZ0lDQnBaaUFvYlNrZ2NtVjBkWEp1SUcwdVkyRnNiQ2h2S1R0Y2NseHVJQ0FnSUdsbUlDaHZJQ1ltSUhSNWNHVnZaaUJ2TG14bGJtZDBhQ0E5UFQwZ1hDSnVkVzFpWlhKY0lpa2djbVYwZFhKdUlIdGNjbHh1SUNBZ0lDQWdJQ0J1WlhoME9pQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodklDWW1JR2tnUGowZ2J5NXNaVzVuZEdncElHOGdQU0IyYjJsa0lEQTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN0lIWmhiSFZsT2lCdklDWW1JRzliYVNzclhTd2daRzl1WlRvZ0lXOGdmVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOU8xeHlYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaHpJRDhnWENKUFltcGxZM1FnYVhNZ2JtOTBJR2wwWlhKaFlteGxMbHdpSURvZ1hDSlRlVzFpYjJ3dWFYUmxjbUYwYjNJZ2FYTWdibTkwSUdSbFptbHVaV1F1WENJcE8xeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTl5WldGa0tHOHNJRzRwSUh0Y2NseHVJQ0FnSUhaaGNpQnRJRDBnZEhsd1pXOW1JRk41YldKdmJDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JRzliVTNsdFltOXNMbWwwWlhKaGRHOXlYVHRjY2x4dUlDQWdJR2xtSUNnaGJTa2djbVYwZFhKdUlHODdYSEpjYmlBZ0lDQjJZWElnYVNBOUlHMHVZMkZzYkNodktTd2djaXdnWVhJZ1BTQmJYU3dnWlR0Y2NseHVJQ0FnSUhSeWVTQjdYSEpjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLQ2h1SUQwOVBTQjJiMmxrSURBZ2ZId2diaTB0SUQ0Z01Da2dKaVlnSVNoeUlEMGdhUzV1WlhoMEtDa3BMbVJ2Ym1VcElHRnlMbkIxYzJnb2NpNTJZV3gxWlNrN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCallYUmphQ0FvWlhKeWIzSXBJSHNnWlNBOUlIc2daWEp5YjNJNklHVnljbTl5SUgwN0lIMWNjbHh1SUNBZ0lHWnBibUZzYkhrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlJQ1ltSUNGeUxtUnZibVVnSmlZZ0tHMGdQU0JwVzF3aWNtVjBkWEp1WENKZEtTa2diUzVqWVd4c0tHa3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQm1hVzVoYkd4NUlIc2dhV1lnS0dVcElIUm9jbTkzSUdVdVpYSnliM0k3SUgxY2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhKbGRIVnliaUJoY2p0Y2NseHVmVnh5WEc1Y2NseHVMeW9xSUVCa1pYQnlaV05oZEdWa0lDb3ZYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDNOd2NtVmhaQ2dwSUh0Y2NseHVJQ0FnSUdadmNpQW9kbUZ5SUdGeUlEMGdXMTBzSUdrZ1BTQXdPeUJwSUR3Z1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTc3JLVnh5WEc0Z0lDQWdJQ0FnSUdGeUlEMGdZWEl1WTI5dVkyRjBLRjlmY21WaFpDaGhjbWQxYldWdWRITmJhVjBwS1R0Y2NseHVJQ0FnSUhKbGRIVnliaUJoY2p0Y2NseHVmVnh5WEc1Y2NseHVMeW9xSUVCa1pYQnlaV05oZEdWa0lDb3ZYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDNOd2NtVmhaRUZ5Y21GNWN5Z3BJSHRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJSE1nUFNBd0xDQnBJRDBnTUN3Z2FXd2dQU0JoY21kMWJXVnVkSE11YkdWdVozUm9PeUJwSUR3Z2FXdzdJR2tyS3lrZ2N5QXJQU0JoY21kMWJXVnVkSE5iYVYwdWJHVnVaM1JvTzF4eVhHNGdJQ0FnWm05eUlDaDJZWElnY2lBOUlFRnljbUY1S0hNcExDQnJJRDBnTUN3Z2FTQTlJREE3SUdrZ1BDQnBiRHNnYVNzcktWeHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR0VnUFNCaGNtZDFiV1Z1ZEhOYmFWMHNJR29nUFNBd0xDQnFiQ0E5SUdFdWJHVnVaM1JvT3lCcUlEd2dhbXc3SUdvckt5d2dheXNyS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5VzJ0ZElEMGdZVnRxWFR0Y2NseHVJQ0FnSUhKbGRIVnliaUJ5TzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXpjSEpsWVdSQmNuSmhlU2gwYnl3Z1puSnZiU3dnY0dGamF5a2dlMXh5WEc0Z0lDQWdhV1lnS0hCaFkyc2dmSHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E5UFQwZ01pa2dabTl5SUNoMllYSWdhU0E5SURBc0lHd2dQU0JtY205dExteGxibWQwYUN3Z1lYSTdJR2tnUENCc095QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvWVhJZ2ZId2dJU2hwSUdsdUlHWnliMjBwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hZWElwSUdGeUlEMGdRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29abkp2YlN3Z01Dd2dhU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5VzJsZElEMGdabkp2YlZ0cFhUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdkRzh1WTI5dVkyRjBLR0Z5SUh4OElFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHWnliMjBwS1R0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZZWGRoYVhRb2Rpa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE1nYVc1emRHRnVZMlZ2WmlCZlgyRjNZV2wwSUQ4Z0tIUm9hWE11ZGlBOUlIWXNJSFJvYVhNcElEb2dibVYzSUY5ZllYZGhhWFFvZGlrN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMkZ6ZVc1alIyVnVaWEpoZEc5eUtIUm9hWE5CY21jc0lGOWhjbWQxYldWdWRITXNJR2RsYm1WeVlYUnZjaWtnZTF4eVhHNGdJQ0FnYVdZZ0tDRlRlVzFpYjJ3dVlYTjVibU5KZEdWeVlYUnZjaWtnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lsTjViV0p2YkM1aGMzbHVZMGwwWlhKaGRHOXlJR2x6SUc1dmRDQmtaV1pwYm1Wa0xsd2lLVHRjY2x4dUlDQWdJSFpoY2lCbklEMGdaMlZ1WlhKaGRHOXlMbUZ3Y0d4NUtIUm9hWE5CY21jc0lGOWhjbWQxYldWdWRITWdmSHdnVzEwcExDQnBMQ0J4SUQwZ1cxMDdYSEpjYmlBZ0lDQnlaWFIxY200Z2FTQTlJSHQ5TENCMlpYSmlLRndpYm1WNGRGd2lLU3dnZG1WeVlpaGNJblJvY205M1hDSXBMQ0IyWlhKaUtGd2ljbVYwZFhKdVhDSXBMQ0JwVzFONWJXSnZiQzVoYzNsdVkwbDBaWEpoZEc5eVhTQTlJR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SUhSb2FYTTdJSDBzSUdrN1hISmNiaUFnSUNCbWRXNWpkR2x2YmlCMlpYSmlLRzRwSUhzZ2FXWWdLR2RiYmwwcElHbGJibDBnUFNCbWRXNWpkR2x2YmlBb2Rpa2dleUJ5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRnS0dFc0lHSXBJSHNnY1M1d2RYTm9LRnR1TENCMkxDQmhMQ0JpWFNrZ1BpQXhJSHg4SUhKbGMzVnRaU2h1TENCMktUc2dmU2s3SUgwN0lIMWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlISmxjM1Z0WlNodUxDQjJLU0I3SUhSeWVTQjdJSE4wWlhBb1oxdHVYU2gyS1NrN0lIMGdZMkYwWTJnZ0tHVXBJSHNnYzJWMGRHeGxLSEZiTUYxYk0xMHNJR1VwT3lCOUlIMWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlITjBaWEFvY2lrZ2V5QnlMblpoYkhWbElHbHVjM1JoYm1ObGIyWWdYMTloZDJGcGRDQS9JRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTaHlMblpoYkhWbExuWXBMblJvWlc0b1puVnNabWxzYkN3Z2NtVnFaV04wS1NBNklITmxkSFJzWlNoeFd6QmRXekpkTENCeUtUc2dmVnh5WEc0Z0lDQWdablZ1WTNScGIyNGdablZzWm1sc2JDaDJZV3gxWlNrZ2V5QnlaWE4xYldVb1hDSnVaWGgwWENJc0lIWmhiSFZsS1RzZ2ZWeHlYRzRnSUNBZ1puVnVZM1JwYjI0Z2NtVnFaV04wS0haaGJIVmxLU0I3SUhKbGMzVnRaU2hjSW5Sb2NtOTNYQ0lzSUhaaGJIVmxLVHNnZlZ4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnYzJWMGRHeGxLR1lzSUhZcElIc2dhV1lnS0dZb2Rpa3NJSEV1YzJocFpuUW9LU3dnY1M1c1pXNW5kR2dwSUhKbGMzVnRaU2h4V3pCZFd6QmRMQ0J4V3pCZFd6RmRLVHNnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOWhjM2x1WTBSbGJHVm5ZWFJ2Y2lodktTQjdYSEpjYmlBZ0lDQjJZWElnYVN3Z2NEdGNjbHh1SUNBZ0lISmxkSFZ5YmlCcElEMGdlMzBzSUhabGNtSW9YQ0p1WlhoMFhDSXBMQ0IyWlhKaUtGd2lkR2h5YjNkY0lpd2dablZ1WTNScGIyNGdLR1VwSUhzZ2RHaHliM2NnWlRzZ2ZTa3NJSFpsY21Jb1hDSnlaWFIxY201Y0lpa3NJR2xiVTNsdFltOXNMbWwwWlhKaGRHOXlYU0E5SUdaMWJtTjBhVzl1SUNncElIc2djbVYwZFhKdUlIUm9hWE03SUgwc0lHazdYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQjJaWEppS0c0c0lHWXBJSHNnYVZ0dVhTQTlJRzliYmwwZ1B5Qm1kVzVqZEdsdmJpQW9kaWtnZXlCeVpYUjFjbTRnS0hBZ1BTQWhjQ2tnUHlCN0lIWmhiSFZsT2lCZlgyRjNZV2wwS0c5YmJsMG9kaWtwTENCa2IyNWxPaUJtWVd4elpTQjlJRG9nWmlBL0lHWW9kaWtnT2lCMk95QjlJRG9nWmpzZ2ZWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTloYzNsdVkxWmhiSFZsY3lodktTQjdYSEpjYmlBZ0lDQnBaaUFvSVZONWJXSnZiQzVoYzNsdVkwbDBaWEpoZEc5eUtTQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpVTNsdFltOXNMbUZ6ZVc1alNYUmxjbUYwYjNJZ2FYTWdibTkwSUdSbFptbHVaV1F1WENJcE8xeHlYRzRnSUNBZ2RtRnlJRzBnUFNCdlcxTjViV0p2YkM1aGMzbHVZMGwwWlhKaGRHOXlYU3dnYVR0Y2NseHVJQ0FnSUhKbGRIVnliaUJ0SUQ4Z2JTNWpZV3hzS0c4cElEb2dLRzhnUFNCMGVYQmxiMllnWDE5MllXeDFaWE1nUFQwOUlGd2lablZ1WTNScGIyNWNJaUEvSUY5ZmRtRnNkV1Z6S0c4cElEb2diMXRUZVcxaWIyd3VhWFJsY21GMGIzSmRLQ2tzSUdrZ1BTQjdmU3dnZG1WeVlpaGNJbTVsZUhSY0lpa3NJSFpsY21Jb1hDSjBhSEp2ZDF3aUtTd2dkbVZ5WWloY0luSmxkSFZ5Ymx3aUtTd2dhVnRUZVcxaWIyd3VZWE41Ym1OSmRHVnlZWFJ2Y2wwZ1BTQm1kVzVqZEdsdmJpQW9LU0I3SUhKbGRIVnliaUIwYUdsek95QjlMQ0JwS1R0Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUhabGNtSW9iaWtnZXlCcFcyNWRJRDBnYjF0dVhTQW1KaUJtZFc1amRHbHZiaUFvZGlrZ2V5QnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNGdLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dleUIySUQwZ2IxdHVYU2gyS1N3Z2MyVjBkR3hsS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ3dnZGk1a2IyNWxMQ0IyTG5aaGJIVmxLVHNnZlNrN0lIMDdJSDFjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSE5sZEhSc1pTaHlaWE52YkhabExDQnlaV3BsWTNRc0lHUXNJSFlwSUhzZ1VISnZiV2x6WlM1eVpYTnZiSFpsS0hZcExuUm9aVzRvWm5WdVkzUnBiMjRvZGlrZ2V5QnlaWE52YkhabEtIc2dkbUZzZFdVNklIWXNJR1J2Ym1VNklHUWdmU2s3SUgwc0lISmxhbVZqZENrN0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmYldGclpWUmxiWEJzWVhSbFQySnFaV04wS0dOdmIydGxaQ3dnY21GM0tTQjdYSEpjYmlBZ0lDQnBaaUFvVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtTQjdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoamIyOXJaV1FzSUZ3aWNtRjNYQ0lzSUhzZ2RtRnNkV1U2SUhKaGR5QjlLVHNnZlNCbGJITmxJSHNnWTI5dmEyVmtMbkpoZHlBOUlISmhkenNnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJR052YjJ0bFpEdGNjbHh1ZlR0Y2NseHVYSEpjYm5aaGNpQmZYM05sZEUxdlpIVnNaVVJsWm1GMWJIUWdQU0JQWW1wbFkzUXVZM0psWVhSbElEOGdLR1oxYm1OMGFXOXVLRzhzSUhZcElIdGNjbHh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h2TENCY0ltUmxabUYxYkhSY0lpd2dleUJsYm5WdFpYSmhZbXhsT2lCMGNuVmxMQ0IyWVd4MVpUb2dkaUI5S1R0Y2NseHVmU2tnT2lCbWRXNWpkR2x2YmlodkxDQjJLU0I3WEhKY2JpQWdJQ0J2VzF3aVpHVm1ZWFZzZEZ3aVhTQTlJSFk3WEhKY2JuMDdYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXBiWEJ2Y25SVGRHRnlLRzF2WkNrZ2UxeHlYRzRnSUNBZ2FXWWdLRzF2WkNBbUppQnRiMlF1WDE5bGMwMXZaSFZzWlNrZ2NtVjBkWEp1SUcxdlpEdGNjbHh1SUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0I3ZlR0Y2NseHVJQ0FnSUdsbUlDaHRiMlFnSVQwZ2JuVnNiQ2tnWm05eUlDaDJZWElnYXlCcGJpQnRiMlFwSUdsbUlDaHJJQ0U5UFNCY0ltUmxabUYxYkhSY0lpQW1KaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYlc5a0xDQnJLU2tnWDE5amNtVmhkR1ZDYVc1a2FXNW5LSEpsYzNWc2RDd2diVzlrTENCcktUdGNjbHh1SUNBZ0lGOWZjMlYwVFc5a2RXeGxSR1ZtWVhWc2RDaHlaWE4xYkhRc0lHMXZaQ2s3WEhKY2JpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTlwYlhCdmNuUkVaV1poZFd4MEtHMXZaQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJQ2h0YjJRZ0ppWWdiVzlrTGw5ZlpYTk5iMlIxYkdVcElEOGdiVzlrSURvZ2V5QmtaV1poZFd4ME9pQnRiMlFnZlR0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZZMnhoYzNOUWNtbDJZWFJsUm1sbGJHUkhaWFFvY21WalpXbDJaWElzSUhOMFlYUmxMQ0JyYVc1a0xDQm1LU0I3WEhKY2JpQWdJQ0JwWmlBb2EybHVaQ0E5UFQwZ1hDSmhYQ0lnSmlZZ0lXWXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKUWNtbDJZWFJsSUdGalkyVnpjMjl5SUhkaGN5QmtaV1pwYm1Wa0lIZHBkR2h2ZFhRZ1lTQm5aWFIwWlhKY0lpazdYSEpjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSE4wWVhSbElEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ1B5QnlaV05sYVhabGNpQWhQVDBnYzNSaGRHVWdmSHdnSVdZZ09pQWhjM1JoZEdVdWFHRnpLSEpsWTJWcGRtVnlLU2tnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrTmhibTV2ZENCeVpXRmtJSEJ5YVhaaGRHVWdiV1Z0WW1WeUlHWnliMjBnWVc0Z2IySnFaV04wSUhkb2IzTmxJR05zWVhOeklHUnBaQ0J1YjNRZ1pHVmpiR0Z5WlNCcGRGd2lLVHRjY2x4dUlDQWdJSEpsZEhWeWJpQnJhVzVrSUQwOVBTQmNJbTFjSWlBL0lHWWdPaUJyYVc1a0lEMDlQU0JjSW1GY0lpQS9JR1l1WTJGc2JDaHlaV05sYVhabGNpa2dPaUJtSUQ4Z1ppNTJZV3gxWlNBNklITjBZWFJsTG1kbGRDaHlaV05sYVhabGNpazdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJOc1lYTnpVSEpwZG1GMFpVWnBaV3hrVTJWMEtISmxZMlZwZG1WeUxDQnpkR0YwWlN3Z2RtRnNkV1VzSUd0cGJtUXNJR1lwSUh0Y2NseHVJQ0FnSUdsbUlDaHJhVzVrSUQwOVBTQmNJbTFjSWlrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJbEJ5YVhaaGRHVWdiV1YwYUc5a0lHbHpJRzV2ZENCM2NtbDBZV0pzWlZ3aUtUdGNjbHh1SUNBZ0lHbG1JQ2hyYVc1a0lEMDlQU0JjSW1GY0lpQW1KaUFoWmlrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJbEJ5YVhaaGRHVWdZV05qWlhOemIzSWdkMkZ6SUdSbFptbHVaV1FnZDJsMGFHOTFkQ0JoSUhObGRIUmxjbHdpS1R0Y2NseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2MzUmhkR1VnUFQwOUlGd2lablZ1WTNScGIyNWNJaUEvSUhKbFkyVnBkbVZ5SUNFOVBTQnpkR0YwWlNCOGZDQWhaaUE2SUNGemRHRjBaUzVvWVhNb2NtVmpaV2wyWlhJcEtTQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpUTJGdWJtOTBJSGR5YVhSbElIQnlhWFpoZEdVZ2JXVnRZbVZ5SUhSdklHRnVJRzlpYW1WamRDQjNhRzl6WlNCamJHRnpjeUJrYVdRZ2JtOTBJR1JsWTJ4aGNtVWdhWFJjSWlrN1hISmNiaUFnSUNCeVpYUjFjbTRnS0d0cGJtUWdQVDA5SUZ3aVlWd2lJRDhnWmk1allXeHNLSEpsWTJWcGRtVnlMQ0IyWVd4MVpTa2dPaUJtSUQ4Z1ppNTJZV3gxWlNBOUlIWmhiSFZsSURvZ2MzUmhkR1V1YzJWMEtISmxZMlZwZG1WeUxDQjJZV3gxWlNrcExDQjJZV3gxWlR0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZZMnhoYzNOUWNtbDJZWFJsUm1sbGJHUkpiaWh6ZEdGMFpTd2djbVZqWldsMlpYSXBJSHRjY2x4dUlDQWdJR2xtSUNoeVpXTmxhWFpsY2lBOVBUMGdiblZzYkNCOGZDQW9kSGx3Wlc5bUlISmxZMlZwZG1WeUlDRTlQU0JjSW05aWFtVmpkRndpSUNZbUlIUjVjR1Z2WmlCeVpXTmxhWFpsY2lBaFBUMGdYQ0ptZFc1amRHbHZibHdpS1NrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJa05oYm01dmRDQjFjMlVnSjJsdUp5QnZjR1Z5WVhSdmNpQnZiaUJ1YjI0dGIySnFaV04wWENJcE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUhSNWNHVnZaaUJ6ZEdGMFpTQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlEOGdjbVZqWldsMlpYSWdQVDA5SUhOMFlYUmxJRG9nYzNSaGRHVXVhR0Z6S0hKbFkyVnBkbVZ5S1R0Y2NseHVmVnh5WEc0aUxDSXZLaUJsYzJ4cGJuUXRaR2x6WVdKc1pTQkFkSGx3WlhOamNtbHdkQzFsYzJ4cGJuUXZibUZ0YVc1bkxXTnZiblpsYm5ScGIyNGdLaTljYmx4dUx5b3FYRzRnS2lCVGNHVmphV1pwWlhKeklHOW1JR1JsWW5WbklHMXZaR1VnYjJZZ2UwQnNhVzVySUUxVWIyOXVUV0YwWlhKcFlXeDlMbHh1SUNwY2JpQXFJRk5sWlRvZ2UwQnNhVzVySUUxVWIyOXVUV0YwWlhKcFlXd3VaR1ZpZFdkTmIyUmxmVnh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnVFZSdmIyNU5ZWFJsY21saGJFUmxZblZuVFc5a1pTQTlJSHRjYmlBZ0x5b3FYRzRnSUNBcUlGSmxibVJsY2lCdWIzSnRZV3hzZVM1Y2JpQWdJQ292WEc0Z0lFNXZibVU2SUNkdWIyNWxKeXhjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWbWx6ZFdGc2FYcGxJRzV2Y20xaGJITWdiMllnZEdobElITjFjbVpoWTJVdVhHNGdJQ0FxTDF4dUlDQk9iM0p0WVd3NklDZHViM0p0WVd3bkxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCV2FYTjFZV3hwZW1VZ2JHbDBMM05vWVdSbElHOW1JSFJvWlNCemRYSm1ZV05sTGx4dUlDQWdLaTljYmlBZ1RHbDBVMmhoWkdWU1lYUmxPaUFuYkdsMFUyaGhaR1ZTWVhSbEp5eGNibHh1SUNBdktpcGNiaUFnSUNvZ1ZtbHpkV0ZzYVhwbElGVldJRzltSUhSb1pTQnpkWEptWVdObExseHVJQ0FnS2k5Y2JpQWdWVlk2SUNkMWRpY3NYRzU5SUdGeklHTnZibk4wTzF4dVhHNWxlSEJ2Y25RZ2RIbHdaU0JOVkc5dmJrMWhkR1Z5YVdGc1JHVmlkV2ROYjJSbElEMGdkSGx3Wlc5bUlFMVViMjl1VFdGMFpYSnBZV3hFWldKMVowMXZaR1ZiYTJWNWIyWWdkSGx3Wlc5bUlFMVViMjl1VFdGMFpYSnBZV3hFWldKMVowMXZaR1ZkTzF4dUlpd2lMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjVoYldsdVp5MWpiMjUyWlc1MGFXOXVJQ292WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JOVkc5dmJrMWhkR1Z5YVdGc1QzVjBiR2x1WlZkcFpIUm9UVzlrWlNBOUlIdGNiaUFnVG05dVpUb2dKMjV2Ym1VbkxGeHVJQ0JYYjNKc1pFTnZiM0prYVc1aGRHVnpPaUFuZDI5eWJHUkRiMjl5WkdsdVlYUmxjeWNzWEc0Z0lGTmpjbVZsYmtOdmIzSmthVzVoZEdWek9pQW5jMk55WldWdVEyOXZjbVJwYm1GMFpYTW5MRnh1ZlNCaGN5QmpiMjV6ZER0Y2JseHVaWGh3YjNKMElIUjVjR1VnVFZSdmIyNU5ZWFJsY21saGJFOTFkR3hwYm1WWGFXUjBhRTF2WkdVZ1BWeHVJQ0IwZVhCbGIyWWdUVlJ2YjI1TllYUmxjbWxoYkU5MWRHeHBibVZYYVdSMGFFMXZaR1ZiYTJWNWIyWWdkSGx3Wlc5bUlFMVViMjl1VFdGMFpYSnBZV3hQZFhSc2FXNWxWMmxrZEdoTmIyUmxYVHRjYmlJc0ltbHRjRzl5ZENBcUlHRnpJRlJJVWtWRklHWnliMjBnSjNSb2NtVmxKenRjYmx4dVkyOXVjM1FnWlc1amIyUnBibWREYjJ4dmNsTndZV05sVFdGd09pQlNaV052Y21ROFlXNTVMQ0FuSnlCOElDZHpjbWRpSno0Z1BTQjdYRzRnSURNd01EQTZJQ2NuTEZ4dUlDQXpNREF4T2lBbmMzSm5ZaWNzWEc1OU8xeHVYRzR2S2lwY2JpQXFJRUVnWTI5dGNHRjBJR1oxYm1OMGFXOXVJSFJ2SUdkbGRDQjBaWGgwZFhKbElHTnZiRzl5SUhOd1lXTmxMbHh1SUNwY2JpQXFJRU5QVFZCQlZEb2djSEpsTFhJeE5USmNiaUFxSUZOMFlYSjBhVzVuSUdaeWIyMGdWR2h5WldVdWFuTWdjakUxTWl3Z1lIUmxlSFIxY21VdVpXNWpiMlJwYm1kZ0lHbHpJSEpsYm1GdFpXUWdkRzhnWUhSbGVIUjFjbVV1WTI5c2IzSlRjR0ZqWldBdVhHNGdLaUJVYUdseklHWjFibU4wYVc5dUlIZHBiR3dnYUdGdVpHeGxJSFJvWlNCamIyMWhjSFF1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSFJsZUhSMWNtVWdWR2hsSUhSbGVIUjFjbVVnZVc5MUlIZGhiblFnZEc4Z1oyVjBJSFJvWlNCamIyeHZjaUJ6Y0dGalpTQm1jbTl0WEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJVWlhoMGRYSmxRMjlzYjNKVGNHRmpaU2gwWlhoMGRYSmxPaUJVU0ZKRlJTNVVaWGgwZFhKbEtUb2dKeWNnZkNBbmMzSm5ZaWNnZTF4dUlDQnBaaUFvY0dGeWMyVkpiblFvVkVoU1JVVXVVa1ZXU1ZOSlQwNHNJREV3S1NBK1BTQXhOVElwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR1Y0ZEhWeVpTNWpiMnh2Y2xOd1lXTmxJR0Z6SUNjbklId2dKM055WjJJbk8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCbGJtTnZaR2x1WjBOdmJHOXlVM0JoWTJWTllYQmJLSFJsZUhSMWNtVWdZWE1nWVc1NUtTNWxibU52WkdsdVoxMDdYRzRnSUgxY2JuMWNiaUlzSWk4cUlIUnpiR2x1ZERwa2FYTmhZbXhsT20xbGJXSmxjaTF2Y21SbGNtbHVaeUFxTDF4dVhHNXBiWEJ2Y25RZ0tpQmhjeUJVU0ZKRlJTQm1jbTl0SUNkMGFISmxaU2M3WEc1cGJYQnZjblFnZG1WeWRHVjRVMmhoWkdWeUlHWnliMjBnSnk0dmMyaGhaR1Z5Y3k5dGRHOXZiaTUyWlhKMEp6dGNibWx0Y0c5eWRDQm1jbUZuYldWdWRGTm9ZV1JsY2lCbWNtOXRJQ2N1TDNOb1lXUmxjbk12YlhSdmIyNHVabkpoWnljN1hHNXBiWEJ2Y25RZ2V5Qk5WRzl2YmsxaGRHVnlhV0ZzUkdWaWRXZE5iMlJsSUgwZ1puSnZiU0FuTGk5TlZHOXZiazFoZEdWeWFXRnNSR1ZpZFdkTmIyUmxKenRjYm1sdGNHOXlkQ0I3SUUxVWIyOXVUV0YwWlhKcFlXeFBkWFJzYVc1bFYybGtkR2hOYjJSbElIMGdabkp2YlNBbkxpOU5WRzl2YmsxaGRHVnlhV0ZzVDNWMGJHbHVaVmRwWkhSb1RXOWtaU2M3WEc1cGJYQnZjblFnZEhsd1pTQjdJRTFVYjI5dVRXRjBaWEpwWVd4UVlYSmhiV1YwWlhKeklIMGdabkp2YlNBbkxpOU5WRzl2YmsxaGRHVnlhV0ZzVUdGeVlXMWxkR1Z5Y3ljN1hHNXBiWEJ2Y25RZ2V5Qm5aWFJVWlhoMGRYSmxRMjlzYjNKVGNHRmpaU0I5SUdaeWIyMGdKeTR2ZFhScGJITXZaMlYwVkdWNGRIVnlaVU52Ykc5eVUzQmhZMlVuTzF4dVhHNHZLaXBjYmlBcUlFMVViMjl1SUdseklHRWdiV0YwWlhKcFlXd2djM0JsWTJsbWFXTmhkR2x2YmlCMGFHRjBJR2hoY3lCMllYSnBiM1Z6SUdabFlYUjFjbVZ6TGx4dUlDb2dWR2hsSUhOd1pXTWdZVzVrSUdsdGNHeGxiV1Z1ZEdGMGFXOXVJR0Z5WlNCdmNtbG5hVzVoYkd4NUlHWnZkVzVrWldRZ1ptOXlJRlZ1YVhSNUlHVnVaMmx1WlNCaGJtUWdkR2hwY3lCcGN5QmhJSEJ2Y25RZ2IyWWdkR2hsSUcxaGRHVnlhV0ZzTGx4dUlDcGNiaUFxSUZObFpUb2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMU5oYm5SaGNtZ3ZUVlJ2YjI1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFMVViMjl1VFdGMFpYSnBZV3dnWlhoMFpXNWtjeUJVU0ZKRlJTNVRhR0ZrWlhKTllYUmxjbWxoYkNCN1hHNGdJSEIxWW14cFl5QjFibWxtYjNKdGN6b2dlMXh1SUNBZ0lHeHBkRVpoWTNSdmNqb2dWRWhTUlVVdVNWVnVhV1p2Y20wOFZFaFNSVVV1UTI5c2IzSStPMXh1SUNBZ0lHRnNjR2hoVkdWemREb2dWRWhTUlVVdVNWVnVhV1p2Y20wOGJuVnRZbVZ5UGp0Y2JpQWdJQ0J2Y0dGamFYUjVPaUJVU0ZKRlJTNUpWVzVwWm05eWJUeHVkVzFpWlhJK08xeHVJQ0FnSUcxaGNEb2dWRWhTUlVVdVNWVnVhV1p2Y20wOFZFaFNSVVV1VkdWNGRIVnlaU0I4SUc1MWJHdytPMXh1SUNBZ0lHMWhjRlYyVkhKaGJuTm1iM0p0T2lCVVNGSkZSUzVKVlc1cFptOXliVHhVU0ZKRlJTNU5ZWFJ5YVhnelBqdGNiaUFnSUNCdWIzSnRZV3hOWVhBNklGUklVa1ZGTGtsVmJtbG1iM0p0UEZSSVVrVkZMbFJsZUhSMWNtVWdmQ0J1ZFd4c1BqdGNiaUFnSUNCdWIzSnRZV3hOWVhCVmRsUnlZVzV6Wm05eWJUb2dWRWhTUlVVdVNWVnVhV1p2Y20wOFZFaFNSVVV1VFdGMGNtbDRNejQ3WEc0Z0lDQWdibTl5YldGc1UyTmhiR1U2SUZSSVVrVkZMa2xWYm1sbWIzSnRQRlJJVWtWRkxsWmxZM1J2Y2pJK08xeHVJQ0FnSUdWdGFYTnphWFpsT2lCVVNGSkZSUzVKVlc1cFptOXliVHhVU0ZKRlJTNURiMnh2Y2o0N1hHNGdJQ0FnWlcxcGMzTnBkbVZKYm5SbGJuTnBkSGs2SUZSSVVrVkZMa2xWYm1sbWIzSnRQRzUxYldKbGNqNDdYRzRnSUNBZ1pXMXBjM05wZG1WTllYQTZJRlJJVWtWRkxrbFZibWxtYjNKdFBGUklVa1ZGTGxSbGVIUjFjbVVnZkNCdWRXeHNQanRjYmlBZ0lDQmxiV2x6YzJsMlpVMWhjRlYyVkhKaGJuTm1iM0p0T2lCVVNGSkZSUzVKVlc1cFptOXliVHhVU0ZKRlJTNU5ZWFJ5YVhnelBqdGNiaUFnSUNCemFHRmtaVU52Ykc5eVJtRmpkRzl5T2lCVVNGSkZSUzVKVlc1cFptOXliVHhVU0ZKRlJTNURiMnh2Y2o0N1hHNGdJQ0FnYzJoaFpHVk5kV3gwYVhCc2VWUmxlSFIxY21VNklGUklVa1ZGTGtsVmJtbG1iM0p0UEZSSVVrVkZMbFJsZUhSMWNtVWdmQ0J1ZFd4c1BqdGNiaUFnSUNCemFHRmtaVTExYkhScGNHeDVWR1Y0ZEhWeVpWVjJWSEpoYm5ObWIzSnRPaUJVU0ZKRlJTNUpWVzVwWm05eWJUeFVTRkpGUlM1TllYUnlhWGd6UGp0Y2JpQWdJQ0J6YUdGa2FXNW5VMmhwWm5SR1lXTjBiM0k2SUZSSVVrVkZMa2xWYm1sbWIzSnRQRzUxYldKbGNqNDdYRzRnSUNBZ2MyaGhaR2x1WjFOb2FXWjBWR1Y0ZEhWeVpUb2dWRWhTUlVVdVNWVnVhV1p2Y20wOFZFaFNSVVV1VkdWNGRIVnlaU0I4SUc1MWJHdytPMXh1SUNBZ0lITm9ZV1JwYm1kVGFHbG1kRlJsZUhSMWNtVlZkbFJ5WVc1elptOXliVG9nVkVoU1JVVXVTVlZ1YVdadmNtMDhWRWhTUlVVdVRXRjBjbWw0TXo0N1hHNGdJQ0FnYzJoaFpHbHVaMU5vYVdaMFZHVjRkSFZ5WlZOallXeGxPaUJVU0ZKRlJTNUpWVzVwWm05eWJUeHVkVzFpWlhJK08xeHVJQ0FnSUhOb1lXUnBibWRVYjI5dWVVWmhZM1J2Y2pvZ1ZFaFNSVVV1U1ZWdWFXWnZjbTA4Ym5WdFltVnlQanRjYmlBZ0lDQm5hVVZ4ZFdGc2FYcGhkR2x2YmtaaFkzUnZjam9nVkVoU1JVVXVTVlZ1YVdadmNtMDhiblZ0WW1WeVBqdGNiaUFnSUNCdFlYUmpZWEJHWVdOMGIzSTZJRlJJVWtWRkxrbFZibWxtYjNKdFBGUklVa1ZGTGtOdmJHOXlQanRjYmlBZ0lDQnRZWFJqWVhCVVpYaDBkWEpsT2lCVVNGSkZSUzVKVlc1cFptOXliVHhVU0ZKRlJTNVVaWGgwZFhKbElId2diblZzYkQ0N1hHNGdJQ0FnYldGMFkyRndWR1Y0ZEhWeVpWVjJWSEpoYm5ObWIzSnRPaUJVU0ZKRlJTNUpWVzVwWm05eWJUeFVTRkpGUlM1TllYUnlhWGd6UGp0Y2JpQWdJQ0J3WVhKaGJXVjBjbWxqVW1sdFEyOXNiM0pHWVdOMGIzSTZJRlJJVWtWRkxrbFZibWxtYjNKdFBGUklVa1ZGTGtOdmJHOXlQanRjYmlBZ0lDQnlhVzFOZFd4MGFYQnNlVlJsZUhSMWNtVTZJRlJJVWtWRkxrbFZibWxtYjNKdFBGUklVa1ZGTGxSbGVIUjFjbVVnZkNCdWRXeHNQanRjYmlBZ0lDQnlhVzFOZFd4MGFYQnNlVlJsZUhSMWNtVlZkbFJ5WVc1elptOXliVG9nVkVoU1JVVXVTVlZ1YVdadmNtMDhWRWhTUlVVdVRXRjBjbWw0TXo0N1hHNGdJQ0FnY21sdFRHbG5hSFJwYm1kTmFYaEdZV04wYjNJNklGUklVa1ZGTGtsVmJtbG1iM0p0UEc1MWJXSmxjajQ3WEc0Z0lDQWdjR0Z5WVcxbGRISnBZMUpwYlVaeVpYTnVaV3hRYjNkbGNrWmhZM1J2Y2pvZ1ZFaFNSVVV1U1ZWdWFXWnZjbTA4Ym5WdFltVnlQanRjYmlBZ0lDQndZWEpoYldWMGNtbGpVbWx0VEdsbWRFWmhZM1J2Y2pvZ1ZFaFNSVVV1U1ZWdWFXWnZjbTA4Ym5WdFltVnlQanRjYmlBZ0lDQnZkWFJzYVc1bFYybGtkR2hOZFd4MGFYQnNlVlJsZUhSMWNtVTZJRlJJVWtWRkxrbFZibWxtYjNKdFBGUklVa1ZGTGxSbGVIUjFjbVVnZkNCdWRXeHNQanRjYmlBZ0lDQnZkWFJzYVc1bFYybGtkR2hOZFd4MGFYQnNlVlJsZUhSMWNtVlZkbFJ5WVc1elptOXliVG9nVkVoU1JVVXVTVlZ1YVdadmNtMDhWRWhTUlVVdVRXRjBjbWw0TXo0N1hHNGdJQ0FnYjNWMGJHbHVaVmRwWkhSb1JtRmpkRzl5T2lCVVNGSkZSUzVKVlc1cFptOXliVHh1ZFcxaVpYSStPMXh1SUNBZ0lHOTFkR3hwYm1WRGIyeHZja1poWTNSdmNqb2dWRWhTUlVVdVNWVnVhV1p2Y20wOFZFaFNSVVV1UTI5c2IzSStPMXh1SUNBZ0lHOTFkR3hwYm1WTWFXZG9kR2x1WjAxcGVFWmhZM1J2Y2pvZ1ZFaFNSVVV1U1ZWdWFXWnZjbTA4Ym5WdFltVnlQanRjYmlBZ0lDQjFka0Z1YVcxaGRHbHZiazFoYzJ0VVpYaDBkWEpsT2lCVVNGSkZSUzVKVlc1cFptOXliVHhVU0ZKRlJTNVVaWGgwZFhKbElId2diblZzYkQ0N1hHNGdJQ0FnZFhaQmJtbHRZWFJwYjI1TllYTnJWR1Y0ZEhWeVpWVjJWSEpoYm5ObWIzSnRPaUJVU0ZKRlJTNUpWVzVwWm05eWJUeFVTRkpGUlM1TllYUnlhWGd6UGp0Y2JpQWdJQ0IxZGtGdWFXMWhkR2x2YmxOamNtOXNiRmhQWm1aelpYUTZJRlJJVWtWRkxrbFZibWxtYjNKdFBHNTFiV0psY2o0N1hHNGdJQ0FnZFhaQmJtbHRZWFJwYjI1VFkzSnZiR3haVDJabWMyVjBPaUJVU0ZKRlJTNUpWVzVwWm05eWJUeHVkVzFpWlhJK08xeHVJQ0FnSUhWMlFXNXBiV0YwYVc5dVVtOTBZWFJwYjI1UWFHRnpaVG9nVkVoU1JVVXVTVlZ1YVdadmNtMDhiblZ0WW1WeVBqdGNiaUFnZlR0Y2JseHVJQ0J3ZFdKc2FXTWdaMlYwSUdOdmJHOXlLQ2s2SUZSSVVrVkZMa052Ykc5eUlIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NTFibWxtYjNKdGN5NXNhWFJHWVdOMGIzSXVkbUZzZFdVN1hHNGdJSDFjYmlBZ2NIVmliR2xqSUhObGRDQmpiMnh2Y2loMllXeDFaVG9nVkVoU1JVVXVRMjlzYjNJcElIdGNiaUFnSUNCMGFHbHpMblZ1YVdadmNtMXpMbXhwZEVaaFkzUnZjaTUyWVd4MVpTQTlJSFpoYkhWbE8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklHZGxkQ0J0WVhBb0tUb2dWRWhTUlVVdVZHVjRkSFZ5WlNCOElHNTFiR3dnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5WdWFXWnZjbTF6TG0xaGNDNTJZV3gxWlR0Y2JpQWdmVnh1SUNCd2RXSnNhV01nYzJWMElHMWhjQ2gyWVd4MVpUb2dWRWhTUlVVdVZHVjRkSFZ5WlNCOElHNTFiR3dwSUh0Y2JpQWdJQ0IwYUdsekxuVnVhV1p2Y20xekxtMWhjQzUyWVd4MVpTQTlJSFpoYkhWbE8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklHZGxkQ0J1YjNKdFlXeE5ZWEFvS1RvZ1ZFaFNSVVV1VkdWNGRIVnlaU0I4SUc1MWJHd2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMblZ1YVdadmNtMXpMbTV2Y20xaGJFMWhjQzUyWVd4MVpUdGNiaUFnZlZ4dUlDQndkV0pzYVdNZ2MyVjBJRzV2Y20xaGJFMWhjQ2gyWVd4MVpUb2dWRWhTUlVVdVZHVjRkSFZ5WlNCOElHNTFiR3dwSUh0Y2JpQWdJQ0IwYUdsekxuVnVhV1p2Y20xekxtNXZjbTFoYkUxaGNDNTJZV3gxWlNBOUlIWmhiSFZsTzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUdkbGRDQnViM0p0WVd4VFkyRnNaU2dwT2lCVVNGSkZSUzVXWldOMGIzSXlJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUxYm1sbWIzSnRjeTV1YjNKdFlXeFRZMkZzWlM1MllXeDFaVHRjYmlBZ2ZWeHVJQ0J3ZFdKc2FXTWdjMlYwSUc1dmNtMWhiRk5qWVd4bEtIWmhiSFZsT2lCVVNGSkZSUzVXWldOMGIzSXlLU0I3WEc0Z0lDQWdkR2hwY3k1MWJtbG1iM0p0Y3k1dWIzSnRZV3hUWTJGc1pTNTJZV3gxWlNBOUlIWmhiSFZsTzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUdkbGRDQmxiV2x6YzJsMlpTZ3BPaUJVU0ZKRlJTNURiMnh2Y2lCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWRXNXBabTl5YlhNdVpXMXBjM05wZG1VdWRtRnNkV1U3WEc0Z0lIMWNiaUFnY0hWaWJHbGpJSE5sZENCbGJXbHpjMmwyWlNoMllXeDFaVG9nVkVoU1JVVXVRMjlzYjNJcElIdGNiaUFnSUNCMGFHbHpMblZ1YVdadmNtMXpMbVZ0YVhOemFYWmxMblpoYkhWbElEMGdkbUZzZFdVN1hHNGdJSDFjYmx4dUlDQndkV0pzYVdNZ1oyVjBJR1Z0YVhOemFYWmxTVzUwWlc1emFYUjVLQ2s2SUc1MWJXSmxjaUI3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11ZFc1cFptOXliWE11WlcxcGMzTnBkbVZKYm5SbGJuTnBkSGt1ZG1Gc2RXVTdYRzRnSUgxY2JpQWdjSFZpYkdsaklITmxkQ0JsYldsemMybDJaVWx1ZEdWdWMybDBlU2gyWVd4MVpUb2diblZ0WW1WeUtTQjdYRzRnSUNBZ2RHaHBjeTUxYm1sbWIzSnRjeTVsYldsemMybDJaVWx1ZEdWdWMybDBlUzUyWVd4MVpTQTlJSFpoYkhWbE8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklHZGxkQ0JsYldsemMybDJaVTFoY0NncE9pQlVTRkpGUlM1VVpYaDBkWEpsSUh3Z2JuVnNiQ0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11ZFc1cFptOXliWE11WlcxcGMzTnBkbVZOWVhBdWRtRnNkV1U3WEc0Z0lIMWNiaUFnY0hWaWJHbGpJSE5sZENCbGJXbHpjMmwyWlUxaGNDaDJZV3gxWlRvZ1ZFaFNSVVV1VkdWNGRIVnlaU0I4SUc1MWJHd3BJSHRjYmlBZ0lDQjBhR2x6TG5WdWFXWnZjbTF6TG1WdGFYTnphWFpsVFdGd0xuWmhiSFZsSUQwZ2RtRnNkV1U3WEc0Z0lIMWNibHh1SUNCd2RXSnNhV01nWjJWMElITm9ZV1JsUTI5c2IzSkdZV04wYjNJb0tUb2dWRWhTUlVVdVEyOXNiM0lnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5WdWFXWnZjbTF6TG5Ob1lXUmxRMjlzYjNKR1lXTjBiM0l1ZG1Gc2RXVTdYRzRnSUgxY2JpQWdjSFZpYkdsaklITmxkQ0J6YUdGa1pVTnZiRzl5Um1GamRHOXlLSFpoYkhWbE9pQlVTRkpGUlM1RGIyeHZjaWtnZTF4dUlDQWdJSFJvYVhNdWRXNXBabTl5YlhNdWMyaGhaR1ZEYjJ4dmNrWmhZM1J2Y2k1MllXeDFaU0E5SUhaaGJIVmxPMXh1SUNCOVhHNWNiaUFnY0hWaWJHbGpJR2RsZENCemFHRmtaVTExYkhScGNHeDVWR1Y0ZEhWeVpTZ3BPaUJVU0ZKRlJTNVVaWGgwZFhKbElId2diblZzYkNCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWRXNXBabTl5YlhNdWMyaGhaR1ZOZFd4MGFYQnNlVlJsZUhSMWNtVXVkbUZzZFdVN1hHNGdJSDFjYmlBZ2NIVmliR2xqSUhObGRDQnphR0ZrWlUxMWJIUnBjR3g1VkdWNGRIVnlaU2gyWVd4MVpUb2dWRWhTUlVVdVZHVjRkSFZ5WlNCOElHNTFiR3dwSUh0Y2JpQWdJQ0IwYUdsekxuVnVhV1p2Y20xekxuTm9ZV1JsVFhWc2RHbHdiSGxVWlhoMGRYSmxMblpoYkhWbElEMGdkbUZzZFdVN1hHNGdJSDFjYmx4dUlDQndkV0pzYVdNZ1oyVjBJSE5vWVdScGJtZFRhR2xtZEVaaFkzUnZjaWdwT2lCdWRXMWlaWElnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5WdWFXWnZjbTF6TG5Ob1lXUnBibWRUYUdsbWRFWmhZM1J2Y2k1MllXeDFaVHRjYmlBZ2ZWeHVJQ0J3ZFdKc2FXTWdjMlYwSUhOb1lXUnBibWRUYUdsbWRFWmhZM1J2Y2loMllXeDFaVG9nYm5WdFltVnlLU0I3WEc0Z0lDQWdkR2hwY3k1MWJtbG1iM0p0Y3k1emFHRmthVzVuVTJocFpuUkdZV04wYjNJdWRtRnNkV1VnUFNCMllXeDFaVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJuWlhRZ2MyaGhaR2x1WjFOb2FXWjBWR1Y0ZEhWeVpTZ3BPaUJVU0ZKRlJTNVVaWGgwZFhKbElId2diblZzYkNCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWRXNXBabTl5YlhNdWMyaGhaR2x1WjFOb2FXWjBWR1Y0ZEhWeVpTNTJZV3gxWlR0Y2JpQWdmVnh1SUNCd2RXSnNhV01nYzJWMElITm9ZV1JwYm1kVGFHbG1kRlJsZUhSMWNtVW9kbUZzZFdVNklGUklVa1ZGTGxSbGVIUjFjbVVnZkNCdWRXeHNLU0I3WEc0Z0lDQWdkR2hwY3k1MWJtbG1iM0p0Y3k1emFHRmthVzVuVTJocFpuUlVaWGgwZFhKbExuWmhiSFZsSUQwZ2RtRnNkV1U3WEc0Z0lIMWNibHh1SUNCd2RXSnNhV01nWjJWMElITm9ZV1JwYm1kVGFHbG1kRlJsZUhSMWNtVlRZMkZzWlNncE9pQnVkVzFpWlhJZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuVnVhV1p2Y20xekxuTm9ZV1JwYm1kVGFHbG1kRlJsZUhSMWNtVlRZMkZzWlM1MllXeDFaVHRjYmlBZ2ZWeHVJQ0J3ZFdKc2FXTWdjMlYwSUhOb1lXUnBibWRUYUdsbWRGUmxlSFIxY21WVFkyRnNaU2gyWVd4MVpUb2diblZ0WW1WeUtTQjdYRzRnSUNBZ2RHaHBjeTUxYm1sbWIzSnRjeTV6YUdGa2FXNW5VMmhwWm5SVVpYaDBkWEpsVTJOaGJHVXVkbUZzZFdVZ1BTQjJZV3gxWlR0Y2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCblpYUWdjMmhoWkdsdVoxUnZiMjU1Um1GamRHOXlLQ2s2SUc1MWJXSmxjaUI3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11ZFc1cFptOXliWE11YzJoaFpHbHVaMVJ2YjI1NVJtRmpkRzl5TG5aaGJIVmxPMXh1SUNCOVhHNGdJSEIxWW14cFl5QnpaWFFnYzJoaFpHbHVaMVJ2YjI1NVJtRmpkRzl5S0haaGJIVmxPaUJ1ZFcxaVpYSXBJSHRjYmlBZ0lDQjBhR2x6TG5WdWFXWnZjbTF6TG5Ob1lXUnBibWRVYjI5dWVVWmhZM1J2Y2k1MllXeDFaU0E5SUhaaGJIVmxPMXh1SUNCOVhHNWNiaUFnY0hWaWJHbGpJR2RsZENCbmFVVnhkV0ZzYVhwaGRHbHZia1poWTNSdmNpZ3BPaUJ1ZFcxaVpYSWdlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMblZ1YVdadmNtMXpMbWRwUlhGMVlXeHBlbUYwYVc5dVJtRmpkRzl5TG5aaGJIVmxPMXh1SUNCOVhHNGdJSEIxWW14cFl5QnpaWFFnWjJsRmNYVmhiR2w2WVhScGIyNUdZV04wYjNJb2RtRnNkV1U2SUc1MWJXSmxjaWtnZTF4dUlDQWdJSFJvYVhNdWRXNXBabTl5YlhNdVoybEZjWFZoYkdsNllYUnBiMjVHWVdOMGIzSXVkbUZzZFdVZ1BTQjJZV3gxWlR0Y2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCblpYUWdiV0YwWTJGd1JtRmpkRzl5S0NrNklGUklVa1ZGTGtOdmJHOXlJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUxYm1sbWIzSnRjeTV0WVhSallYQkdZV04wYjNJdWRtRnNkV1U3WEc0Z0lIMWNiaUFnY0hWaWJHbGpJSE5sZENCdFlYUmpZWEJHWVdOMGIzSW9kbUZzZFdVNklGUklVa1ZGTGtOdmJHOXlLU0I3WEc0Z0lDQWdkR2hwY3k1MWJtbG1iM0p0Y3k1dFlYUmpZWEJHWVdOMGIzSXVkbUZzZFdVZ1BTQjJZV3gxWlR0Y2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCblpYUWdiV0YwWTJGd1ZHVjRkSFZ5WlNncE9pQlVTRkpGUlM1VVpYaDBkWEpsSUh3Z2JuVnNiQ0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11ZFc1cFptOXliWE11YldGMFkyRndWR1Y0ZEhWeVpTNTJZV3gxWlR0Y2JpQWdmVnh1SUNCd2RXSnNhV01nYzJWMElHMWhkR05oY0ZSbGVIUjFjbVVvZG1Gc2RXVTZJRlJJVWtWRkxsUmxlSFIxY21VZ2ZDQnVkV3hzS1NCN1hHNGdJQ0FnZEdocGN5NTFibWxtYjNKdGN5NXRZWFJqWVhCVVpYaDBkWEpsTG5aaGJIVmxJRDBnZG1Gc2RXVTdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdaMlYwSUhCaGNtRnRaWFJ5YVdOU2FXMURiMnh2Y2taaFkzUnZjaWdwT2lCVVNGSkZSUzVEYjJ4dmNpQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkVzVwWm05eWJYTXVjR0Z5WVcxbGRISnBZMUpwYlVOdmJHOXlSbUZqZEc5eUxuWmhiSFZsTzF4dUlDQjlYRzRnSUhCMVlteHBZeUJ6WlhRZ2NHRnlZVzFsZEhKcFkxSnBiVU52Ykc5eVJtRmpkRzl5S0haaGJIVmxPaUJVU0ZKRlJTNURiMnh2Y2lrZ2UxeHVJQ0FnSUhSb2FYTXVkVzVwWm05eWJYTXVjR0Z5WVcxbGRISnBZMUpwYlVOdmJHOXlSbUZqZEc5eUxuWmhiSFZsSUQwZ2RtRnNkV1U3WEc0Z0lIMWNibHh1SUNCd2RXSnNhV01nWjJWMElISnBiVTExYkhScGNHeDVWR1Y0ZEhWeVpTZ3BPaUJVU0ZKRlJTNVVaWGgwZFhKbElId2diblZzYkNCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWRXNXBabTl5YlhNdWNtbHRUWFZzZEdsd2JIbFVaWGgwZFhKbExuWmhiSFZsTzF4dUlDQjlYRzRnSUhCMVlteHBZeUJ6WlhRZ2NtbHRUWFZzZEdsd2JIbFVaWGgwZFhKbEtIWmhiSFZsT2lCVVNGSkZSUzVVWlhoMGRYSmxJSHdnYm5Wc2JDa2dlMXh1SUNBZ0lIUm9hWE11ZFc1cFptOXliWE11Y21sdFRYVnNkR2x3YkhsVVpYaDBkWEpsTG5aaGJIVmxJRDBnZG1Gc2RXVTdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdaMlYwSUhKcGJVeHBaMmgwYVc1blRXbDRSbUZqZEc5eUtDazZJRzUxYldKbGNpQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkVzVwWm05eWJYTXVjbWx0VEdsbmFIUnBibWROYVhoR1lXTjBiM0l1ZG1Gc2RXVTdYRzRnSUgxY2JpQWdjSFZpYkdsaklITmxkQ0J5YVcxTWFXZG9kR2x1WjAxcGVFWmhZM1J2Y2loMllXeDFaVG9nYm5WdFltVnlLU0I3WEc0Z0lDQWdkR2hwY3k1MWJtbG1iM0p0Y3k1eWFXMU1hV2RvZEdsdVowMXBlRVpoWTNSdmNpNTJZV3gxWlNBOUlIWmhiSFZsTzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUdkbGRDQndZWEpoYldWMGNtbGpVbWx0Um5KbGMyNWxiRkJ2ZDJWeVJtRmpkRzl5S0NrNklHNTFiV0psY2lCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWRXNXBabTl5YlhNdWNHRnlZVzFsZEhKcFkxSnBiVVp5WlhOdVpXeFFiM2RsY2taaFkzUnZjaTUyWVd4MVpUdGNiaUFnZlZ4dUlDQndkV0pzYVdNZ2MyVjBJSEJoY21GdFpYUnlhV05TYVcxR2NtVnpibVZzVUc5M1pYSkdZV04wYjNJb2RtRnNkV1U2SUc1MWJXSmxjaWtnZTF4dUlDQWdJSFJvYVhNdWRXNXBabTl5YlhNdWNHRnlZVzFsZEhKcFkxSnBiVVp5WlhOdVpXeFFiM2RsY2taaFkzUnZjaTUyWVd4MVpTQTlJSFpoYkhWbE8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklHZGxkQ0J3WVhKaGJXVjBjbWxqVW1sdFRHbG1kRVpoWTNSdmNpZ3BPaUJ1ZFcxaVpYSWdlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMblZ1YVdadmNtMXpMbkJoY21GdFpYUnlhV05TYVcxTWFXWjBSbUZqZEc5eUxuWmhiSFZsTzF4dUlDQjlYRzRnSUhCMVlteHBZeUJ6WlhRZ2NHRnlZVzFsZEhKcFkxSnBiVXhwWm5SR1lXTjBiM0lvZG1Gc2RXVTZJRzUxYldKbGNpa2dlMXh1SUNBZ0lIUm9hWE11ZFc1cFptOXliWE11Y0dGeVlXMWxkSEpwWTFKcGJVeHBablJHWVdOMGIzSXVkbUZzZFdVZ1BTQjJZV3gxWlR0Y2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCblpYUWdiM1YwYkdsdVpWZHBaSFJvVFhWc2RHbHdiSGxVWlhoMGRYSmxLQ2s2SUZSSVVrVkZMbFJsZUhSMWNtVWdmQ0J1ZFd4c0lIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NTFibWxtYjNKdGN5NXZkWFJzYVc1bFYybGtkR2hOZFd4MGFYQnNlVlJsZUhSMWNtVXVkbUZzZFdVN1hHNGdJSDFjYmlBZ2NIVmliR2xqSUhObGRDQnZkWFJzYVc1bFYybGtkR2hOZFd4MGFYQnNlVlJsZUhSMWNtVW9kbUZzZFdVNklGUklVa1ZGTGxSbGVIUjFjbVVnZkNCdWRXeHNLU0I3WEc0Z0lDQWdkR2hwY3k1MWJtbG1iM0p0Y3k1dmRYUnNhVzVsVjJsa2RHaE5kV3gwYVhCc2VWUmxlSFIxY21VdWRtRnNkV1VnUFNCMllXeDFaVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJuWlhRZ2IzVjBiR2x1WlZkcFpIUm9SbUZqZEc5eUtDazZJRzUxYldKbGNpQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkVzVwWm05eWJYTXViM1YwYkdsdVpWZHBaSFJvUm1GamRHOXlMblpoYkhWbE8xeHVJQ0I5WEc0Z0lIQjFZbXhwWXlCelpYUWdiM1YwYkdsdVpWZHBaSFJvUm1GamRHOXlLSFpoYkhWbE9pQnVkVzFpWlhJcElIdGNiaUFnSUNCMGFHbHpMblZ1YVdadmNtMXpMbTkxZEd4cGJtVlhhV1IwYUVaaFkzUnZjaTUyWVd4MVpTQTlJSFpoYkhWbE8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklHZGxkQ0J2ZFhSc2FXNWxRMjlzYjNKR1lXTjBiM0lvS1RvZ1ZFaFNSVVV1UTI5c2IzSWdlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMblZ1YVdadmNtMXpMbTkxZEd4cGJtVkRiMnh2Y2taaFkzUnZjaTUyWVd4MVpUdGNiaUFnZlZ4dUlDQndkV0pzYVdNZ2MyVjBJRzkxZEd4cGJtVkRiMnh2Y2taaFkzUnZjaWgyWVd4MVpUb2dWRWhTUlVVdVEyOXNiM0lwSUh0Y2JpQWdJQ0IwYUdsekxuVnVhV1p2Y20xekxtOTFkR3hwYm1WRGIyeHZja1poWTNSdmNpNTJZV3gxWlNBOUlIWmhiSFZsTzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUdkbGRDQnZkWFJzYVc1bFRHbG5hSFJwYm1kTmFYaEdZV04wYjNJb0tUb2diblZ0WW1WeUlIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NTFibWxtYjNKdGN5NXZkWFJzYVc1bFRHbG5hSFJwYm1kTmFYaEdZV04wYjNJdWRtRnNkV1U3WEc0Z0lIMWNiaUFnY0hWaWJHbGpJSE5sZENCdmRYUnNhVzVsVEdsbmFIUnBibWROYVhoR1lXTjBiM0lvZG1Gc2RXVTZJRzUxYldKbGNpa2dlMXh1SUNBZ0lIUm9hWE11ZFc1cFptOXliWE11YjNWMGJHbHVaVXhwWjJoMGFXNW5UV2w0Um1GamRHOXlMblpoYkhWbElEMGdkbUZzZFdVN1hHNGdJSDFjYmx4dUlDQndkV0pzYVdNZ1oyVjBJSFYyUVc1cGJXRjBhVzl1VFdGemExUmxlSFIxY21Vb0tUb2dWRWhTUlVVdVZHVjRkSFZ5WlNCOElHNTFiR3dnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5WdWFXWnZjbTF6TG5WMlFXNXBiV0YwYVc5dVRXRnphMVJsZUhSMWNtVXVkbUZzZFdVN1hHNGdJSDFjYmlBZ2NIVmliR2xqSUhObGRDQjFka0Z1YVcxaGRHbHZiazFoYzJ0VVpYaDBkWEpsS0haaGJIVmxPaUJVU0ZKRlJTNVVaWGgwZFhKbElId2diblZzYkNrZ2UxeHVJQ0FnSUhSb2FYTXVkVzVwWm05eWJYTXVkWFpCYm1sdFlYUnBiMjVOWVhOclZHVjRkSFZ5WlM1MllXeDFaU0E5SUhaaGJIVmxPMXh1SUNCOVhHNWNiaUFnY0hWaWJHbGpJR2RsZENCMWRrRnVhVzFoZEdsdmJsTmpjbTlzYkZoUFptWnpaWFFvS1RvZ2JuVnRZbVZ5SUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MWJtbG1iM0p0Y3k1MWRrRnVhVzFoZEdsdmJsTmpjbTlzYkZoUFptWnpaWFF1ZG1Gc2RXVTdYRzRnSUgxY2JpQWdjSFZpYkdsaklITmxkQ0IxZGtGdWFXMWhkR2x2YmxOamNtOXNiRmhQWm1aelpYUW9kbUZzZFdVNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUhSb2FYTXVkVzVwWm05eWJYTXVkWFpCYm1sdFlYUnBiMjVUWTNKdmJHeFlUMlptYzJWMExuWmhiSFZsSUQwZ2RtRnNkV1U3WEc0Z0lIMWNibHh1SUNCd2RXSnNhV01nWjJWMElIVjJRVzVwYldGMGFXOXVVMk55YjJ4c1dVOW1abk5sZENncE9pQnVkVzFpWlhJZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuVnVhV1p2Y20xekxuVjJRVzVwYldGMGFXOXVVMk55YjJ4c1dVOW1abk5sZEM1MllXeDFaVHRjYmlBZ2ZWeHVJQ0J3ZFdKc2FXTWdjMlYwSUhWMlFXNXBiV0YwYVc5dVUyTnliMnhzV1U5bVpuTmxkQ2gyWVd4MVpUb2diblZ0WW1WeUtTQjdYRzRnSUNBZ2RHaHBjeTUxYm1sbWIzSnRjeTUxZGtGdWFXMWhkR2x2YmxOamNtOXNiRmxQWm1aelpYUXVkbUZzZFdVZ1BTQjJZV3gxWlR0Y2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCblpYUWdkWFpCYm1sdFlYUnBiMjVTYjNSaGRHbHZibEJvWVhObEtDazZJRzUxYldKbGNpQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkVzVwWm05eWJYTXVkWFpCYm1sdFlYUnBiMjVTYjNSaGRHbHZibEJvWVhObExuWmhiSFZsTzF4dUlDQjlYRzRnSUhCMVlteHBZeUJ6WlhRZ2RYWkJibWx0WVhScGIyNVNiM1JoZEdsdmJsQm9ZWE5sS0haaGJIVmxPaUJ1ZFcxaVpYSXBJSHRjYmlBZ0lDQjBhR2x6TG5WdWFXWnZjbTF6TG5WMlFXNXBiV0YwYVc5dVVtOTBZWFJwYjI1UWFHRnpaUzUyWVd4MVpTQTlJSFpoYkhWbE8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklIVjJRVzVwYldGMGFXOXVVMk55YjJ4c1dGTndaV1ZrUm1GamRHOXlJRDBnTUM0d08xeHVJQ0J3ZFdKc2FXTWdkWFpCYm1sdFlYUnBiMjVUWTNKdmJHeFpVM0JsWldSR1lXTjBiM0lnUFNBd0xqQTdYRzRnSUhCMVlteHBZeUIxZGtGdWFXMWhkR2x2YmxKdmRHRjBhVzl1VTNCbFpXUkdZV04wYjNJZ1BTQXdMakE3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRmRvWlhSb1pYSWdkR2hsSUcxaGRHVnlhV0ZzSUdseklHRm1abVZqZEdWa0lHSjVJR1p2Wnk1Y2JpQWdJQ29nWUhSeWRXVmdJR0o1SUdSbFptRjFiSFF1WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nWm05bklEMGdkSEoxWlR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVjJsc2JDQmlaU0J5WldGa0lHbHVJRmRsWWtkTVVISnZaM0poYlhOY2JpQWdJQ3BjYmlBZ0lDb2dVMlZsT2lCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmJYSmtiMjlpTDNSb2NtVmxMbXB6TDJKc2IySXZOR1kxTWpNMllXTXpaRFptTkRGa09UQTBZV0UxT0RRd01XSTBNRFUxTkdVNFptSmtZMkl4TlM5emNtTXZjbVZ1WkdWeVpYSnpMM2RsWW1kc0wxZGxZa2RNVUhKdlozSmhiWE11YW5NalRERTVNQzFNTVRreFhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ2JtOXliV0ZzVFdGd1ZIbHdaU0E5SUZSSVVrVkZMbFJoYm1kbGJuUlRjR0ZqWlU1dmNtMWhiRTFoY0R0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVjJobGJpQjBhR2x6SUdseklHQjBjblZsWUN3Z2RtVnlkR1Y0SUdOdmJHOXljeUIzYVd4c0lHSmxJR2xuYm05eVpXUXVYRzRnSUNBcUlHQjBjblZsWUNCaWVTQmtaV1poZFd4MExseHVJQ0FnS2k5Y2JpQWdjSEpwZG1GMFpTQmZhV2R1YjNKbFZtVnlkR1Y0UTI5c2IzSWdQU0IwY25WbE8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCWGFHVnVJSFJvYVhNZ2FYTWdZSFJ5ZFdWZ0xDQjJaWEowWlhnZ1kyOXNiM0p6SUhkcGJHd2dZbVVnYVdkdWIzSmxaQzVjYmlBZ0lDb2dZSFJ5ZFdWZ0lHSjVJR1JsWm1GMWJIUXVYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdaMlYwSUdsbmJtOXlaVlpsY25SbGVFTnZiRzl5S0NrNklHSnZiMnhsWVc0Z2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXBaMjV2Y21WV1pYSjBaWGhEYjJ4dmNqdGNiaUFnZlZ4dUlDQndkV0pzYVdNZ2MyVjBJR2xuYm05eVpWWmxjblJsZUVOdmJHOXlLSFpoYkhWbE9pQmliMjlzWldGdUtTQjdYRzRnSUNBZ2RHaHBjeTVmYVdkdWIzSmxWbVZ5ZEdWNFEyOXNiM0lnUFNCMllXeDFaVHRjYmx4dUlDQWdJSFJvYVhNdWJtVmxaSE5WY0dSaGRHVWdQU0IwY25WbE8xeHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQmZkakJEYjIxd1lYUlRhR0ZrWlNBOUlHWmhiSE5sTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJVYUdWeVpTQnBjeUJoSUd4cGJtVWdiMllnZEdobElITm9ZV1JsY2lCallXeHNaV1FnWENKamIyMXRaVzUwSUc5MWRDQnBaaUI1YjNVZ2QyRnVkQ0IwYnlCUVFsSWdZV0p6YjJ4MWRHVnNlVndpSUdsdUlGWlNUVEF1TUNCTlZHOXZiaTVjYmlBZ0lDb2dWMmhsYmlCMGFHbHpJR2x6SUhSeWRXVXNJSFJvWlNCdFlYUmxjbWxoYkNCbGJtRmliR1Z6SUhSb1pTQnNhVzVsSUhSdklHMWhhMlVnYVhRZ1kyOXRjR0YwYVdKc1pTQjNhWFJvSUhSb1pTQnNaV2RoWTNrZ2NtVnVaR1Z5YVc1bklHOW1JRlpTVFM1Y2JpQWdJQ29nVlhOMVlXeHNlU0J1YjNRZ2NtVmpiMjF0Wlc1a1pXUWdkRzhnZEhWeWJpQjBhR2x6SUc5dUxseHVJQ0FnS2lCZ1ptRnNjMlZnSUdKNUlHUmxabUYxYkhRdVhHNGdJQ0FxTDF4dUlDQm5aWFFnZGpCRGIyMXdZWFJUYUdGa1pTZ3BPaUJpYjI5c1pXRnVJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZGpCRGIyMXdZWFJUYUdGa1pUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJVYUdWeVpTQnBjeUJoSUd4cGJtVWdiMllnZEdobElITm9ZV1JsY2lCallXeHNaV1FnWENKamIyMXRaVzUwSUc5MWRDQnBaaUI1YjNVZ2QyRnVkQ0IwYnlCUVFsSWdZV0p6YjJ4MWRHVnNlVndpSUdsdUlGWlNUVEF1TUNCTlZHOXZiaTVjYmlBZ0lDb2dWMmhsYmlCMGFHbHpJR2x6SUhSeWRXVXNJSFJvWlNCdFlYUmxjbWxoYkNCbGJtRmliR1Z6SUhSb1pTQnNhVzVsSUhSdklHMWhhMlVnYVhRZ1kyOXRjR0YwYVdKc1pTQjNhWFJvSUhSb1pTQnNaV2RoWTNrZ2NtVnVaR1Z5YVc1bklHOW1JRlpTVFM1Y2JpQWdJQ29nVlhOMVlXeHNlU0J1YjNRZ2NtVmpiMjF0Wlc1a1pXUWdkRzhnZEhWeWJpQjBhR2x6SUc5dUxseHVJQ0FnS2lCZ1ptRnNjMlZnSUdKNUlHUmxabUYxYkhRdVhHNGdJQ0FxTDF4dUlDQnpaWFFnZGpCRGIyMXdZWFJUYUdGa1pTaDJPaUJpYjI5c1pXRnVLU0I3WEc0Z0lDQWdkR2hwY3k1ZmRqQkRiMjF3WVhSVGFHRmtaU0E5SUhZN1hHNWNiaUFnSUNCMGFHbHpMbTVsWldSelZYQmtZWFJsSUQwZ2RISjFaVHRjYmlBZ2ZWeHVYRzRnSUhCeWFYWmhkR1VnWDJSbFluVm5UVzlrWlRvZ1RWUnZiMjVOWVhSbGNtbGhiRVJsWW5WblRXOWtaU0E5SUUxVWIyOXVUV0YwWlhKcFlXeEVaV0oxWjAxdlpHVXVUbTl1WlR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUkdWaWRXY2diVzlrWlNCbWIzSWdkR2hsSUcxaGRHVnlhV0ZzTGx4dUlDQWdLaUJaYjNVZ1kyRnVJSFpwYzNWaGJHbDZaU0J6WlhabGNtRnNJR052YlhCdmJtVnVkSE1nWm05eUlHUnBZV2R1YjNOcGN5QjFjMmx1WnlCa1pXSjFaeUJ0YjJSbExseHVJQ0FnS2x4dUlDQWdLaUJUWldVNklIdEFiR2x1YXlCTlZHOXZiazFoZEdWeWFXRnNSR1ZpZFdkTmIyUmxmVnh1SUNBZ0tpOWNiaUFnWjJWMElHUmxZblZuVFc5a1pTZ3BPaUJOVkc5dmJrMWhkR1Z5YVdGc1JHVmlkV2ROYjJSbElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZaR1ZpZFdkTmIyUmxPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVSbFluVm5JRzF2WkdVZ1ptOXlJSFJvWlNCdFlYUmxjbWxoYkM1Y2JpQWdJQ29nV1c5MUlHTmhiaUIyYVhOMVlXeHBlbVVnYzJWMlpYSmhiQ0JqYjIxd2IyNWxiblJ6SUdadmNpQmthV0ZuYm05emFYTWdkWE5wYm1jZ1pHVmlkV2NnYlc5a1pTNWNiaUFnSUNwY2JpQWdJQ29nVTJWbE9pQjdRR3hwYm1zZ1RWUnZiMjVOWVhSbGNtbGhiRVJsWW5WblRXOWtaWDFjYmlBZ0lDb3ZYRzRnSUhObGRDQmtaV0oxWjAxdlpHVW9iVG9nVFZSdmIyNU5ZWFJsY21saGJFUmxZblZuVFc5a1pTa2dlMXh1SUNBZ0lIUm9hWE11WDJSbFluVm5UVzlrWlNBOUlHMDdYRzVjYmlBZ0lDQjBhR2x6TG01bFpXUnpWWEJrWVhSbElEMGdkSEoxWlR0Y2JpQWdmVnh1WEc0Z0lIQnlhWFpoZEdVZ1gyOTFkR3hwYm1WWGFXUjBhRTF2WkdVNklFMVViMjl1VFdGMFpYSnBZV3hQZFhSc2FXNWxWMmxrZEdoTmIyUmxJRDBnVFZSdmIyNU5ZWFJsY21saGJFOTFkR3hwYm1WWGFXUjBhRTF2WkdVdVRtOXVaVHRjYmx4dUlDQm5aWFFnYjNWMGJHbHVaVmRwWkhSb1RXOWtaU2dwT2lCTlZHOXZiazFoZEdWeWFXRnNUM1YwYkdsdVpWZHBaSFJvVFc5a1pTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjkxZEd4cGJtVlhhV1IwYUUxdlpHVTdYRzRnSUgxY2JpQWdjMlYwSUc5MWRHeHBibVZYYVdSMGFFMXZaR1VvYlRvZ1RWUnZiMjVOWVhSbGNtbGhiRTkxZEd4cGJtVlhhV1IwYUUxdlpHVXBJSHRjYmlBZ0lDQjBhR2x6TGw5dmRYUnNhVzVsVjJsa2RHaE5iMlJsSUQwZ2JUdGNibHh1SUNBZ0lIUm9hWE11Ym1WbFpITlZjR1JoZEdVZ1BTQjBjblZsTzF4dUlDQjlYRzVjYmlBZ2NISnBkbUYwWlNCZmFYTlBkWFJzYVc1bElEMGdabUZzYzJVN1hHNWNiaUFnWjJWMElHbHpUM1YwYkdsdVpTZ3BPaUJpYjI5c1pXRnVJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYVhOUGRYUnNhVzVsTzF4dUlDQjlYRzRnSUhObGRDQnBjMDkxZEd4cGJtVW9Zam9nWW05dmJHVmhiaWtnZTF4dUlDQWdJSFJvYVhNdVgybHpUM1YwYkdsdVpTQTlJR0k3WEc1Y2JpQWdJQ0IwYUdsekxtNWxaV1J6VlhCa1lYUmxJRDBnZEhKMVpUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWldGa2IyNXNlU0JpYjI5c1pXRnVJSFJvWVhRZ2FXNWthV05oZEdWeklIUm9hWE1nYVhNZ1lTQmJXMDFVYjI5dVRXRjBaWEpwWVd4ZFhTNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5Qm5aWFFnYVhOTlZHOXZiazFoZEdWeWFXRnNLQ2s2SUhSeWRXVWdlMXh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNCOVhHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2NHRnlZVzFsZEdWeWN6b2dUVlJ2YjI1TllYUmxjbWxoYkZCaGNtRnRaWFJsY25NZ1BTQjdmU2tnZTF4dUlDQWdJSE4xY0dWeUtIc2dkbVZ5ZEdWNFUyaGhaR1Z5TENCbWNtRm5iV1Z1ZEZOb1lXUmxjaUI5S1R0Y2JseHVJQ0FnSUM4dklHOTJaWEp5YVdSbElHUmxjSFJvVjNKcGRHVWdkMmwwYUNCMGNtRnVjM0JoY21WdWRGZHBkR2hhVjNKcGRHVmNiaUFnSUNCcFppQW9jR0Z5WVcxbGRHVnljeTUwY21GdWMzQmhjbVZ1ZEZkcGRHaGFWM0pwZEdVcElIdGNiaUFnSUNBZ0lIQmhjbUZ0WlhSbGNuTXVaR1Z3ZEdoWGNtbDBaU0E5SUhSeWRXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUdSbGJHVjBaU0J3WVhKaGJXVjBaWEp6TG5SeVlXNXpjR0Z5Wlc1MFYybDBhRnBYY21sMFpUdGNibHh1SUNBZ0lDOHZJRDA5SUdWdVlXSnNhVzVuSUdKMWJtTm9JRzltSUhOMGRXWm1JRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFZ4dUlDQWdJSEJoY21GdFpYUmxjbk11Wm05bklEMGdkSEoxWlR0Y2JpQWdJQ0J3WVhKaGJXVjBaWEp6TG14cFoyaDBjeUE5SUhSeWRXVTdYRzRnSUNBZ2NHRnlZVzFsZEdWeWN5NWpiR2x3Y0dsdVp5QTlJSFJ5ZFdVN1hHNWNiaUFnSUNBdkx5QkRUMDFRUVZRNklIQnlaUzF5TVRJNVhHNGdJQ0FnTHk4Z1UyVmxPaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2YlhKa2IyOWlMM1JvY21WbExtcHpMM0IxYkd3dk1qRTNPRGhjYmlBZ0lDQnBaaUFvY0dGeWMyVkpiblFvVkVoU1JVVXVVa1ZXU1ZOSlQwNHNJREV3S1NBOElERXlPU2tnZTF4dUlDQWdJQ0FnS0hCaGNtRnRaWFJsY25NZ1lYTWdZVzU1S1M1emEybHVibWx1WnlBOUlDaHdZWEpoYldWMFpYSnpJR0Z6SUdGdWVTa3VjMnRwYm01cGJtY2dmSHdnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdRMDlOVUVGVU9pQndjbVV0Y2pFek1WeHVJQ0FnSUM4dklGTmxaVG9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDIxeVpHOXZZaTkwYUhKbFpTNXFjeTl3ZFd4c0x6SXlNVFk1WEc0Z0lDQWdhV1lnS0hCaGNuTmxTVzUwS0ZSSVVrVkZMbEpGVmtsVFNVOU9MQ0F4TUNrZ1BDQXhNekVwSUh0Y2JpQWdJQ0FnSUNod1lYSmhiV1YwWlhKeklHRnpJR0Z1ZVNrdWJXOXljR2hVWVhKblpYUnpJRDBnS0hCaGNtRnRaWFJsY25NZ1lYTWdZVzU1S1M1dGIzSndhRlJoY21kbGRITWdmSHdnWm1Gc2MyVTdYRzRnSUNBZ0lDQW9jR0Z5WVcxbGRHVnljeUJoY3lCaGJua3BMbTF2Y25Cb1RtOXliV0ZzY3lBOUlDaHdZWEpoYldWMFpYSnpJR0Z6SUdGdWVTa3ViVzl5Y0doT2IzSnRZV3h6SUh4OElHWmhiSE5sTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUQwOUlIVnVhV1p2Y20xeklEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBWeHVJQ0FnSUhSb2FYTXVkVzVwWm05eWJYTWdQU0JVU0ZKRlJTNVZibWxtYjNKdGMxVjBhV3h6TG0xbGNtZGxLRnRjYmlBZ0lDQWdJRlJJVWtWRkxsVnVhV1p2Y20xelRHbGlMbU52YlcxdmJpd2dMeThnYldGd1hHNGdJQ0FnSUNCVVNGSkZSUzVWYm1sbWIzSnRjMHhwWWk1dWIzSnRZV3h0WVhBc0lDOHZJRzV2Y20xaGJFMWhjRnh1SUNBZ0lDQWdWRWhTUlVVdVZXNXBabTl5YlhOTWFXSXVaVzFwYzNOcGRtVnRZWEFzSUM4dklHVnRhWE56YVhabFRXRndYRzRnSUNBZ0lDQlVTRkpGUlM1VmJtbG1iM0p0YzB4cFlpNW1iMmNzWEc0Z0lDQWdJQ0JVU0ZKRlJTNVZibWxtYjNKdGMweHBZaTVzYVdkb2RITXNYRzRnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJR3hwZEVaaFkzUnZjam9nZXlCMllXeDFaVG9nYm1WM0lGUklVa1ZGTGtOdmJHOXlLREV1TUN3Z01TNHdMQ0F4TGpBcElIMHNYRzRnSUNBZ0lDQWdJRzFoY0ZWMlZISmhibk5tYjNKdE9pQjdJSFpoYkhWbE9pQnVaWGNnVkVoU1JVVXVUV0YwY21sNE15Z3BJSDBzWEc0Z0lDQWdJQ0FnSUdOdmJHOXlRV3h3YUdFNklIc2dkbUZzZFdVNklERXVNQ0I5TEZ4dUlDQWdJQ0FnSUNCdWIzSnRZV3hOWVhCVmRsUnlZVzV6Wm05eWJUb2dleUIyWVd4MVpUb2dibVYzSUZSSVVrVkZMazFoZEhKcGVETW9LU0I5TEZ4dUlDQWdJQ0FnSUNCemFHRmtaVU52Ykc5eVJtRmpkRzl5T2lCN0lIWmhiSFZsT2lCdVpYY2dWRWhTUlVVdVEyOXNiM0lvTUM0NU55d2dNQzQ0TVN3Z01DNDROaWtnZlN4Y2JpQWdJQ0FnSUNBZ2MyaGhaR1ZOZFd4MGFYQnNlVlJsZUhSMWNtVTZJSHNnZG1Gc2RXVTZJRzUxYkd3Z2ZTeGNiaUFnSUNBZ0lDQWdjMmhoWkdWTmRXeDBhWEJzZVZSbGVIUjFjbVZWZGxSeVlXNXpabTl5YlRvZ2V5QjJZV3gxWlRvZ2JtVjNJRlJJVWtWRkxrMWhkSEpwZURNb0tTQjlMRnh1SUNBZ0lDQWdJQ0J6YUdGa2FXNW5VMmhwWm5SR1lXTjBiM0k2SUhzZ2RtRnNkV1U2SURBdU1DQjlMRnh1SUNBZ0lDQWdJQ0J6YUdGa2FXNW5VMmhwWm5SVVpYaDBkWEpsT2lCN0lIWmhiSFZsT2lCdWRXeHNJSDBzWEc0Z0lDQWdJQ0FnSUhOb1lXUnBibWRUYUdsbWRGUmxlSFIxY21WVmRsUnlZVzV6Wm05eWJUb2dleUIyWVd4MVpUb2dibVYzSUZSSVVrVkZMazFoZEhKcGVETW9LU0I5TEZ4dUlDQWdJQ0FnSUNCemFHRmthVzVuVTJocFpuUlVaWGgwZFhKbFUyTmhiR1U2SUhzZ2RtRnNkV1U2SURFdU1DQjlMRnh1SUNBZ0lDQWdJQ0J6YUdGa2FXNW5WRzl2Ym5sR1lXTjBiM0k2SUhzZ2RtRnNkV1U2SURBdU9TQjlMRnh1SUNBZ0lDQWdJQ0JuYVVWeGRXRnNhWHBoZEdsdmJrWmhZM1J2Y2pvZ2V5QjJZV3gxWlRvZ01DNDVJSDBzWEc0Z0lDQWdJQ0FnSUcxaGRHTmhjRVpoWTNSdmNqb2dleUIyWVd4MVpUb2dibVYzSUZSSVVrVkZMa052Ykc5eUtEQXVNQ3dnTUM0d0xDQXdMakFwSUgwc1hHNGdJQ0FnSUNBZ0lHMWhkR05oY0ZSbGVIUjFjbVU2SUhzZ2RtRnNkV1U2SUc1MWJHd2dmU3hjYmlBZ0lDQWdJQ0FnYldGMFkyRndWR1Y0ZEhWeVpWVjJWSEpoYm5ObWIzSnRPaUI3SUhaaGJIVmxPaUJ1WlhjZ1ZFaFNSVVV1VFdGMGNtbDRNeWdwSUgwc1hHNGdJQ0FnSUNBZ0lIQmhjbUZ0WlhSeWFXTlNhVzFEYjJ4dmNrWmhZM1J2Y2pvZ2V5QjJZV3gxWlRvZ2JtVjNJRlJJVWtWRkxrTnZiRzl5S0RBdU1Dd2dNQzR3TENBd0xqQXBJSDBzWEc0Z0lDQWdJQ0FnSUhKcGJVMTFiSFJwY0d4NVZHVjRkSFZ5WlRvZ2V5QjJZV3gxWlRvZ2JuVnNiQ0I5TEZ4dUlDQWdJQ0FnSUNCeWFXMU5kV3gwYVhCc2VWUmxlSFIxY21WVmRsUnlZVzV6Wm05eWJUb2dleUIyWVd4MVpUb2dibVYzSUZSSVVrVkZMazFoZEhKcGVETW9LU0I5TEZ4dUlDQWdJQ0FnSUNCeWFXMU1hV2RvZEdsdVowMXBlRVpoWTNSdmNqb2dleUIyWVd4MVpUb2dNQzR3SUgwc1hHNGdJQ0FnSUNBZ0lIQmhjbUZ0WlhSeWFXTlNhVzFHY21WemJtVnNVRzkzWlhKR1lXTjBiM0k2SUhzZ2RtRnNkV1U2SURFdU1DQjlMRnh1SUNBZ0lDQWdJQ0J3WVhKaGJXVjBjbWxqVW1sdFRHbG1kRVpoWTNSdmNqb2dleUIyWVd4MVpUb2dNQzR3SUgwc1hHNGdJQ0FnSUNBZ0lHVnRhWE56YVhabE9pQjdJSFpoYkhWbE9pQnVaWGNnVkVoU1JVVXVRMjlzYjNJb01DNHdMQ0F3TGpBc0lEQXVNQ2tnZlN4Y2JpQWdJQ0FnSUNBZ1pXMXBjM05wZG1WSmJuUmxibk5wZEhrNklIc2dkbUZzZFdVNklERXVNQ0I5TEZ4dUlDQWdJQ0FnSUNCbGJXbHpjMmwyWlUxaGNGVjJWSEpoYm5ObWIzSnRPaUI3SUhaaGJIVmxPaUJ1WlhjZ1ZFaFNSVVV1VFdGMGNtbDRNeWdwSUgwc1hHNGdJQ0FnSUNBZ0lHOTFkR3hwYm1WWGFXUjBhRTExYkhScGNHeDVWR1Y0ZEhWeVpUb2dleUIyWVd4MVpUb2diblZzYkNCOUxGeHVJQ0FnSUNBZ0lDQnZkWFJzYVc1bFYybGtkR2hOZFd4MGFYQnNlVlJsZUhSMWNtVlZkbFJ5WVc1elptOXliVG9nZXlCMllXeDFaVG9nYm1WM0lGUklVa1ZGTGsxaGRISnBlRE1vS1NCOUxGeHVJQ0FnSUNBZ0lDQnZkWFJzYVc1bFYybGtkR2hHWVdOMGIzSTZJSHNnZG1Gc2RXVTZJREF1TlNCOUxGeHVJQ0FnSUNBZ0lDQnZkWFJzYVc1bFEyOXNiM0pHWVdOMGIzSTZJSHNnZG1Gc2RXVTZJRzVsZHlCVVNGSkZSUzVEYjJ4dmNpZ3dMakFzSURBdU1Dd2dNQzR3S1NCOUxGeHVJQ0FnSUNBZ0lDQnZkWFJzYVc1bFRHbG5hSFJwYm1kTmFYaEdZV04wYjNJNklIc2dkbUZzZFdVNklERXVNQ0I5TEZ4dUlDQWdJQ0FnSUNCMWRrRnVhVzFoZEdsdmJrMWhjMnRVWlhoMGRYSmxPaUI3SUhaaGJIVmxPaUJ1ZFd4c0lIMHNYRzRnSUNBZ0lDQWdJSFYyUVc1cGJXRjBhVzl1VFdGemExUmxlSFIxY21WVmRsUnlZVzV6Wm05eWJUb2dleUIyWVd4MVpUb2dibVYzSUZSSVVrVkZMazFoZEhKcGVETW9LU0I5TEZ4dUlDQWdJQ0FnSUNCMWRrRnVhVzFoZEdsdmJsTmpjbTlzYkZoUFptWnpaWFE2SUhzZ2RtRnNkV1U2SURBdU1DQjlMRnh1SUNBZ0lDQWdJQ0IxZGtGdWFXMWhkR2x2YmxOamNtOXNiRmxQWm1aelpYUTZJSHNnZG1Gc2RXVTZJREF1TUNCOUxGeHVJQ0FnSUNBZ0lDQjFka0Z1YVcxaGRHbHZibEp2ZEdGMGFXOXVVR2hoYzJVNklIc2dkbUZzZFdVNklEQXVNQ0I5TEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUhCaGNtRnRaWFJsY25NdWRXNXBabTl5YlhNc1hHNGdJQ0FnWFNrN1hHNWNiaUFnSUNBdkx5QTlQU0JtYVc1aGJHeDVJR052YlhCcGJHVWdkR2hsSUhOb1lXUmxjaUJ3Y205bmNtRnRJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDFjYmlBZ0lDQjBhR2x6TG5ObGRGWmhiSFZsY3lod1lYSmhiV1YwWlhKektUdGNibHh1SUNBZ0lDOHZJRDA5SUhWd2JHOWhaQ0IxYm1sbWIzSnRjeUIwYUdGMElHNWxaV1FnZEc4Z2RYQnNiMkZrSUQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFZ4dUlDQWdJSFJvYVhNdVgzVndiRzloWkZWdWFXWnZjbTF6VjI5eWEyRnliM1Z1WkNncE8xeHVYRzRnSUNBZ0x5OGdQVDBnZFhCa1lYUmxJSE5vWVdSbGNpQnpkSFZtWmlBOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5WEc0Z0lDQWdkR2hwY3k1amRYTjBiMjFRY205bmNtRnRRMkZqYUdWTFpYa2dQU0FvS1NBOVBseHVJQ0FnSUNBZ1cxeHVJQ0FnSUNBZ0lDQXVMaTVQWW1wbFkzUXVaVzUwY21sbGN5aDBhR2x6TGw5blpXNWxjbUYwWlVSbFptbHVaWE1vS1NrdWJXRndLQ2hiZEc5clpXNHNJRzFoWTNKdlhTa2dQVDRnWUNSN2RHOXJaVzU5T2lSN2JXRmpjbTk5WUNrc1hHNGdJQ0FnSUNBZ0lIUm9hWE11YldGMFkyRndWR1Y0ZEhWeVpTQS9JR0J0WVhSallYQlVaWGgwZFhKbFEyOXNiM0pUY0dGalpUb2tlMmRsZEZSbGVIUjFjbVZEYjJ4dmNsTndZV05sS0hSb2FYTXViV0YwWTJGd1ZHVjRkSFZ5WlNsOVlDQTZJQ2NuTEZ4dUlDQWdJQ0FnSUNCMGFHbHpMbk5vWVdSbFRYVnNkR2x3YkhsVVpYaDBkWEpsWEc0Z0lDQWdJQ0FnSUNBZ1B5QmdjMmhoWkdWTmRXeDBhWEJzZVZSbGVIUjFjbVZEYjJ4dmNsTndZV05sT2lSN1oyVjBWR1Y0ZEhWeVpVTnZiRzl5VTNCaFkyVW9kR2hwY3k1emFHRmtaVTExYkhScGNHeDVWR1Y0ZEhWeVpTbDlZRnh1SUNBZ0lDQWdJQ0FnSURvZ0p5Y3NYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtbHRUWFZzZEdsd2JIbFVaWGgwZFhKbElEOGdZSEpwYlUxMWJIUnBjR3g1VkdWNGRIVnlaVU52Ykc5eVUzQmhZMlU2Skh0blpYUlVaWGgwZFhKbFEyOXNiM0pUY0dGalpTaDBhR2x6TG5KcGJVMTFiSFJwY0d4NVZHVjRkSFZ5WlNsOVlDQTZJQ2NuTEZ4dUlDQWdJQ0FnWFM1cWIybHVLQ2NzSnlrN1hHNWNiaUFnSUNCMGFHbHpMbTl1UW1WbWIzSmxRMjl0Y0dsc1pTQTlJQ2h6YUdGa1pYSXBJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSFJvY21WbFVtVjJhWE5wYjI0Z1BTQndZWEp6WlVsdWRDaFVTRkpGUlM1U1JWWkpVMGxQVGl3Z01UQXBPMXh1WEc0Z0lDQWdJQ0JqYjI1emRDQmtaV1pwYm1WeklEMWNiaUFnSUNBZ0lDQWdUMkpxWldOMExtVnVkSEpwWlhNb2V5QXVMaTUwYUdsekxsOW5aVzVsY21GMFpVUmxabWx1WlhNb0tTd2dMaTR1ZEdocGN5NWtaV1pwYm1WeklIMHBYRzRnSUNBZ0lDQWdJQ0FnTG1acGJIUmxjaWdvVzNSdmEyVnVMQ0J0WVdOeWIxMHBJRDArSUNFaGJXRmpjbThwWEc0Z0lDQWdJQ0FnSUNBZ0xtMWhjQ2dvVzNSdmEyVnVMQ0J0WVdOeWIxMHBJRDArSUdBalpHVm1hVzVsSUNSN2RHOXJaVzU5SUNSN2JXRmpjbTk5WUNsY2JpQWdJQ0FnSUNBZ0lDQXVhbTlwYmlnblhGeHVKeWtnS3lBblhGeHVKenRjYmx4dUlDQWdJQ0FnTHk4Z0xTMGdaMlZ1WlhKaGRHVWdjMmhoWkdWeUlHTnZaR1VnTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ0FnSUNBZ2MyaGhaR1Z5TG5abGNuUmxlRk5vWVdSbGNpQTlJR1JsWm1sdVpYTWdLeUJ6YUdGa1pYSXVkbVZ5ZEdWNFUyaGhaR1Z5TzF4dUlDQWdJQ0FnYzJoaFpHVnlMbVp5WVdkdFpXNTBVMmhoWkdWeUlEMGdaR1ZtYVc1bGN5QXJJSE5vWVdSbGNpNW1jbUZuYldWdWRGTm9ZV1JsY2p0Y2JseHVJQ0FnSUNBZ0x5OGdMUzBnWTI5dGNHRjBJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1WEc0Z0lDQWdJQ0F2THlCRFQwMVFRVlE2SUhCeVpTMXlNVE15WEc0Z0lDQWdJQ0F2THlCVWFISmxaUzVxY3lCeU1UTXlJR2x1ZEhKdlpIVmpaWE1nYm1WM0lITm9ZV1JsY2lCamFIVnVhM01nUEc1dmNtMWhiRjl3WVhKelgyWnlZV2R0Wlc1MFBpQmhibVFnUEdGc2NHaGhkR1Z6ZEY5d1lYSnpYMlp5WVdkdFpXNTBQbHh1SUNBZ0lDQWdhV1lnS0hSb2NtVmxVbVYyYVhOcGIyNGdQQ0F4TXpJcElIdGNiaUFnSUNBZ0lDQWdjMmhoWkdWeUxtWnlZV2R0Wlc1MFUyaGhaR1Z5SUQwZ2MyaGhaR1Z5TG1aeVlXZHRaVzUwVTJoaFpHVnlMbkpsY0d4aFkyVW9KeU5wYm1Oc2RXUmxJRHh1YjNKdFlXeGZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0bkxDQW5KeWs3WEc0Z0lDQWdJQ0FnSUhOb1lXUmxjaTVtY21GbmJXVnVkRk5vWVdSbGNpQTlJSE5vWVdSbGNpNW1jbUZuYldWdWRGTm9ZV1JsY2k1eVpYQnNZV05sS0NjamFXNWpiSFZrWlNBOFlXeHdhR0YwWlhOMFgzQmhjbk5mWm5KaFoyMWxiblErSnl3Z0p5Y3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhCa1lYUmxJSFJvYVhNZ2JXRjBaWEpwWVd3dVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQmtaV3gwWVNCa1pXeDBZVlJwYldVZ2MybHVZMlVnYkdGemRDQjFjR1JoZEdWY2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCMWNHUmhkR1VvWkdWc2RHRTZJRzUxYldKbGNpazZJSFp2YVdRZ2UxeHVJQ0FnSUhSb2FYTXVYM1Z3Ykc5aFpGVnVhV1p2Y20xelYyOXlhMkZ5YjNWdVpDZ3BPMXh1SUNBZ0lIUm9hWE11WDNWd1pHRjBaVlZXUVc1cGJXRjBhVzl1S0dSbGJIUmhLVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJqYjNCNUtITnZkWEpqWlRvZ2RHaHBjeWs2SUhSb2FYTWdlMXh1SUNBZ0lITjFjR1Z5TG1OdmNIa29jMjkxY21ObEtUdGNiaUFnSUNBdkx5QjFibWxtYjNKdGN5QmhjbVVnWVd4eVpXRmtlU0JqYjNCcFpXUWdZWFFnZEdocGN5QnRiMjFsYm5SY2JseHVJQ0FnSUM4dklFSmxaMmx1Ym1sdVp5Qm1jbTl0SUhJeE16TXNJSFZ1YVdadmNtMGdkR1Y0ZEhWeVpYTWdkMmxzYkNCaVpTQmpiRzl1WldRZ2FXNXpkR1ZoWkNCdlppQnlaV1psY21WdVkyVmNiaUFnSUNBdkx5QlRaV1U2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5dGNtUnZiMkl2ZEdoeVpXVXVhbk12WW14dllpOWhPRGd4TTJKbE1EUmhPRFE1WW1ReE5UVm1OMk5tTm1ZeFlqSXpaRGhsWlRKbE1HWmlORGhpTDJWNFlXMXdiR1Z6TDJwemJTOXNiMkZrWlhKekwwZE1WRVpNYjJGa1pYSXVhbk1qVERNd05EZGNiaUFnSUNBdkx5QlRaV1U2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5dGNtUnZiMkl2ZEdoeVpXVXVhbk12WW14dllpOWhPRGd4TTJKbE1EUmhPRFE1WW1ReE5UVm1OMk5tTm1ZeFlqSXpaRGhsWlRKbE1HWmlORGhpTDNOeVl5OXlaVzVrWlhKbGNuTXZjMmhoWkdWeWN5OVZibWxtYjNKdGMxVjBhV3h6TG1wekkwd3lNbHh1SUNBZ0lDOHZJRlJvYVhNZ2QybHNiQ0JzWldGMlpTQjBhR1ZwY2lCZ0xuWmxjbk5wYjI1Z0lIUnZJR0psSUdBd1lGeHVJQ0FnSUM4dklHRnVaQ0IwYUdWelpTQjBaWGgwZFhKbGN5QjNiMjRuZENCaVpTQjFjR3h2WVdSbFpDQjBieUJIVUZWY2JpQWdJQ0F2THlCWFpTQmhjbVVnWjI5cGJtY2dkRzhnZDI5eWEyRnliM1Z1WkNCMGFHbHpJR2x1SUdobGNtVmNiaUFnSUNBdkx5QkpKM1psSUc5d1pXNWxaQ0JoYmlCcGMzTjFaU0JtYjNJZ2RHaHBjem9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDIxeVpHOXZZaTkwYUhKbFpTNXFjeTlwYzNOMVpYTXZNakkzTVRoY2JpQWdJQ0IwYUdsekxtMWhjQ0E5SUhOdmRYSmpaUzV0WVhBN1hHNGdJQ0FnZEdocGN5NXViM0p0WVd4TllYQWdQU0J6YjNWeVkyVXVibTl5YldGc1RXRndPMXh1SUNBZ0lIUm9hWE11WlcxcGMzTnBkbVZOWVhBZ1BTQnpiM1Z5WTJVdVpXMXBjM05wZG1WTllYQTdYRzRnSUNBZ2RHaHBjeTV6YUdGa1pVMTFiSFJwY0d4NVZHVjRkSFZ5WlNBOUlITnZkWEpqWlM1emFHRmtaVTExYkhScGNHeDVWR1Y0ZEhWeVpUdGNiaUFnSUNCMGFHbHpMbk5vWVdScGJtZFRhR2xtZEZSbGVIUjFjbVVnUFNCemIzVnlZMlV1YzJoaFpHbHVaMU5vYVdaMFZHVjRkSFZ5WlR0Y2JpQWdJQ0IwYUdsekxtMWhkR05oY0ZSbGVIUjFjbVVnUFNCemIzVnlZMlV1YldGMFkyRndWR1Y0ZEhWeVpUdGNiaUFnSUNCMGFHbHpMbkpwYlUxMWJIUnBjR3g1VkdWNGRIVnlaU0E5SUhOdmRYSmpaUzV5YVcxTmRXeDBhWEJzZVZSbGVIUjFjbVU3WEc0Z0lDQWdkR2hwY3k1dmRYUnNhVzVsVjJsa2RHaE5kV3gwYVhCc2VWUmxlSFIxY21VZ1BTQnpiM1Z5WTJVdWIzVjBiR2x1WlZkcFpIUm9UWFZzZEdsd2JIbFVaWGgwZFhKbE8xeHVJQ0FnSUhSb2FYTXVkWFpCYm1sdFlYUnBiMjVOWVhOclZHVjRkSFZ5WlNBOUlITnZkWEpqWlM1MWRrRnVhVzFoZEdsdmJrMWhjMnRVWlhoMGRYSmxPMXh1WEc0Z0lDQWdMeThnUFQwZ1kyOXdlU0J0WlcxaVpYSnpJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVhHNGdJQ0FnZEdocGN5NXViM0p0WVd4TllYQlVlWEJsSUQwZ2MyOTFjbU5sTG01dmNtMWhiRTFoY0ZSNWNHVTdYRzVjYmlBZ0lDQjBhR2x6TG5WMlFXNXBiV0YwYVc5dVUyTnliMnhzV0ZOd1pXVmtSbUZqZEc5eUlEMGdjMjkxY21ObExuVjJRVzVwYldGMGFXOXVVMk55YjJ4c1dGTndaV1ZrUm1GamRHOXlPMXh1SUNBZ0lIUm9hWE11ZFhaQmJtbHRZWFJwYjI1VFkzSnZiR3haVTNCbFpXUkdZV04wYjNJZ1BTQnpiM1Z5WTJVdWRYWkJibWx0WVhScGIyNVRZM0p2Ykd4WlUzQmxaV1JHWVdOMGIzSTdYRzRnSUNBZ2RHaHBjeTUxZGtGdWFXMWhkR2x2YmxKdmRHRjBhVzl1VTNCbFpXUkdZV04wYjNJZ1BTQnpiM1Z5WTJVdWRYWkJibWx0WVhScGIyNVNiM1JoZEdsdmJsTndaV1ZrUm1GamRHOXlPMXh1WEc0Z0lDQWdkR2hwY3k1cFoyNXZjbVZXWlhKMFpYaERiMnh2Y2lBOUlITnZkWEpqWlM1cFoyNXZjbVZXWlhKMFpYaERiMnh2Y2p0Y2JseHVJQ0FnSUhSb2FYTXVkakJEYjIxd1lYUlRhR0ZrWlNBOUlITnZkWEpqWlM1Mk1FTnZiWEJoZEZOb1lXUmxPMXh1SUNBZ0lIUm9hWE11WkdWaWRXZE5iMlJsSUQwZ2MyOTFjbU5sTG1SbFluVm5UVzlrWlR0Y2JpQWdJQ0IwYUdsekxtOTFkR3hwYm1WWGFXUjBhRTF2WkdVZ1BTQnpiM1Z5WTJVdWIzVjBiR2x1WlZkcFpIUm9UVzlrWlR0Y2JseHVJQ0FnSUhSb2FYTXVhWE5QZFhSc2FXNWxJRDBnYzI5MWNtTmxMbWx6VDNWMGJHbHVaVHRjYmx4dUlDQWdJQzh2SUQwOUlIVndaR0YwWlNCemFHRmtaWElnYzNSMVptWWdQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBWeHVJQ0FnSUhSb2FYTXVibVZsWkhOVmNHUmhkR1VnUFNCMGNuVmxPMXh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1ZYQmtZWFJsSUZWV0lHRnVhVzFoZEdsdmJpQnpkR0YwWlM1Y2JpQWdJQ29nU1c1MFpXNWtaV1FnZEc4Z1ltVWdZMkZzYkdWa0lIWnBZU0I3UUd4cGJtc2dkWEJrWVhSbGZTNWNiaUFnSUNvZ1FIQmhjbUZ0SUdSbGJIUmhJR1JsYkhSaFZHbHRaVnh1SUNBZ0tpOWNiaUFnY0hKcGRtRjBaU0JmZFhCa1lYUmxWVlpCYm1sdFlYUnBiMjRvWkdWc2RHRTZJRzUxYldKbGNpazZJSFp2YVdRZ2UxeHVJQ0FnSUhSb2FYTXVkVzVwWm05eWJYTXVkWFpCYm1sdFlYUnBiMjVUWTNKdmJHeFlUMlptYzJWMExuWmhiSFZsSUNzOUlHUmxiSFJoSUNvZ2RHaHBjeTUxZGtGdWFXMWhkR2x2YmxOamNtOXNiRmhUY0dWbFpFWmhZM1J2Y2p0Y2JpQWdJQ0IwYUdsekxuVnVhV1p2Y20xekxuVjJRVzVwYldGMGFXOXVVMk55YjJ4c1dVOW1abk5sZEM1MllXeDFaU0FyUFNCa1pXeDBZU0FxSUhSb2FYTXVkWFpCYm1sdFlYUnBiMjVUWTNKdmJHeFpVM0JsWldSR1lXTjBiM0k3WEc0Z0lDQWdkR2hwY3k1MWJtbG1iM0p0Y3k1MWRrRnVhVzFoZEdsdmJsSnZkR0YwYVc5dVVHaGhjMlV1ZG1Gc2RXVWdLejBnWkdWc2RHRWdLaUIwYUdsekxuVjJRVzVwYldGMGFXOXVVbTkwWVhScGIyNVRjR1ZsWkVaaFkzUnZjanRjYmx4dUlDQWdJSFJvYVhNdWRXNXBabTl5YlhOT1pXVmtWWEJrWVhSbElEMGdkSEoxWlR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlZjR3h2WVdRZ2RXNXBabTl5YlhNZ2RHaGhkQ0J1WldWa0lIUnZJSFZ3Ykc5aFpDQmlkWFFnWkc5bGMyNG5kQ0JoZFhSdmJXRjBhV05oYkd4NUlHSmxZMkYxYzJVZ2IyWWdjbVZoYzI5dWN5NWNiaUFnSUNvZ1NXNTBaVzVrWldRZ2RHOGdZbVVnWTJGc2JHVmtJSFpwWVNCN1FHeHBibXNnWTI5dWMzUnlkV04wYjNKOUlHRnVaQ0I3UUd4cGJtc2dkWEJrWVhSbGZTNWNiaUFnSUNvdlhHNGdJSEJ5YVhaaGRHVWdYM1Z3Ykc5aFpGVnVhV1p2Y20xelYyOXlhMkZ5YjNWdVpDZ3BPaUIyYjJsa0lIdGNiaUFnSUNBdkx5QjNiM0pyWVhKdmRXNWtPaUJ6YVc1alpTQnZjR0ZqYVhSNUlHbHpJR1JsWm1sdVpXUWdZWE1nWVNCd2NtOXdaWEowZVNCcGJpQlVTRkpGUlM1TllYUmxjbWxoYkZ4dUlDQWdJQzh2SUdGdVpDQmpZVzV1YjNRZ1ltVWdiM1psY25KcFpHUmxiaUJoY3lCaGJpQmhZMk5sYzNOdmNpeGNiaUFnSUNBdkx5QlhaU0JoY21VZ1oyOXBibWNnZEc4Z2RYQmtZWFJsSUc5d1lXTnBkSGtnYUdWeVpWeHVJQ0FnSUhSb2FYTXVkVzVwWm05eWJYTXViM0JoWTJsMGVTNTJZV3gxWlNBOUlIUm9hWE11YjNCaFkybDBlVHRjYmx4dUlDQWdJQzh2SUhkdmNtdGhjbTkxYm1RNklIUmxlSFIxY21VZ2RISmhibk5tYjNKdGN5QmhjbVVnYm05MElIVndaR0YwWldRZ1lYVjBiMjFoZEdsallXeHNlVnh1SUNBZ0lIUm9hWE11WDNWd1pHRjBaVlJsZUhSMWNtVk5ZWFJ5YVhnb2RHaHBjeTUxYm1sbWIzSnRjeTV0WVhBc0lIUm9hWE11ZFc1cFptOXliWE11YldGd1ZYWlVjbUZ1YzJadmNtMHBPMXh1SUNBZ0lIUm9hWE11WDNWd1pHRjBaVlJsZUhSMWNtVk5ZWFJ5YVhnb2RHaHBjeTUxYm1sbWIzSnRjeTV1YjNKdFlXeE5ZWEFzSUhSb2FYTXVkVzVwWm05eWJYTXVibTl5YldGc1RXRndWWFpVY21GdWMyWnZjbTBwTzF4dUlDQWdJSFJvYVhNdVgzVndaR0YwWlZSbGVIUjFjbVZOWVhSeWFYZ29kR2hwY3k1MWJtbG1iM0p0Y3k1bGJXbHpjMmwyWlUxaGNDd2dkR2hwY3k1MWJtbG1iM0p0Y3k1bGJXbHpjMmwyWlUxaGNGVjJWSEpoYm5ObWIzSnRLVHRjYmlBZ0lDQjBhR2x6TGw5MWNHUmhkR1ZVWlhoMGRYSmxUV0YwY21sNEtIUm9hWE11ZFc1cFptOXliWE11YzJoaFpHVk5kV3gwYVhCc2VWUmxlSFIxY21Vc0lIUm9hWE11ZFc1cFptOXliWE11YzJoaFpHVk5kV3gwYVhCc2VWUmxlSFIxY21WVmRsUnlZVzV6Wm05eWJTazdYRzRnSUNBZ2RHaHBjeTVmZFhCa1lYUmxWR1Y0ZEhWeVpVMWhkSEpwZUNoMGFHbHpMblZ1YVdadmNtMXpMbk5vWVdScGJtZFRhR2xtZEZSbGVIUjFjbVVzSUhSb2FYTXVkVzVwWm05eWJYTXVjMmhoWkdsdVoxTm9hV1owVkdWNGRIVnlaVlYyVkhKaGJuTm1iM0p0S1R0Y2JpQWdJQ0IwYUdsekxsOTFjR1JoZEdWVVpYaDBkWEpsVFdGMGNtbDRLSFJvYVhNdWRXNXBabTl5YlhNdWJXRjBZMkZ3VkdWNGRIVnlaU3dnZEdocGN5NTFibWxtYjNKdGN5NXRZWFJqWVhCVVpYaDBkWEpsVlhaVWNtRnVjMlp2Y20wcE8xeHVJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpWUmxlSFIxY21WTllYUnlhWGdvZEdocGN5NTFibWxtYjNKdGN5NXlhVzFOZFd4MGFYQnNlVlJsZUhSMWNtVXNJSFJvYVhNdWRXNXBabTl5YlhNdWNtbHRUWFZzZEdsd2JIbFVaWGgwZFhKbFZYWlVjbUZ1YzJadmNtMHBPMXh1SUNBZ0lIUm9hWE11WDNWd1pHRjBaVlJsZUhSMWNtVk5ZWFJ5YVhnb1hHNGdJQ0FnSUNCMGFHbHpMblZ1YVdadmNtMXpMbTkxZEd4cGJtVlhhV1IwYUUxMWJIUnBjR3g1VkdWNGRIVnlaU3hjYmlBZ0lDQWdJSFJvYVhNdWRXNXBabTl5YlhNdWIzVjBiR2x1WlZkcFpIUm9UWFZzZEdsd2JIbFVaWGgwZFhKbFZYWlVjbUZ1YzJadmNtMHNYRzRnSUNBZ0tUdGNiaUFnSUNCMGFHbHpMbDkxY0dSaGRHVlVaWGgwZFhKbFRXRjBjbWw0S0hSb2FYTXVkVzVwWm05eWJYTXVkWFpCYm1sdFlYUnBiMjVOWVhOclZHVjRkSFZ5WlN3Z2RHaHBjeTUxYm1sbWIzSnRjeTUxZGtGdWFXMWhkR2x2YmsxaGMydFVaWGgwZFhKbFZYWlVjbUZ1YzJadmNtMHBPMXh1WEc0Z0lDQWdMeThnUTA5TlVFRlVJSGR2Y210aGNtOTFibVE2SUhOMFlYSjBhVzVuSUdaeWIyMGdjakV6TWl3Z1lXeHdhR0ZVWlhOMElHSmxZMjl0WlhNZ1lTQjFibWxtYjNKdElHbHVjM1JsWVdRZ2IyWWdjSEpsY0hKdlkyVnpjMjl5SUhaaGJIVmxYRzRnSUNBZ1kyOXVjM1FnZEdoeVpXVlNaWFpwYzJsdmJpQTlJSEJoY25ObFNXNTBLRlJJVWtWRkxsSkZWa2xUU1U5T0xDQXhNQ2s3WEc1Y2JpQWdJQ0JwWmlBb2RHaHlaV1ZTWlhacGMybHZiaUErUFNBeE16SXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWRXNXBabTl5YlhNdVlXeHdhR0ZVWlhOMExuWmhiSFZsSUQwZ2RHaHBjeTVoYkhCb1lWUmxjM1E3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1MWJtbG1iM0p0YzA1bFpXUlZjR1JoZEdVZ1BTQjBjblZsTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ1lTQnRZWEFnYjJKcVpXTjBJRzltSUhCeVpYQnliMk5sYzNOdmNpQjBiMnRsYmlCaGJtUWdiV0ZqY204Z2IyWWdkR2hsSUhOb1lXUmxjaUJ3Y205bmNtRnRMbHh1SUNBZ0tpOWNiaUFnY0hKcGRtRjBaU0JmWjJWdVpYSmhkR1ZFWldacGJtVnpLQ2s2SUhzZ1czUnZhMlZ1T2lCemRISnBibWRkT2lCaWIyOXNaV0Z1SUh3Z2JuVnRZbVZ5SUh3Z2MzUnlhVzVuSUgwZ2UxeHVJQ0FnSUdOdmJuTjBJSFJvY21WbFVtVjJhWE5wYjI0Z1BTQndZWEp6WlVsdWRDaFVTRkpGUlM1U1JWWkpVMGxQVGl3Z01UQXBPMXh1WEc0Z0lDQWdZMjl1YzNRZ2RYTmxWWFpKYmxabGNuUWdQU0IwYUdsekxtOTFkR3hwYm1WWGFXUjBhRTExYkhScGNHeDVWR1Y0ZEhWeVpTQWhQVDBnYm5Wc2JEdGNiaUFnSUNCamIyNXpkQ0IxYzJWVmRrbHVSbkpoWnlBOVhHNGdJQ0FnSUNCMGFHbHpMbTFoY0NBaFBUMGdiblZzYkNCOGZGeHVJQ0FnSUNBZ2RHaHBjeTVsYldsemMybDJaVTFoY0NBaFBUMGdiblZzYkNCOGZGeHVJQ0FnSUNBZ2RHaHBjeTV6YUdGa1pVMTFiSFJwY0d4NVZHVjRkSFZ5WlNBaFBUMGdiblZzYkNCOGZGeHVJQ0FnSUNBZ2RHaHBjeTV6YUdGa2FXNW5VMmhwWm5SVVpYaDBkWEpsSUNFOVBTQnVkV3hzSUh4OFhHNGdJQ0FnSUNCMGFHbHpMbkpwYlUxMWJIUnBjR3g1VkdWNGRIVnlaU0FoUFQwZ2JuVnNiQ0I4ZkZ4dUlDQWdJQ0FnZEdocGN5NTFka0Z1YVcxaGRHbHZiazFoYzJ0VVpYaDBkWEpsSUNFOVBTQnVkV3hzTzF4dVhHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQzh2SUZSbGJYQnZjbUZ5ZVNCamIyMXdZWFFnWVdkaGFXNXpkQ0J6YUdGa1pYSWdZMmhoYm1kbElFQWdWR2h5WldVdWFuTWdjakV5Tmx4dUlDQWdJQ0FnTHk4Z1UyVmxPaUFqTWpFeU1EVXNJQ015TVRNd055d2dJekl4TWprNVhHNGdJQ0FnSUNCVVNGSkZSVjlXVWsxZlZFaFNSVVZmVWtWV1NWTkpUMDQ2SUhSb2NtVmxVbVYyYVhOcGIyNHNYRzVjYmlBZ0lDQWdJRTlWVkV4SlRrVTZJSFJvYVhNdVgybHpUM1YwYkdsdVpTeGNiaUFnSUNBZ0lFMVVUMDlPWDFWVFJWOVZWam9nZFhObFZYWkpibFpsY25RZ2ZId2dkWE5sVlhaSmJrWnlZV2NzSUM4dklIZGxJR05oYmlkMElIVnpaU0JnVlZORlgxVldZQ0FzSUdsMElIZHBiR3dnWW1VZ2NtVmtaV1pwYm1Wa0lHbHVJRmRsWWtkTVVISnZaM0poYlM1cWMxeHVJQ0FnSUNBZ1RWUlBUMDVmVlZaVFgxWkZVbFJGV0Y5UFRreFpPaUIxYzJWVmRrbHVWbVZ5ZENBbUppQWhkWE5sVlhaSmJrWnlZV2NzWEc0Z0lDQWdJQ0JXTUY5RFQwMVFRVlJmVTBoQlJFVTZJSFJvYVhNdVgzWXdRMjl0Y0dGMFUyaGhaR1VzWEc0Z0lDQWdJQ0JWVTBWZlUwaEJSRVZOVlV4VVNWQk1XVlJGV0ZSVlVrVTZJSFJvYVhNdWMyaGhaR1ZOZFd4MGFYQnNlVlJsZUhSMWNtVWdJVDA5SUc1MWJHd3NYRzRnSUNBZ0lDQlZVMFZmVTBoQlJFbE9SMU5JU1VaVVZFVllWRlZTUlRvZ2RHaHBjeTV6YUdGa2FXNW5VMmhwWm5SVVpYaDBkWEpsSUNFOVBTQnVkV3hzTEZ4dUlDQWdJQ0FnVlZORlgwMUJWRU5CVUZSRldGUlZVa1U2SUhSb2FYTXViV0YwWTJGd1ZHVjRkSFZ5WlNBaFBUMGdiblZzYkN4Y2JpQWdJQ0FnSUZWVFJWOVNTVTFOVlV4VVNWQk1XVlJGV0ZSVlVrVTZJSFJvYVhNdWNtbHRUWFZzZEdsd2JIbFVaWGgwZFhKbElDRTlQU0J1ZFd4c0xGeHVJQ0FnSUNBZ1ZWTkZYMDlWVkV4SlRrVlhTVVJVU0UxVlRGUkpVRXhaVkVWWVZGVlNSVG9nZEdocGN5NWZhWE5QZFhSc2FXNWxJQ1ltSUhSb2FYTXViM1YwYkdsdVpWZHBaSFJvVFhWc2RHbHdiSGxVWlhoMGRYSmxJQ0U5UFNCdWRXeHNMRnh1SUNBZ0lDQWdWVk5GWDFWV1FVNUpUVUZVU1U5T1RVRlRTMVJGV0ZSVlVrVTZJSFJvYVhNdWRYWkJibWx0WVhScGIyNU5ZWE5yVkdWNGRIVnlaU0FoUFQwZ2JuVnNiQ3hjYmlBZ0lDQWdJRWxIVGs5U1JWOVdSVkpVUlZoZlEwOU1UMUk2SUhSb2FYTXVYMmxuYm05eVpWWmxjblJsZUVOdmJHOXlJRDA5UFNCMGNuVmxMRnh1SUNBZ0lDQWdSRVZDVlVkZlRrOVNUVUZNT2lCMGFHbHpMbDlrWldKMVowMXZaR1VnUFQwOUlDZHViM0p0WVd3bkxGeHVJQ0FnSUNBZ1JFVkNWVWRmVEVsVVUwaEJSRVZTUVZSRk9pQjBhR2x6TGw5a1pXSjFaMDF2WkdVZ1BUMDlJQ2RzYVhSVGFHRmtaVkpoZEdVbkxGeHVJQ0FnSUNBZ1JFVkNWVWRmVlZZNklIUm9hWE11WDJSbFluVm5UVzlrWlNBOVBUMGdKM1YySnl4Y2JpQWdJQ0FnSUU5VlZFeEpUa1ZmVjBsRVZFaGZWMDlTVEVRNklIUm9hWE11WDJselQzVjBiR2x1WlNBbUppQjBhR2x6TGw5dmRYUnNhVzVsVjJsa2RHaE5iMlJsSUQwOVBTQk5WRzl2YmsxaGRHVnlhV0ZzVDNWMGJHbHVaVmRwWkhSb1RXOWtaUzVYYjNKc1pFTnZiM0prYVc1aGRHVnpMRnh1SUNBZ0lDQWdUMVZVVEVsT1JWOVhTVVJVU0Y5VFExSkZSVTQ2WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmx6VDNWMGJHbHVaU0FtSmlCMGFHbHpMbDl2ZFhSc2FXNWxWMmxrZEdoTmIyUmxJRDA5UFNCTlZHOXZiazFoZEdWeWFXRnNUM1YwYkdsdVpWZHBaSFJvVFc5a1pTNVRZM0psWlc1RGIyOXlaR2x1WVhSbGN5eGNiaUFnSUNCOU8xeHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQmZkWEJrWVhSbFZHVjRkSFZ5WlUxaGRISnBlQ2h6Y21NNklGUklVa1ZGTGtsVmJtbG1iM0p0UEZSSVVrVkZMbFJsZUhSMWNtVWdmQ0J1ZFd4c1Bpd2daSE4wT2lCVVNGSkZSUzVKVlc1cFptOXliVHhVU0ZKRlJTNU5ZWFJ5YVhnelBpazZJSFp2YVdRZ2UxeHVJQ0FnSUdsbUlDaHpjbU11ZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJR2xtSUNoemNtTXVkbUZzZFdVdWJXRjBjbWw0UVhWMGIxVndaR0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQnpjbU11ZG1Gc2RXVXVkWEJrWVhSbFRXRjBjbWw0S0NrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHUnpkQzUyWVd4MVpTNWpiM0I1S0hOeVl5NTJZV3gxWlM1dFlYUnlhWGdwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUNvZ1lYTWdWRWhTUlVVZ1puSnZiU0FuZEdoeVpXVW5PMXh1WEc1amIyNXpkQ0JqYjJ4dmNsTndZV05sUlc1amIyUnBibWROWVhBNklGSmxZMjl5WkR3bkp5QjhJQ2R6Y21kaUp5d2dZVzU1UGlBOUlIdGNiaUFnSnljNklETXdNREFzWEc0Z0lITnlaMkk2SURNd01ERXNYRzU5TzF4dVhHNHZLaXBjYmlBcUlFRWdZMjl0Y0dGMElHWjFibU4wYVc5dUlIUnZJSE5sZENCMFpYaDBkWEpsSUdOdmJHOXlJSE53WVdObExseHVJQ3BjYmlBcUlFTlBUVkJCVkRvZ2NISmxMWEl4TlRKY2JpQXFJRk4wWVhKMGFXNW5JR1p5YjIwZ1ZHaHlaV1V1YW5NZ2NqRTFNaXdnWUhSbGVIUjFjbVV1Wlc1amIyUnBibWRnSUdseklISmxibUZ0WldRZ2RHOGdZSFJsZUhSMWNtVXVZMjlzYjNKVGNHRmpaV0F1WEc0Z0tpQlVhR2x6SUdaMWJtTjBhVzl1SUhkcGJHd2dhR0Z1Wkd4bElIUm9aU0JqYjIxaGNIUXVYRzRnS2x4dUlDb2dRSEJoY21GdElIUmxlSFIxY21VZ1ZHaGxJSFJsZUhSMWNtVWdlVzkxSUhkaGJuUWdkRzhnYzJWMElIUm9aU0JqYjJ4dmNpQnpjR0ZqWlNCMGIxeHVJQ29nUUhCaGNtRnRJR052Ykc5eVUzQmhZMlVnVkdobElHTnZiRzl5SUhOd1lXTmxJSGx2ZFNCM1lXNTBJSFJ2SUhObGRDQjBieUIwYUdVZ2RHVjRkSFZ5WlZ4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjMlYwVkdWNGRIVnlaVU52Ykc5eVUzQmhZMlVvZEdWNGRIVnlaVG9nVkVoU1JVVXVWR1Y0ZEhWeVpTd2dZMjlzYjNKVGNHRmpaVG9nSnljZ2ZDQW5jM0puWWljcE9pQjJiMmxrSUh0Y2JpQWdhV1lnS0hCaGNuTmxTVzUwS0ZSSVVrVkZMbEpGVmtsVFNVOU9MQ0F4TUNrZ1BqMGdNVFV5S1NCN1hHNGdJQ0FnZEdWNGRIVnlaUzVqYjJ4dmNsTndZV05sSUQwZ1kyOXNiM0pUY0dGalpUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQW9kR1Y0ZEhWeVpTQmhjeUJoYm5rcExtVnVZMjlrYVc1bklEMGdZMjlzYjNKVGNHRmpaVVZ1WTI5a2FXNW5UV0Z3VzJOdmJHOXlVM0JoWTJWZE8xeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdLaUJoY3lCVVNGSkZSU0JtY205dElDZDBhSEpsWlNjN1hHNXBiWEJ2Y25RZ2V5QkhURlJHVUdGeWMyVnlJSDBnWm5KdmJTQW5kR2h5WldVdlpYaGhiWEJzWlhNdmFuTnRMMnh2WVdSbGNuTXZSMHhVUmt4dllXUmxjaTVxY3ljN1hHNXBiWEJ2Y25RZ2V5Qk5WRzl2YmsxaGRHVnlhV0ZzVUdGeVlXMWxkR1Z5Y3lCOUlHWnliMjBnSnk0dlRWUnZiMjVOWVhSbGNtbGhiRkJoY21GdFpYUmxjbk1uTzF4dWFXMXdiM0owSUhzZ2MyVjBWR1Y0ZEhWeVpVTnZiRzl5VTNCaFkyVWdmU0JtY205dElDY3VMM1YwYVd4ekwzTmxkRlJsZUhSMWNtVkRiMnh2Y2xOd1lXTmxKenRjYmx4dUx5b3FYRzRnS2lCTllYUmxjbWxoYkZCaGNtRnRaWFJsY25NZ2FHRjBaWE1nWUhWdVpHVm1hVzVsWkdBdUlGUm9hWE1nYUdWc2NHVnlJR0YxZEc5dFlYUnBZMkZzYkhrZ2NtVnFaV04wY3lCaGMzTnBaMjRnYjJZZ2RHaGxjMlVnWUhWdVpHVm1hVzVsWkdBdVhHNGdLaUJKZENCaGJITnZJR2hoYm1Sc1pYTWdZWE41Ym1Ob2NtOXViM1Z6SUhCeWIyTmxjM01nYjJZZ2RHVjRkSFZ5WlhNdVhHNGdLaUJOWVd0bElITjFjbVVnWVhkaGFYUWdabTl5SUh0QWJHbHVheUJIVEZSR1RWUnZiMjVOWVhSbGNtbGhiRkJoY21GdGMwRnpjMmxuYmtobGJIQmxjaTV3Wlc1a2FXNW5mUzVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUVkTVZFWk5WRzl2YmsxaGRHVnlhV0ZzVUdGeVlXMXpRWE56YVdkdVNHVnNjR1Z5SUh0Y2JpQWdjSEpwZG1GMFpTQnlaV0ZrYjI1c2VTQmZjR0Z5YzJWeU9pQkhURlJHVUdGeWMyVnlPMXh1SUNCd2NtbDJZWFJsSUY5dFlYUmxjbWxoYkZCaGNtRnRjem9nVFZSdmIyNU5ZWFJsY21saGJGQmhjbUZ0WlhSbGNuTTdYRzRnSUhCeWFYWmhkR1VnWDNCbGJtUnBibWR6T2lCUWNtOXRhWE5sUEdGdWVUNWJYVHRjYmx4dUlDQndkV0pzYVdNZ1oyVjBJSEJsYm1ScGJtY29LVG9nVUhKdmJXbHpaVHgxYm10dWIzZHVQaUI3WEc0Z0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdVlXeHNLSFJvYVhNdVgzQmxibVJwYm1kektUdGNiaUFnZlZ4dVhHNGdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWh3WVhKelpYSTZJRWRNVkVaUVlYSnpaWElzSUcxaGRHVnlhV0ZzVUdGeVlXMXpPaUJOVkc5dmJrMWhkR1Z5YVdGc1VHRnlZVzFsZEdWeWN5a2dlMXh1SUNBZ0lIUm9hWE11WDNCaGNuTmxjaUE5SUhCaGNuTmxjanRjYmlBZ0lDQjBhR2x6TGw5dFlYUmxjbWxoYkZCaGNtRnRjeUE5SUcxaGRHVnlhV0ZzVUdGeVlXMXpPMXh1SUNBZ0lIUm9hWE11WDNCbGJtUnBibWR6SUQwZ1cxMDdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdZWE56YVdkdVVISnBiV2wwYVhabFBGUWdaWGgwWlc1a2N5QnJaWGx2WmlCTlZHOXZiazFoZEdWeWFXRnNVR0Z5WVcxbGRHVnljejRvYTJWNU9pQlVMQ0IyWVd4MVpUb2dUVlJ2YjI1TllYUmxjbWxoYkZCaGNtRnRaWFJsY25OYlZGMHBPaUIyYjJsa0lIdGNiaUFnSUNCcFppQW9kbUZzZFdVZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmYldGMFpYSnBZV3hRWVhKaGJYTmJhMlY1WFNBOUlIWmhiSFZsTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJoYzNOcFoyNURiMnh2Y2p4VUlHVjRkR1Z1WkhNZ2EyVjViMllnVFZSdmIyNU5ZWFJsY21saGJGQmhjbUZ0WlhSbGNuTStLRnh1SUNBZ0lHdGxlVG9nVkN4Y2JpQWdJQ0IyWVd4MVpUb2diblZ0WW1WeVcxMGdmQ0IxYm1SbFptbHVaV1FzWEc0Z0lDQWdZMjl1ZG1WeWRGTlNSMEpVYjB4cGJtVmhjajg2SUdKdmIyeGxZVzRzWEc0Z0lDazZJSFp2YVdRZ2UxeHVJQ0FnSUdsbUlDaDJZV3gxWlNBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDl0WVhSbGNtbGhiRkJoY21GdGMxdHJaWGxkSUQwZ2JtVjNJRlJJVWtWRkxrTnZiRzl5S0NrdVpuSnZiVUZ5Y21GNUtIWmhiSFZsS1R0Y2JseHVJQ0FnSUNBZ2FXWWdLR052Ym5abGNuUlRVa2RDVkc5TWFXNWxZWElwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYldGMFpYSnBZV3hRWVhKaGJYTmJhMlY1WFM1amIyNTJaWEowVTFKSFFsUnZUR2x1WldGeUtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklHRnplVzVqSUdGemMybG5ibFJsZUhSMWNtVThWQ0JsZUhSbGJtUnpJR3RsZVc5bUlFMVViMjl1VFdGMFpYSnBZV3hRWVhKaGJXVjBaWEp6UGloY2JpQWdJQ0JyWlhrNklGUXNYRzRnSUNBZ2RHVjRkSFZ5WlRvZ2V5QnBibVJsZURvZ2JuVnRZbVZ5SUgwZ2ZDQjFibVJsWm1sdVpXUXNYRzRnSUNBZ2FYTkRiMnh2Y2xSbGVIUjFjbVU2SUdKdmIyeGxZVzRzWEc0Z0lDazZJRkJ5YjIxcGMyVThkbTlwWkQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSEJ5YjIxcGMyVWdQU0FvWVhONWJtTWdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLSFJsZUhSMWNtVWdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0JoZDJGcGRDQjBhR2x6TGw5d1lYSnpaWEl1WVhOemFXZHVWR1Y0ZEhWeVpTaDBhR2x6TGw5dFlYUmxjbWxoYkZCaGNtRnRjeXdnYTJWNUxDQjBaWGgwZFhKbEtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2FYTkRiMnh2Y2xSbGVIUjFjbVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnpaWFJVWlhoMGRYSmxRMjlzYjNKVGNHRmpaU2gwYUdsekxsOXRZWFJsY21saGJGQmhjbUZ0YzF0clpYbGRMQ0FuYzNKbllpY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2tvS1R0Y2JseHVJQ0FnSUhSb2FYTXVYM0JsYm1ScGJtZHpMbkIxYzJnb2NISnZiV2x6WlNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnY0hKdmJXbHpaVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJoYzNsdVl5QmhjM05wWjI1VVpYaDBkWEpsUW5sSmJtUmxlRHhVSUdWNGRHVnVaSE1nYTJWNWIyWWdUVlJ2YjI1TllYUmxjbWxoYkZCaGNtRnRaWFJsY25NK0tGeHVJQ0FnSUd0bGVUb2dWQ3hjYmlBZ0lDQjBaWGgwZFhKbFNXNWtaWGc2SUc1MWJXSmxjaUI4SUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0JwYzBOdmJHOXlWR1Y0ZEhWeVpUb2dZbTl2YkdWaGJpeGNiaUFnS1RvZ1VISnZiV2x6WlR4MmIybGtQaUI3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WVhOemFXZHVWR1Y0ZEhWeVpTaHJaWGtzSUhSbGVIUjFjbVZKYm1SbGVDQWhQU0J1ZFd4c0lEOGdleUJwYm1SbGVEb2dkR1Y0ZEhWeVpVbHVaR1Y0SUgwZ09pQjFibVJsWm1sdVpXUXNJR2x6UTI5c2IzSlVaWGgwZFhKbEtUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJQ29nWVhNZ1ZFaFNSVVVnWm5KdmJTQW5kR2h5WldVbk8xeHVhVzF3YjNKMElDb2dZWE1nVmpGTlZHOXZibE5qYUdWdFlTQm1jbTl0SUNkQWNHbDRhWFl2ZEhsd1pYTXRkbkp0WXkxdFlYUmxjbWxoYkhNdGJYUnZiMjR0TVM0d0p6dGNibWx0Y0c5eWRDQjBlWEJsSUhzZ1IweFVSaXdnUjB4VVJreHZZV1JsY2xCc2RXZHBiaXdnUjB4VVJsQmhjbk5sY2lCOUlHWnliMjBnSjNSb2NtVmxMMlY0WVcxd2JHVnpMMnB6YlM5c2IyRmtaWEp6TDBkTVZFWk1iMkZrWlhJdWFuTW5PMXh1YVcxd2IzSjBJSHNnVFZSdmIyNU5ZWFJsY21saGJDQjlJR1p5YjIwZ0p5NHZUVlJ2YjI1TllYUmxjbWxoYkNjN1hHNXBiWEJ2Y25RZ2RIbHdaU0I3SUUxVWIyOXVUV0YwWlhKcFlXeFFZWEpoYldWMFpYSnpJSDBnWm5KdmJTQW5MaTlOVkc5dmJrMWhkR1Z5YVdGc1VHRnlZVzFsZEdWeWN5YzdYRzVwYlhCdmNuUWdleUJOVkc5dmJrMWhkR1Z5YVdGc1QzVjBiR2x1WlZkcFpIUm9UVzlrWlNCOUlHWnliMjBnSnk0dlRWUnZiMjVOWVhSbGNtbGhiRTkxZEd4cGJtVlhhV1IwYUUxdlpHVW5PMXh1YVcxd2IzSjBJSHNnUjB4VVJrMVViMjl1VFdGMFpYSnBZV3hRWVhKaGJYTkJjM05wWjI1SVpXeHdaWElnZlNCbWNtOXRJQ2N1TDBkTVZFWk5WRzl2YmsxaGRHVnlhV0ZzVUdGeVlXMXpRWE56YVdkdVNHVnNjR1Z5Snp0Y2JtbHRjRzl5ZENCN0lFMVViMjl1VFdGMFpYSnBZV3hNYjJGa1pYSlFiSFZuYVc1UGNIUnBiMjV6SUgwZ1puSnZiU0FuTGk5TlZHOXZiazFoZEdWeWFXRnNURzloWkdWeVVHeDFaMmx1VDNCMGFXOXVjeWM3WEc1cGJYQnZjblFnZEhsd1pTQjdJRTFVYjI5dVRXRjBaWEpwWVd4RVpXSjFaMDF2WkdVZ2ZTQm1jbTl0SUNjdUwwMVViMjl1VFdGMFpYSnBZV3hFWldKMVowMXZaR1VuTzF4dWFXMXdiM0owSUhzZ1IweFVSaUJoY3lCSFRGUkdVMk5vWlcxaElIMGdabkp2YlNBblFHZHNkR1l0ZEhKaGJuTm1iM0p0TDJOdmNtVW5PMXh1WEc0dktpcGNiaUFxSUZCdmMzTnBZbXhsSUhOd1pXTWdkbVZ5YzJsdmJuTWdhWFFnY21WamIyZHVhWHBsY3k1Y2JpQXFMMXh1WTI5dWMzUWdVRTlUVTBsQ1RFVmZVMUJGUTE5V1JWSlRTVTlPVXlBOUlHNWxkeUJUWlhRb1d5Y3hMakFuTENBbk1TNHdMV0psZEdFblhTazdYRzVjYm1WNGNHOXlkQ0JqYkdGemN5Qk5WRzl2YmsxaGRHVnlhV0ZzVEc5aFpHVnlVR3gxWjJsdUlHbHRjR3hsYldWdWRITWdSMHhVUmt4dllXUmxjbEJzZFdkcGJpQjdYRzRnSUhCMVlteHBZeUJ6ZEdGMGFXTWdSVmhVUlU1VFNVOU9YMDVCVFVVZ1BTQW5WbEpOUTE5dFlYUmxjbWxoYkhOZmJYUnZiMjRuTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJVYUdseklIWmhiSFZsSUhkcGJHd2dZbVVnWVdSa1pXUWdkRzhnWUhKbGJtUmxjazl5WkdWeVlDQnZaaUJsZG1WeWVTQnRaWE5vWlhNZ2QyaHZJR2hoZG1VZ1RXRjBaWEpwWVd4elRWUnZiMjR1WEc0Z0lDQXFJRlJvWlNCbWFXNWhiQ0J5Wlc1a1pYSlBjbVJsY2lCM2FXeHNJR0psSUhOMWJTQnZaaUIwYUdseklHQnlaVzVrWlhKUGNtUmxjazltWm5ObGRHQWdZVzVrSUdCeVpXNWtaWEpSZFdWMVpVOW1abk5sZEU1MWJXSmxjbUFnWm05eUlHVmhZMmdnYldGMFpYSnBZV3h6TGx4dUlDQWdLaUJnTUdBZ1lua2daR1ZtWVhWc2RDNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QnlaVzVrWlhKUGNtUmxjazltWm5ObGREb2diblZ0WW1WeU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVnlaU0JwY3lCaElHeHBibVVnYjJZZ2RHaGxJSE5vWVdSbGNpQmpZV3hzWldRZ1hDSmpiMjF0Wlc1MElHOTFkQ0JwWmlCNWIzVWdkMkZ1ZENCMGJ5QlFRbElnWVdKemIyeDFkR1ZzZVZ3aUlHbHVJRlpTVFRBdU1DQk5WRzl2Ymk1Y2JpQWdJQ29nVjJobGJpQjBhR2x6SUdseklIUnlkV1VzSUhSb1pTQnRZWFJsY21saGJDQmxibUZpYkdWeklIUm9aU0JzYVc1bElIUnZJRzFoYTJVZ2FYUWdZMjl0Y0dGMGFXSnNaU0IzYVhSb0lIUm9aU0JzWldkaFkza2djbVZ1WkdWeWFXNW5JRzltSUZaU1RTNWNiaUFnSUNvZ1ZYTjFZV3hzZVNCdWIzUWdjbVZqYjIxdFpXNWtaV1FnZEc4Z2RIVnliaUIwYUdseklHOXVMbHh1SUNBZ0tpQmdabUZzYzJWZ0lHSjVJR1JsWm1GMWJIUXVYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdkakJEYjIxd1lYUlRhR0ZrWlRvZ1ltOXZiR1ZoYmp0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUkdWaWRXY2diVzlrWlNCbWIzSWdkR2hsSUcxaGRHVnlhV0ZzTGx4dUlDQWdLaUJaYjNVZ1kyRnVJSFpwYzNWaGJHbDZaU0J6WlhabGNtRnNJR052YlhCdmJtVnVkSE1nWm05eUlHUnBZV2R1YjNOcGN5QjFjMmx1WnlCa1pXSjFaeUJ0YjJSbExseHVJQ0FnS2x4dUlDQWdLaUJUWldVNklIdEFiR2x1YXlCTlZHOXZiazFoZEdWeWFXRnNSR1ZpZFdkTmIyUmxmVnh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJR1JsWW5WblRXOWtaVG9nVFZSdmIyNU5ZWFJsY21saGJFUmxZblZuVFc5a1pUdGNibHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnY0dGeWMyVnlPaUJIVEZSR1VHRnljMlZ5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJNYjJGa1pXUWdiV0YwWlhKcFlXeHpJSGRwYkd3Z1ltVWdjM1J2Y21Wa0lHbHVJSFJvYVhNZ2MyVjBMbHh1SUNBZ0tpQlhhV3hzSUdKbElIUnlZVzV6Wm1WeWNtVmtJR2x1ZEc4Z1lHZHNkR1l1ZFhObGNrUmhkR0V1ZG5KdFRWUnZiMjVOWVhSbGNtbGhiSE5nSUdsdUlIdEFiR2x1YXlCaFpuUmxjbEp2YjNSOUxseHVJQ0FnS2k5Y2JpQWdjSEpwZG1GMFpTQnlaV0ZrYjI1c2VTQmZiVlJ2YjI1TllYUmxjbWxoYkZObGREb2dVMlYwUEUxVWIyOXVUV0YwWlhKcFlXdytPMXh1WEc0Z0lIQjFZbXhwWXlCblpYUWdibUZ0WlNncE9pQnpkSEpwYm1jZ2UxeHVJQ0FnSUhKbGRIVnliaUJOVkc5dmJrMWhkR1Z5YVdGc1RHOWhaR1Z5VUd4MVoybHVMa1ZZVkVWT1UwbFBUbDlPUVUxRk8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklHTnZibk4wY25WamRHOXlLSEJoY25ObGNqb2dSMHhVUmxCaGNuTmxjaXdnYjNCMGFXOXVjem9nVFZSdmIyNU5ZWFJsY21saGJFeHZZV1JsY2xCc2RXZHBiazl3ZEdsdmJuTWdQU0I3ZlNrZ2UxeHVJQ0FnSUhSb2FYTXVjR0Z5YzJWeUlEMGdjR0Z5YzJWeU8xeHVYRzRnSUNBZ2RHaHBjeTV5Wlc1a1pYSlBjbVJsY2s5bVpuTmxkQ0E5SUc5d2RHbHZibk11Y21WdVpHVnlUM0prWlhKUFptWnpaWFFnUHo4Z01EdGNiaUFnSUNCMGFHbHpMbll3UTI5dGNHRjBVMmhoWkdVZ1BTQnZjSFJwYjI1ekxuWXdRMjl0Y0dGMFUyaGhaR1VnUHo4Z1ptRnNjMlU3WEc0Z0lDQWdkR2hwY3k1a1pXSjFaMDF2WkdVZ1BTQnZjSFJwYjI1ekxtUmxZblZuVFc5a1pTQS9QeUFuYm05dVpTYzdYRzVjYmlBZ0lDQjBhR2x6TGw5dFZHOXZiazFoZEdWeWFXRnNVMlYwSUQwZ2JtVjNJRk5sZENncE8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklHRnplVzVqSUdKbFptOXlaVkp2YjNRb0tUb2dVSEp2YldselpUeDJiMmxrUGlCN1hHNGdJQ0FnZEdocGN5NWZjbVZ0YjNabFZXNXNhWFJGZUhSbGJuTnBiMjVKWmsxVWIyOXVSWGhwYzNSektDazdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdZWE41Ym1NZ1lXWjBaWEpTYjI5MEtHZHNkR1k2SUVkTVZFWXBPaUJRY205dGFYTmxQSFp2YVdRK0lIdGNiaUFnSUNCbmJIUm1MblZ6WlhKRVlYUmhMblp5YlUxVWIyOXVUV0YwWlhKcFlXeHpJRDBnUVhKeVlYa3Vabkp2YlNoMGFHbHpMbDl0Vkc5dmJrMWhkR1Z5YVdGc1UyVjBLVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJuWlhSTllYUmxjbWxoYkZSNWNHVW9iV0YwWlhKcFlXeEpibVJsZURvZ2JuVnRZbVZ5S1RvZ2RIbHdaVzltSUZSSVVrVkZMazFoZEdWeWFXRnNJSHdnYm5Wc2JDQjdYRzRnSUNBZ1kyOXVjM1FnZGpGRmVIUmxibk5wYjI0Z1BTQjBhR2x6TGw5blpYUk5WRzl2YmtWNGRHVnVjMmx2YmlodFlYUmxjbWxoYkVsdVpHVjRLVHRjYmlBZ0lDQnBaaUFvZGpGRmVIUmxibk5wYjI0cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCTlZHOXZiazFoZEdWeWFXRnNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNCOVhHNWNiaUFnY0hWaWJHbGpJR1Y0ZEdWdVpFMWhkR1Z5YVdGc1VHRnlZVzF6S0cxaGRHVnlhV0ZzU1c1a1pYZzZJRzUxYldKbGNpd2diV0YwWlhKcFlXeFFZWEpoYlhNNklFMVViMjl1VFdGMFpYSnBZV3hRWVhKaGJXVjBaWEp6S1RvZ1VISnZiV2x6WlR4aGJuaytJSHdnYm5Wc2JDQjdYRzRnSUNBZ1kyOXVjM1FnWlhoMFpXNXphVzl1SUQwZ2RHaHBjeTVmWjJWMFRWUnZiMjVGZUhSbGJuTnBiMjRvYldGMFpYSnBZV3hKYm1SbGVDazdYRzRnSUNBZ2FXWWdLR1Y0ZEdWdWMybHZiaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyVjRkR1Z1WkUxaGRHVnlhV0ZzVUdGeVlXMXpLR1Y0ZEdWdWMybHZiaXdnYldGMFpYSnBZV3hRWVhKaGJYTXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNCOVhHNWNiaUFnY0hWaWJHbGpJR0Z6ZVc1aklHeHZZV1JOWlhOb0tHMWxjMmhKYm1SbGVEb2diblZ0WW1WeUtUb2dVSEp2YldselpUeFVTRkpGUlM1SGNtOTFjQ0I4SUZSSVVrVkZMazFsYzJnZ2ZDQlVTRkpGUlM1VGEybHVibVZrVFdWemFENGdlMXh1SUNBZ0lHTnZibk4wSUhCaGNuTmxjaUE5SUhSb2FYTXVjR0Z5YzJWeU8xeHVJQ0FnSUdOdmJuTjBJR3B6YjI0Z1BTQndZWEp6WlhJdWFuTnZiaUJoY3lCSFRGUkdVMk5vWlcxaExrbEhURlJHTzF4dVhHNGdJQ0FnWTI5dWMzUWdiV1Z6YUVSbFppQTlJR3B6YjI0dWJXVnphR1Z6UHk1YmJXVnphRWx1WkdWNFhUdGNibHh1SUNBZ0lHbG1JQ2h0WlhOb1JHVm1JRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNiaUFnSUNBZ0lDQWdZRTFVYjI5dVRXRjBaWEpwWVd4TWIyRmtaWEpRYkhWbmFXNDZJRUYwZEdWdGNIUWdkRzhnZFhObElHMWxjMmhsYzFza2UyMWxjMmhKYm1SbGVIMWRJRzltSUdkc1ZFWWdZblYwSUhSb1pTQnRaWE5vSUdSdlpYTnVKM1FnWlhocGMzUmdMRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCd2NtbHRhWFJwZG1WelJHVm1JRDBnYldWemFFUmxaaTV3Y21sdGFYUnBkbVZ6TzF4dVhHNGdJQ0FnWTI5dWMzUWdiV1Z6YUU5eVIzSnZkWEFnUFNCaGQyRnBkQ0J3WVhKelpYSXViRzloWkUxbGMyZ29iV1Z6YUVsdVpHVjRLVHRjYmx4dUlDQWdJR2xtSUNod2NtbHRhWFJwZG1WelJHVm1MbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYldWemFDQTlJRzFsYzJoUGNrZHliM1Z3SUdGeklGUklVa1ZGTGsxbGMyZzdYRzRnSUNBZ0lDQmpiMjV6ZENCdFlYUmxjbWxoYkVsdVpHVjRJRDBnY0hKcGJXbDBhWFpsYzBSbFpsc3dYUzV0WVhSbGNtbGhiRHRjYmx4dUlDQWdJQ0FnYVdZZ0tHMWhkR1Z5YVdGc1NXNWtaWGdnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6WlhSMWNGQnlhVzFwZEdsMlpTaHRaWE5vTENCdFlYUmxjbWxoYkVsdVpHVjRLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnWjNKdmRYQWdQU0J0WlhOb1QzSkhjbTkxY0NCaGN5QlVTRkpGUlM1SGNtOTFjRHRjYmlBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnY0hKcGJXbDBhWFpsYzBSbFppNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J0WlhOb0lEMGdaM0p2ZFhBdVkyaHBiR1J5Wlc1YmFWMGdZWE1nVkVoU1JVVXVUV1Z6YUR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYldGMFpYSnBZV3hKYm1SbGVDQTlJSEJ5YVcxcGRHbDJaWE5FWldaYmFWMHViV0YwWlhKcFlXdzdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHMWhkR1Z5YVdGc1NXNWtaWGdnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDNObGRIVndVSEpwYldsMGFYWmxLRzFsYzJnc0lHMWhkR1Z5YVdGc1NXNWtaWGdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJRzFsYzJoUGNrZHliM1Z3TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFUmxiR1YwWlNCMWMyVWdiMllnWUV0SVVsOXRZWFJsY21saGJITmZkVzVzYVhSZ0lHWnliMjBnYVhSeklHQnRZWFJsY21saGJITmdJR2xtSUhSb1pTQnRZWFJsY21saGJDQnBjeUIxYzJsdVp5Qk5WRzl2Ymk1Y2JpQWdJQ3BjYmlBZ0lDb2dVMmx1WTJVZ1IweFVSa3h2WVdSbGNpQm9ZWFpsSUhOdklHMWhibmtnYUdGeVpHTnZaR1ZrSUhCeWIyTmxaSFZ5WlNCeVpXeGhkR1ZrSUhSdklHQkxTRkpmYldGMFpYSnBZV3h6WDNWdWJHbDBZRnh1SUNBZ0tpQjNaU0JvWVhabElIUnZJR1JsYkdWMFpTQjBhR1VnWlhoMFpXNXphVzl1SUdKbFptOXlaU0IzWlNCemRHRnlkQ0IwYnlCd1lYSnpaU0IwYUdVZ1oyeFVSaTVjYmlBZ0lDb3ZYRzRnSUhCeWFYWmhkR1VnWDNKbGJXOTJaVlZ1YkdsMFJYaDBaVzV6YVc5dVNXWk5WRzl2YmtWNGFYTjBjeWdwT2lCMmIybGtJSHRjYmlBZ0lDQmpiMjV6ZENCd1lYSnpaWElnUFNCMGFHbHpMbkJoY25ObGNqdGNiaUFnSUNCamIyNXpkQ0JxYzI5dUlEMGdjR0Z5YzJWeUxtcHpiMjRnWVhNZ1IweFVSbE5qYUdWdFlTNUpSMHhVUmp0Y2JseHVJQ0FnSUdOdmJuTjBJRzFoZEdWeWFXRnNSR1ZtY3lBOUlHcHpiMjR1YldGMFpYSnBZV3h6TzF4dUlDQWdJRzFoZEdWeWFXRnNSR1ZtY3o4dWJXRndLQ2h0WVhSbGNtbGhiRVJsWml3Z2FVMWhkR1Z5YVdGc0tTQTlQaUI3WEc0Z0lDQWdJQ0JqYjI1emRDQmxlSFJsYm5OcGIyNGdQU0IwYUdsekxsOW5aWFJOVkc5dmJrVjRkR1Z1YzJsdmJpaHBUV0YwWlhKcFlXd3BPMXh1WEc0Z0lDQWdJQ0JwWmlBb1pYaDBaVzV6YVc5dUlDWW1JRzFoZEdWeWFXRnNSR1ZtTG1WNGRHVnVjMmx2Ym5NL0xsc25TMGhTWDIxaGRHVnlhV0ZzYzE5MWJteHBkQ2RkS1NCN1hHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCdFlYUmxjbWxoYkVSbFppNWxlSFJsYm5OcGIyNXpXeWRMU0ZKZmJXRjBaWEpwWVd4elgzVnViR2wwSjEwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQndjbWwyWVhSbElGOW5aWFJOVkc5dmJrVjRkR1Z1YzJsdmJpaHRZWFJsY21saGJFbHVaR1Y0T2lCdWRXMWlaWElwT2lCV01VMVViMjl1VTJOb1pXMWhMbFpTVFVOTllYUmxjbWxoYkhOTlZHOXZiaUI4SUhWdVpHVm1hVzVsWkNCN1hHNGdJQ0FnWTI5dWMzUWdjR0Z5YzJWeUlEMGdkR2hwY3k1d1lYSnpaWEk3WEc0Z0lDQWdZMjl1YzNRZ2FuTnZiaUE5SUhCaGNuTmxjaTVxYzI5dUlHRnpJRWRNVkVaVFkyaGxiV0V1U1VkTVZFWTdYRzVjYmlBZ0lDQmpiMjV6ZENCdFlYUmxjbWxoYkVSbFppQTlJR3B6YjI0dWJXRjBaWEpwWVd4elB5NWJiV0YwWlhKcFlXeEpibVJsZUYwN1hHNWNiaUFnSUNCcFppQW9iV0YwWlhKcFlXeEVaV1lnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtGeHVJQ0FnSUNBZ0lDQmdUVlJ2YjI1TllYUmxjbWxoYkV4dllXUmxjbEJzZFdkcGJqb2dRWFIwWlcxd2RDQjBieUIxYzJVZ2JXRjBaWEpwWVd4eld5UjdiV0YwWlhKcFlXeEpibVJsZUgxZElHOW1JR2RzVkVZZ1luVjBJSFJvWlNCdFlYUmxjbWxoYkNCa2IyVnpiaWQwSUdWNGFYTjBZQ3hjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkVzVrWldacGJtVmtPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUdWNGRHVnVjMmx2YmlBOUlHMWhkR1Z5YVdGc1JHVm1MbVY0ZEdWdWMybHZibk0vTGx0TlZHOXZiazFoZEdWeWFXRnNURzloWkdWeVVHeDFaMmx1TGtWWVZFVk9VMGxQVGw5T1FVMUZYU0JoYzF4dUlDQWdJQ0FnZkNCV01VMVViMjl1VTJOb1pXMWhMbFpTVFVOTllYUmxjbWxoYkhOTlZHOXZibHh1SUNBZ0lDQWdmQ0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdhV1lnS0dWNGRHVnVjMmx2YmlBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZFc1a1pXWnBibVZrTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElITndaV05XWlhKemFXOXVJRDBnWlhoMFpXNXphVzl1TG5Od1pXTldaWEp6YVc5dU8xeHVJQ0FnSUdsbUlDZ2hVRTlUVTBsQ1RFVmZVMUJGUTE5V1JWSlRTVTlPVXk1b1lYTW9jM0JsWTFabGNuTnBiMjRwS1NCN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9YRzRnSUNBZ0lDQWdJR0JOVkc5dmJrMWhkR1Z5YVdGc1RHOWhaR1Z5VUd4MVoybHVPaUJWYm10dWIzZHVJQ1I3VFZSdmIyNU5ZWFJsY21saGJFeHZZV1JsY2xCc2RXZHBiaTVGV0ZSRlRsTkpUMDVmVGtGTlJYMGdjM0JsWTFabGNuTnBiMjRnWENJa2UzTndaV05XWlhKemFXOXVmVndpWUN4Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZFc1a1pXWnBibVZrTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQmxlSFJsYm5OcGIyNDdYRzRnSUgxY2JseHVJQ0J3Y21sMllYUmxJR0Z6ZVc1aklGOWxlSFJsYm1STllYUmxjbWxoYkZCaGNtRnRjeWhjYmlBZ0lDQmxlSFJsYm5OcGIyNDZJRll4VFZSdmIyNVRZMmhsYldFdVZsSk5RMDFoZEdWeWFXRnNjMDFVYjI5dUxGeHVJQ0FnSUcxaGRHVnlhV0ZzVUdGeVlXMXpPaUJOVkc5dmJrMWhkR1Z5YVdGc1VHRnlZVzFsZEdWeWN5eGNiaUFnS1RvZ1VISnZiV2x6WlR4MmIybGtQaUI3WEc0Z0lDQWdMeThnVW1WdGIzWnBibWNnYldGMFpYSnBZV3dnY0dGeVlXMXpJSFJvWVhRZ2FYTWdibTkwSUhKbGNYVnBjbVZrSUhSdklITjFjSEpsYzNNZ2QyRnlibWx1WjNNdVhHNGdJQ0FnWkdWc1pYUmxJQ2h0WVhSbGNtbGhiRkJoY21GdGN5QmhjeUJVU0ZKRlJTNU5aWE5vVTNSaGJtUmhjbVJOWVhSbGNtbGhiRkJoY21GdFpYUmxjbk1wTG0xbGRHRnNibVZ6Y3p0Y2JpQWdJQ0JrWld4bGRHVWdLRzFoZEdWeWFXRnNVR0Z5WVcxeklHRnpJRlJJVWtWRkxrMWxjMmhUZEdGdVpHRnlaRTFoZEdWeWFXRnNVR0Z5WVcxbGRHVnljeWt1Y205MVoyaHVaWE56TzF4dVhHNGdJQ0FnWTI5dWMzUWdZWE56YVdkdVNHVnNjR1Z5SUQwZ2JtVjNJRWRNVkVaTlZHOXZiazFoZEdWeWFXRnNVR0Z5WVcxelFYTnphV2R1U0dWc2NHVnlLSFJvYVhNdWNHRnljMlZ5TENCdFlYUmxjbWxoYkZCaGNtRnRjeWs3WEc1Y2JpQWdJQ0JoYzNOcFoyNUlaV3h3WlhJdVlYTnphV2R1VUhKcGJXbDBhWFpsS0NkMGNtRnVjM0JoY21WdWRGZHBkR2hhVjNKcGRHVW5MQ0JsZUhSbGJuTnBiMjR1ZEhKaGJuTndZWEpsYm5SWGFYUm9XbGR5YVhSbEtUdGNiaUFnSUNCaGMzTnBaMjVJWld4d1pYSXVZWE56YVdkdVEyOXNiM0lvSjNOb1lXUmxRMjlzYjNKR1lXTjBiM0luTENCbGVIUmxibk5wYjI0dWMyaGhaR1ZEYjJ4dmNrWmhZM1J2Y2lrN1hHNGdJQ0FnWVhOemFXZHVTR1ZzY0dWeUxtRnpjMmxuYmxSbGVIUjFjbVVvSjNOb1lXUmxUWFZzZEdsd2JIbFVaWGgwZFhKbEp5d2daWGgwWlc1emFXOXVMbk5vWVdSbFRYVnNkR2x3YkhsVVpYaDBkWEpsTENCMGNuVmxLVHRjYmlBZ0lDQmhjM05wWjI1SVpXeHdaWEl1WVhOemFXZHVVSEpwYldsMGFYWmxLQ2R6YUdGa2FXNW5VMmhwWm5SR1lXTjBiM0luTENCbGVIUmxibk5wYjI0dWMyaGhaR2x1WjFOb2FXWjBSbUZqZEc5eUtUdGNiaUFnSUNCaGMzTnBaMjVJWld4d1pYSXVZWE56YVdkdVZHVjRkSFZ5WlNnbmMyaGhaR2x1WjFOb2FXWjBWR1Y0ZEhWeVpTY3NJR1Y0ZEdWdWMybHZiaTV6YUdGa2FXNW5VMmhwWm5SVVpYaDBkWEpsTENCMGNuVmxLVHRjYmlBZ0lDQmhjM05wWjI1SVpXeHdaWEl1WVhOemFXZHVVSEpwYldsMGFYWmxLQ2R6YUdGa2FXNW5VMmhwWm5SVVpYaDBkWEpsVTJOaGJHVW5MQ0JsZUhSbGJuTnBiMjR1YzJoaFpHbHVaMU5vYVdaMFZHVjRkSFZ5WlQ4dWMyTmhiR1VwTzF4dUlDQWdJR0Z6YzJsbmJraGxiSEJsY2k1aGMzTnBaMjVRY21sdGFYUnBkbVVvSjNOb1lXUnBibWRVYjI5dWVVWmhZM1J2Y2ljc0lHVjRkR1Z1YzJsdmJpNXphR0ZrYVc1blZHOXZibmxHWVdOMGIzSXBPMXh1SUNBZ0lHRnpjMmxuYmtobGJIQmxjaTVoYzNOcFoyNVFjbWx0YVhScGRtVW9KMmRwUlhGMVlXeHBlbUYwYVc5dVJtRmpkRzl5Snl3Z1pYaDBaVzV6YVc5dUxtZHBSWEYxWVd4cGVtRjBhVzl1Um1GamRHOXlLVHRjYmlBZ0lDQmhjM05wWjI1SVpXeHdaWEl1WVhOemFXZHVRMjlzYjNJb0oyMWhkR05oY0VaaFkzUnZjaWNzSUdWNGRHVnVjMmx2Ymk1dFlYUmpZWEJHWVdOMGIzSXBPMXh1SUNBZ0lHRnpjMmxuYmtobGJIQmxjaTVoYzNOcFoyNVVaWGgwZFhKbEtDZHRZWFJqWVhCVVpYaDBkWEpsSnl3Z1pYaDBaVzV6YVc5dUxtMWhkR05oY0ZSbGVIUjFjbVVzSUhSeWRXVXBPMXh1SUNBZ0lHRnpjMmxuYmtobGJIQmxjaTVoYzNOcFoyNURiMnh2Y2lnbmNHRnlZVzFsZEhKcFkxSnBiVU52Ykc5eVJtRmpkRzl5Snl3Z1pYaDBaVzV6YVc5dUxuQmhjbUZ0WlhSeWFXTlNhVzFEYjJ4dmNrWmhZM1J2Y2lrN1hHNGdJQ0FnWVhOemFXZHVTR1ZzY0dWeUxtRnpjMmxuYmxSbGVIUjFjbVVvSjNKcGJVMTFiSFJwY0d4NVZHVjRkSFZ5WlNjc0lHVjRkR1Z1YzJsdmJpNXlhVzFOZFd4MGFYQnNlVlJsZUhSMWNtVXNJSFJ5ZFdVcE8xeHVJQ0FnSUdGemMybG5ia2hsYkhCbGNpNWhjM05wWjI1UWNtbHRhWFJwZG1Vb0ozSnBiVXhwWjJoMGFXNW5UV2w0Um1GamRHOXlKeXdnWlhoMFpXNXphVzl1TG5KcGJVeHBaMmgwYVc1blRXbDRSbUZqZEc5eUtUdGNiaUFnSUNCaGMzTnBaMjVJWld4d1pYSXVZWE56YVdkdVVISnBiV2wwYVhabEtDZHdZWEpoYldWMGNtbGpVbWx0Um5KbGMyNWxiRkJ2ZDJWeVJtRmpkRzl5Snl3Z1pYaDBaVzV6YVc5dUxuQmhjbUZ0WlhSeWFXTlNhVzFHY21WemJtVnNVRzkzWlhKR1lXTjBiM0lwTzF4dUlDQWdJR0Z6YzJsbmJraGxiSEJsY2k1aGMzTnBaMjVRY21sdGFYUnBkbVVvSjNCaGNtRnRaWFJ5YVdOU2FXMU1hV1owUm1GamRHOXlKeXdnWlhoMFpXNXphVzl1TG5CaGNtRnRaWFJ5YVdOU2FXMU1hV1owUm1GamRHOXlLVHRjYmlBZ0lDQmhjM05wWjI1SVpXeHdaWEl1WVhOemFXZHVVSEpwYldsMGFYWmxLQ2R2ZFhSc2FXNWxWMmxrZEdoTmIyUmxKeXdnWlhoMFpXNXphVzl1TG05MWRHeHBibVZYYVdSMGFFMXZaR1VnWVhNZ1RWUnZiMjVOWVhSbGNtbGhiRTkxZEd4cGJtVlhhV1IwYUUxdlpHVXBPMXh1SUNBZ0lHRnpjMmxuYmtobGJIQmxjaTVoYzNOcFoyNVFjbWx0YVhScGRtVW9KMjkxZEd4cGJtVlhhV1IwYUVaaFkzUnZjaWNzSUdWNGRHVnVjMmx2Ymk1dmRYUnNhVzVsVjJsa2RHaEdZV04wYjNJcE8xeHVJQ0FnSUdGemMybG5ia2hsYkhCbGNpNWhjM05wWjI1VVpYaDBkWEpsS0NkdmRYUnNhVzVsVjJsa2RHaE5kV3gwYVhCc2VWUmxlSFIxY21VbkxDQmxlSFJsYm5OcGIyNHViM1YwYkdsdVpWZHBaSFJvVFhWc2RHbHdiSGxVWlhoMGRYSmxMQ0JtWVd4elpTazdYRzRnSUNBZ1lYTnphV2R1U0dWc2NHVnlMbUZ6YzJsbmJrTnZiRzl5S0NkdmRYUnNhVzVsUTI5c2IzSkdZV04wYjNJbkxDQmxlSFJsYm5OcGIyNHViM1YwYkdsdVpVTnZiRzl5Um1GamRHOXlLVHRjYmlBZ0lDQmhjM05wWjI1SVpXeHdaWEl1WVhOemFXZHVVSEpwYldsMGFYWmxLQ2R2ZFhSc2FXNWxUR2xuYUhScGJtZE5hWGhHWVdOMGIzSW5MQ0JsZUhSbGJuTnBiMjR1YjNWMGJHbHVaVXhwWjJoMGFXNW5UV2w0Um1GamRHOXlLVHRjYmlBZ0lDQmhjM05wWjI1SVpXeHdaWEl1WVhOemFXZHVWR1Y0ZEhWeVpTZ25kWFpCYm1sdFlYUnBiMjVOWVhOclZHVjRkSFZ5WlNjc0lHVjRkR1Z1YzJsdmJpNTFka0Z1YVcxaGRHbHZiazFoYzJ0VVpYaDBkWEpsTENCbVlXeHpaU2s3WEc0Z0lDQWdZWE56YVdkdVNHVnNjR1Z5TG1GemMybG5ibEJ5YVcxcGRHbDJaU2duZFhaQmJtbHRZWFJwYjI1VFkzSnZiR3hZVTNCbFpXUkdZV04wYjNJbkxDQmxlSFJsYm5OcGIyNHVkWFpCYm1sdFlYUnBiMjVUWTNKdmJHeFlVM0JsWldSR1lXTjBiM0lwTzF4dUlDQWdJR0Z6YzJsbmJraGxiSEJsY2k1aGMzTnBaMjVRY21sdGFYUnBkbVVvSjNWMlFXNXBiV0YwYVc5dVUyTnliMnhzV1ZOd1pXVmtSbUZqZEc5eUp5d2daWGgwWlc1emFXOXVMblYyUVc1cGJXRjBhVzl1VTJOeWIyeHNXVk53WldWa1JtRmpkRzl5S1R0Y2JpQWdJQ0JoYzNOcFoyNUlaV3h3WlhJdVlYTnphV2R1VUhKcGJXbDBhWFpsS0NkMWRrRnVhVzFoZEdsdmJsSnZkR0YwYVc5dVUzQmxaV1JHWVdOMGIzSW5MQ0JsZUhSbGJuTnBiMjR1ZFhaQmJtbHRZWFJwYjI1U2IzUmhkR2x2YmxOd1pXVmtSbUZqZEc5eUtUdGNibHh1SUNBZ0lHRnpjMmxuYmtobGJIQmxjaTVoYzNOcFoyNVFjbWx0YVhScGRtVW9KM1l3UTI5dGNHRjBVMmhoWkdVbkxDQjBhR2x6TG5Zd1EyOXRjR0YwVTJoaFpHVXBPMXh1SUNBZ0lHRnpjMmxuYmtobGJIQmxjaTVoYzNOcFoyNVFjbWx0YVhScGRtVW9KMlJsWW5WblRXOWtaU2NzSUhSb2FYTXVaR1ZpZFdkTmIyUmxLVHRjYmx4dUlDQWdJR0YzWVdsMElHRnpjMmxuYmtobGJIQmxjaTV3Wlc1a2FXNW5PMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSb2FYTWdkMmxzYkNCa2J5QjBkMjhnY0hKdlkyVnpjMlZ6SUhSb1lYUWdhWE1nY21WeGRXbHlaV1FnZEc4Z2NtVnVaR1Z5SUUxVWIyOXVJSEJ5YjNCbGNteDVMbHh1SUNBZ0tseHVJQ0FnS2lBdElGTmxkQ0J5Wlc1a1pYSWdiM0prWlhKY2JpQWdJQ29nTFNCSFpXNWxjbUYwWlNCdmRYUnNhVzVsWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCdFpYTm9JRUVnZEdGeVoyVjBJRWRNVkVZZ2NISnBiV2wwYVhabFhHNGdJQ0FxSUVCd1lYSmhiU0J0WVhSbGNtbGhiRWx1WkdWNElGUm9aU0J0WVhSbGNtbGhiQ0JwYm1SbGVDQnZaaUIwYUdVZ2NISnBiV2wwYVhabFhHNGdJQ0FxTDF4dUlDQndjbWwyWVhSbElGOXpaWFIxY0ZCeWFXMXBkR2wyWlNodFpYTm9PaUJVU0ZKRlJTNU5aWE5vTENCdFlYUmxjbWxoYkVsdVpHVjRPaUJ1ZFcxaVpYSXBPaUIyYjJsa0lIdGNiaUFnSUNCamIyNXpkQ0JsZUhSbGJuTnBiMjRnUFNCMGFHbHpMbDluWlhSTlZHOXZia1Y0ZEdWdWMybHZiaWh0WVhSbGNtbGhiRWx1WkdWNEtUdGNiaUFnSUNCcFppQW9aWGgwWlc1emFXOXVLU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQnlaVzVrWlhKUGNtUmxjaUE5SUhSb2FYTXVYM0JoY25ObFVtVnVaR1Z5VDNKa1pYSW9aWGgwWlc1emFXOXVLVHRjYmlBZ0lDQWdJRzFsYzJndWNtVnVaR1Z5VDNKa1pYSWdQU0J5Wlc1a1pYSlBjbVJsY2lBcklIUm9hWE11Y21WdVpHVnlUM0prWlhKUFptWnpaWFE3WEc1Y2JpQWdJQ0FnSUhSb2FYTXVYMmRsYm1WeVlYUmxUM1YwYkdsdVpTaHRaWE5vS1R0Y2JseHVJQ0FnSUNBZ2RHaHBjeTVmWVdSa1ZHOU5ZWFJsY21saGJGTmxkQ2h0WlhOb0tUdGNibHh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhaVzVsY21GMFpTQnZkWFJzYVc1bElHWnZjaUIwYUdVZ1oybDJaVzRnYldWemFDd2dhV1lnYVhRZ2JtVmxaSE11WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCdFpYTm9JRlJvWlNCMFlYSm5aWFFnYldWemFGeHVJQ0FnS2k5Y2JpQWdjSEpwZG1GMFpTQmZaMlZ1WlhKaGRHVlBkWFJzYVc1bEtHMWxjMmc2SUZSSVVrVkZMazFsYzJncE9pQjJiMmxrSUh0Y2JpQWdJQ0F2THlCUFN5d2dhWFFuY3lCMGFHVWdhR0ZqYTNrZ2NHRnlkQzVjYmlBZ0lDQXZMeUJYWlNCaGNtVWdaMjlwYm1jZ2RHOGdaSFZ3YkdsallYUmxJSFJvWlNCTlZHOXZiazFoZEdWeWFXRnNJR1p2Y2lCdmRYUnNhVzVsSUhWelpTNWNiaUFnSUNBdkx5QlVhR1Z1SUhkbElHRnlaU0JuYjJsdVp5QjBieUJqY21WaGRHVWdkSGR2SUdkbGIyMWxkSEo1SUdkeWIzVndjeUJoYm1RZ2NtVm1aWElnYzJGdFpTQmlkV1ptWlhJZ1luVjBJR1JwWm1abGNtVnVkQ0J0WVhSbGNtbGhiQzVjYmlBZ0lDQXZMeUJKZENkeklHaHZkeUIzWlNCa2NtRjNJSFIzYnlCdFlYUmxjbWxoYkhNZ1lYUWdiMjVqWlNCMWMybHVaeUJoSUhOcGJtZHNaU0J0WlhOb0xseHVYRzRnSUNBZ0x5OGdiV0ZyWlNCemRYSmxJSFJvWlNCdFlYUmxjbWxoYkNCcGN5QnRkRzl2Ymx4dUlDQWdJR052Ym5OMElITjFjbVpoWTJWTllYUmxjbWxoYkNBOUlHMWxjMmd1YldGMFpYSnBZV3c3WEc0Z0lDQWdhV1lnS0NFb2MzVnlabUZqWlUxaGRHVnlhV0ZzSUdsdWMzUmhibU5sYjJZZ1RWUnZiMjVOWVhSbGNtbGhiQ2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJqYUdWamF5QjNhR1YwYUdWeUlIZGxJSEpsWVd4c2VTQm9ZWFpsSUhSdklIQnlaWEJoY21VZ2IzVjBiR2x1WlNCdmNpQnViM1JjYmlBZ0lDQnBaaUFvYzNWeVptRmpaVTFoZEdWeWFXRnNMbTkxZEd4cGJtVlhhV1IwYUUxdlpHVWdQVDA5SUNkdWIyNWxKeUI4ZkNCemRYSm1ZV05sVFdGMFpYSnBZV3d1YjNWMGJHbHVaVmRwWkhSb1JtRmpkRzl5SUR3OUlEQXVNQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRzFoYTJVZ2FYUnpJRzFoZEdWeWFXRnNJR0Z1SUdGeWNtRjVYRzRnSUNBZ2JXVnphQzV0WVhSbGNtbGhiQ0E5SUZ0emRYSm1ZV05sVFdGMFpYSnBZV3hkT3lBdkx5QnRaWE5vTG0xaGRHVnlhV0ZzSUdseklHZDFZWEpoYm5SbFpXUWdkRzhnWW1VZ1lTQk5ZWFJsY21saGJDQnBiaUJIVEZSR1RHOWhaR1Z5WEc1Y2JpQWdJQ0F2THlCa2RYQnNhV05oZEdVZ2RHaGxJRzFoZEdWeWFXRnNJR1p2Y2lCdmRYUnNhVzVsSUhWelpWeHVJQ0FnSUdOdmJuTjBJRzkxZEd4cGJtVk5ZWFJsY21saGJDQTlJSE4xY21aaFkyVk5ZWFJsY21saGJDNWpiRzl1WlNncE8xeHVJQ0FnSUc5MWRHeHBibVZOWVhSbGNtbGhiQzV1WVcxbElDczlJQ2NnS0U5MWRHeHBibVVwSnp0Y2JpQWdJQ0J2ZFhSc2FXNWxUV0YwWlhKcFlXd3VhWE5QZFhSc2FXNWxJRDBnZEhKMVpUdGNiaUFnSUNCdmRYUnNhVzVsVFdGMFpYSnBZV3d1YzJsa1pTQTlJRlJJVWtWRkxrSmhZMnRUYVdSbE8xeHVJQ0FnSUcxbGMyZ3ViV0YwWlhKcFlXd3VjSFZ6YUNodmRYUnNhVzVsVFdGMFpYSnBZV3dwTzF4dVhHNGdJQ0FnTHk4Z2JXRnJaU0IwZDI4Z1oyVnZiV1YwY25rZ1ozSnZkWEJ6SUc5MWRDQnZaaUJoSUhOaGJXVWdZblZtWm1WeVhHNGdJQ0FnWTI5dWMzUWdaMlZ2YldWMGNua2dQU0J0WlhOb0xtZGxiMjFsZEhKNU95QXZMeUJ0WlhOb0xtZGxiMjFsZEhKNUlHbHpJR2QxWVhKaGJuUmxaV1FnZEc4Z1ltVWdZU0JDZFdabVpYSkhaVzl0WlhSeWVTQnBiaUJIVEZSR1RHOWhaR1Z5WEc0Z0lDQWdZMjl1YzNRZ2NISnBiV2wwYVhabFZtVnlkR2xqWlhNZ1BTQm5aVzl0WlhSeWVTNXBibVJsZUNBL0lHZGxiMjFsZEhKNUxtbHVaR1Y0TG1OdmRXNTBJRG9nWjJWdmJXVjBjbmt1WVhSMGNtbGlkWFJsY3k1d2IzTnBkR2x2Ymk1amIzVnVkQ0F2SURNN1hHNGdJQ0FnWjJWdmJXVjBjbmt1WVdSa1IzSnZkWEFvTUN3Z2NISnBiV2wwYVhabFZtVnlkR2xqWlhNc0lEQXBPMXh1SUNBZ0lHZGxiMjFsZEhKNUxtRmtaRWR5YjNWd0tEQXNJSEJ5YVcxcGRHbDJaVlpsY25ScFkyVnpMQ0F4S1R0Y2JpQWdmVnh1WEc0Z0lIQnlhWFpoZEdVZ1gyRmtaRlJ2VFdGMFpYSnBZV3hUWlhRb2JXVnphRG9nVkVoU1JVVXVUV1Z6YUNrNklIWnZhV1FnZTF4dUlDQWdJR052Ym5OMElHMWhkR1Z5YVdGc1QzSk5ZWFJsY21saGJITWdQU0J0WlhOb0xtMWhkR1Z5YVdGc08xeHVJQ0FnSUdOdmJuTjBJRzFoZEdWeWFXRnNVMlYwSUQwZ2JtVjNJRk5sZER4VVNGSkZSUzVOWVhSbGNtbGhiRDRvS1R0Y2JseHVJQ0FnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0cxaGRHVnlhV0ZzVDNKTllYUmxjbWxoYkhNcEtTQjdYRzRnSUNBZ0lDQnRZWFJsY21saGJFOXlUV0YwWlhKcFlXeHpMbVp2Y2tWaFkyZ29LRzFoZEdWeWFXRnNLU0E5UGlCdFlYUmxjbWxoYkZObGRDNWhaR1FvYldGMFpYSnBZV3dwS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdiV0YwWlhKcFlXeFRaWFF1WVdSa0tHMWhkR1Z5YVdGc1QzSk5ZWFJsY21saGJITXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHWnZjaUFvWTI5dWMzUWdiV0YwWlhKcFlXd2diMllnYldGMFpYSnBZV3hUWlhRcElIdGNiaUFnSUNBZ0lHbG1JQ2h0WVhSbGNtbGhiQ0JwYm5OMFlXNWpaVzltSUUxVWIyOXVUV0YwWlhKcFlXd3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiVlJ2YjI1TllYUmxjbWxoYkZObGRDNWhaR1FvYldGMFpYSnBZV3dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhCeWFYWmhkR1VnWDNCaGNuTmxVbVZ1WkdWeVQzSmtaWElvWlhoMFpXNXphVzl1T2lCV01VMVViMjl1VTJOb1pXMWhMbFpTVFVOTllYUmxjbWxoYkhOTlZHOXZiaWs2SUc1MWJXSmxjaUI3WEc0Z0lDQWdMeThnZEhKaGJuTndZWEpsYm5SWGFYUm9XbGR5YVhSbElISmhibWRsY3lCbWNtOXRJREFnZEc4Z0t6bGNiaUFnSUNBdkx5QnRaWEpsSUhSeVlXNXpjR0Z5Wlc1MElISmhibWRsY3lCbWNtOXRJQzA1SUhSdklEQmNiaUFnSUNCamIyNXpkQ0JsYm1GaWJHVmtXbGR5YVhSbElEMGdaWGgwWlc1emFXOXVMblJ5WVc1emNHRnlaVzUwVjJsMGFGcFhjbWwwWlR0Y2JpQWdJQ0J5WlhSMWNtNGdLR1Z1WVdKc1pXUmFWM0pwZEdVZ1B5QXdJRG9nTVRrcElDc2dLR1Y0ZEdWdWMybHZiaTV5Wlc1a1pYSlJkV1YxWlU5bVpuTmxkRTUxYldKbGNpQS9QeUF3S1R0Y2JpQWdmVnh1ZlZ4dUlsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQmIwZEJPMEZCUTA4c1UwRkJVeXhUUVVGVExFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFWVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1UwRkJVeXhGUVVGRk8wRkJRemRFTEVsQlFVa3NVMEZCVXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFVkJRVVVzVDBGQlR5eExRVUZMTEZsQlFWa3NRMEZCUXl4SFFVRkhMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eFZRVUZWTEU5QlFVOHNSVUZCUlN4RlFVRkZMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZPMEZCUTJoSUxFbEJRVWtzVDBGQlR5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1QwRkJUeXhEUVVGRExFVkJRVVVzVlVGQlZTeFBRVUZQTEVWQlFVVXNUVUZCVFN4RlFVRkZPMEZCUXk5RUxGRkJRVkVzVTBGQlV5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlR0QlFVTnVSeXhSUVVGUkxGTkJRVk1zVVVGQlVTeERRVUZETEV0QlFVc3NSVUZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlR0QlFVTjBSeXhSUVVGUkxGTkJRVk1zU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4RlFVRkZMRTFCUVUwc1EwRkJReXhKUVVGSkxFZEJRVWNzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTXNSVUZCUlR0QlFVTjBTQ3hSUVVGUkxFbEJRVWtzUTBGQlF5eERRVUZETEZOQlFWTXNSMEZCUnl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUlVGQlJTeFZRVUZWTEVsQlFVa3NSVUZCUlN4RFFVRkRMRVZCUVVVc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU01UlN4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVOUU96czdPenM3UVVNeFNFRTdRVUZGUVRzN096dEJRVWxITzBGQlExVXNUVUZCUVN4elFrRkJjMElzUjBGQlJ6dEJRVU53UXpzN1FVRkZSenRCUVVOSUxFbEJRVUVzU1VGQlNTeEZRVUZGTEUxQlFVMDdRVUZGV2pzN1FVRkZSenRCUVVOSUxFbEJRVUVzVFVGQlRTeEZRVUZGTEZGQlFWRTdRVUZGYUVJN08wRkJSVWM3UVVGRFNDeEpRVUZCTEZsQlFWa3NSVUZCUlN4alFVRmpPMEZCUlRWQ096dEJRVVZITzBGQlEwZ3NTVUZCUVN4RlFVRkZMRVZCUVVVc1NVRkJTVHM3TzBGRE1VSldPMEZCUldFc1RVRkJRU3cyUWtGQk5rSXNSMEZCUnp0QlFVTXpReXhKUVVGQkxFbEJRVWtzUlVGQlJTeE5RVUZOTzBGQlExb3NTVUZCUVN4blFrRkJaMElzUlVGQlJTeHJRa0ZCYTBJN1FVRkRjRU1zU1VGQlFTeHBRa0ZCYVVJc1JVRkJSU3h0UWtGQmJVSTdPenRCUTBoNFF5eE5RVUZOTEhGQ1FVRnhRaXhIUVVFMlFqdEJRVU4wUkN4SlFVRkJMRWxCUVVrc1JVRkJSU3hGUVVGRk8wRkJRMUlzU1VGQlFTeEpRVUZKTEVWQlFVVXNUVUZCVFR0RFFVTmlMRU5CUVVNN1FVRkZSanM3T3pzN096czdRVUZSUnp0QlFVTkhMRk5CUVZVc2IwSkJRVzlDTEVOQlFVTXNUMEZCYzBJc1JVRkJRVHRKUVVONlJDeEpRVUZKTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hGUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVkQlFVY3NSVUZCUlR0UlFVTjJReXhQUVVGUExFOUJRVThzUTBGQlF5eFZRVUY1UWl4RFFVRkRPMEZCUXpGRExFdEJRVUU3UVVGQlRTeFRRVUZCTzBGQlEwd3NVVUZCUVN4UFFVRlBMSEZDUVVGeFFpeERRVUZGTEU5QlFXVXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRCUVVONlJDeExRVUZCTzBGQlEwZzdPMEZEZEVKQk8wRkJWVUU3T3pzN08wRkJTMGM3UVVGRFZTeE5RVUZCTEdGQlFXTXNVMEZCVVN4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGQk8wRkJORU55UkN4SlFVRkJMRWxCUVZjc1MwRkJTeXhIUVVGQk8wRkJRMlFzVVVGQlFTeFBRVUZQTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF6dExRVU4wUXp0SlFVTkVMRWxCUVZjc1MwRkJTeXhEUVVGRExFdEJRV3RDTEVWQlFVRTdVVUZEYWtNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJRenRMUVVOMlF6dEJRVVZFTEVsQlFVRXNTVUZCVnl4SFFVRkhMRWRCUVVFN1FVRkRXaXhSUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRE8wdEJRMmhETzBsQlEwUXNTVUZCVnl4SFFVRkhMRU5CUVVNc1MwRkJNa0lzUlVGQlFUdFJRVU40UXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRPMHRCUTJwRE8wRkJSVVFzU1VGQlFTeEpRVUZYTEZOQlFWTXNSMEZCUVR0QlFVTnNRaXhSUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRE8wdEJRM1JETzBsQlEwUXNTVUZCVnl4VFFVRlRMRU5CUVVNc1MwRkJNa0lzUlVGQlFUdFJRVU01UXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRPMHRCUTNaRE8wRkJSVVFzU1VGQlFTeEpRVUZYTEZkQlFWY3NSMEZCUVR0QlFVTndRaXhSUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRE8wdEJRM2hETzBsQlEwUXNTVUZCVnl4WFFVRlhMRU5CUVVNc1MwRkJiMElzUlVGQlFUdFJRVU42UXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRPMHRCUTNwRE8wRkJSVVFzU1VGQlFTeEpRVUZYTEZGQlFWRXNSMEZCUVR0QlFVTnFRaXhSUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRE8wdEJRM0pETzBsQlEwUXNTVUZCVnl4UlFVRlJMRU5CUVVNc1MwRkJhMElzUlVGQlFUdFJRVU53UXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRPMHRCUTNSRE8wRkJSVVFzU1VGQlFTeEpRVUZYTEdsQ1FVRnBRaXhIUVVGQk8wRkJRekZDTEZGQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRXRCUVVzc1EwRkJRenRMUVVNNVF6dEpRVU5FTEVsQlFWY3NhVUpCUVdsQ0xFTkJRVU1zUzBGQllTeEZRVUZCTzFGQlEzaERMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6dExRVU12UXp0QlFVVkVMRWxCUVVFc1NVRkJWeXhYUVVGWExFZEJRVUU3UVVGRGNFSXNVVUZCUVN4UFFVRlBMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXp0TFFVTjRRenRKUVVORUxFbEJRVmNzVjBGQlZ5eERRVUZETEV0QlFUSkNMRVZCUVVFN1VVRkRhRVFzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6dExRVU42UXp0QlFVVkVMRWxCUVVFc1NVRkJWeXhuUWtGQlowSXNSMEZCUVR0QlFVTjZRaXhSUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eExRVUZMTEVOQlFVTTdTMEZETjBNN1NVRkRSQ3hKUVVGWExHZENRVUZuUWl4RFFVRkRMRXRCUVd0Q0xFVkJRVUU3VVVGRE5VTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRE8wdEJRemxETzBGQlJVUXNTVUZCUVN4SlFVRlhMRzlDUVVGdlFpeEhRVUZCTzBGQlF6ZENMRkZCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFdEJRVXNzUTBGQlF6dExRVU5xUkR0SlFVTkVMRWxCUVZjc2IwSkJRVzlDTEVOQlFVTXNTMEZCTWtJc1JVRkJRVHRSUVVONlJDeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1MwRkRiRVE3UVVGRlJDeEpRVUZCTEVsQlFWY3NhMEpCUVd0Q0xFZEJRVUU3UVVGRE0wSXNVVUZCUVN4UFFVRlBMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1MwRkJTeXhEUVVGRE8wdEJReTlETzBsQlEwUXNTVUZCVnl4clFrRkJhMElzUTBGQlF5eExRVUZoTEVWQlFVRTdVVUZEZWtNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETzB0QlEyaEVPMEZCUlVRc1NVRkJRU3hKUVVGWExHMUNRVUZ0UWl4SFFVRkJPMEZCUXpWQ0xGRkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEV0QlFVc3NRMEZCUXp0TFFVTm9SRHRKUVVORUxFbEJRVmNzYlVKQlFXMUNMRU5CUVVNc1MwRkJNa0lzUlVGQlFUdFJRVU40UkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU03UzBGRGFrUTdRVUZGUkN4SlFVRkJMRWxCUVZjc2QwSkJRWGRDTEVkQlFVRTdRVUZEYWtNc1VVRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zUzBGQlN5eERRVUZETzB0QlEzSkVPMGxCUTBRc1NVRkJWeXgzUWtGQmQwSXNRMEZCUXl4TFFVRmhMRVZCUVVFN1VVRkRMME1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4M1FrRkJkMElzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRPMHRCUTNSRU8wRkJSVVFzU1VGQlFTeEpRVUZYTEd0Q1FVRnJRaXhIUVVGQk8wRkJRek5DTEZGQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRXRCUVVzc1EwRkJRenRMUVVNdlF6dEpRVU5FTEVsQlFWY3NhMEpCUVd0Q0xFTkJRVU1zUzBGQllTeEZRVUZCTzFGQlEzcERMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6dExRVU5vUkR0QlFVVkVMRWxCUVVFc1NVRkJWeXh2UWtGQmIwSXNSMEZCUVR0QlFVTTNRaXhSUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eExRVUZMTEVOQlFVTTdTMEZEYWtRN1NVRkRSQ3hKUVVGWExHOUNRVUZ2UWl4RFFVRkRMRXRCUVdFc1JVRkJRVHRSUVVNelF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1MwRkRiRVE3UVVGRlJDeEpRVUZCTEVsQlFWY3NXVUZCV1N4SFFVRkJPMEZCUTNKQ0xGRkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmxCUVZrc1EwRkJReXhMUVVGTExFTkJRVU03UzBGRGVrTTdTVUZEUkN4SlFVRlhMRmxCUVZrc1EwRkJReXhMUVVGclFpeEZRVUZCTzFGQlEzaERMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1MwRkRNVU03UVVGRlJDeEpRVUZCTEVsQlFWY3NZVUZCWVN4SFFVRkJPMEZCUTNSQ0xGRkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhMUVVGTExFTkJRVU03UzBGRE1VTTdTVUZEUkN4SlFVRlhMR0ZCUVdFc1EwRkJReXhMUVVFeVFpeEZRVUZCTzFGQlEyeEVMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1MwRkRNME03UVVGRlJDeEpRVUZCTEVsQlFWY3NkMEpCUVhkQ0xFZEJRVUU3UVVGRGFrTXNVVUZCUVN4UFFVRlBMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1MwRkJTeXhEUVVGRE8wdEJRM0pFTzBsQlEwUXNTVUZCVnl4M1FrRkJkMElzUTBGQlF5eExRVUZyUWl4RlFVRkJPMUZCUTNCRUxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXp0TFFVTjBSRHRCUVVWRUxFbEJRVUVzU1VGQlZ5eHJRa0ZCYTBJc1IwRkJRVHRCUVVNelFpeFJRVUZCTEU5QlFVOHNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4TFFVRkxMRU5CUVVNN1MwRkRMME03U1VGRFJDeEpRVUZYTEd0Q1FVRnJRaXhEUVVGRExFdEJRVEpDTEVWQlFVRTdVVUZEZGtRc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETzB0QlEyaEVPMEZCUlVRc1NVRkJRU3hKUVVGWExHOUNRVUZ2UWl4SFFVRkJPMEZCUXpkQ0xGRkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEV0QlFVc3NRMEZCUXp0TFFVTnFSRHRKUVVORUxFbEJRVmNzYjBKQlFXOUNMRU5CUVVNc1MwRkJZU3hGUVVGQk8xRkJRek5ETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJRenRMUVVOc1JEdEJRVVZFTEVsQlFVRXNTVUZCVnl3clFrRkJLMElzUjBGQlFUdEJRVU40UXl4UlFVRkJMRTlCUVU4c1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5d3JRa0ZCSzBJc1EwRkJReXhMUVVGTExFTkJRVU03UzBGRE5VUTdTVUZEUkN4SlFVRlhMQ3RDUVVFclFpeERRVUZETEV0QlFXRXNSVUZCUVR0UlFVTjBSQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEN0Q1FVRXJRaXhEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTTdTMEZETjBRN1FVRkZSQ3hKUVVGQkxFbEJRVmNzZFVKQlFYVkNMRWRCUVVFN1FVRkRhRU1zVVVGQlFTeFBRVUZQTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNTMEZCU3l4RFFVRkRPMHRCUTNCRU8wbEJRMFFzU1VGQlZ5eDFRa0ZCZFVJc1EwRkJReXhMUVVGaExFVkJRVUU3VVVGRE9VTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRE8wdEJRM0pFTzBGQlJVUXNTVUZCUVN4SlFVRlhMREpDUVVFeVFpeEhRVUZCTzBGQlEzQkRMRkZCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETERKQ1FVRXlRaXhEUVVGRExFdEJRVXNzUTBGQlF6dExRVU40UkR0SlFVTkVMRWxCUVZjc01rSkJRVEpDTEVOQlFVTXNTMEZCTWtJc1JVRkJRVHRSUVVOb1JTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMREpDUVVFeVFpeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1MwRkRla1E3UVVGRlJDeEpRVUZCTEVsQlFWY3NhMEpCUVd0Q0xFZEJRVUU3UVVGRE0wSXNVVUZCUVN4UFFVRlBMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1MwRkJTeXhEUVVGRE8wdEJReTlETzBsQlEwUXNTVUZCVnl4clFrRkJhMElzUTBGQlF5eExRVUZoTEVWQlFVRTdVVUZEZWtNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETzB0QlEyaEVPMEZCUlVRc1NVRkJRU3hKUVVGWExHdENRVUZyUWl4SFFVRkJPMEZCUXpOQ0xGRkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMR3RDUVVGclFpeERRVUZETEV0QlFVc3NRMEZCUXp0TFFVTXZRenRKUVVORUxFbEJRVmNzYTBKQlFXdENMRU5CUVVNc1MwRkJhMElzUlVGQlFUdFJRVU01UXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU03UzBGRGFFUTdRVUZGUkN4SlFVRkJMRWxCUVZjc2QwSkJRWGRDTEVkQlFVRTdRVUZEYWtNc1VVRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zUzBGQlN5eERRVUZETzB0QlEzSkVPMGxCUTBRc1NVRkJWeXgzUWtGQmQwSXNRMEZCUXl4TFFVRmhMRVZCUVVFN1VVRkRMME1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4M1FrRkJkMElzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRPMHRCUTNSRU8wRkJSVVFzU1VGQlFTeEpRVUZYTEhOQ1FVRnpRaXhIUVVGQk8wRkJReTlDTEZGQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRXRCUVVzc1EwRkJRenRMUVVOdVJEdEpRVU5FTEVsQlFWY3NjMEpCUVhOQ0xFTkJRVU1zUzBGQk1rSXNSVUZCUVR0UlFVTXpSQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTTdTMEZEY0VRN1FVRkZSQ3hKUVVGQkxFbEJRVmNzZDBKQlFYZENMRWRCUVVFN1FVRkRha01zVVVGQlFTeFBRVUZQTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNTMEZCU3l4RFFVRkRPMHRCUTNKRU8wbEJRMFFzU1VGQlZ5eDNRa0ZCZDBJc1EwRkJReXhMUVVGaExFVkJRVUU3VVVGREwwTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRE8wdEJRM1JFTzBGQlJVUXNTVUZCUVN4SlFVRlhMSGRDUVVGM1FpeEhRVUZCTzBGQlEycERMRkZCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEhkQ1FVRjNRaXhEUVVGRExFdEJRVXNzUTBGQlF6dExRVU55UkR0SlFVTkVMRWxCUVZjc2QwSkJRWGRDTEVOQlFVTXNTMEZCWVN4RlFVRkJPMUZCUXk5RExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXp0TFFVTjBSRHRCUVVWRUxFbEJRVUVzU1VGQlZ5eDNRa0ZCZDBJc1IwRkJRVHRCUVVOcVF5eFJRVUZCTEU5QlFVOHNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4TFFVRkxMRU5CUVVNN1MwRkRja1E3U1VGRFJDeEpRVUZYTEhkQ1FVRjNRaXhEUVVGRExFdEJRV0VzUlVGQlFUdFJRVU12UXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExIZENRVUYzUWl4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU03UzBGRGRFUTdRVUY1UWtRN096dEJRVWRITzBGQlEwZ3NTVUZCUVN4SlFVRlhMR2xDUVVGcFFpeEhRVUZCTzFGQlF6RkNMRTlCUVU4c1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRPMHRCUTJoRE8wbEJRMFFzU1VGQlZ5eHBRa0ZCYVVJc1EwRkJReXhMUVVGakxFVkJRVUU3UVVGRGVrTXNVVUZCUVN4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUldoRExGRkJRVUVzU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNN1MwRkRla0k3UVVGSlJEczdPenM3UVVGTFJ6dEJRVU5JTEVsQlFVRXNTVUZCU1N4aFFVRmhMRWRCUVVFN1VVRkRaaXhQUVVGUExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTTdTMEZETlVJN1FVRkZSRHM3T3pzN1FVRkxSenRKUVVOSUxFbEJRVWtzWVVGQllTeERRVUZETEVOQlFWVXNSVUZCUVR0QlFVTXhRaXhSUVVGQkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUlhoQ0xGRkJRVUVzU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNN1MwRkRla0k3UVVGSlJEczdPenM3UVVGTFJ6dEJRVU5JTEVsQlFVRXNTVUZCU1N4VFFVRlRMRWRCUVVFN1VVRkRXQ3hQUVVGUExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTTdTMEZEZUVJN1FVRkZSRHM3T3pzN1FVRkxSenRKUVVOSUxFbEJRVWtzVTBGQlV5eERRVUZETEVOQlFYbENMRVZCUVVFN1FVRkRja01zVVVGQlFTeEpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVWd1FpeFJRVUZCTEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRE8wdEJRM3BDTzBGQlNVUXNTVUZCUVN4SlFVRkpMR2RDUVVGblFpeEhRVUZCTzFGQlEyeENMRTlCUVU4c1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRPMHRCUXk5Q08wbEJRMFFzU1VGQlNTeG5Ra0ZCWjBJc1EwRkJReXhEUVVGblF5eEZRVUZCTzBGQlEyNUVMRkZCUVVFc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVVelFpeFJRVUZCTEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRE8wdEJRM3BDTzBGQlNVUXNTVUZCUVN4SlFVRkpMRk5CUVZNc1IwRkJRVHRSUVVOWUxFOUJRVThzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXp0TFFVTjRRanRKUVVORUxFbEJRVWtzVTBGQlV5eERRVUZETEVOQlFWVXNSVUZCUVR0QlFVTjBRaXhSUVVGQkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUlhCQ0xGRkJRVUVzU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNN1MwRkRla0k3UVVGRlJEczdRVUZGUnp0QlFVTklMRWxCUVVFc1NVRkJWeXhsUVVGbExFZEJRVUU3UVVGRGVFSXNVVUZCUVN4UFFVRlBMRWxCUVVrc1EwRkJRenRMUVVOaU8wRkJSVVFzU1VGQlFTeFhRVUZCTEVOQlFWa3NZVUZCYzBNc1JVRkJSU3hGUVVGQk8wRkJRMnhFTEZGQlFVRXNTMEZCU3l4RFFVRkRMRVZCUVVVc1dVRkJXU3hGUVVGRkxHTkJRV01zUlVGQlJTeERRVUZETEVOQlFVTTdVVUZzU0c1RExFbEJRVFpDTEVOQlFVRXNOa0pCUVVFc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRGNFTXNTVUZCTmtJc1EwRkJRU3cyUWtGQlFTeEhRVUZITEVkQlFVY3NRMEZCUXp0UlFVTndReXhKUVVFNFFpeERRVUZCTERoQ1FVRkJMRWRCUVVjc1IwRkJSeXhEUVVGRE8wRkJSVFZET3pzN1FVRkhSenRSUVVOSkxFbEJRVWNzUTBGQlFTeEhRVUZCTEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCUld4Q096czdPMEZCU1VjN1FVRkRTU3hSUVVGQkxFbEJRVUVzUTBGQlFTeGhRVUZoTEVkQlFVY3NTMEZCU3l4RFFVRkRMSEZDUVVGeFFpeERRVUZETzBGQlJXNUVPenM3UVVGSFJ6dFJRVU5MTEVsQlFXdENMRU5CUVVFc2EwSkJRVUVzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZsTVVJc1NVRkJZeXhEUVVGQkxHTkJRVUVzUjBGQlJ5eExRVUZMTEVOQlFVTTdRVUYzUW5aQ0xGRkJRVUVzU1VGQlFTeERRVUZCTEZWQlFWVXNSMEZCTWtJc2MwSkJRWE5DTEVOQlFVTXNTVUZCU1N4RFFVRkRPMEZCZDBKcVJTeFJRVUZCTEVsQlFVRXNRMEZCUVN4cFFrRkJhVUlzUjBGQmEwTXNOa0pCUVRaQ0xFTkJRVU1zU1VGQlNTeERRVUZETzFGQlYzUkdMRWxCUVZVc1EwRkJRU3hWUVVGQkxFZEJRVWNzUzBGQlN5eERRVUZET3p0UlFYTkNla0lzU1VGQlNTeFZRVUZWTEVOQlFVTXNjVUpCUVhGQ0xFVkJRVVU3UVVGRGNFTXNXVUZCUVN4VlFVRlZMRU5CUVVNc1ZVRkJWU3hIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU01UWl4VFFVRkJPMUZCUTBRc1QwRkJUeXhWUVVGVkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNN08wRkJSM2hETEZGQlFVRXNWVUZCVlN4RFFVRkRMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGRFSXNVVUZCUVN4VlFVRlZMRU5CUVVNc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU42UWl4UlFVRkJMRlZCUVZVc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZET3pzN1VVRkpNMElzU1VGQlNTeFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1JVRkJSU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVWQlFVVTdXVUZEY2tNc1ZVRkJhMElzUTBGQlF5eFJRVUZSTEVkQlFVa3NWVUZCYTBJc1EwRkJReXhSUVVGUkxFbEJRVWtzUzBGQlN5eERRVUZETzBGQlEzUkZMRk5CUVVFN096dFJRVWxFTEVsQlFVa3NVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFVkJRVVVzUlVGQlJTeERRVUZETEVkQlFVY3NSMEZCUnl4RlFVRkZPMWxCUTNKRExGVkJRV3RDTEVOQlFVTXNXVUZCV1N4SFFVRkpMRlZCUVd0Q0xFTkJRVU1zV1VGQldTeEpRVUZKTEV0QlFVc3NRMEZCUXp0WlFVTTFSU3hWUVVGclFpeERRVUZETEZsQlFWa3NSMEZCU1N4VlFVRnJRaXhEUVVGRExGbEJRVmtzU1VGQlNTeExRVUZMTEVOQlFVTTdRVUZET1VVc1UwRkJRVHM3VVVGSFJDeEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRXRCUVVzc1EwRkJReXhoUVVGaExFTkJRVU1zUzBGQlN5eERRVUZETzFsQlEzaERMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU1zVFVGQlRUdFpRVU40UWl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRExGTkJRVk03V1VGRE0wSXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJReXhYUVVGWE8xbEJRemRDTEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSenRaUVVOeVFpeExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTFCUVUwN1FVRkRlRUlzV1VGQlFUdEJRVU5GTEdkQ1FVRkJMRk5CUVZNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeEpRVUZKTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVTXNSVUZCUlR0blFrRkRjRVFzWTBGQll5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1MwRkJTeXhEUVVGRExFOUJRVThzUlVGQlJTeEZRVUZGTzBGQlF6bERMR2RDUVVGQkxGVkJRVlVzUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SFFVRkhMRVZCUVVVN1owSkJRekZDTEc5Q1FVRnZRaXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRk8wRkJRM0JFTEdkQ1FVRkJMR2RDUVVGblFpeEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRemxFTEdkQ1FVRkJMRzlDUVVGdlFpeEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSVHRuUWtGRGNrTXNLMEpCUVN0Q0xFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFVkJRVVU3UVVGREwwUXNaMEpCUVVFc2EwSkJRV3RDTEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1IwRkJSeXhGUVVGRk8wRkJRMnhETEdkQ1FVRkJMRzFDUVVGdFFpeEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSVHRuUWtGRGNFTXNPRUpCUVRoQ0xFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFVkJRVVU3UVVGRE9VUXNaMEpCUVVFc2QwSkJRWGRDTEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1IwRkJSeXhGUVVGRk8wRkJRM2hETEdkQ1FVRkJMR3RDUVVGclFpeEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWRCUVVjc1JVRkJSVHRCUVVOc1F5eG5Ra0ZCUVN4dlFrRkJiMElzUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SFFVRkhMRVZCUVVVN1FVRkRjRU1zWjBKQlFVRXNXVUZCV1N4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eEZRVUZGTzBGQlEzWkVMR2RDUVVGQkxHRkJRV0VzUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SlFVRkpMRVZCUVVVN1owSkJRemxDTEhkQ1FVRjNRaXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRk8wRkJRM2hFTEdkQ1FVRkJMSGRDUVVGM1FpeEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJReXhGUVVGRk8wRkJRMjVGTEdkQ1FVRkJMR3RDUVVGclFpeEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSVHRuUWtGRGJrTXNOa0pCUVRaQ0xFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFVkJRVVU3UVVGRE4wUXNaMEpCUVVFc2IwSkJRVzlDTEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1IwRkJSeXhGUVVGRk8wRkJRM0JETEdkQ1FVRkJMQ3RDUVVFclFpeEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWRCUVVjc1JVRkJSVHRCUVVNdlF5eG5Ra0ZCUVN4MVFrRkJkVUlzUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SFFVRkhMRVZCUVVVN1FVRkRka01zWjBKQlFVRXNVVUZCVVN4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eEZRVUZGTzBGQlEyNUVMR2RDUVVGQkxHbENRVUZwUWl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFZEJRVWNzUlVGQlJUdG5Ra0ZEYWtNc2MwSkJRWE5DTEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZGTEVWQlFVVTdRVUZEZEVRc1owSkJRVUVzTWtKQlFUSkNMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzU1VGQlNTeEZRVUZGTzJkQ1FVTTFReXh6UTBGQmMwTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlR0QlFVTjBSU3huUWtGQlFTeHJRa0ZCYTBJc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeEhRVUZITEVWQlFVVTdRVUZEYkVNc1owSkJRVUVzYTBKQlFXdENMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzU1VGQlNTeExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVTdRVUZETjBRc1owSkJRVUVzZDBKQlFYZENMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzUjBGQlJ5eEZRVUZGTzBGQlEzaERMR2RDUVVGQkxITkNRVUZ6UWl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUlVGQlJUdG5Ra0ZEZGtNc2FVTkJRV2xETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZGTEVWQlFVVTdRVUZEYWtVc1owSkJRVUVzZDBKQlFYZENMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzUjBGQlJ5eEZRVUZGTzBGQlEzaERMR2RDUVVGQkxIZENRVUYzUWl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFZEJRVWNzUlVGQlJUdEJRVU40UXl4blFrRkJRU3gzUWtGQmQwSXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hIUVVGSExFVkJRVVU3UVVGRGVrTXNZVUZCUVR0QlFVTkVMRmxCUVVFc1ZVRkJWU3hEUVVGRExGRkJRVkU3UVVGRGNFSXNVMEZCUVN4RFFVRkRMRU5CUVVNN08wRkJSMGdzVVVGQlFTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE96dFJRVWN6UWl4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVWQlFVVXNRMEZCUXpzN1FVRkhha01zVVVGQlFTeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFZEJRVWNzVFVGRE0wSTdXVUZEUlN4SFFVRkhMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhGUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZCTEVWQlFVY3NTMEZCU3l4RFFVRkJMRU5CUVVFc1JVRkJTU3hMUVVGTExFTkJRVUVzUTBGQlJTeERRVUZETzBGQlEzWkdMRmxCUVVFc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5d3lRa0ZCTWtJc2IwSkJRVzlDTEVOQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGQkxFTkJRVVVzUjBGQlJ5eEZRVUZGTzBGQlF5OUdMRmxCUVVFc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWp0clFrRkRja0lzYTBOQlFXdERMRzlDUVVGdlFpeERRVUZETEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eERRVUZGTEVOQlFVRTdRVUZEY2tZc2EwSkJRVVVzUlVGQlJUdEJRVU5PTEZsQlFVRXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeEhRVUZITEdkRFFVRm5ReXh2UWtGQmIwSXNRMEZCUXl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUVN4RFFVRkZMRWRCUVVjc1JVRkJSVHRCUVVNdlJ5eFRRVUZCTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJSV1FzVVVGQlFTeEpRVUZKTEVOQlFVTXNaVUZCWlN4SFFVRkhMRU5CUVVNc1RVRkJUU3hMUVVGSk8xbEJRMmhETEUxQlFVMHNZVUZCWVN4SFFVRkhMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUlc1RUxGbEJRVUVzVFVGQlRTeFBRVUZQTEVkQlExZ3NUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJUU3hOUVVGQkxFTkJRVUVzVFVGQlFTeERRVUZCTEUxQlFVRXNRMEZCUVN4TlFVRkJMRU5CUVVFc1JVRkJRU3hGUVVGQkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hEUVVGQkxFVkJRVXNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUnl4RFFVRkJPMEZCUXpWRUxHbENRVUZCTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNN1FVRkRia01zYVVKQlFVRXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCVnl4UlFVRkJMRVZCUVVFc1MwRkJTeXhEUVVGSkxFTkJRVUVzUlVGQlFTeExRVUZMTEVWQlFVVXNRMEZCUXp0QlFVTndSQ3hwUWtGQlFTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRE96dFpRVWQyUWl4TlFVRk5MRU5CUVVNc1dVRkJXU3hIUVVGSExFOUJRVThzUjBGQlJ5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRPMWxCUTNCRUxFMUJRVTBzUTBGQlF5eGpRVUZqTEVkQlFVY3NUMEZCVHl4SFFVRkhMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU03T3pzN1dVRk5lRVFzU1VGQlNTeGhRVUZoTEVkQlFVY3NSMEZCUnl4RlFVRkZPMEZCUTNaQ0xHZENRVUZCTEUxQlFVMHNRMEZCUXl4alFVRmpMRWRCUVVjc1RVRkJUU3hEUVVGRExHTkJRV01zUTBGQlF5eFBRVUZQTEVOQlFVTXNhVU5CUVdsRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZETjBZc1owSkJRVUVzVFVGQlRTeERRVUZETEdOQlFXTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1kwRkJZeXhEUVVGRExFOUJRVThzUTBGQlF5eHZRMEZCYjBNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU5xUnl4aFFVRkJPMEZCUTBnc1UwRkJReXhEUVVGRE8wdEJRMGc3UVVGRlJEczdPenRCUVVsSE8wRkJRMGtzU1VGQlFTeE5RVUZOTEVOQlFVTXNTMEZCWVN4RlFVRkJPMUZCUTNwQ0xFbEJRVWtzUTBGQlF5eDVRa0ZCZVVJc1JVRkJSU3hEUVVGRE8wRkJRMnBETEZGQlFVRXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMHRCUTJoRE8wRkJSVTBzU1VGQlFTeEpRVUZKTEVOQlFVTXNUVUZCV1N4RlFVRkJPMEZCUTNSQ0xGRkJRVUVzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenM3T3pzN096czdPMEZCVlc1Q0xGRkJRVUVzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRE8wRkJRM1JDTEZGQlFVRXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETzBGQlEyeERMRkZCUVVFc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRPMEZCUTNSRExGRkJRVUVzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhIUVVGSExFMUJRVTBzUTBGQlF5eHZRa0ZCYjBJc1EwRkJRenRCUVVONFJDeFJRVUZCTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUjBGQlJ5eE5RVUZOTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU03UVVGRGRFUXNVVUZCUVN4SlFVRkpMRU5CUVVNc1lVRkJZU3hIUVVGSExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTTdRVUZETVVNc1VVRkJRU3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRWRCUVVjc1RVRkJUU3hEUVVGRExHdENRVUZyUWl4RFFVRkRPMEZCUTNCRUxGRkJRVUVzU1VGQlNTeERRVUZETERKQ1FVRXlRaXhIUVVGSExFMUJRVTBzUTBGQlF5d3lRa0ZCTWtJc1EwRkJRenRCUVVOMFJTeFJRVUZCTEVsQlFVa3NRMEZCUXl4elFrRkJjMElzUjBGQlJ5eE5RVUZOTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU03TzBGQlJ6VkVMRkZCUVVFc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkRPMEZCUlRGRExGRkJRVUVzU1VGQlNTeERRVUZETERaQ1FVRTJRaXhIUVVGSExFMUJRVTBzUTBGQlF5dzJRa0ZCTmtJc1EwRkJRenRCUVVNeFJTeFJRVUZCTEVsQlFVa3NRMEZCUXl3MlFrRkJOa0lzUjBGQlJ5eE5RVUZOTEVOQlFVTXNOa0pCUVRaQ0xFTkJRVU03UVVGRE1VVXNVVUZCUVN4SlFVRkpMRU5CUVVNc09FSkJRVGhDTEVkQlFVY3NUVUZCVFN4RFFVRkRMRGhDUVVFNFFpeERRVUZETzBGQlJUVkZMRkZCUVVFc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4SFFVRkhMRTFCUVUwc1EwRkJReXhwUWtGQmFVSXNRMEZCUXp0QlFVVnNSQ3hSUVVGQkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NUVUZCVFN4RFFVRkRMR0ZCUVdFc1EwRkJRenRCUVVNeFF5eFJRVUZCTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF6dEJRVU5zUXl4UlFVRkJMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNSMEZCUnl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTTdRVUZGYUVRc1VVRkJRU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNN08wRkJSMnhETEZGQlFVRXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRmVFSXNVVUZCUVN4UFFVRlBMRWxCUVVrc1EwRkJRenRMUVVOaU8wRkJSVVE3T3pzN1FVRkpSenRCUVVOTExFbEJRVUVzYTBKQlFXdENMRU5CUVVNc1MwRkJZU3hGUVVGQk8wRkJRM1JETEZGQlFVRXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4TFFVRkxMRWxCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5dzJRa0ZCTmtJc1EwRkJRenRCUVVNelJpeFJRVUZCTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNTMEZCU3l4SlFVRkpMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zTmtKQlFUWkNMRU5CUVVNN1FVRkRNMFlzVVVGQlFTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMSGRDUVVGM1FpeERRVUZETEV0QlFVc3NTVUZCU1N4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExEaENRVUU0UWl4RFFVRkRPMEZCUlRWR0xGRkJRVUVzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhIUVVGSExFbEJRVWtzUTBGQlF6dExRVU5vUXp0QlFVVkVPenM3UVVGSFJ6dEpRVU5MTEhsQ1FVRjVRaXhIUVVGQk96czdPMUZCU1M5Q0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZET3p0QlFVY3pReXhSUVVGQkxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETzBGQlF6TkZMRkZCUVVFc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXp0QlFVTjJSaXhSUVVGQkxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZkQlFWY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRU5CUVVNN1FVRkRNMFlzVVVGQlFTeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4dlFrRkJiMElzUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMQ3RDUVVFclFpeERRVUZETEVOQlFVTTdRVUZETjBjc1VVRkJRU3hKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eHRRa0ZCYlVJc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETERoQ1FVRTRRaXhEUVVGRExFTkJRVU03UVVGRE0wY3NVVUZCUVN4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhoUVVGaExFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4M1FrRkJkMElzUTBGQlF5eERRVUZETzBGQlF5OUdMRkZCUVVFc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5dzJRa0ZCTmtJc1EwRkJReXhEUVVGRE8wRkJRM3BITEZGQlFVRXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVU4yUWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExESkNRVUV5UWl4RlFVTjZReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEhORFFVRnpReXhEUVVOeVJDeERRVUZETzBGQlEwWXNVVUZCUVN4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXh6UWtGQmMwSXNSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHbERRVUZwUXl4RFFVRkRMRU5CUVVNN08xRkJSMnBJTEUxQlFVMHNZVUZCWVN4SFFVRkhMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUlc1RUxFbEJRVWtzWVVGQllTeEpRVUZKTEVkQlFVY3NSVUZCUlR0WlFVTjRRaXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF6dEJRVU5vUkN4VFFVRkJPMEZCUlVRc1VVRkJRU3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRWRCUVVjc1NVRkJTU3hEUVVGRE8wdEJRMmhETzBGQlJVUTdPMEZCUlVjN1NVRkRTeXhuUWtGQlowSXNSMEZCUVR0UlFVTjBRaXhOUVVGTkxHRkJRV0VzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVVZ1UkN4UlFVRkJMRTFCUVUwc1YwRkJWeXhIUVVGSExFbEJRVWtzUTBGQlF5d3lRa0ZCTWtJc1MwRkJTeXhKUVVGSkxFTkJRVU03UVVGRE9VUXNVVUZCUVN4TlFVRk5MRmRCUVZjc1IwRkRaaXhKUVVGSkxFTkJRVU1zUjBGQlJ5eExRVUZMTEVsQlFVazdXVUZEYWtJc1NVRkJTU3hEUVVGRExGZEJRVmNzUzBGQlN5eEpRVUZKTzFsQlEzcENMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNTMEZCU3l4SlFVRkpPMWxCUTJ4RExFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1MwRkJTeXhKUVVGSk8xbEJRMnBETEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUzBGQlN5eEpRVUZKTzBGQlEyaERMRmxCUVVFc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4TFFVRkxMRWxCUVVrc1EwRkJRenRSUVVWMlF5eFBRVUZQT3pzN1FVRkhUQ3haUVVGQkxIZENRVUYzUWl4RlFVRkZMR0ZCUVdFN1dVRkZka01zVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4VlFVRlZPMWxCUTNoQ0xGbEJRVmtzUlVGQlJTeFhRVUZYTEVsQlFVa3NWMEZCVnp0QlFVTjRReXhaUVVGQkxIRkNRVUZ4UWl4RlFVRkZMRmRCUVZjc1NVRkJTU3hEUVVGRExGZEJRVmM3V1VGRGJFUXNaVUZCWlN4RlFVRkZMRWxCUVVrc1EwRkJReXhqUVVGak8wRkJRM0JETEZsQlFVRXNkMEpCUVhkQ0xFVkJRVVVzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhMUVVGTExFbEJRVWs3UVVGRE5VUXNXVUZCUVN4MVFrRkJkVUlzUlVGQlJTeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFdEJRVXNzU1VGQlNUdEJRVU14UkN4WlFVRkJMR2xDUVVGcFFpeEZRVUZGTEVsQlFVa3NRMEZCUXl4aFFVRmhMRXRCUVVzc1NVRkJTVHRCUVVNNVF5eFpRVUZCTEhOQ1FVRnpRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1MwRkJTeXhKUVVGSk8xbEJRM2hFTEN0Q1FVRXJRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVsQlFVa3NTVUZCU1N4RFFVRkRMREpDUVVFeVFpeExRVUZMTEVsQlFVazdRVUZETjBZc1dVRkJRU3d3UWtGQk1FSXNSVUZCUlN4SlFVRkpMRU5CUVVNc2MwSkJRWE5DTEV0QlFVc3NTVUZCU1R0QlFVTm9SU3haUVVGQkxHMUNRVUZ0UWl4RlFVRkZMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNTMEZCU3l4SlFVRkpPMEZCUTNKRUxGbEJRVUVzV1VGQldTeEZRVUZGTEVsQlFVa3NRMEZCUXl4VlFVRlZMRXRCUVVzc1VVRkJVVHRCUVVNeFF5eFpRVUZCTEd0Q1FVRnJRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eFZRVUZWTEV0QlFVc3NZMEZCWXp0QlFVTjBSQ3haUVVGQkxGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNWVUZCVlN4TFFVRkxMRWxCUVVrN1dVRkRiRU1zYlVKQlFXMUNMRVZCUVVVc1NVRkJTU3hEUVVGRExGVkJRVlVzU1VGQlNTeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFdEJRVXNzTmtKQlFUWkNMRU5CUVVNc1owSkJRV2RDTzFsQlEycElMRzlDUVVGdlFpeEZRVU5zUWl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hKUVVGSkxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1MwRkJTeXcyUWtGQk5rSXNRMEZCUXl4cFFrRkJhVUk3VTBGRGFFY3NRMEZCUXp0TFFVTklPMGxCUlU4c2IwSkJRVzlDTEVOQlFVTXNSMEZCZVVNc1JVRkJSU3hIUVVGclF5eEZRVUZCTzFGQlEzaEhMRWxCUVVrc1IwRkJSeXhEUVVGRExFdEJRVXNzUlVGQlJUdEJRVU5pTEZsQlFVRXNTVUZCU1N4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RlFVRkZPMEZCUXpsQ0xHZENRVUZCTEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1dVRkJXU3hGUVVGRkxFTkJRVU03UVVGRE1VSXNZVUZCUVR0WlFVVkVMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRGJFTXNVMEZCUVR0TFFVTkdPMEZCUTBZN08wRkROMjVDUkN4TlFVRk5MSEZDUVVGeFFpeEhRVUUyUWp0QlFVTjBSQ3hKUVVGQkxFVkJRVVVzUlVGQlJTeEpRVUZKTzBGQlExSXNTVUZCUVN4SlFVRkpMRVZCUVVVc1NVRkJTVHREUVVOWUxFTkJRVU03UVVGRlJqczdPenM3T3pzN08wRkJVMGM3UVVGRFlTeFRRVUZCTEc5Q1FVRnZRaXhEUVVGRExFOUJRWE5DTEVWQlFVVXNWVUZCZFVJc1JVRkJRVHRKUVVOc1JpeEpRVUZKTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hGUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVkQlFVY3NSVUZCUlR0QlFVTjJReXhSUVVGQkxFOUJRVThzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4RFFVRkRPMEZCUTJwRExFdEJRVUU3UVVGQlRTeFRRVUZCTzBGQlEwb3NVVUZCUVN4UFFVRmxMRU5CUVVNc1VVRkJVU3hIUVVGSExIRkNRVUZ4UWl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wRkJReTlFTEV0QlFVRTdRVUZEU0RzN1FVTnNRa0U3T3pzN1FVRkpSenROUVVOVkxHMURRVUZ0UXl4RFFVRkJPMEZCU3psRExFbEJRVUVzU1VGQlZ5eFBRVUZQTEVkQlFVRTdVVUZEYUVJc1QwRkJUeXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRMUVVOd1F6dEpRVVZFTEZkQlFXMUNMRU5CUVVFc1RVRkJhMElzUlVGQlJTeGpRVUYxUXl4RlFVRkJPMEZCUXpWRkxGRkJRVUVzU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkRkRUlzVVVGQlFTeEpRVUZKTEVOQlFVTXNaVUZCWlN4SFFVRkhMR05CUVdNc1EwRkJRenRCUVVOMFF5eFJRVUZCTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1JVRkJSU3hEUVVGRE8wdEJRM0pDTzBsQlJVMHNaVUZCWlN4RFFVRXdReXhIUVVGTkxFVkJRVVVzUzBGQmFVTXNSVUZCUVR0UlFVTjJSeXhKUVVGSkxFdEJRVXNzU1VGQlNTeEpRVUZKTEVWQlFVVTdRVUZEYWtJc1dVRkJRU3hKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJRenRCUVVOdVF5eFRRVUZCTzB0QlEwWTdRVUZGVFN4SlFVRkJMRmRCUVZjc1EwRkRhRUlzUjBGQlRTeEZRVU5PTEV0QlFUSkNMRVZCUXpOQ0xHMUNRVUUyUWl4RlFVRkJPMUZCUlRkQ0xFbEJRVWtzUzBGQlN5eEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTnFRaXhaUVVGQkxFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTXNVMEZCVXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJSUzlFTEZsQlFVRXNTVUZCU1N4dFFrRkJiVUlzUlVGQlJUdG5Ra0ZEZGtJc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4dFFrRkJiVUlzUlVGQlJTeERRVUZETzBGQlEycEVMR0ZCUVVFN1FVRkRSaXhUUVVGQk8wdEJRMFk3UVVGRldTeEpRVUZCTEdGQlFXRXNRMEZEZUVJc1IwRkJUU3hGUVVOT0xFOUJRWE5ETEVWQlEzUkRMR05CUVhWQ0xFVkJRVUU3TzBGQlJYWkNMRmxCUVVFc1RVRkJUU3hQUVVGUExFZEJRVWNzUTBGQlF5eE5RVUZYTEZOQlFVRXNRMEZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hEUVVGQkxFVkJRVUVzUzBGQlFTeERRVUZCTEVWQlFVRXNZVUZCUVR0blFrRkRNVUlzU1VGQlNTeFBRVUZQTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTI1Q0xHOUNRVUZCTEUxQlFVMHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhoUVVGaExFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNSVUZCUlN4SFFVRkhMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRmNrVXNiMEpCUVVFc1NVRkJTU3hqUVVGakxFVkJRVVU3ZDBKQlEyeENMRzlDUVVGdlFpeERRVUZETEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdRVUZEZWtRc2NVSkJRVUU3UVVGRFJpeHBRa0ZCUVR0aFFVTkdMRU5CUVVFc1IwRkJSeXhEUVVGRE8wRkJSVXdzV1VGQlFTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dEJRVVUzUWl4WlFVRkJMRTlCUVU4c1QwRkJUeXhEUVVGRE8xTkJRMmhDTEVOQlFVRXNRMEZCUVR0QlFVRkJMRXRCUVVFN1FVRkZXU3hKUVVGQkxHOUNRVUZ2UWl4RFFVTXZRaXhIUVVGTkxFVkJRMDRzV1VGQlowTXNSVUZEYUVNc1kwRkJkVUlzUlVGQlFUczdXVUZGZGtJc1QwRkJUeXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVkQlFVY3NSVUZCUlN4WlFVRlpMRWxCUVVrc1NVRkJTU3hIUVVGSExFVkJRVVVzUzBGQlN5eEZRVUZGTEZsQlFWa3NSVUZCUlN4SFFVRkhMRk5CUVZNc1JVRkJSU3hqUVVGakxFTkJRVU1zUTBGQlF6dFRRVU0xUnl4RFFVRkJMRU5CUVVFN1FVRkJRU3hMUVVGQk8wRkJRMFk3TzBGRE4wUkVPenRCUVVWSE8wRkJRMGdzVFVGQlRTeHpRa0ZCYzBJc1IwRkJSeXhKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8wMUJSUzlETEhsQ1FVRjVRaXhEUVVGQk8wRkJhME53UXl4SlFVRkJMRWxCUVZjc1NVRkJTU3hIUVVGQk8xRkJRMklzVDBGQlR5eDVRa0ZCZVVJc1EwRkJReXhqUVVGakxFTkJRVU03UzBGRGFrUTdTVUZGUkN4WFFVRnRRaXhEUVVGQkxFMUJRV3RDTEVWQlFVVXNUMEZCUVN4SFFVRTBReXhGUVVGRkxFVkJRVUU3TzBGQlEyNUdMRkZCUVVFc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTTdVVUZGY2tJc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4SFFVRkhMRU5CUVVFc1JVRkJRU3hIUVVGQkxFOUJRVThzUTBGQlF5eHBRa0ZCYVVJc1RVRkJTU3hKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hEUVVGRExFTkJRVU03VVVGRGVFUXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1IwRkJSeXhEUVVGQkxFVkJRVUVzUjBGQlFTeFBRVUZQTEVOQlFVTXNZVUZCWVN4TlFVRkpMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRXRCUVVzc1EwRkJRenRSUVVOd1JDeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRU5CUVVFc1JVRkJRU3hIUVVGQkxFOUJRVThzUTBGQlF5eFRRVUZUTEUxQlFVa3NTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNUVUZCVFN4RFFVRkRPMEZCUlRkRExGRkJRVUVzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhIUVVGSExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVOQlFVTTdTMEZEY0VNN1NVRkZXU3hWUVVGVkxFZEJRVUU3TzFsQlEzSkNMRWxCUVVrc1EwRkJReXhyUTBGQmEwTXNSVUZCUlN4RFFVRkRPMU5CUXpORExFTkJRVUVzUTBGQlFUdEJRVUZCTEV0QlFVRTdRVUZGV1N4SlFVRkJMRk5CUVZNc1EwRkJReXhKUVVGVkxFVkJRVUU3TzBGQlF5OUNMRmxCUVVFc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETzFOQlEzUkZMRU5CUVVFc1EwRkJRVHRCUVVGQkxFdEJRVUU3UVVGRlRTeEpRVUZCTEdWQlFXVXNRMEZCUXl4aFFVRnhRaXhGUVVGQk8xRkJRekZETEUxQlFVMHNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRCUVVNelJDeFJRVUZCTEVsQlFVa3NWMEZCVnl4RlFVRkZPMEZCUTJZc1dVRkJRU3hQUVVGUExHRkJRV0VzUTBGQlF6dEJRVU4wUWl4VFFVRkJPMEZCUlVRc1VVRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF6dExRVU5pTzBsQlJVMHNiMEpCUVc5Q0xFTkJRVU1zWVVGQmNVSXNSVUZCUlN4alFVRjFReXhGUVVGQk8xRkJRM2hHTEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRCUVVONlJDeFJRVUZCTEVsQlFVa3NVMEZCVXl4RlFVRkZPMWxCUTJJc1QwRkJUeXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1UwRkJVeXhGUVVGRkxHTkJRV01zUTBGQlF5eERRVUZETzBGQlF6bEVMRk5CUVVFN1FVRkZSQ3hSUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETzB0QlEySTdRVUZGV1N4SlFVRkJMRkZCUVZFc1EwRkJReXhUUVVGcFFpeEZRVUZCT3pzN1FVRkRja01zV1VGQlFTeE5RVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRek5DTEZsQlFVRXNUVUZCVFN4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRWGRDTEVOQlFVTTdXVUZGTjBNc1RVRkJUU3hQUVVGUExFZEJRVWNzUTBGQlFTeEZRVUZCTEVkQlFVRXNTVUZCU1N4RFFVRkRMRTFCUVUwc1RVRkJRU3hKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlJ5eFRRVUZUTEVOQlFVTXNRMEZCUXp0WlFVVjZReXhKUVVGSkxFOUJRVThzU1VGQlNTeEpRVUZKTEVWQlFVVTdRVUZEYmtJc1owSkJRVUVzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZEWWl4dlJFRkJiMFFzVTBGQlV5eERRVUZCTEc5RFFVRkJMRU5CUVhORExFTkJRM0JITEVOQlFVTTdRVUZEU0N4aFFVRkJPMEZCUlVRc1dVRkJRU3hOUVVGTkxHRkJRV0VzUjBGQlJ5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRPMWxCUlhwRExFMUJRVTBzVjBGQlZ5eEhRVUZITEUxQlFVMHNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dEJRVVZ5UkN4WlFVRkJMRWxCUVVrc1lVRkJZU3hEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVWQlFVVTdaMEpCUXpsQ0xFMUJRVTBzU1VGQlNTeEhRVUZITEZkQlFYbENMRU5CUVVNN1owSkJRM1pETEUxQlFVMHNZVUZCWVN4SFFVRkhMR0ZCUVdFc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTTdaMEpCUldoRUxFbEJRVWtzWVVGQllTeEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTjZRaXh2UWtGQlFTeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1JVRkJSU3hoUVVGaExFTkJRVU1zUTBGQlF6dEJRVU16UXl4cFFrRkJRVHRCUVVOR0xHRkJRVUU3UVVGQlRTeHBRa0ZCUVR0blFrRkRUQ3hOUVVGTkxFdEJRVXNzUjBGQlJ5eFhRVUV3UWl4RFFVRkRPMEZCUTNwRExHZENRVUZCTEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eGhRVUZoTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8yOUNRVU0zUXl4TlFVRk5MRWxCUVVrc1IwRkJSeXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCWlN4RFFVRkRPMjlDUVVNM1F5eE5RVUZOTEdGQlFXRXNSMEZCUnl4aFFVRmhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETzI5Q1FVVm9SQ3hKUVVGSkxHRkJRV0VzU1VGQlNTeEpRVUZKTEVWQlFVVTdRVUZEZWtJc2QwSkJRVUVzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4SlFVRkpMRVZCUVVVc1lVRkJZU3hEUVVGRExFTkJRVU03UVVGRE0wTXNjVUpCUVVFN1FVRkRSaXhwUWtGQlFUdEJRVU5HTEdGQlFVRTdRVUZGUkN4WlFVRkJMRTlCUVU4c1YwRkJWeXhEUVVGRE96dEJRVU53UWl4TFFVRkJPMEZCUlVRN096czdPMEZCUzBjN1NVRkRTeXhyUTBGQmEwTXNSMEZCUVR0QlFVTjRReXhSUVVGQkxFMUJRVTBzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkRNMElzVVVGQlFTeE5RVUZOTEVsQlFVa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1NVRkJkMElzUTBGQlF6dEJRVVUzUXl4UlFVRkJMRTFCUVUwc1dVRkJXU3hIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTTdRVUZEY0VNc1VVRkJRU3haUVVGWkxFdEJRVm9zU1VGQlFTeEpRVUZCTEZsQlFWa3NTMEZCV2l4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeFpRVUZaTEVOQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1YwRkJWeXhGUVVGRkxGTkJRVk1zUzBGQlNUczdXVUZETTBNc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzFsQlJYSkVMRWxCUVVrc1UwRkJVeXhMUVVGSkxFTkJRVUVzUlVGQlFTeEhRVUZCTEZkQlFWY3NRMEZCUXl4VlFVRlZMRTFCUVVjc1NVRkJRU3hKUVVGQkxFVkJRVUVzUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFTkJRVUVzY1VKQlFYRkNMRU5CUVVNc1EwRkJRU3hGUVVGRk8wRkJRMmhGTEdkQ1FVRkJMRTlCUVU4c1YwRkJWeXhEUVVGRExGVkJRVlVzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGRE8wRkJRM1JFTEdGQlFVRTdRVUZEU0N4VFFVRkRMRU5CUVVNc1EwRkJRenRMUVVOS08wRkJSVThzU1VGQlFTeHJRa0ZCYTBJc1EwRkJReXhoUVVGeFFpeEZRVUZCT3p0QlFVTTVReXhSUVVGQkxFMUJRVTBzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkRNMElzVVVGQlFTeE5RVUZOTEVsQlFVa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1NVRkJkMElzUTBGQlF6dFJRVVUzUXl4TlFVRk5MRmRCUVZjc1IwRkJSeXhEUVVGQkxFVkJRVUVzUjBGQlFTeEpRVUZKTEVOQlFVTXNVMEZCVXl4TlFVRkJMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGSExHRkJRV0VzUTBGQlF5eERRVUZETzFGQlJYQkVMRWxCUVVrc1YwRkJWeXhKUVVGSkxFbEJRVWtzUlVGQlJUdEJRVU4yUWl4WlFVRkJMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRMVlzZFVSQlFYVkVMR0ZCUVdFc1EwRkJRU3gzUTBGQlFTeERRVUV3UXl4RFFVTXZSeXhEUVVGRE8wRkJRMFlzV1VGQlFTeFBRVUZQTEZOQlFWTXNRMEZCUXp0QlFVTnNRaXhUUVVGQk8xRkJSVVFzVFVGQlRTeFRRVUZUTEVkQlFVY3NRMEZCUVN4RlFVRkJMRWRCUVVFc1YwRkJWeXhEUVVGRExGVkJRVlVzVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNRMEZCUnl4NVFrRkJlVUlzUTBGQlF5eGpRVUZqTEVOQlJYUkZMRU5CUVVNN1VVRkRaQ3hKUVVGSkxGTkJRVk1zU1VGQlNTeEpRVUZKTEVWQlFVVTdRVUZEY2tJc1dVRkJRU3hQUVVGUExGTkJRVk1zUTBGQlF6dEJRVU5zUWl4VFFVRkJPMEZCUlVRc1VVRkJRU3hOUVVGTkxGZEJRVmNzUjBGQlJ5eFRRVUZUTEVOQlFVTXNWMEZCVnl4RFFVRkRPMEZCUXpGRExGRkJRVUVzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFhRVUZYTEVOQlFVTXNSVUZCUlR0WlFVTTFReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVU5XTEVOQlFYTkRMRzFEUVVGQkxFVkJRVUVzZVVKQlFYbENMRU5CUVVNc1kwRkJZeXhEUVVGcFFpeGpRVUZCTEVWQlFVRXNWMEZCVnl4RFFVRkhMRU5CUVVFc1EwRkJRU3hEUVVNNVJ5eERRVUZETzBGQlEwWXNXVUZCUVN4UFFVRlBMRk5CUVZNc1EwRkJRenRCUVVOc1FpeFRRVUZCTzBGQlJVUXNVVUZCUVN4UFFVRlBMRk5CUVZNc1EwRkJRenRMUVVOc1FqdEpRVVZoTEhGQ1FVRnhRaXhEUVVOcVF5eFRRVUV5UXl4RlFVTXpReXhqUVVGMVF5eEZRVUZCT3pzN08xbEJSM1pETEU5QlFWRXNZMEZCZFVRc1EwRkJReXhUUVVGVExFTkJRVU03V1VGRE1VVXNUMEZCVVN4alFVRjFSQ3hEUVVGRExGTkJRVk1zUTBGQlF6dFpRVVV4UlN4TlFVRk5MRmxCUVZrc1IwRkJSeXhKUVVGSkxHMURRVUZ0UXl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzWTBGQll5eERRVUZETEVOQlFVTTdXVUZGTVVZc1dVRkJXU3hEUVVGRExHVkJRV1VzUTBGQlF5eDFRa0ZCZFVJc1JVRkJSU3hUUVVGVExFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1EwRkJRenRaUVVOMlJpeFpRVUZaTEVOQlFVTXNWMEZCVnl4RFFVRkRMR3RDUVVGclFpeEZRVUZGTEZOQlFWTXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETzFsQlEzcEZMRmxCUVZrc1EwRkJReXhoUVVGaExFTkJRVU1zYzBKQlFYTkNMRVZCUVVVc1UwRkJVeXhEUVVGRExHOUNRVUZ2UWl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRM3BHTEZsQlFWa3NRMEZCUXl4bFFVRmxMRU5CUVVNc2IwSkJRVzlDTEVWQlFVVXNVMEZCVXl4RFFVRkRMR3RDUVVGclFpeERRVUZETEVOQlFVTTdXVUZEYWtZc1dVRkJXU3hEUVVGRExHRkJRV0VzUTBGQlF5eHhRa0ZCY1VJc1JVRkJSU3hUUVVGVExFTkJRVU1zYlVKQlFXMUNMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGRrWXNXVUZCUVN4WlFVRlpMRU5CUVVNc1pVRkJaU3hEUVVGRExEQkNRVUV3UWl4RlFVRkZMRU5CUVVFc1JVRkJRU3hIUVVGQkxGTkJRVk1zUTBGQlF5eHRRa0ZCYlVJc1RVRkJRU3hKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0WlFVTXZSaXhaUVVGWkxFTkJRVU1zWlVGQlpTeERRVUZETEc5Q1FVRnZRaXhGUVVGRkxGTkJRVk1zUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8xbEJRMnBHTEZsQlFWa3NRMEZCUXl4bFFVRmxMRU5CUVVNc2MwSkJRWE5DTEVWQlFVVXNVMEZCVXl4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVOQlFVTTdXVUZEY2tZc1dVRkJXU3hEUVVGRExGZEJRVmNzUTBGQlF5eGpRVUZqTEVWQlFVVXNVMEZCVXl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8xbEJRMnBGTEZsQlFWa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1pVRkJaU3hGUVVGRkxGTkJRVk1zUTBGQlF5eGhRVUZoTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkRNMFVzV1VGQldTeERRVUZETEZkQlFWY3NRMEZCUXl3d1FrRkJNRUlzUlVGQlJTeFRRVUZUTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zUTBGQlF6dFpRVU42Uml4WlFVRlpMRU5CUVVNc1lVRkJZU3hEUVVGRExHOUNRVUZ2UWl4RlFVRkZMRk5CUVZNc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVOeVJpeFpRVUZaTEVOQlFVTXNaVUZCWlN4RFFVRkRMSE5DUVVGelFpeEZRVUZGTEZOQlFWTXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eERRVUZETzFsQlEzSkdMRmxCUVZrc1EwRkJReXhsUVVGbExFTkJRVU1zYVVOQlFXbERMRVZCUVVVc1UwRkJVeXhEUVVGRExDdENRVUVyUWl4RFFVRkRMRU5CUVVNN1dVRkRNMGNzV1VGQldTeERRVUZETEdWQlFXVXNRMEZCUXl4NVFrRkJlVUlzUlVGQlJTeFRRVUZUTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zUTBGQlF6dFpRVU16Uml4WlFVRlpMRU5CUVVNc1pVRkJaU3hEUVVGRExHdENRVUZyUWl4RlFVRkZMRk5CUVZNc1EwRkJReXhuUWtGQmFVUXNRMEZCUXl4RFFVRkRPMWxCUXpsSExGbEJRVmtzUTBGQlF5eGxRVUZsTEVOQlFVTXNiMEpCUVc5Q0xFVkJRVVVzVTBGQlV5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03V1VGRGFrWXNXVUZCV1N4RFFVRkRMR0ZCUVdFc1EwRkJReXcyUWtGQk5rSXNSVUZCUlN4VFFVRlRMRU5CUVVNc01rSkJRVEpDTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1dVRkRlRWNzV1VGQldTeERRVUZETEZkQlFWY3NRMEZCUXl4dlFrRkJiMElzUlVGQlJTeFRRVUZUTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF6dFpRVU0zUlN4WlFVRlpMRU5CUVVNc1pVRkJaU3hEUVVGRExEQkNRVUV3UWl4RlFVRkZMRk5CUVZNc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4RFFVRkRPMWxCUXpkR0xGbEJRVmtzUTBGQlF5eGhRVUZoTEVOQlFVTXNkMEpCUVhkQ0xFVkJRVVVzVTBGQlV5eERRVUZETEhOQ1FVRnpRaXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzFsQlF6bEdMRmxCUVZrc1EwRkJReXhsUVVGbExFTkJRVU1zSzBKQlFTdENMRVZCUVVVc1UwRkJVeXhEUVVGRExEWkNRVUUyUWl4RFFVRkRMRU5CUVVNN1dVRkRka2NzV1VGQldTeERRVUZETEdWQlFXVXNRMEZCUXl3clFrRkJLMElzUlVGQlJTeFRRVUZUTEVOQlFVTXNOa0pCUVRaQ0xFTkJRVU1zUTBGQlF6dFpRVU4yUnl4WlFVRlpMRU5CUVVNc1pVRkJaU3hEUVVGRExHZERRVUZuUXl4RlFVRkZMRk5CUVZNc1EwRkJReXc0UWtGQk9FSXNRMEZCUXl4RFFVRkRPMWxCUlhwSExGbEJRVmtzUTBGQlF5eGxRVUZsTEVOQlFVTXNaVUZCWlN4RlFVRkZMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6dFpRVU5zUlN4WlFVRlpMRU5CUVVNc1pVRkJaU3hEUVVGRExGZEJRVmNzUlVGQlJTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1dVRkZNVVFzVFVGQlRTeFpRVUZaTEVOQlFVTXNUMEZCVHl4RFFVRkRPenRCUVVNMVFpeExRVUZCTzBGQlJVUTdPenM3T3pzN08wRkJVVWM3U1VGRFN5eGxRVUZsTEVOQlFVTXNTVUZCWjBJc1JVRkJSU3hoUVVGeFFpeEZRVUZCTzFGQlF6ZEVMRTFCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6dEJRVU42UkN4UlFVRkJMRWxCUVVrc1UwRkJVeXhGUVVGRk8xbEJRMklzVFVGQlRTeFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMWxCUTNSRUxFbEJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXp0QlFVVjRSQ3haUVVGQkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVVUxUWl4WlFVRkJMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVVM1FpeFBRVUZQTzBGQlExSXNVMEZCUVR0TFFVTkdPMEZCUlVRN096czdRVUZKUnp0QlFVTkxMRWxCUVVFc1owSkJRV2RDTEVOQlFVTXNTVUZCWjBJc1JVRkJRVHM3T3pzN08wRkJUM1pETEZGQlFVRXNUVUZCVFN4bFFVRmxMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dEJRVU4wUXl4UlFVRkJMRWxCUVVrc1JVRkJSU3hsUVVGbExGbEJRVmtzWVVGQllTeERRVUZETEVWQlFVVTdXVUZETDBNc1QwRkJUenRCUVVOU0xGTkJRVUU3TzFGQlIwUXNTVUZCU1N4bFFVRmxMRU5CUVVNc1owSkJRV2RDTEV0QlFVc3NUVUZCVFN4SlFVRkpMR1ZCUVdVc1EwRkJReXhyUWtGQmEwSXNTVUZCU1N4SFFVRkhMRVZCUVVVN1dVRkROVVlzVDBGQlR6dEJRVU5TTEZOQlFVRTdPMUZCUjBRc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPenRCUVVkc1F5eFJRVUZCTEUxQlFVMHNaVUZCWlN4SFFVRkhMR1ZCUVdVc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dEJRVU5vUkN4UlFVRkJMR1ZCUVdVc1EwRkJReXhKUVVGSkxFbEJRVWtzV1VGQldTeERRVUZETzBGQlEzSkRMRkZCUVVFc1pVRkJaU3hEUVVGRExGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEYWtNc1VVRkJRU3hsUVVGbExFTkJRVU1zU1VGQlNTeEhRVUZITEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNN1FVRkRkRU1zVVVGQlFTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6czdRVUZIY0VNc1VVRkJRU3hOUVVGTkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMUZCUXk5Q0xFMUJRVTBzYVVKQlFXbENMRWRCUVVjc1VVRkJVU3hEUVVGRExFdEJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1IwRkJSeXhSUVVGUkxFTkJRVU1zVlVGQlZTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRM3BITEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhGUVVGRkxHbENRVUZwUWl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRek5ETEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhGUVVGRkxHbENRVUZwUWl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wdEJRelZETzBGQlJVOHNTVUZCUVN4cFFrRkJhVUlzUTBGQlF5eEpRVUZuUWl4RlFVRkJPMEZCUTNoRExGRkJRVUVzVFVGQlRTeHRRa0ZCYlVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzBGQlF6RkRMRkZCUVVFc1RVRkJUU3hYUVVGWExFZEJRVWNzU1VGQlNTeEhRVUZITEVWQlFXdENMRU5CUVVNN1FVRkZPVU1zVVVGQlFTeEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNSVUZCUlR0QlFVTjBReXhaUVVGQkxHMUNRVUZ0UWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExGRkJRVkVzUzBGQlN5eFhRVUZYTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGRFVXNVMEZCUVR0QlFVRk5MR0ZCUVVFN1FVRkRUQ3haUVVGQkxGZEJRVmNzUTBGQlF5eEhRVUZITEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF6dEJRVU4wUXl4VFFVRkJPMEZCUlVRc1VVRkJRU3hMUVVGTExFMUJRVTBzVVVGQlVTeEpRVUZKTEZkQlFWY3NSVUZCUlR0WlFVTnNReXhKUVVGSkxGRkJRVkVzV1VGQldTeGhRVUZoTEVWQlFVVTdRVUZEY2tNc1owSkJRVUVzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0QlFVTjBReXhoUVVGQk8wRkJRMFlzVTBGQlFUdExRVU5HTzBGQlJVOHNTVUZCUVN4cFFrRkJhVUlzUTBGQlF5eFRRVUV5UXl4RlFVRkJPenM3TzBGQlIyNUZMRkZCUVVFc1RVRkJUU3hoUVVGaExFZEJRVWNzVTBGQlV5eERRVUZETEhGQ1FVRnhRaXhEUVVGRE8xRkJRM1JFTEU5QlFVOHNRMEZCUXl4aFFVRmhMRWRCUVVjc1EwRkJReXhIUVVGSExFVkJRVVVzUzBGQlN5eE5RVUZCTEZOQlFWTXNRMEZCUXl4MVFrRkJkVUlzVFVGQlNTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeERRVUZETEVOQlFVTXNRMEZCUXp0TFFVTTFSVHM3UVVFdlVtRXNlVUpCUVdNc1EwRkJRU3hqUVVGQkxFZEJRVWNzYzBKQlFYTkNPenM3T3lKOVxuIiwiLyohXG4gKiBAcGl4aXYvdGhyZWUtdnJtLW1hdGVyaWFscy1oZHItZW1pc3NpdmUtbXVsdGlwbGllciB2Mi4wLjFcbiAqIFN1cHBvcnQgVlJNQ19oZHJfZW1pc3NpdmVNdWx0aXBsaWVyIGZvciBAcGl4aXYvdGhyZWUtdnJtXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDIwLTIwMjMgcGl4aXYgSW5jLlxuICogQHBpeGl2L3RocmVlLXZybS1tYXRlcmlhbHMtaGRyLWVtaXNzaXZlLW11bHRpcGxpZXIgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9waXhpdi90aHJlZS12cm0vYmxvYi9yZWxlYXNlL0xJQ0VOU0VcbiAqL1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcblxyXG5mdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XG5cbmNsYXNzIFZSTU1hdGVyaWFsc0hEUkVtaXNzaXZlTXVsdGlwbGllckxvYWRlclBsdWdpbiB7XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBWUk1NYXRlcmlhbHNIRFJFbWlzc2l2ZU11bHRpcGxpZXJMb2FkZXJQbHVnaW4uRVhURU5TSU9OX05BTUU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcnNlcikge1xuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICB9XG4gICAgZXh0ZW5kTWF0ZXJpYWxQYXJhbXMobWF0ZXJpYWxJbmRleCwgbWF0ZXJpYWxQYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IHRoaXMuX2dldEhEUkVtaXNzaXZlTXVsdGlwbGllckV4dGVuc2lvbihtYXRlcmlhbEluZGV4KTtcbiAgICAgICAgICAgIGlmIChleHRlbnNpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoaXMgZXh0ZW5zaW9uIGlzIGFyY2hpdmVkLiBFbWl0IHdhcm5pbmdcbiAgICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3ZybS1jL3ZybS1zcGVjaWZpY2F0aW9uL3B1bGwvMzc1XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1ZSTU1hdGVyaWFsc0hEUkVtaXNzaXZlTXVsdGlwbGllckxvYWRlclBsdWdpbjogYFZSTUNfbWF0ZXJpYWxzX2hkcl9lbWlzc2l2ZU11bHRpcGxpZXJgIGlzIGFyY2hpdmVkLiBVc2UgYEtIUl9tYXRlcmlhbHNfZW1pc3NpdmVfc3RyZW5ndGhgIGluc3RlYWQuJyk7XG4gICAgICAgICAgICBjb25zdCBlbWlzc2l2ZU11bHRpcGxpZXIgPSBleHRlbnNpb24uZW1pc3NpdmVNdWx0aXBsaWVyO1xuICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMuZW1pc3NpdmVJbnRlbnNpdHkgPSBlbWlzc2l2ZU11bHRpcGxpZXI7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZ2V0SERSRW1pc3NpdmVNdWx0aXBsaWVyRXh0ZW5zaW9uKG1hdGVyaWFsSW5kZXgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgcGFyc2VyID0gdGhpcy5wYXJzZXI7XG4gICAgICAgIGNvbnN0IGpzb24gPSBwYXJzZXIuanNvbjtcbiAgICAgICAgY29uc3QgbWF0ZXJpYWxEZWYgPSAoX2EgPSBqc29uLm1hdGVyaWFscykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW21hdGVyaWFsSW5kZXhdO1xuICAgICAgICBpZiAobWF0ZXJpYWxEZWYgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBWUk1NYXRlcmlhbHNIRFJFbWlzc2l2ZU11bHRpcGxpZXJMb2FkZXJQbHVnaW46IEF0dGVtcHQgdG8gdXNlIG1hdGVyaWFsc1ske21hdGVyaWFsSW5kZXh9XSBvZiBnbFRGIGJ1dCB0aGUgbWF0ZXJpYWwgZG9lc24ndCBleGlzdGApO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBleHRlbnNpb24gPSAoX2IgPSBtYXRlcmlhbERlZi5leHRlbnNpb25zKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbVlJNTWF0ZXJpYWxzSERSRW1pc3NpdmVNdWx0aXBsaWVyTG9hZGVyUGx1Z2luLkVYVEVOU0lPTl9OQU1FXTtcbiAgICAgICAgaWYgKGV4dGVuc2lvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBleHRlbnNpb247XG4gICAgfVxufVxuVlJNTWF0ZXJpYWxzSERSRW1pc3NpdmVNdWx0aXBsaWVyTG9hZGVyUGx1Z2luLkVYVEVOU0lPTl9OQU1FID0gJ1ZSTUNfbWF0ZXJpYWxzX2hkcl9lbWlzc2l2ZU11bHRpcGxpZXInO1xuXG5leHBvcnQgeyBWUk1NYXRlcmlhbHNIRFJFbWlzc2l2ZU11bHRpcGxpZXJMb2FkZXJQbHVnaW4gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEdoeVpXVXRkbkp0TFcxaGRHVnlhV0ZzY3kxb1pISXRaVzFwYzNOcGRtVXRiWFZzZEdsd2JHbGxjaTV0YjJSMWJHVXVhbk1pTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTkwYzJ4cFlpOTBjMnhwWWk1bGN6WXVhbk1pTENJdUxpOXpjbU12VmxKTlRXRjBaWEpwWVd4elNFUlNSVzFwYzNOcGRtVk5kV3gwYVhCc2FXVnlURzloWkdWeVVHeDFaMmx1TG5SeklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNjbHh1UTI5d2VYSnBaMmgwSUNoaktTQk5hV055YjNOdlpuUWdRMjl5Y0c5eVlYUnBiMjR1WEhKY2JseHlYRzVRWlhKdGFYTnphVzl1SUhSdklIVnpaU3dnWTI5d2VTd2diVzlrYVdaNUxDQmhibVF2YjNJZ1pHbHpkSEpwWW5WMFpTQjBhR2x6SUhOdlpuUjNZWEpsSUdadmNpQmhibmxjY2x4dWNIVnljRzl6WlNCM2FYUm9JRzl5SUhkcGRHaHZkWFFnWm1WbElHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xseHlYRzVjY2x4dVZFaEZJRk5QUmxSWFFWSkZJRWxUSUZCU1QxWkpSRVZFSUZ3aVFWTWdTVk5jSWlCQlRrUWdWRWhGSUVGVlZFaFBVaUJFU1ZORFRFRkpUVk1nUVV4TUlGZEJVbEpCVGxSSlJWTWdWMGxVU0Z4eVhHNVNSVWRCVWtRZ1ZFOGdWRWhKVXlCVFQwWlVWMEZTUlNCSlRrTk1WVVJKVGtjZ1FVeE1JRWxOVUV4SlJVUWdWMEZTVWtGT1ZFbEZVeUJQUmlCTlJWSkRTRUZPVkVGQ1NVeEpWRmxjY2x4dVFVNUVJRVpKVkU1RlUxTXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlNCQlZWUklUMUlnUWtVZ1RFbEJRa3hGSUVaUFVpQkJUbGtnVTFCRlEwbEJUQ3dnUkVsU1JVTlVMRnh5WEc1SlRrUkpVa1ZEVkN3Z1QxSWdRMDlPVTBWUlZVVk9WRWxCVENCRVFVMUJSMFZUSUU5U0lFRk9XU0JFUVUxQlIwVlRJRmRJUVZSVFQwVldSVklnVWtWVFZVeFVTVTVISUVaU1QwMWNjbHh1VEU5VFV5QlBSaUJWVTBVc0lFUkJWRUVnVDFJZ1VGSlBSa2xVVXl3Z1YwaEZWRWhGVWlCSlRpQkJUaUJCUTFSSlQwNGdUMFlnUTA5T1ZGSkJRMVFzSUU1RlIweEpSMFZPUTBVZ1QxSmNjbHh1VDFSSVJWSWdWRTlTVkVsUFZWTWdRVU5VU1U5T0xDQkJVa2xUU1U1SElFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZWVFJTQlBVbHh5WEc1UVJWSkdUMUpOUVU1RFJTQlBSaUJVU0VsVElGTlBSbFJYUVZKRkxseHlYRzRxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpQXFMMXh5WEc0dktpQm5iRzlpWVd3Z1VtVm1iR1ZqZEN3Z1VISnZiV2x6WlNBcUwxeHlYRzVjY2x4dWRtRnlJR1Y0ZEdWdVpGTjBZWFJwWTNNZ1BTQm1kVzVqZEdsdmJpaGtMQ0JpS1NCN1hISmNiaUFnSUNCbGVIUmxibVJUZEdGMGFXTnpJRDBnVDJKcVpXTjBMbk5sZEZCeWIzUnZkSGx3WlU5bUlIeDhYSEpjYmlBZ0lDQWdJQ0FnS0hzZ1gxOXdjbTkwYjE5Zk9pQmJYU0I5SUdsdWMzUmhibU5sYjJZZ1FYSnlZWGtnSmlZZ1puVnVZM1JwYjI0Z0tHUXNJR0lwSUhzZ1pDNWZYM0J5YjNSdlgxOGdQU0JpT3lCOUtTQjhmRnh5WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUNoa0xDQmlLU0I3SUdadmNpQW9kbUZ5SUhBZ2FXNGdZaWtnYVdZZ0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaGlMQ0J3S1NrZ1pGdHdYU0E5SUdKYmNGMDdJSDA3WEhKY2JpQWdJQ0J5WlhSMWNtNGdaWGgwWlc1a1UzUmhkR2xqY3loa0xDQmlLVHRjY2x4dWZUdGNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyVjRkR1Z1WkhNb1pDd2dZaWtnZTF4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCaUlDRTlQU0JjSW1aMWJtTjBhVzl1WENJZ0ppWWdZaUFoUFQwZ2JuVnNiQ2xjY2x4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lRMnhoYzNNZ1pYaDBaVzVrY3lCMllXeDFaU0JjSWlBcklGTjBjbWx1WnloaUtTQXJJRndpSUdseklHNXZkQ0JoSUdOdmJuTjBjblZqZEc5eUlHOXlJRzUxYkd4Y0lpazdYSEpjYmlBZ0lDQmxlSFJsYm1SVGRHRjBhV056S0dRc0lHSXBPMXh5WEc0Z0lDQWdablZ1WTNScGIyNGdYMThvS1NCN0lIUm9hWE11WTI5dWMzUnlkV04wYjNJZ1BTQmtPeUI5WEhKY2JpQWdJQ0JrTG5CeWIzUnZkSGx3WlNBOUlHSWdQVDA5SUc1MWJHd2dQeUJQWW1wbFkzUXVZM0psWVhSbEtHSXBJRG9nS0Y5ZkxuQnliM1J2ZEhsd1pTQTlJR0l1Y0hKdmRHOTBlWEJsTENCdVpYY2dYMThvS1NrN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQjJZWElnWDE5aGMzTnBaMjRnUFNCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNBZ0lGOWZZWE56YVdkdUlEMGdUMkpxWldOMExtRnpjMmxuYmlCOGZDQm1kVzVqZEdsdmJpQmZYMkZ6YzJsbmJpaDBLU0I3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2N5d2dhU0E5SURFc0lHNGdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9PeUJwSUR3Z2Jqc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhNZ1BTQmhjbWQxYldWdWRITmJhVjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSEFnYVc0Z2N5a2dhV1lnS0U5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNoekxDQndLU2tnZEZ0d1hTQTlJSE5iY0YwN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJRjlmWVhOemFXZHVMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYM0psYzNRb2N5d2daU2tnZTF4eVhHNGdJQ0FnZG1GeUlIUWdQU0I3ZlR0Y2NseHVJQ0FnSUdadmNpQW9kbUZ5SUhBZ2FXNGdjeWtnYVdZZ0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHpMQ0J3S1NBbUppQmxMbWx1WkdWNFQyWW9jQ2tnUENBd0tWeHlYRzRnSUNBZ0lDQWdJSFJiY0YwZ1BTQnpXM0JkTzF4eVhHNGdJQ0FnYVdZZ0tITWdJVDBnYm5Wc2JDQW1KaUIwZVhCbGIyWWdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjeUE5UFQwZ1hDSm1kVzVqZEdsdmJsd2lLVnh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0J3SUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N5aHpLVHNnYVNBOElIQXViR1Z1WjNSb095QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVXVhVzVrWlhoUFppaHdXMmxkS1NBOElEQWdKaVlnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzV3Y205d1pYSjBlVWx6Ulc1MWJXVnlZV0pzWlM1allXeHNLSE1zSUhCYmFWMHBLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEZ0d1cybGRYU0E5SUhOYmNGdHBYVjA3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUhRN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMlJsWTI5eVlYUmxLR1JsWTI5eVlYUnZjbk1zSUhSaGNtZGxkQ3dnYTJWNUxDQmtaWE5qS1NCN1hISmNiaUFnSUNCMllYSWdZeUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dzSUhJZ1BTQmpJRHdnTXlBL0lIUmhjbWRsZENBNklHUmxjMk1nUFQwOUlHNTFiR3dnUHlCa1pYTmpJRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaDBZWEpuWlhRc0lHdGxlU2tnT2lCa1pYTmpMQ0JrTzF4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCU1pXWnNaV04wSUQwOVBTQmNJbTlpYW1WamRGd2lJQ1ltSUhSNWNHVnZaaUJTWldac1pXTjBMbVJsWTI5eVlYUmxJRDA5UFNCY0ltWjFibU4wYVc5dVhDSXBJSElnUFNCU1pXWnNaV04wTG1SbFkyOXlZWFJsS0dSbFkyOXlZWFJ2Y25Nc0lIUmhjbWRsZEN3Z2EyVjVMQ0JrWlhOaktUdGNjbHh1SUNBZ0lHVnNjMlVnWm05eUlDaDJZWElnYVNBOUlHUmxZMjl5WVhSdmNuTXViR1Z1WjNSb0lDMGdNVHNnYVNBK1BTQXdPeUJwTFMwcElHbG1JQ2hrSUQwZ1pHVmpiM0poZEc5eWMxdHBYU2tnY2lBOUlDaGpJRHdnTXlBL0lHUW9jaWtnT2lCaklENGdNeUEvSUdRb2RHRnlaMlYwTENCclpYa3NJSElwSURvZ1pDaDBZWEpuWlhRc0lHdGxlU2twSUh4OElISTdYSEpjYmlBZ0lDQnlaWFIxY200Z1l5QStJRE1nSmlZZ2NpQW1KaUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHRnlaMlYwTENCclpYa3NJSElwTENCeU8xeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTl3WVhKaGJTaHdZWEpoYlVsdVpHVjRMQ0JrWldOdmNtRjBiM0lwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvZEdGeVoyVjBMQ0JyWlhrcElIc2daR1ZqYjNKaGRHOXlLSFJoY21kbGRDd2dhMlY1TENCd1lYSmhiVWx1WkdWNEtUc2dmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5bGMwUmxZMjl5WVhSbEtHTjBiM0lzSUdSbGMyTnlhWEIwYjNKSmJpd2daR1ZqYjNKaGRHOXljeXdnWTI5dWRHVjRkRWx1TENCcGJtbDBhV0ZzYVhwbGNuTXNJR1Y0ZEhKaFNXNXBkR2xoYkdsNlpYSnpLU0I3WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJoWTJObGNIUW9aaWtnZXlCcFppQW9aaUFoUFQwZ2RtOXBaQ0F3SUNZbUlIUjVjR1Z2WmlCbUlDRTlQU0JjSW1aMWJtTjBhVzl1WENJcElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pHZFc1amRHbHZiaUJsZUhCbFkzUmxaRndpS1RzZ2NtVjBkWEp1SUdZN0lIMWNjbHh1SUNBZ0lIWmhjaUJyYVc1a0lEMGdZMjl1ZEdWNGRFbHVMbXRwYm1Rc0lHdGxlU0E5SUd0cGJtUWdQVDA5SUZ3aVoyVjBkR1Z5WENJZ1B5QmNJbWRsZEZ3aUlEb2dhMmx1WkNBOVBUMGdYQ0p6WlhSMFpYSmNJaUEvSUZ3aWMyVjBYQ0lnT2lCY0luWmhiSFZsWENJN1hISmNiaUFnSUNCMllYSWdkR0Z5WjJWMElEMGdJV1JsYzJOeWFYQjBiM0pKYmlBbUppQmpkRzl5SUQ4Z1kyOXVkR1Y0ZEVsdVcxd2ljM1JoZEdsalhDSmRJRDhnWTNSdmNpQTZJR04wYjNJdWNISnZkRzkwZVhCbElEb2diblZzYkR0Y2NseHVJQ0FnSUhaaGNpQmtaWE5qY21sd2RHOXlJRDBnWkdWelkzSnBjSFJ2Y2tsdUlIeDhJQ2gwWVhKblpYUWdQeUJQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtIUmhjbWRsZEN3Z1kyOXVkR1Y0ZEVsdUxtNWhiV1VwSURvZ2UzMHBPMXh5WEc0Z0lDQWdkbUZ5SUY4c0lHUnZibVVnUFNCbVlXeHpaVHRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNCa1pXTnZjbUYwYjNKekxteGxibWQwYUNBdElERTdJR2tnUGowZ01Ec2dhUzB0S1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdOdmJuUmxlSFFnUFNCN2ZUdGNjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJ3SUdsdUlHTnZiblJsZUhSSmJpa2dZMjl1ZEdWNGRGdHdYU0E5SUhBZ1BUMDlJRndpWVdOalpYTnpYQ0lnUHlCN2ZTQTZJR052Ym5SbGVIUkpibHR3WFR0Y2NseHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQndJR2x1SUdOdmJuUmxlSFJKYmk1aFkyTmxjM01wSUdOdmJuUmxlSFF1WVdOalpYTnpXM0JkSUQwZ1kyOXVkR1Y0ZEVsdUxtRmpZMlZ6YzF0d1hUdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1MFpYaDBMbUZrWkVsdWFYUnBZV3hwZW1WeUlEMGdablZ1WTNScGIyNGdLR1lwSUhzZ2FXWWdLR1J2Ym1VcElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pEWVc1dWIzUWdZV1JrSUdsdWFYUnBZV3hwZW1WeWN5QmhablJsY2lCa1pXTnZjbUYwYVc5dUlHaGhjeUJqYjIxd2JHVjBaV1JjSWlrN0lHVjRkSEpoU1c1cGRHbGhiR2w2WlhKekxuQjFjMmdvWVdOalpYQjBLR1lnZkh3Z2JuVnNiQ2twT3lCOU8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYTjFiSFFnUFNBb01Dd2daR1ZqYjNKaGRHOXljMXRwWFNrb2EybHVaQ0E5UFQwZ1hDSmhZMk5sYzNOdmNsd2lJRDhnZXlCblpYUTZJR1JsYzJOeWFYQjBiM0l1WjJWMExDQnpaWFE2SUdSbGMyTnlhWEIwYjNJdWMyVjBJSDBnT2lCa1pYTmpjbWx3ZEc5eVcydGxlVjBzSUdOdmJuUmxlSFFwTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hyYVc1a0lEMDlQU0JjSW1GalkyVnpjMjl5WENJcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDQTlQVDBnZG05cFpDQXdLU0JqYjI1MGFXNTFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkQ0E5UFQwZ2JuVnNiQ0I4ZkNCMGVYQmxiMllnY21WemRXeDBJQ0U5UFNCY0ltOWlhbVZqZEZ3aUtTQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpVDJKcVpXTjBJR1Y0Y0dWamRHVmtYQ0lwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1h5QTlJR0ZqWTJWd2RDaHlaWE4xYkhRdVoyVjBLU2tnWkdWelkzSnBjSFJ2Y2k1blpYUWdQU0JmTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1h5QTlJR0ZqWTJWd2RDaHlaWE4xYkhRdWMyVjBLU2tnWkdWelkzSnBjSFJ2Y2k1elpYUWdQU0JmTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1h5QTlJR0ZqWTJWd2RDaHlaWE4xYkhRdWFXNXBkQ2twSUdsdWFYUnBZV3hwZW1WeWN5NXdkWE5vS0Y4cE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCbGJITmxJR2xtSUNoZklEMGdZV05qWlhCMEtISmxjM1ZzZENrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3RwYm1RZ1BUMDlJRndpWm1sbGJHUmNJaWtnYVc1cGRHbGhiR2w2WlhKekxuQjFjMmdvWHlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdaR1Z6WTNKcGNIUnZjbHRyWlhsZElEMGdYenRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnSUNCcFppQW9kR0Z5WjJWMEtTQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEdGeVoyVjBMQ0JqYjI1MFpYaDBTVzR1Ym1GdFpTd2daR1Z6WTNKcGNIUnZjaWs3WEhKY2JpQWdJQ0JrYjI1bElEMGdkSEoxWlR0Y2NseHVmVHRjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYM0oxYmtsdWFYUnBZV3hwZW1WeWN5aDBhR2x6UVhKbkxDQnBibWwwYVdGc2FYcGxjbk1zSUhaaGJIVmxLU0I3WEhKY2JpQWdJQ0IyWVhJZ2RYTmxWbUZzZFdVZ1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNanRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYVc1cGRHbGhiR2w2WlhKekxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCMWMyVldZV3gxWlNBL0lHbHVhWFJwWVd4cGVtVnljMXRwWFM1allXeHNLSFJvYVhOQmNtY3NJSFpoYkhWbEtTQTZJR2x1YVhScFlXeHBlbVZ5YzF0cFhTNWpZV3hzS0hSb2FYTkJjbWNwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJSFZ6WlZaaGJIVmxJRDhnZG1Gc2RXVWdPaUIyYjJsa0lEQTdYSEpjYm4wN1hISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5d2NtOXdTMlY1S0hncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGVYQmxiMllnZUNBOVBUMGdYQ0p6ZVcxaWIyeGNJaUEvSUhnZ09pQmNJbHdpTG1OdmJtTmhkQ2g0S1R0Y2NseHVmVHRjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYM05sZEVaMWJtTjBhVzl1VG1GdFpTaG1MQ0J1WVcxbExDQndjbVZtYVhncElIdGNjbHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdibUZ0WlNBOVBUMGdYQ0p6ZVcxaWIyeGNJaWtnYm1GdFpTQTlJRzVoYldVdVpHVnpZM0pwY0hScGIyNGdQeUJjSWx0Y0lpNWpiMjVqWVhRb2JtRnRaUzVrWlhOamNtbHdkR2x2Yml3Z1hDSmRYQ0lwSURvZ1hDSmNJanRjY2x4dUlDQWdJSEpsZEhWeWJpQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWml3Z1hDSnVZVzFsWENJc0lIc2dZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMQ0IyWVd4MVpUb2djSEpsWm1sNElEOGdYQ0pjSWk1amIyNWpZWFFvY0hKbFptbDRMQ0JjSWlCY0lpd2dibUZ0WlNrZ09pQnVZVzFsSUgwcE8xeHlYRzU5TzF4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmYldWMFlXUmhkR0VvYldWMFlXUmhkR0ZMWlhrc0lHMWxkR0ZrWVhSaFZtRnNkV1VwSUh0Y2NseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1VtVm1iR1ZqZENBOVBUMGdYQ0p2WW1wbFkzUmNJaUFtSmlCMGVYQmxiMllnVW1WbWJHVmpkQzV0WlhSaFpHRjBZU0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lLU0J5WlhSMWNtNGdVbVZtYkdWamRDNXRaWFJoWkdGMFlTaHRaWFJoWkdGMFlVdGxlU3dnYldWMFlXUmhkR0ZXWVd4MVpTazdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJGM1lXbDBaWElvZEdocGMwRnlaeXdnWDJGeVozVnRaVzUwY3l3Z1VDd2daMlZ1WlhKaGRHOXlLU0I3WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJoWkc5d2RDaDJZV3gxWlNrZ2V5QnlaWFIxY200Z2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCUUlEOGdkbUZzZFdVZ09pQnVaWGNnVUNobWRXNWpkR2x2YmlBb2NtVnpiMngyWlNrZ2V5QnlaWE52YkhabEtIWmhiSFZsS1RzZ2ZTazdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnS0ZBZ2ZId2dLRkFnUFNCUWNtOXRhWE5sS1Nrb1puVnVZM1JwYjI0Z0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHlYRzRnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR1oxYkdacGJHeGxaQ2gyWVd4MVpTa2dleUIwY25rZ2V5QnpkR1Z3S0dkbGJtVnlZWFJ2Y2k1dVpYaDBLSFpoYkhWbEtTazdJSDBnWTJGMFkyZ2dLR1VwSUhzZ2NtVnFaV04wS0dVcE95QjlJSDFjY2x4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCeVpXcGxZM1JsWkNoMllXeDFaU2tnZXlCMGNua2dleUJ6ZEdWd0tHZGxibVZ5WVhSdmNsdGNJblJvY205M1hDSmRLSFpoYkhWbEtTazdJSDBnWTJGMFkyZ2dLR1VwSUhzZ2NtVnFaV04wS0dVcE95QjlJSDFjY2x4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCemRHVndLSEpsYzNWc2RDa2dleUJ5WlhOMWJIUXVaRzl1WlNBL0lISmxjMjlzZG1Vb2NtVnpkV3gwTG5aaGJIVmxLU0E2SUdGa2IzQjBLSEpsYzNWc2RDNTJZV3gxWlNrdWRHaGxiaWhtZFd4bWFXeHNaV1FzSUhKbGFtVmpkR1ZrS1RzZ2ZWeHlYRzRnSUNBZ0lDQWdJSE4wWlhBb0tHZGxibVZ5WVhSdmNpQTlJR2RsYm1WeVlYUnZjaTVoY0hCc2VTaDBhR2x6UVhKbkxDQmZZWEpuZFcxbGJuUnpJSHg4SUZ0ZEtTa3VibVY0ZENncEtUdGNjbHh1SUNBZ0lIMHBPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5blpXNWxjbUYwYjNJb2RHaHBjMEZ5Wnl3Z1ltOWtlU2tnZTF4eVhHNGdJQ0FnZG1GeUlGOGdQU0I3SUd4aFltVnNPaUF3TENCelpXNTBPaUJtZFc1amRHbHZiaWdwSUhzZ2FXWWdLSFJiTUYwZ0ppQXhLU0IwYUhKdmR5QjBXekZkT3lCeVpYUjFjbTRnZEZzeFhUc2dmU3dnZEhKNWN6b2dXMTBzSUc5d2N6b2dXMTBnZlN3Z1ppd2dlU3dnZEN3Z1p6dGNjbHh1SUNBZ0lISmxkSFZ5YmlCbklEMGdleUJ1WlhoME9pQjJaWEppS0RBcExDQmNJblJvY205M1hDSTZJSFpsY21Jb01Ta3NJRndpY21WMGRYSnVYQ0k2SUhabGNtSW9NaWtnZlN3Z2RIbHdaVzltSUZONWJXSnZiQ0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJQ1ltSUNoblcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwZ1BTQm1kVzVqZEdsdmJpZ3BJSHNnY21WMGRYSnVJSFJvYVhNN0lIMHBMQ0JuTzF4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnZG1WeVlpaHVLU0I3SUhKbGRIVnliaUJtZFc1amRHbHZiaUFvZGlrZ2V5QnlaWFIxY200Z2MzUmxjQ2hiYml3Z2RsMHBPeUI5T3lCOVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCemRHVndLRzl3S1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0dZcElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pIWlc1bGNtRjBiM0lnYVhNZ1lXeHlaV0ZrZVNCbGVHVmpkWFJwYm1jdVhDSXBPMXh5WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2huSUNZbUlDaG5JRDBnTUN3Z2IzQmJNRjBnSmlZZ0tGOGdQU0F3S1Nrc0lGOHBJSFJ5ZVNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1JRDBnTVN3Z2VTQW1KaUFvZENBOUlHOXdXekJkSUNZZ01pQS9JSGxiWENKeVpYUjFjbTVjSWwwZ09pQnZjRnN3WFNBL0lIbGJYQ0owYUhKdmQxd2lYU0I4ZkNBb0tIUWdQU0I1VzF3aWNtVjBkWEp1WENKZEtTQW1KaUIwTG1OaGJHd29lU2tzSURBcElEb2dlUzV1WlhoMEtTQW1KaUFoS0hRZ1BTQjBMbU5oYkd3b2VTd2diM0JiTVYwcEtTNWtiMjVsS1NCeVpYUjFjbTRnZER0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIa2dQU0F3TENCMEtTQnZjQ0E5SUZ0dmNGc3dYU0FtSURJc0lIUXVkbUZzZFdWZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdnS0c5d1d6QmRLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJREE2SUdOaGMyVWdNVG9nZENBOUlHOXdPeUJpY21WaGF6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ05Eb2dYeTVzWVdKbGJDc3JPeUJ5WlhSMWNtNGdleUIyWVd4MVpUb2diM0JiTVYwc0lHUnZibVU2SUdaaGJITmxJSDA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRFU2SUY4dWJHRmlaV3dyS3pzZ2VTQTlJRzl3V3pGZE95QnZjQ0E5SUZzd1hUc2dZMjl1ZEdsdWRXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElEYzZJRzl3SUQwZ1h5NXZjSE11Y0c5d0tDazdJRjh1ZEhKNWN5NXdiM0FvS1RzZ1kyOXVkR2x1ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9seHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hLSFFnUFNCZkxuUnllWE1zSUhRZ1BTQjBMbXhsYm1kMGFDQStJREFnSmlZZ2RGdDBMbXhsYm1kMGFDQXRJREZkS1NBbUppQW9iM0JiTUYwZ1BUMDlJRFlnZkh3Z2IzQmJNRjBnUFQwOUlESXBLU0I3SUY4Z1BTQXdPeUJqYjI1MGFXNTFaVHNnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodmNGc3dYU0E5UFQwZ015QW1KaUFvSVhRZ2ZId2dLRzl3V3pGZElENGdkRnN3WFNBbUppQnZjRnN4WFNBOElIUmJNMTBwS1NrZ2V5QmZMbXhoWW1Wc0lEMGdiM0JiTVYwN0lHSnlaV0ZyT3lCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOXdXekJkSUQwOVBTQTJJQ1ltSUY4dWJHRmlaV3dnUENCMFd6RmRLU0I3SUY4dWJHRmlaV3dnUFNCMFd6RmRPeUIwSUQwZ2IzQTdJR0p5WldGck95QjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFFnSmlZZ1h5NXNZV0psYkNBOElIUmJNbDBwSUhzZ1h5NXNZV0psYkNBOUlIUmJNbDA3SUY4dWIzQnpMbkIxYzJnb2IzQXBPeUJpY21WaGF6c2dmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwV3pKZEtTQmZMbTl3Y3k1d2IzQW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZMblJ5ZVhNdWNHOXdLQ2s3SUdOdmJuUnBiblZsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzl3SUQwZ1ltOWtlUzVqWVd4c0tIUm9hWE5CY21jc0lGOHBPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIc2diM0FnUFNCYk5pd2daVjA3SUhrZ1BTQXdPeUI5SUdacGJtRnNiSGtnZXlCbUlEMGdkQ0E5SURBN0lIMWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2IzQmJNRjBnSmlBMUtTQjBhSEp2ZHlCdmNGc3hYVHNnY21WMGRYSnVJSHNnZG1Gc2RXVTZJRzl3V3pCZElEOGdiM0JiTVYwZ09pQjJiMmxrSURBc0lHUnZibVU2SUhSeWRXVWdmVHRjY2x4dUlDQWdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUhaaGNpQmZYMk55WldGMFpVSnBibVJwYm1jZ1BTQlBZbXBsWTNRdVkzSmxZWFJsSUQ4Z0tHWjFibU4wYVc5dUtHOHNJRzBzSUdzc0lHc3lLU0I3WEhKY2JpQWdJQ0JwWmlBb2F6SWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2F6SWdQU0JyTzF4eVhHNGdJQ0FnZG1GeUlHUmxjMk1nUFNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLRzBzSUdzcE8xeHlYRzRnSUNBZ2FXWWdLQ0ZrWlhOaklIeDhJQ2hjSW1kbGRGd2lJR2x1SUdSbGMyTWdQeUFoYlM1ZlgyVnpUVzlrZFd4bElEb2daR1Z6WXk1M2NtbDBZV0pzWlNCOGZDQmtaWE5qTG1OdmJtWnBaM1Z5WVdKc1pTa3BJSHRjY2x4dUlDQWdJQ0FnSUNCa1pYTmpJRDBnZXlCbGJuVnRaWEpoWW14bE9pQjBjblZsTENCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZXlCeVpYUjFjbTRnYlZ0clhUc2dmU0I5TzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHOHNJR3N5TENCa1pYTmpLVHRjY2x4dWZTa2dPaUFvWm5WdVkzUnBiMjRvYnl3Z2JTd2dheXdnYXpJcElIdGNjbHh1SUNBZ0lHbG1JQ2hyTWlBOVBUMGdkVzVrWldacGJtVmtLU0JyTWlBOUlHczdYSEpjYmlBZ0lDQnZXMnN5WFNBOUlHMWJhMTA3WEhKY2JuMHBPMXh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZaWGh3YjNKMFUzUmhjaWh0TENCdktTQjdYSEpjYmlBZ0lDQm1iM0lnS0haaGNpQndJR2x1SUcwcElHbG1JQ2h3SUNFOVBTQmNJbVJsWm1GMWJIUmNJaUFtSmlBaFQySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHOHNJSEFwS1NCZlgyTnlaV0YwWlVKcGJtUnBibWNvYnl3Z2JTd2djQ2s3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgzWmhiSFZsY3lodktTQjdYSEpjYmlBZ0lDQjJZWElnY3lBOUlIUjVjR1Z2WmlCVGVXMWliMndnUFQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCVGVXMWliMnd1YVhSbGNtRjBiM0lzSUcwZ1BTQnpJQ1ltSUc5YmMxMHNJR2tnUFNBd08xeHlYRzRnSUNBZ2FXWWdLRzBwSUhKbGRIVnliaUJ0TG1OaGJHd29ieWs3WEhKY2JpQWdJQ0JwWmlBb2J5QW1KaUIwZVhCbGIyWWdieTVzWlc1bmRHZ2dQVDA5SUZ3aWJuVnRZbVZ5WENJcElISmxkSFZ5YmlCN1hISmNiaUFnSUNBZ0lDQWdibVY0ZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYnlBbUppQnBJRDQ5SUc4dWJHVnVaM1JvS1NCdklEMGdkbTlwWkNBd08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZXlCMllXeDFaVG9nYnlBbUppQnZXMmtySzEwc0lHUnZibVU2SUNGdklIMDdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlR0Y2NseHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb2N5QS9JRndpVDJKcVpXTjBJR2x6SUc1dmRDQnBkR1Z5WVdKc1pTNWNJaUE2SUZ3aVUzbHRZbTlzTG1sMFpYSmhkRzl5SUdseklHNXZkQ0JrWldacGJtVmtMbHdpS1R0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZjbVZoWkNodkxDQnVLU0I3WEhKY2JpQWdJQ0IyWVhJZ2JTQTlJSFI1Y0dWdlppQlRlVzFpYjJ3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBbUppQnZXMU41YldKdmJDNXBkR1Z5WVhSdmNsMDdYSEpjYmlBZ0lDQnBaaUFvSVcwcElISmxkSFZ5YmlCdk8xeHlYRzRnSUNBZ2RtRnlJR2tnUFNCdExtTmhiR3dvYnlrc0lISXNJR0Z5SUQwZ1cxMHNJR1U3WEhKY2JpQWdJQ0IwY25rZ2UxeHlYRzRnSUNBZ0lDQWdJSGRvYVd4bElDZ29iaUE5UFQwZ2RtOXBaQ0F3SUh4OElHNHRMU0ErSURBcElDWW1JQ0VvY2lBOUlHa3VibVY0ZENncEtTNWtiMjVsS1NCaGNpNXdkWE5vS0hJdWRtRnNkV1VwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnWTJGMFkyZ2dLR1Z5Y205eUtTQjdJR1VnUFNCN0lHVnljbTl5T2lCbGNuSnZjaUI5T3lCOVhISmNiaUFnSUNCbWFXNWhiR3g1SUh0Y2NseHVJQ0FnSUNBZ0lDQjBjbmtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NpQW1KaUFoY2k1a2IyNWxJQ1ltSUNodElEMGdhVnRjSW5KbGRIVnlibHdpWFNrcElHMHVZMkZzYkNocEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ1ptbHVZV3hzZVNCN0lHbG1JQ2hsS1NCMGFISnZkeUJsTG1WeWNtOXlPeUI5WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdZWEk3WEhKY2JuMWNjbHh1WEhKY2JpOHFLaUJBWkdWd2NtVmpZWFJsWkNBcUwxeHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTl6Y0hKbFlXUW9LU0I3WEhKY2JpQWdJQ0JtYjNJZ0tIWmhjaUJoY2lBOUlGdGRMQ0JwSUQwZ01Ec2dhU0E4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUdrckt5bGNjbHh1SUNBZ0lDQWdJQ0JoY2lBOUlHRnlMbU52Ym1OaGRDaGZYM0psWVdRb1lYSm5kVzFsYm5SelcybGRLU2s3WEhKY2JpQWdJQ0J5WlhSMWNtNGdZWEk3WEhKY2JuMWNjbHh1WEhKY2JpOHFLaUJBWkdWd2NtVmpZWFJsWkNBcUwxeHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTl6Y0hKbFlXUkJjbkpoZVhNb0tTQjdYSEpjYmlBZ0lDQm1iM0lnS0haaGNpQnpJRDBnTUN3Z2FTQTlJREFzSUdsc0lEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFEc2dhU0E4SUdsc095QnBLeXNwSUhNZ0t6MGdZWEpuZFcxbGJuUnpXMmxkTG14bGJtZDBhRHRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJSElnUFNCQmNuSmhlU2h6S1N3Z2F5QTlJREFzSUdrZ1BTQXdPeUJwSUR3Z2FXdzdJR2tyS3lsY2NseHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQmhJRDBnWVhKbmRXMWxiblJ6VzJsZExDQnFJRDBnTUN3Z2Ftd2dQU0JoTG14bGJtZDBhRHNnYWlBOElHcHNPeUJxS3lzc0lHc3JLeWxjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbHRyWFNBOUlHRmJhbDA3WEhKY2JpQWdJQ0J5WlhSMWNtNGdjanRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmMzQnlaV0ZrUVhKeVlYa29kRzhzSUdaeWIyMHNJSEJoWTJzcElIdGNjbHh1SUNBZ0lHbG1JQ2h3WVdOcklIeDhJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQVDA5SURJcElHWnZjaUFvZG1GeUlHa2dQU0F3TENCc0lEMGdabkp2YlM1c1pXNW5kR2dzSUdGeU95QnBJRHdnYkRzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR0Z5SUh4OElDRW9hU0JwYmlCbWNtOXRLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXRnlLU0JoY2lBOUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHWnliMjBzSURBc0lHa3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbHRwWFNBOUlHWnliMjFiYVYwN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlIUnZMbU52Ym1OaGRDaGhjaUI4ZkNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNobWNtOXRLU2s3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyRjNZV2wwS0hZcElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpJR2x1YzNSaGJtTmxiMllnWDE5aGQyRnBkQ0EvSUNoMGFHbHpMbllnUFNCMkxDQjBhR2x6S1NBNklHNWxkeUJmWDJGM1lXbDBLSFlwTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOWhjM2x1WTBkbGJtVnlZWFJ2Y2loMGFHbHpRWEpuTENCZllYSm5kVzFsYm5SekxDQm5aVzVsY21GMGIzSXBJSHRjY2x4dUlDQWdJR2xtSUNnaFUzbHRZbTlzTG1GemVXNWpTWFJsY21GMGIzSXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKVGVXMWliMnd1WVhONWJtTkpkR1Z5WVhSdmNpQnBjeUJ1YjNRZ1pHVm1hVzVsWkM1Y0lpazdYSEpjYmlBZ0lDQjJZWElnWnlBOUlHZGxibVZ5WVhSdmNpNWhjSEJzZVNoMGFHbHpRWEpuTENCZllYSm5kVzFsYm5SeklIeDhJRnRkS1N3Z2FTd2djU0E5SUZ0ZE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUdrZ1BTQjdmU3dnZG1WeVlpaGNJbTVsZUhSY0lpa3NJSFpsY21Jb1hDSjBhSEp2ZDF3aUtTd2dkbVZ5WWloY0luSmxkSFZ5Ymx3aUtTd2dhVnRUZVcxaWIyd3VZWE41Ym1OSmRHVnlZWFJ2Y2wwZ1BTQm1kVzVqZEdsdmJpQW9LU0I3SUhKbGRIVnliaUIwYUdsek95QjlMQ0JwTzF4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnZG1WeVlpaHVLU0I3SUdsbUlDaG5XMjVkS1NCcFcyNWRJRDBnWm5WdVkzUnBiMjRnS0hZcElIc2djbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVJQ2hoTENCaUtTQjdJSEV1Y0hWemFDaGJiaXdnZGl3Z1lTd2dZbDBwSUQ0Z01TQjhmQ0J5WlhOMWJXVW9iaXdnZGlrN0lIMHBPeUI5T3lCOVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCeVpYTjFiV1VvYml3Z2Rpa2dleUIwY25rZ2V5QnpkR1Z3S0dkYmJsMG9kaWtwT3lCOUlHTmhkR05vSUNobEtTQjdJSE5sZEhSc1pTaHhXekJkV3pOZExDQmxLVHNnZlNCOVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCemRHVndLSElwSUhzZ2NpNTJZV3gxWlNCcGJuTjBZVzVqWlc5bUlGOWZZWGRoYVhRZ1B5QlFjbTl0YVhObExuSmxjMjlzZG1Vb2NpNTJZV3gxWlM1MktTNTBhR1Z1S0daMWJHWnBiR3dzSUhKbGFtVmpkQ2tnT2lCelpYUjBiR1VvY1Zzd1hWc3lYU3dnY2lrN0lIMWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlHWjFiR1pwYkd3b2RtRnNkV1VwSUhzZ2NtVnpkVzFsS0Z3aWJtVjRkRndpTENCMllXeDFaU2s3SUgxY2NseHVJQ0FnSUdaMWJtTjBhVzl1SUhKbGFtVmpkQ2gyWVd4MVpTa2dleUJ5WlhOMWJXVW9YQ0owYUhKdmQxd2lMQ0IyWVd4MVpTazdJSDFjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSE5sZEhSc1pTaG1MQ0IyS1NCN0lHbG1JQ2htS0hZcExDQnhMbk5vYVdaMEtDa3NJSEV1YkdWdVozUm9LU0J5WlhOMWJXVW9jVnN3WFZzd1hTd2djVnN3WFZzeFhTazdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZllYTjVibU5FWld4bFoyRjBiM0lvYnlrZ2UxeHlYRzRnSUNBZ2RtRnlJR2tzSUhBN1hISmNiaUFnSUNCeVpYUjFjbTRnYVNBOUlIdDlMQ0IyWlhKaUtGd2libVY0ZEZ3aUtTd2dkbVZ5WWloY0luUm9jbTkzWENJc0lHWjFibU4wYVc5dUlDaGxLU0I3SUhSb2NtOTNJR1U3SUgwcExDQjJaWEppS0Z3aWNtVjBkWEp1WENJcExDQnBXMU41YldKdmJDNXBkR1Z5WVhSdmNsMGdQU0JtZFc1amRHbHZiaUFvS1NCN0lISmxkSFZ5YmlCMGFHbHpPeUI5TENCcE8xeHlYRzRnSUNBZ1puVnVZM1JwYjI0Z2RtVnlZaWh1TENCbUtTQjdJR2xiYmwwZ1BTQnZXMjVkSUQ4Z1puVnVZM1JwYjI0Z0tIWXBJSHNnY21WMGRYSnVJQ2h3SUQwZ0lYQXBJRDhnZXlCMllXeDFaVG9nWDE5aGQyRnBkQ2h2VzI1ZEtIWXBLU3dnWkc5dVpUb2dabUZzYzJVZ2ZTQTZJR1lnUHlCbUtIWXBJRG9nZGpzZ2ZTQTZJR1k3SUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZZWE41Ym1OV1lXeDFaWE1vYnlrZ2UxeHlYRzRnSUNBZ2FXWWdLQ0ZUZVcxaWIyd3VZWE41Ym1OSmRHVnlZWFJ2Y2lrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJbE41YldKdmJDNWhjM2x1WTBsMFpYSmhkRzl5SUdseklHNXZkQ0JrWldacGJtVmtMbHdpS1R0Y2NseHVJQ0FnSUhaaGNpQnRJRDBnYjF0VGVXMWliMnd1WVhONWJtTkpkR1Z5WVhSdmNsMHNJR2s3WEhKY2JpQWdJQ0J5WlhSMWNtNGdiU0EvSUcwdVkyRnNiQ2h2S1NBNklDaHZJRDBnZEhsd1pXOW1JRjlmZG1Gc2RXVnpJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdQeUJmWDNaaGJIVmxjeWh2S1NBNklHOWJVM2x0WW05c0xtbDBaWEpoZEc5eVhTZ3BMQ0JwSUQwZ2UzMHNJSFpsY21Jb1hDSnVaWGgwWENJcExDQjJaWEppS0Z3aWRHaHliM2RjSWlrc0lIWmxjbUlvWENKeVpYUjFjbTVjSWlrc0lHbGJVM2x0WW05c0xtRnplVzVqU1hSbGNtRjBiM0pkSUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdkR2hwY3pzZ2ZTd2dhU2s3WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUIyWlhKaUtHNHBJSHNnYVZ0dVhTQTlJRzliYmwwZ0ppWWdablZ1WTNScGIyNGdLSFlwSUhzZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUlDaHlaWE52YkhabExDQnlaV3BsWTNRcElIc2dkaUE5SUc5YmJsMG9kaWtzSUhObGRIUnNaU2h5WlhOdmJIWmxMQ0J5WldwbFkzUXNJSFl1Wkc5dVpTd2dkaTUyWVd4MVpTazdJSDBwT3lCOU95QjlYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQnpaWFIwYkdVb2NtVnpiMngyWlN3Z2NtVnFaV04wTENCa0xDQjJLU0I3SUZCeWIyMXBjMlV1Y21WemIyeDJaU2gyS1M1MGFHVnVLR1oxYm1OMGFXOXVLSFlwSUhzZ2NtVnpiMngyWlNoN0lIWmhiSFZsT2lCMkxDQmtiMjVsT2lCa0lIMHBPeUI5TENCeVpXcGxZM1FwT3lCOVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMjFoYTJWVVpXMXdiR0YwWlU5aWFtVmpkQ2hqYjI5clpXUXNJSEpoZHlrZ2UxeHlYRzRnSUNBZ2FXWWdLRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNrZ2V5QlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWTI5dmEyVmtMQ0JjSW5KaGQxd2lMQ0I3SUhaaGJIVmxPaUJ5WVhjZ2ZTazdJSDBnWld4elpTQjdJR052YjJ0bFpDNXlZWGNnUFNCeVlYYzdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQmpiMjlyWldRN1hISmNibjA3WEhKY2JseHlYRzUyWVhJZ1gxOXpaWFJOYjJSMWJHVkVaV1poZFd4MElEMGdUMkpxWldOMExtTnlaV0YwWlNBL0lDaG1kVzVqZEdsdmJpaHZMQ0IyS1NCN1hISmNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29ieXdnWENKa1pXWmhkV3gwWENJc0lIc2daVzUxYldWeVlXSnNaVG9nZEhKMVpTd2dkbUZzZFdVNklIWWdmU2s3WEhKY2JuMHBJRG9nWm5WdVkzUnBiMjRvYnl3Z2Rpa2dlMXh5WEc0Z0lDQWdiMXRjSW1SbFptRjFiSFJjSWwwZ1BTQjJPMXh5WEc1OU8xeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmFXMXdiM0owVTNSaGNpaHRiMlFwSUh0Y2NseHVJQ0FnSUdsbUlDaHRiMlFnSmlZZ2JXOWtMbDlmWlhOTmIyUjFiR1VwSUhKbGRIVnliaUJ0YjJRN1hISmNiaUFnSUNCMllYSWdjbVZ6ZFd4MElEMGdlMzA3WEhKY2JpQWdJQ0JwWmlBb2JXOWtJQ0U5SUc1MWJHd3BJR1p2Y2lBb2RtRnlJR3NnYVc0Z2JXOWtLU0JwWmlBb2F5QWhQVDBnWENKa1pXWmhkV3gwWENJZ0ppWWdUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLRzF2WkN3Z2F5a3BJRjlmWTNKbFlYUmxRbWx1WkdsdVp5aHlaWE4xYkhRc0lHMXZaQ3dnYXlrN1hISmNiaUFnSUNCZlgzTmxkRTF2WkhWc1pVUmxabUYxYkhRb2NtVnpkV3gwTENCdGIyUXBPMXh5WEc0Z0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZhVzF3YjNKMFJHVm1ZWFZzZENodGIyUXBJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQW9iVzlrSUNZbUlHMXZaQzVmWDJWelRXOWtkV3hsS1NBL0lHMXZaQ0E2SUhzZ1pHVm1ZWFZzZERvZ2JXOWtJSDA3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyTnNZWE56VUhKcGRtRjBaVVpwWld4a1IyVjBLSEpsWTJWcGRtVnlMQ0J6ZEdGMFpTd2dhMmx1WkN3Z1ppa2dlMXh5WEc0Z0lDQWdhV1lnS0d0cGJtUWdQVDA5SUZ3aVlWd2lJQ1ltSUNGbUtTQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpVUhKcGRtRjBaU0JoWTJObGMzTnZjaUIzWVhNZ1pHVm1hVzVsWkNCM2FYUm9iM1YwSUdFZ1oyVjBkR1Z5WENJcE8xeHlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnpkR0YwWlNBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUQ4Z2NtVmpaV2wyWlhJZ0lUMDlJSE4wWVhSbElIeDhJQ0ZtSURvZ0lYTjBZWFJsTG1oaGN5aHlaV05sYVhabGNpa3BJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKRFlXNXViM1FnY21WaFpDQndjbWwyWVhSbElHMWxiV0psY2lCbWNtOXRJR0Z1SUc5aWFtVmpkQ0IzYUc5elpTQmpiR0Z6Y3lCa2FXUWdibTkwSUdSbFkyeGhjbVVnYVhSY0lpazdYSEpjYmlBZ0lDQnlaWFIxY200Z2EybHVaQ0E5UFQwZ1hDSnRYQ0lnUHlCbUlEb2dhMmx1WkNBOVBUMGdYQ0poWENJZ1B5Qm1MbU5oYkd3b2NtVmpaV2wyWlhJcElEb2daaUEvSUdZdWRtRnNkV1VnT2lCemRHRjBaUzVuWlhRb2NtVmpaV2wyWlhJcE8xeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTlqYkdGemMxQnlhWFpoZEdWR2FXVnNaRk5sZENoeVpXTmxhWFpsY2l3Z2MzUmhkR1VzSUhaaGJIVmxMQ0JyYVc1a0xDQm1LU0I3WEhKY2JpQWdJQ0JwWmlBb2EybHVaQ0E5UFQwZ1hDSnRYQ0lwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSlFjbWwyWVhSbElHMWxkR2h2WkNCcGN5QnViM1FnZDNKcGRHRmliR1ZjSWlrN1hISmNiaUFnSUNCcFppQW9hMmx1WkNBOVBUMGdYQ0poWENJZ0ppWWdJV1lwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSlFjbWwyWVhSbElHRmpZMlZ6YzI5eUlIZGhjeUJrWldacGJtVmtJSGRwZEdodmRYUWdZU0J6WlhSMFpYSmNJaWs3WEhKY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhOMFlYUmxJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdQeUJ5WldObGFYWmxjaUFoUFQwZ2MzUmhkR1VnZkh3Z0lXWWdPaUFoYzNSaGRHVXVhR0Z6S0hKbFkyVnBkbVZ5S1NrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJa05oYm01dmRDQjNjbWwwWlNCd2NtbDJZWFJsSUcxbGJXSmxjaUIwYnlCaGJpQnZZbXBsWTNRZ2QyaHZjMlVnWTJ4aGMzTWdaR2xrSUc1dmRDQmtaV05zWVhKbElHbDBYQ0lwTzF4eVhHNGdJQ0FnY21WMGRYSnVJQ2hyYVc1a0lEMDlQU0JjSW1GY0lpQS9JR1l1WTJGc2JDaHlaV05sYVhabGNpd2dkbUZzZFdVcElEb2daaUEvSUdZdWRtRnNkV1VnUFNCMllXeDFaU0E2SUhOMFlYUmxMbk5sZENoeVpXTmxhWFpsY2l3Z2RtRnNkV1VwS1N3Z2RtRnNkV1U3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyTnNZWE56VUhKcGRtRjBaVVpwWld4a1NXNG9jM1JoZEdVc0lISmxZMlZwZG1WeUtTQjdYSEpjYmlBZ0lDQnBaaUFvY21WalpXbDJaWElnUFQwOUlHNTFiR3dnZkh3Z0tIUjVjR1Z2WmlCeVpXTmxhWFpsY2lBaFBUMGdYQ0p2WW1wbFkzUmNJaUFtSmlCMGVYQmxiMllnY21WalpXbDJaWElnSVQwOUlGd2lablZ1WTNScGIyNWNJaWtwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkRZVzV1YjNRZ2RYTmxJQ2RwYmljZ2IzQmxjbUYwYjNJZ2IyNGdibTl1TFc5aWFtVmpkRndpS1R0Y2NseHVJQ0FnSUhKbGRIVnliaUIwZVhCbGIyWWdjM1JoZEdVZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBL0lISmxZMlZwZG1WeUlEMDlQU0J6ZEdGMFpTQTZJSE4wWVhSbExtaGhjeWh5WldObGFYWmxjaWs3WEhKY2JuMWNjbHh1SWl3aWFXMXdiM0owSUhzZ1IweFVSa3h2WVdSbGNsQnNkV2RwYml3Z1IweFVSbEJoY25ObGNpQjlJR1p5YjIwZ0ozUm9jbVZsTDJWNFlXMXdiR1Z6TDJwemJTOXNiMkZrWlhKekwwZE1WRVpNYjJGa1pYSXVhbk1uTzF4dWFXMXdiM0owSUNvZ1lYTWdTRVJTUlcxcGMzTnBkbVZOZFd4MGFYQnNhV1Z5VTJOb1pXMWhJR1p5YjIwZ0owQndhWGhwZGk5MGVYQmxjeTEyY20xakxXMWhkR1Z5YVdGc2N5MW9aSEl0WlcxcGMzTnBkbVV0YlhWc2RHbHdiR2xsY2kweExqQW5PMXh1YVcxd2IzSjBJSHNnUjB4VVJpQmhjeUJIVEZSR1UyTm9aVzFoSUgwZ1puSnZiU0FuUUdkc2RHWXRkSEpoYm5ObWIzSnRMMk52Y21Vbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1ZsSk5UV0YwWlhKcFlXeHpTRVJTUlcxcGMzTnBkbVZOZFd4MGFYQnNhV1Z5VEc5aFpHVnlVR3gxWjJsdUlHbHRjR3hsYldWdWRITWdSMHhVUmt4dllXUmxjbEJzZFdkcGJpQjdYRzRnSUhCMVlteHBZeUJ6ZEdGMGFXTWdSVmhVUlU1VFNVOU9YMDVCVFVVZ1BTQW5WbEpOUTE5dFlYUmxjbWxoYkhOZmFHUnlYMlZ0YVhOemFYWmxUWFZzZEdsd2JHbGxjaWNnWVhNZ1kyOXVjM1E3WEc1Y2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlIQmhjbk5sY2pvZ1IweFVSbEJoY25ObGNqdGNibHh1SUNCd2RXSnNhV01nWjJWMElHNWhiV1VvS1RvZ2MzUnlhVzVuSUh0Y2JpQWdJQ0J5WlhSMWNtNGdWbEpOVFdGMFpYSnBZV3h6U0VSU1JXMXBjM05wZG1WTmRXeDBhWEJzYVdWeVRHOWhaR1Z5VUd4MVoybHVMa1ZZVkVWT1UwbFBUbDlPUVUxRk8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklHTnZibk4wY25WamRHOXlLSEJoY25ObGNqb2dSMHhVUmxCaGNuTmxjaWtnZTF4dUlDQWdJSFJvYVhNdWNHRnljMlZ5SUQwZ2NHRnljMlZ5TzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUdGemVXNWpJR1Y0ZEdWdVpFMWhkR1Z5YVdGc1VHRnlZVzF6S0cxaGRHVnlhV0ZzU1c1a1pYZzZJRzUxYldKbGNpd2diV0YwWlhKcFlXeFFZWEpoYlhNNklIc2dXMnRsZVRvZ2MzUnlhVzVuWFRvZ1lXNTVJSDBwT2lCUWNtOXRhWE5sUEhadmFXUStJSHRjYmlBZ0lDQmpiMjV6ZENCbGVIUmxibk5wYjI0Z1BTQjBhR2x6TGw5blpYUklSRkpGYldsemMybDJaVTExYkhScGNHeHBaWEpGZUhSbGJuTnBiMjRvYldGMFpYSnBZV3hKYm1SbGVDazdYRzRnSUNBZ2FXWWdLR1Y0ZEdWdWMybHZiaUE5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdWR2hwY3lCbGVIUmxibk5wYjI0Z2FYTWdZWEpqYUdsMlpXUXVJRVZ0YVhRZ2QyRnlibWx1WjF4dUlDQWdJQzh2SUZObFpUb2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM1p5YlMxakwzWnliUzF6Y0dWamFXWnBZMkYwYVc5dUwzQjFiR3d2TXpjMVhHNGdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtGeHVJQ0FnSUNBZ0oxWlNUVTFoZEdWeWFXRnNjMGhFVWtWdGFYTnphWFpsVFhWc2RHbHdiR2xsY2t4dllXUmxjbEJzZFdkcGJqb2dZRlpTVFVOZmJXRjBaWEpwWVd4elgyaGtjbDlsYldsemMybDJaVTExYkhScGNHeHBaWEpnSUdseklHRnlZMmhwZG1Wa0xpQlZjMlVnWUV0SVVsOXRZWFJsY21saGJITmZaVzFwYzNOcGRtVmZjM1J5Wlc1bmRHaGdJR2x1YzNSbFlXUXVKeXhjYmlBZ0lDQXBPMXh1WEc0Z0lDQWdZMjl1YzNRZ1pXMXBjM05wZG1WTmRXeDBhWEJzYVdWeUlEMGdaWGgwWlc1emFXOXVMbVZ0YVhOemFYWmxUWFZzZEdsd2JHbGxjanRjYmlBZ0lDQnRZWFJsY21saGJGQmhjbUZ0Y3k1bGJXbHpjMmwyWlVsdWRHVnVjMmwwZVNBOUlHVnRhWE56YVhabFRYVnNkR2x3YkdsbGNqdGNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdYMmRsZEVoRVVrVnRhWE56YVhabFRYVnNkR2x3YkdsbGNrVjRkR1Z1YzJsdmJpaGNiaUFnSUNCdFlYUmxjbWxoYkVsdVpHVjRPaUJ1ZFcxaVpYSXNYRzRnSUNrNklFaEVVa1Z0YVhOemFYWmxUWFZzZEdsd2JHbGxjbE5qYUdWdFlTNVdVazFEVFdGMFpYSnBZV3h6U0VSU1JXMXBjM05wZG1WTmRXeDBhWEJzYVdWeUlId2dkVzVrWldacGJtVmtJSHRjYmlBZ0lDQmpiMjV6ZENCd1lYSnpaWElnUFNCMGFHbHpMbkJoY25ObGNqdGNiaUFnSUNCamIyNXpkQ0JxYzI5dUlEMGdjR0Z5YzJWeUxtcHpiMjRnWVhNZ1IweFVSbE5qYUdWdFlTNUpSMHhVUmp0Y2JseHVJQ0FnSUdOdmJuTjBJRzFoZEdWeWFXRnNSR1ZtSUQwZ2FuTnZiaTV0WVhSbGNtbGhiSE0vTGx0dFlYUmxjbWxoYkVsdVpHVjRYVHRjYmx4dUlDQWdJR2xtSUNodFlYUmxjbWxoYkVSbFppQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvWEc0Z0lDQWdJQ0FnSUdCV1VrMU5ZWFJsY21saGJITklSRkpGYldsemMybDJaVTExYkhScGNHeHBaWEpNYjJGa1pYSlFiSFZuYVc0NklFRjBkR1Z0Y0hRZ2RHOGdkWE5sSUcxaGRHVnlhV0ZzYzFza2UyMWhkR1Z5YVdGc1NXNWtaWGg5WFNCdlppQm5iRlJHSUdKMWRDQjBhR1VnYldGMFpYSnBZV3dnWkc5bGMyNG5kQ0JsZUdsemRHQXNYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0JsZUhSbGJuTnBiMjRnUFNCdFlYUmxjbWxoYkVSbFppNWxlSFJsYm5OcGIyNXpQeTViVmxKTlRXRjBaWEpwWVd4elNFUlNSVzFwYzNOcGRtVk5kV3gwYVhCc2FXVnlURzloWkdWeVVHeDFaMmx1TGtWWVZFVk9VMGxQVGw5T1FVMUZYU0JoYzF4dUlDQWdJQ0FnZkNCSVJGSkZiV2x6YzJsMlpVMTFiSFJwY0d4cFpYSlRZMmhsYldFdVZsSk5RMDFoZEdWeWFXRnNjMGhFVWtWdGFYTnphWFpsVFhWc2RHbHdiR2xsY2x4dUlDQWdJQ0FnZkNCMWJtUmxabWx1WldRN1hHNGdJQ0FnYVdZZ0tHVjRkR1Z1YzJsdmJpQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJsZUhSbGJuTnBiMjQ3WEc0Z0lIMWNibjFjYmlKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZ2UjBFN1FVRkRUeXhUUVVGVExGTkJRVk1zUTBGQlF5eFBRVUZQTEVWQlFVVXNWVUZCVlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hUUVVGVExFVkJRVVU3UVVGRE4wUXNTVUZCU1N4VFFVRlRMRXRCUVVzc1EwRkJReXhMUVVGTExFVkJRVVVzUlVGQlJTeFBRVUZQTEV0QlFVc3NXVUZCV1N4RFFVRkRMRWRCUVVjc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEZWQlFWVXNUMEZCVHl4RlFVRkZMRVZCUVVVc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVN1FVRkRhRWdzU1VGQlNTeFBRVUZQTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhQUVVGUExFTkJRVU1zUlVGQlJTeFZRVUZWTEU5QlFVOHNSVUZCUlN4TlFVRk5MRVZCUVVVN1FVRkRMMFFzVVVGQlVTeFRRVUZUTEZOQlFWTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZPMEZCUTI1SExGRkJRVkVzVTBGQlV5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZPMEZCUTNSSExGRkJRVkVzVTBGQlV5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRVZCUVVVc1RVRkJUU3hEUVVGRExFbEJRVWtzUjBGQlJ5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXl4RlFVRkZPMEZCUTNSSUxGRkJRVkVzU1VGQlNTeERRVUZETEVOQlFVTXNVMEZCVXl4SFFVRkhMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFWVXNTVUZCU1N4RlFVRkZMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETzBGQlF6bEZMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRMUE3TzAxRGRFaGhMRFpEUVVFMlF5eERRVUZCTzBGQlMzaEVMRWxCUVVFc1NVRkJWeXhKUVVGSkxFZEJRVUU3VVVGRFlpeFBRVUZQTERaRFFVRTJReXhEUVVGRExHTkJRV01zUTBGQlF6dExRVU55UlR0QlFVVkVMRWxCUVVFc1YwRkJRU3hEUVVGdFFpeE5RVUZyUWl4RlFVRkJPMEZCUTI1RExGRkJRVUVzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNN1MwRkRkRUk3U1VGRldTeHZRa0ZCYjBJc1EwRkJReXhoUVVGeFFpeEZRVUZGTEdOQlFYTkRMRVZCUVVFN08xbEJRemRHTEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhyUTBGQmEwTXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRaUVVONlJTeEpRVUZKTEZOQlFWTXNTVUZCU1N4SlFVRkpMRVZCUVVVN1owSkJRM0pDTEU5QlFVODdRVUZEVWl4aFFVRkJPenM3UVVGSlJDeFpRVUZCTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUTFZc2IwcEJRVzlLTEVOQlEzSktMRU5CUVVNN1FVRkZSaXhaUVVGQkxFMUJRVTBzYTBKQlFXdENMRWRCUVVjc1UwRkJVeXhEUVVGRExHdENRVUZyUWl4RFFVRkRPMEZCUTNoRUxGbEJRVUVzWTBGQll5eERRVUZETEdsQ1FVRnBRaXhIUVVGSExHdENRVUZyUWl4RFFVRkRPMU5CUTNaRUxFTkJRVUVzUTBGQlFUdEJRVUZCTEV0QlFVRTdRVUZGVHl4SlFVRkJMR3REUVVGclF5eERRVU40UXl4aFFVRnhRaXhGUVVGQk96dEJRVVZ5UWl4UlFVRkJMRTFCUVUwc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZETTBJc1VVRkJRU3hOUVVGTkxFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCZDBJc1EwRkJRenRSUVVVM1F5eE5RVUZOTEZkQlFWY3NSMEZCUnl4RFFVRkJMRVZCUVVFc1IwRkJRU3hKUVVGSkxFTkJRVU1zVTBGQlV5eE5RVUZCTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4RFFVRkhMR0ZCUVdFc1EwRkJReXhEUVVGRE8xRkJSWEJFTEVsQlFVa3NWMEZCVnl4SlFVRkpMRWxCUVVrc1JVRkJSVHRCUVVOMlFpeFpRVUZCTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUTFZc01rVkJRVEpGTEdGQlFXRXNRMEZCUVN4M1EwRkJRU3hEUVVFd1F5eERRVU51U1N4RFFVRkRPMEZCUTBZc1dVRkJRU3hQUVVGUExGTkJRVk1zUTBGQlF6dEJRVU5zUWl4VFFVRkJPMUZCUlVRc1RVRkJUU3hUUVVGVExFZEJRVWNzUTBGQlFTeEZRVUZCTEVkQlFVRXNWMEZCVnl4RFFVRkRMRlZCUVZVc1RVRkJRU3hKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlJ5dzJRMEZCTmtNc1EwRkJReXhqUVVGakxFTkJSVEZHTEVOQlFVTTdVVUZEWkN4SlFVRkpMRk5CUVZNc1NVRkJTU3hKUVVGSkxFVkJRVVU3UVVGRGNrSXNXVUZCUVN4UFFVRlBMRk5CUVZNc1EwRkJRenRCUVVOc1FpeFRRVUZCTzBGQlJVUXNVVUZCUVN4UFFVRlBMRk5CUVZNc1EwRkJRenRMUVVOc1FqczdRVUZ1UkdFc05rTkJRV01zUTBGQlFTeGpRVUZCTEVkQlFVY3NkVU5CUVdkRU96czdPeUo5XG4iLCIvKiFcbiAqIEBwaXhpdi90aHJlZS12cm0tbWF0ZXJpYWxzLXYwY29tcGF0IHYyLjAuMVxuICogVlJNMC4wIG1hdGVyaWFscyBjb21wYXRpYmlsaXR5IGxheWVyIHBsdWdpbiBmb3IgQHBpeGl2L3RocmVlLXZybVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAyMC0yMDIzIHBpeGl2IEluYy5cbiAqIEBwaXhpdi90aHJlZS12cm0tbWF0ZXJpYWxzLXYwY29tcGF0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGl4aXYvdGhyZWUtdnJtL2Jsb2IvcmVsZWFzZS9MSUNFTlNFXG4gKi9cbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcblxyXG5mdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XG5cbmZ1bmN0aW9uIGdhbW1hRU9URihlKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGUsIDIuMik7XG59XG5cbmNsYXNzIFZSTU1hdGVyaWFsc1YwQ29tcGF0UGx1Z2luIHtcbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdWUk1NYXRlcmlhbHNWMENvbXBhdFBsdWdpbic7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcnNlcikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgICAgICB0aGlzLl9yZW5kZXJRdWV1ZU1hcFRyYW5zcGFyZW50ID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9yZW5kZXJRdWV1ZU1hcFRyYW5zcGFyZW50WldyaXRlID0gbmV3IE1hcCgpO1xuICAgICAgICAvLyBXT1JLQVJPVU5EOiBBZGQgS0hSX3RleHR1cmVfdHJhbnNmb3JtIHRvIGV4dGVuc2lvbnNVc2VkXG4gICAgICAgIC8vIEl0IGlzIHRvbyBsYXRlIHRvIGFkZCB0aGlzIGluIGJlZm9yZVJvb3RcbiAgICAgICAgY29uc3QganNvbiA9IHRoaXMucGFyc2VyLmpzb247XG4gICAgICAgIGpzb24uZXh0ZW5zaW9uc1VzZWQgPSAoX2EgPSBqc29uLmV4dGVuc2lvbnNVc2VkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXTtcbiAgICAgICAgaWYgKGpzb24uZXh0ZW5zaW9uc1VzZWQuaW5kZXhPZignS0hSX3RleHR1cmVfdHJhbnNmb3JtJykgPT09IC0xKSB7XG4gICAgICAgICAgICBqc29uLmV4dGVuc2lvbnNVc2VkLnB1c2goJ0tIUl90ZXh0dXJlX3RyYW5zZm9ybScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGJlZm9yZVJvb3QoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSB0aGlzLnBhcnNlci5qc29uO1xuICAgICAgICAgICAgLy8gZWFybHkgYWJvcnQgaWYgaXQgZG9lc24ndCB1c2UgVjBWUk1cbiAgICAgICAgICAgIGNvbnN0IHYwVlJNRXh0ZW5zaW9uID0gKF9hID0ganNvbi5leHRlbnNpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbJ1ZSTSddO1xuICAgICAgICAgICAgY29uc3QgdjBNYXRlcmlhbFByb3BlcnRpZXMgPSB2MFZSTUV4dGVuc2lvbiA9PT0gbnVsbCB8fCB2MFZSTUV4dGVuc2lvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogdjBWUk1FeHRlbnNpb24ubWF0ZXJpYWxQcm9wZXJ0aWVzO1xuICAgICAgICAgICAgaWYgKCF2ME1hdGVyaWFsUHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHBvcHVsYXRlIHJlbmRlciBxdWV1ZSBtYXBcbiAgICAgICAgICAgIHRoaXMuX3BvcHVsYXRlUmVuZGVyUXVldWVNYXAodjBNYXRlcmlhbFByb3BlcnRpZXMpO1xuICAgICAgICAgICAgLy8gY29udmVydCBWMCBtYXRlcmlhbCBwcm9wZXJ0aWVzIGludG8gVjEgY29tcGF0aWJsZSBmb3JtYXRcbiAgICAgICAgICAgIHYwTWF0ZXJpYWxQcm9wZXJ0aWVzLmZvckVhY2goKG1hdGVyaWFsUHJvcGVydGllcywgbWF0ZXJpYWxJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxEZWYgPSAoX2EgPSBqc29uLm1hdGVyaWFscykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW21hdGVyaWFsSW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbERlZiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVlJNTWF0ZXJpYWxzVjBDb21wYXRQbHVnaW46IEF0dGVtcHQgdG8gdXNlIG1hdGVyaWFsc1ske21hdGVyaWFsSW5kZXh9XSBvZiBnbFRGIGJ1dCB0aGUgbWF0ZXJpYWwgZG9lc24ndCBleGlzdGApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbFByb3BlcnRpZXMuc2hhZGVyID09PSAnVlJNL01Ub29uJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbCA9IHRoaXMuX3BhcnNlVjBNVG9vblByb3BlcnRpZXMobWF0ZXJpYWxQcm9wZXJ0aWVzLCBtYXRlcmlhbERlZik7XG4gICAgICAgICAgICAgICAgICAgIGpzb24ubWF0ZXJpYWxzW21hdGVyaWFsSW5kZXhdID0gbWF0ZXJpYWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChfYiA9IG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zdGFydHNXaXRoKCdWUk0vVW5saXQnKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbCA9IHRoaXMuX3BhcnNlVjBVbmxpdFByb3BlcnRpZXMobWF0ZXJpYWxQcm9wZXJ0aWVzLCBtYXRlcmlhbERlZik7XG4gICAgICAgICAgICAgICAgICAgIGpzb24ubWF0ZXJpYWxzW21hdGVyaWFsSW5kZXhdID0gbWF0ZXJpYWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIgPT09ICdWUk1fVVNFX0dMVEZTSEFERVInKSA7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVlJNTWF0ZXJpYWxzVjBDb21wYXRQbHVnaW46IFVua25vd24gc2hhZGVyOiAke21hdGVyaWFsUHJvcGVydGllcy5zaGFkZXJ9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfcGFyc2VWME1Ub29uUHJvcGVydGllcyhtYXRlcmlhbFByb3BlcnRpZXMsIHNjaGVtYU1hdGVyaWFsKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2wsIF9tLCBfbywgX3AsIF9xLCBfciwgX3MsIF90LCBfdSwgX3YsIF93LCBfeCwgX3ksIF96LCBfMCwgXzEsIF8yLCBfMywgXzQsIF81LCBfNiwgXzcsIF84LCBfOSwgXzEwLCBfMTEsIF8xMiwgXzEzLCBfMTQsIF8xNSwgXzE2LCBfMTcsIF8xOCwgXzE5O1xuICAgICAgICBjb25zdCBpc1RyYW5zcGFyZW50ID0gKF9iID0gKF9hID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmtleXdvcmRNYXApID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVsnX0FMUEhBQkxFTkRfT04nXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XG4gICAgICAgIGNvbnN0IGVuYWJsZWRaV3JpdGUgPSAoKF9jID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmZsb2F0UHJvcGVydGllcykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jWydfWldyaXRlJ10pID09PSAxO1xuICAgICAgICBjb25zdCB0cmFuc3BhcmVudFdpdGhaV3JpdGUgPSBlbmFibGVkWldyaXRlICYmIGlzVHJhbnNwYXJlbnQ7XG4gICAgICAgIGNvbnN0IHJlbmRlclF1ZXVlT2Zmc2V0TnVtYmVyID0gdGhpcy5fdjBQYXJzZVJlbmRlclF1ZXVlKG1hdGVyaWFsUHJvcGVydGllcyk7XG4gICAgICAgIGNvbnN0IGlzQ3V0b2ZmID0gKF9lID0gKF9kID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmtleXdvcmRNYXApID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZFsnX0FMUEhBVEVTVF9PTiddKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBmYWxzZTtcbiAgICAgICAgY29uc3QgYWxwaGFNb2RlID0gaXNUcmFuc3BhcmVudCA/ICdCTEVORCcgOiBpc0N1dG9mZiA/ICdNQVNLJyA6ICdPUEFRVUUnO1xuICAgICAgICBjb25zdCBhbHBoYUN1dG9mZiA9IGlzQ3V0b2ZmID8gKF9mID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmZsb2F0UHJvcGVydGllcykgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mWydfQ3V0b2ZmJ10gOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGN1bGxNb2RlID0gKF9oID0gKF9nID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmZsb2F0UHJvcGVydGllcykgPT09IG51bGwgfHwgX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nWydfQ3VsbE1vZGUnXSkgIT09IG51bGwgJiYgX2ggIT09IHZvaWQgMCA/IF9oIDogMjsgLy8gZW51bSwgeyBPZmYsIEZyb250LCBCYWNrIH1cbiAgICAgICAgY29uc3QgZG91YmxlU2lkZWQgPSBjdWxsTW9kZSA9PT0gMDtcbiAgICAgICAgY29uc3QgdGV4dHVyZVRyYW5zZm9ybUV4dCA9IHRoaXMuX3BvcnRUZXh0dXJlVHJhbnNmb3JtKG1hdGVyaWFsUHJvcGVydGllcyk7XG4gICAgICAgIGNvbnN0IGJhc2VDb2xvckZhY3RvciA9IChfayA9IChfaiA9IG1hdGVyaWFsUHJvcGVydGllcy52ZWN0b3JQcm9wZXJ0aWVzKSA9PT0gbnVsbCB8fCBfaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2pbJ19Db2xvciddKSA9PT0gbnVsbCB8fCBfayA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2subWFwKCh2LCBpKSA9PiAoaSA9PT0gMyA/IHYgOiBnYW1tYUVPVEYodikpKTtcbiAgICAgICAgY29uc3QgYmFzZUNvbG9yVGV4dHVyZUluZGV4ID0gKF9sID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnRleHR1cmVQcm9wZXJ0aWVzKSA9PT0gbnVsbCB8fCBfbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2xbJ19NYWluVGV4J107XG4gICAgICAgIGNvbnN0IGJhc2VDb2xvclRleHR1cmUgPSBiYXNlQ29sb3JUZXh0dXJlSW5kZXggIT0gbnVsbFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IGJhc2VDb2xvclRleHR1cmVJbmRleCxcbiAgICAgICAgICAgICAgICBleHRlbnNpb25zOiBPYmplY3QuYXNzaWduKHt9LCB0ZXh0dXJlVHJhbnNmb3JtRXh0KSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBub3JtYWxUZXh0dXJlU2NhbGUgPSAoX20gPSBtYXRlcmlhbFByb3BlcnRpZXMuZmxvYXRQcm9wZXJ0aWVzKSA9PT0gbnVsbCB8fCBfbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX21bJ19CdW1wU2NhbGUnXTtcbiAgICAgICAgY29uc3Qgbm9ybWFsVGV4dHVyZUluZGV4ID0gKF9vID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnRleHR1cmVQcm9wZXJ0aWVzKSA9PT0gbnVsbCB8fCBfbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29bJ19CdW1wTWFwJ107XG4gICAgICAgIGNvbnN0IG5vcm1hbFRleHR1cmUgPSBub3JtYWxUZXh0dXJlSW5kZXggIT0gbnVsbFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IG5vcm1hbFRleHR1cmVJbmRleCxcbiAgICAgICAgICAgICAgICBzY2FsZTogbm9ybWFsVGV4dHVyZVNjYWxlLFxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbnM6IE9iamVjdC5hc3NpZ24oe30sIHRleHR1cmVUcmFuc2Zvcm1FeHQpLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGVtaXNzaXZlRmFjdG9yID0gKF9xID0gKF9wID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnZlY3RvclByb3BlcnRpZXMpID09PSBudWxsIHx8IF9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcFsnX0VtaXNzaW9uQ29sb3InXSkgPT09IG51bGwgfHwgX3EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9xLm1hcChnYW1tYUVPVEYpO1xuICAgICAgICBjb25zdCBlbWlzc2l2ZVRleHR1cmVJbmRleCA9IChfciA9IG1hdGVyaWFsUHJvcGVydGllcy50ZXh0dXJlUHJvcGVydGllcykgPT09IG51bGwgfHwgX3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yWydfRW1pc3Npb25NYXAnXTtcbiAgICAgICAgY29uc3QgZW1pc3NpdmVUZXh0dXJlID0gZW1pc3NpdmVUZXh0dXJlSW5kZXggIT0gbnVsbFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IGVtaXNzaXZlVGV4dHVyZUluZGV4LFxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbnM6IE9iamVjdC5hc3NpZ24oe30sIHRleHR1cmVUcmFuc2Zvcm1FeHQpLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHNoYWRlQ29sb3JGYWN0b3IgPSAoX3QgPSAoX3MgPSBtYXRlcmlhbFByb3BlcnRpZXMudmVjdG9yUHJvcGVydGllcykgPT09IG51bGwgfHwgX3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zWydfU2hhZGVDb2xvciddKSA9PT0gbnVsbCB8fCBfdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3QubWFwKGdhbW1hRU9URik7XG4gICAgICAgIGNvbnN0IHNoYWRlTXVsdGlwbHlUZXh0dXJlSW5kZXggPSAoX3UgPSBtYXRlcmlhbFByb3BlcnRpZXMudGV4dHVyZVByb3BlcnRpZXMpID09PSBudWxsIHx8IF91ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdVsnX1NoYWRlVGV4dHVyZSddO1xuICAgICAgICBjb25zdCBzaGFkZU11bHRpcGx5VGV4dHVyZSA9IHNoYWRlTXVsdGlwbHlUZXh0dXJlSW5kZXggIT0gbnVsbFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IHNoYWRlTXVsdGlwbHlUZXh0dXJlSW5kZXgsXG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uczogT2JqZWN0LmFzc2lnbih7fSwgdGV4dHVyZVRyYW5zZm9ybUV4dCksXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gLy8gY29udmVydCB2MCBzaGFkZSBzaGlmdCAvIHNoYWRlIHRvb255XG4gICAgICAgIGxldCBzaGFkaW5nU2hpZnRGYWN0b3IgPSAoX3cgPSAoX3YgPSBtYXRlcmlhbFByb3BlcnRpZXMuZmxvYXRQcm9wZXJ0aWVzKSA9PT0gbnVsbCB8fCBfdiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3ZbJ19TaGFkZVNoaWZ0J10pICE9PSBudWxsICYmIF93ICE9PSB2b2lkIDAgPyBfdyA6IDAuMDtcbiAgICAgICAgbGV0IHNoYWRpbmdUb29ueUZhY3RvciA9IChfeSA9IChfeCA9IG1hdGVyaWFsUHJvcGVydGllcy5mbG9hdFByb3BlcnRpZXMpID09PSBudWxsIHx8IF94ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfeFsnX1NoYWRlVG9vbnknXSkgIT09IG51bGwgJiYgX3kgIT09IHZvaWQgMCA/IF95IDogMC45O1xuICAgICAgICBzaGFkaW5nVG9vbnlGYWN0b3IgPSBUSFJFRS5NYXRoVXRpbHMubGVycChzaGFkaW5nVG9vbnlGYWN0b3IsIDEuMCwgMC41ICsgMC41ICogc2hhZGluZ1NoaWZ0RmFjdG9yKTtcbiAgICAgICAgc2hhZGluZ1NoaWZ0RmFjdG9yID0gLXNoYWRpbmdTaGlmdEZhY3RvciAtICgxLjAgLSBzaGFkaW5nVG9vbnlGYWN0b3IpO1xuICAgICAgICBjb25zdCBnaUludGVuc2l0eUZhY3RvciA9IChfeiA9IG1hdGVyaWFsUHJvcGVydGllcy5mbG9hdFByb3BlcnRpZXMpID09PSBudWxsIHx8IF96ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfelsnX0luZGlyZWN0TGlnaHRJbnRlbnNpdHknXTtcbiAgICAgICAgY29uc3QgZ2lFcXVhbGl6YXRpb25GYWN0b3IgPSBnaUludGVuc2l0eUZhY3RvciA/IDEuMCAtIGdpSW50ZW5zaXR5RmFjdG9yIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBtYXRjYXBUZXh0dXJlSW5kZXggPSAoXzAgPSBtYXRlcmlhbFByb3BlcnRpZXMudGV4dHVyZVByb3BlcnRpZXMpID09PSBudWxsIHx8IF8wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMFsnX1NwaGVyZUFkZCddO1xuICAgICAgICBjb25zdCBtYXRjYXBGYWN0b3IgPSBtYXRjYXBUZXh0dXJlSW5kZXggIT0gbnVsbCA/IFsxLjAsIDEuMCwgMS4wXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgbWF0Y2FwVGV4dHVyZSA9IG1hdGNhcFRleHR1cmVJbmRleCAhPSBudWxsXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBpbmRleDogbWF0Y2FwVGV4dHVyZUluZGV4LFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHJpbUxpZ2h0aW5nTWl4RmFjdG9yID0gKF8xID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmZsb2F0UHJvcGVydGllcykgPT09IG51bGwgfHwgXzEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8xWydfUmltTGlnaHRpbmdNaXgnXTtcbiAgICAgICAgY29uc3QgcmltTXVsdGlwbHlUZXh0dXJlSW5kZXggPSAoXzIgPSBtYXRlcmlhbFByb3BlcnRpZXMudGV4dHVyZVByb3BlcnRpZXMpID09PSBudWxsIHx8IF8yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMlsnX1JpbVRleHR1cmUnXTtcbiAgICAgICAgY29uc3QgcmltTXVsdGlwbHlUZXh0dXJlID0gcmltTXVsdGlwbHlUZXh0dXJlSW5kZXggIT0gbnVsbFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IHJpbU11bHRpcGx5VGV4dHVyZUluZGV4LFxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbnM6IE9iamVjdC5hc3NpZ24oe30sIHRleHR1cmVUcmFuc2Zvcm1FeHQpLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRyaWNSaW1Db2xvckZhY3RvciA9IChfNCA9IChfMyA9IG1hdGVyaWFsUHJvcGVydGllcy52ZWN0b3JQcm9wZXJ0aWVzKSA9PT0gbnVsbCB8fCBfMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzNbJ19SaW1Db2xvciddKSA9PT0gbnVsbCB8fCBfNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzQubWFwKGdhbW1hRU9URik7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRyaWNSaW1GcmVzbmVsUG93ZXJGYWN0b3IgPSAoXzUgPSBtYXRlcmlhbFByb3BlcnRpZXMuZmxvYXRQcm9wZXJ0aWVzKSA9PT0gbnVsbCB8fCBfNSA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzVbJ19SaW1GcmVzbmVsUG93ZXInXTtcbiAgICAgICAgY29uc3QgcGFyYW1ldHJpY1JpbUxpZnRGYWN0b3IgPSAoXzYgPSBtYXRlcmlhbFByb3BlcnRpZXMuZmxvYXRQcm9wZXJ0aWVzKSA9PT0gbnVsbCB8fCBfNiA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzZbJ19SaW1MaWZ0J107XG4gICAgICAgIGNvbnN0IG91dGxpbmVXaWR0aE1vZGUgPSBbJ25vbmUnLCAnd29ybGRDb29yZGluYXRlcycsICdzY3JlZW5Db29yZGluYXRlcyddWyhfOCA9IChfNyA9IG1hdGVyaWFsUHJvcGVydGllcy5mbG9hdFByb3BlcnRpZXMpID09PSBudWxsIHx8IF83ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfN1snX091dGxpbmVXaWR0aE1vZGUnXSkgIT09IG51bGwgJiYgXzggIT09IHZvaWQgMCA/IF84IDogMF07XG4gICAgICAgIC8vIC8vIHYwIG91dGxpbmVXaWR0aEZhY3RvciBpcyBpbiBjZW50aW1ldGVyXG4gICAgICAgIGxldCBvdXRsaW5lV2lkdGhGYWN0b3IgPSAoXzEwID0gKF85ID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmZsb2F0UHJvcGVydGllcykgPT09IG51bGwgfHwgXzkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF85WydfT3V0bGluZVdpZHRoJ10pICE9PSBudWxsICYmIF8xMCAhPT0gdm9pZCAwID8gXzEwIDogMC4wO1xuICAgICAgICBvdXRsaW5lV2lkdGhGYWN0b3IgPSAwLjAxICogb3V0bGluZVdpZHRoRmFjdG9yO1xuICAgICAgICBjb25zdCBvdXRsaW5lV2lkdGhNdWx0aXBseVRleHR1cmVJbmRleCA9IChfMTEgPSBtYXRlcmlhbFByb3BlcnRpZXMudGV4dHVyZVByb3BlcnRpZXMpID09PSBudWxsIHx8IF8xMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzExWydfT3V0bGluZVdpZHRoVGV4dHVyZSddO1xuICAgICAgICBjb25zdCBvdXRsaW5lV2lkdGhNdWx0aXBseVRleHR1cmUgPSBvdXRsaW5lV2lkdGhNdWx0aXBseVRleHR1cmVJbmRleCAhPSBudWxsXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBpbmRleDogb3V0bGluZVdpZHRoTXVsdGlwbHlUZXh0dXJlSW5kZXgsXG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uczogT2JqZWN0LmFzc2lnbih7fSwgdGV4dHVyZVRyYW5zZm9ybUV4dCksXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3Qgb3V0bGluZUNvbG9yRmFjdG9yID0gKF8xMyA9IChfMTIgPSBtYXRlcmlhbFByb3BlcnRpZXMudmVjdG9yUHJvcGVydGllcykgPT09IG51bGwgfHwgXzEyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTJbJ19PdXRsaW5lQ29sb3InXSkgPT09IG51bGwgfHwgXzEzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTMubWFwKGdhbW1hRU9URik7XG4gICAgICAgIGNvbnN0IG91dGxpbmVDb2xvck1vZGUgPSAoXzE0ID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmZsb2F0UHJvcGVydGllcykgPT09IG51bGwgfHwgXzE0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTRbJ19PdXRsaW5lQ29sb3JNb2RlJ107IC8vIGVudW0sIHsgRml4ZWQsIE1peGVkIH1cbiAgICAgICAgY29uc3Qgb3V0bGluZUxpZ2h0aW5nTWl4RmFjdG9yID0gb3V0bGluZUNvbG9yTW9kZSA9PT0gMSA/IChfMTUgPSBtYXRlcmlhbFByb3BlcnRpZXMuZmxvYXRQcm9wZXJ0aWVzKSA9PT0gbnVsbCB8fCBfMTUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8xNVsnX091dGxpbmVMaWdodGluZ01peCddIDogMC4wO1xuICAgICAgICBjb25zdCB1dkFuaW1hdGlvbk1hc2tUZXh0dXJlSW5kZXggPSAoXzE2ID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnRleHR1cmVQcm9wZXJ0aWVzKSA9PT0gbnVsbCB8fCBfMTYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8xNlsnX1V2QW5pbU1hc2tUZXh0dXJlJ107XG4gICAgICAgIGNvbnN0IHV2QW5pbWF0aW9uTWFza1RleHR1cmUgPSB1dkFuaW1hdGlvbk1hc2tUZXh0dXJlSW5kZXggIT0gbnVsbFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IHV2QW5pbWF0aW9uTWFza1RleHR1cmVJbmRleCxcbiAgICAgICAgICAgICAgICBleHRlbnNpb25zOiBPYmplY3QuYXNzaWduKHt9LCB0ZXh0dXJlVHJhbnNmb3JtRXh0KSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCB1dkFuaW1hdGlvblNjcm9sbFhTcGVlZEZhY3RvciA9IChfMTcgPSBtYXRlcmlhbFByb3BlcnRpZXMuZmxvYXRQcm9wZXJ0aWVzKSA9PT0gbnVsbCB8fCBfMTcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8xN1snX1V2QW5pbVNjcm9sbFgnXTtcbiAgICAgICAgLy8gdXZBbmltYXRpb25TY3JvbGxZU3BlZWRGYWN0b3Igd2lsbCBiZSBvcHBvc2l0ZSBiZXR3ZWVuIFYwIGFuZCBWMVxuICAgICAgICBsZXQgdXZBbmltYXRpb25TY3JvbGxZU3BlZWRGYWN0b3IgPSAoXzE4ID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmZsb2F0UHJvcGVydGllcykgPT09IG51bGwgfHwgXzE4ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMThbJ19VdkFuaW1TY3JvbGxZJ107XG4gICAgICAgIGlmICh1dkFuaW1hdGlvblNjcm9sbFlTcGVlZEZhY3RvciAhPSBudWxsKSB7XG4gICAgICAgICAgICB1dkFuaW1hdGlvblNjcm9sbFlTcGVlZEZhY3RvciA9IC11dkFuaW1hdGlvblNjcm9sbFlTcGVlZEZhY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1dkFuaW1hdGlvblJvdGF0aW9uU3BlZWRGYWN0b3IgPSAoXzE5ID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmZsb2F0UHJvcGVydGllcykgPT09IG51bGwgfHwgXzE5ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTlbJ19VdkFuaW1Sb3RhdGlvbiddO1xuICAgICAgICBjb25zdCBtdG9vbkV4dGVuc2lvbiA9IHtcbiAgICAgICAgICAgIHNwZWNWZXJzaW9uOiAnMS4wJyxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50V2l0aFpXcml0ZSxcbiAgICAgICAgICAgIHJlbmRlclF1ZXVlT2Zmc2V0TnVtYmVyLFxuICAgICAgICAgICAgc2hhZGVDb2xvckZhY3RvcixcbiAgICAgICAgICAgIHNoYWRlTXVsdGlwbHlUZXh0dXJlLFxuICAgICAgICAgICAgc2hhZGluZ1NoaWZ0RmFjdG9yLFxuICAgICAgICAgICAgc2hhZGluZ1Rvb255RmFjdG9yLFxuICAgICAgICAgICAgZ2lFcXVhbGl6YXRpb25GYWN0b3IsXG4gICAgICAgICAgICBtYXRjYXBGYWN0b3IsXG4gICAgICAgICAgICBtYXRjYXBUZXh0dXJlLFxuICAgICAgICAgICAgcmltTGlnaHRpbmdNaXhGYWN0b3IsXG4gICAgICAgICAgICByaW1NdWx0aXBseVRleHR1cmUsXG4gICAgICAgICAgICBwYXJhbWV0cmljUmltQ29sb3JGYWN0b3IsXG4gICAgICAgICAgICBwYXJhbWV0cmljUmltRnJlc25lbFBvd2VyRmFjdG9yLFxuICAgICAgICAgICAgcGFyYW1ldHJpY1JpbUxpZnRGYWN0b3IsXG4gICAgICAgICAgICBvdXRsaW5lV2lkdGhNb2RlLFxuICAgICAgICAgICAgb3V0bGluZVdpZHRoRmFjdG9yLFxuICAgICAgICAgICAgb3V0bGluZVdpZHRoTXVsdGlwbHlUZXh0dXJlLFxuICAgICAgICAgICAgb3V0bGluZUNvbG9yRmFjdG9yLFxuICAgICAgICAgICAgb3V0bGluZUxpZ2h0aW5nTWl4RmFjdG9yLFxuICAgICAgICAgICAgdXZBbmltYXRpb25NYXNrVGV4dHVyZSxcbiAgICAgICAgICAgIHV2QW5pbWF0aW9uU2Nyb2xsWFNwZWVkRmFjdG9yLFxuICAgICAgICAgICAgdXZBbmltYXRpb25TY3JvbGxZU3BlZWRGYWN0b3IsXG4gICAgICAgICAgICB1dkFuaW1hdGlvblJvdGF0aW9uU3BlZWRGYWN0b3IsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHNjaGVtYU1hdGVyaWFsKSwgeyBwYnJNZXRhbGxpY1JvdWdobmVzczoge1xuICAgICAgICAgICAgICAgIGJhc2VDb2xvckZhY3RvcixcbiAgICAgICAgICAgICAgICBiYXNlQ29sb3JUZXh0dXJlLFxuICAgICAgICAgICAgfSwgbm9ybWFsVGV4dHVyZSxcbiAgICAgICAgICAgIGVtaXNzaXZlVGV4dHVyZSxcbiAgICAgICAgICAgIGVtaXNzaXZlRmFjdG9yLFxuICAgICAgICAgICAgYWxwaGFNb2RlLFxuICAgICAgICAgICAgYWxwaGFDdXRvZmYsXG4gICAgICAgICAgICBkb3VibGVTaWRlZCwgZXh0ZW5zaW9uczoge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbiAgICAgICAgICAgICAgICBWUk1DX21hdGVyaWFsc19tdG9vbjogbXRvb25FeHRlbnNpb24sXG4gICAgICAgICAgICB9IH0pO1xuICAgIH1cbiAgICBfcGFyc2VWMFVubGl0UHJvcGVydGllcyhtYXRlcmlhbFByb3BlcnRpZXMsIHNjaGVtYU1hdGVyaWFsKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgY29uc3QgaXNUcmFuc3BhcmVudFpXcml0ZSA9IG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIgPT09ICdWUk0vVW5saXRUcmFuc3BhcmVudFpXcml0ZSc7XG4gICAgICAgIGNvbnN0IGlzVHJhbnNwYXJlbnQgPSBtYXRlcmlhbFByb3BlcnRpZXMuc2hhZGVyID09PSAnVlJNL1VubGl0VHJhbnNwYXJlbnQnIHx8IGlzVHJhbnNwYXJlbnRaV3JpdGU7XG4gICAgICAgIGNvbnN0IHJlbmRlclF1ZXVlT2Zmc2V0TnVtYmVyID0gdGhpcy5fdjBQYXJzZVJlbmRlclF1ZXVlKG1hdGVyaWFsUHJvcGVydGllcyk7XG4gICAgICAgIGNvbnN0IGlzQ3V0b2ZmID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlciA9PT0gJ1ZSTS9VbmxpdEN1dG91dCc7XG4gICAgICAgIGNvbnN0IGFscGhhTW9kZSA9IGlzVHJhbnNwYXJlbnQgPyAnQkxFTkQnIDogaXNDdXRvZmYgPyAnTUFTSycgOiAnT1BBUVVFJztcbiAgICAgICAgY29uc3QgYWxwaGFDdXRvZmYgPSBpc0N1dG9mZiA/IChfYSA9IG1hdGVyaWFsUHJvcGVydGllcy5mbG9hdFByb3BlcnRpZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVsnX0N1dG9mZiddIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCB0ZXh0dXJlVHJhbnNmb3JtRXh0ID0gdGhpcy5fcG9ydFRleHR1cmVUcmFuc2Zvcm0obWF0ZXJpYWxQcm9wZXJ0aWVzKTtcbiAgICAgICAgY29uc3QgYmFzZUNvbG9yRmFjdG9yID0gKF9jID0gKF9iID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnZlY3RvclByb3BlcnRpZXMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYlsnX0NvbG9yJ10pID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5tYXAoZ2FtbWFFT1RGKTtcbiAgICAgICAgY29uc3QgYmFzZUNvbG9yVGV4dHVyZUluZGV4ID0gKF9kID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnRleHR1cmVQcm9wZXJ0aWVzKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RbJ19NYWluVGV4J107XG4gICAgICAgIGNvbnN0IGJhc2VDb2xvclRleHR1cmUgPSBiYXNlQ29sb3JUZXh0dXJlSW5kZXggIT0gbnVsbFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IGJhc2VDb2xvclRleHR1cmVJbmRleCxcbiAgICAgICAgICAgICAgICBleHRlbnNpb25zOiBPYmplY3QuYXNzaWduKHt9LCB0ZXh0dXJlVHJhbnNmb3JtRXh0KSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAvLyB1c2UgbXRvb24gaW5zdGVhZCBvZiB1bmxpdCwgc2luY2UgdGhlcmUgbWlnaHQgYmUgVlJNMC4wIHNwZWNpZmljIGZlYXR1cmVzIHRoYXQgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgZ2x0ZlxuICAgICAgICBjb25zdCBtdG9vbkV4dGVuc2lvbiA9IHtcbiAgICAgICAgICAgIHNwZWNWZXJzaW9uOiAnMS4wJyxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50V2l0aFpXcml0ZTogaXNUcmFuc3BhcmVudFpXcml0ZSxcbiAgICAgICAgICAgIHJlbmRlclF1ZXVlT2Zmc2V0TnVtYmVyLFxuICAgICAgICAgICAgc2hhZGVDb2xvckZhY3RvcjogYmFzZUNvbG9yRmFjdG9yLFxuICAgICAgICAgICAgc2hhZGVNdWx0aXBseVRleHR1cmU6IGJhc2VDb2xvclRleHR1cmUsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHNjaGVtYU1hdGVyaWFsKSwgeyBwYnJNZXRhbGxpY1JvdWdobmVzczoge1xuICAgICAgICAgICAgICAgIGJhc2VDb2xvckZhY3RvcixcbiAgICAgICAgICAgICAgICBiYXNlQ29sb3JUZXh0dXJlLFxuICAgICAgICAgICAgfSwgYWxwaGFNb2RlLFxuICAgICAgICAgICAgYWxwaGFDdXRvZmYsIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICAgICAgICAgICAgICAgVlJNQ19tYXRlcmlhbHNfbXRvb246IG10b29uRXh0ZW5zaW9uLFxuICAgICAgICAgICAgfSB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZ2xURiBgS0hSX3RleHR1cmVfdHJhbnNmb3JtYCBleHRlbnNpb24gZnJvbSB2MCB0ZXh0dXJlIHRyYW5zZm9ybSBpbmZvLlxuICAgICAqL1xuICAgIF9wb3J0VGV4dHVyZVRyYW5zZm9ybShtYXRlcmlhbFByb3BlcnRpZXMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgY29uc3QgdGV4dHVyZVRyYW5zZm9ybSA9IChfYSA9IG1hdGVyaWFsUHJvcGVydGllcy52ZWN0b3JQcm9wZXJ0aWVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbJ19NYWluVGV4J107XG4gICAgICAgIGlmICh0ZXh0dXJlVHJhbnNmb3JtID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvZmZzZXQgPSBbKF9iID0gdGV4dHVyZVRyYW5zZm9ybSA9PT0gbnVsbCB8fCB0ZXh0dXJlVHJhbnNmb3JtID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0ZXh0dXJlVHJhbnNmb3JtWzBdKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwLjAsIChfYyA9IHRleHR1cmVUcmFuc2Zvcm0gPT09IG51bGwgfHwgdGV4dHVyZVRyYW5zZm9ybSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGV4dHVyZVRyYW5zZm9ybVsxXSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMC4wXTtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBbKF9kID0gdGV4dHVyZVRyYW5zZm9ybSA9PT0gbnVsbCB8fCB0ZXh0dXJlVHJhbnNmb3JtID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0ZXh0dXJlVHJhbnNmb3JtWzJdKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAxLjAsIChfZSA9IHRleHR1cmVUcmFuc2Zvcm0gPT09IG51bGwgfHwgdGV4dHVyZVRyYW5zZm9ybSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGV4dHVyZVRyYW5zZm9ybVszXSkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogMS4wXTtcbiAgICAgICAgb2Zmc2V0WzFdID0gKHNjYWxlWzFdICogKDEuMCAtIG9mZnNldFsxXSkpICUgMS4wO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgICAgICAgICAgS0hSX3RleHR1cmVfdHJhbnNmb3JtOiB7IG9mZnNldCwgc2NhbGUgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydCB2MCByZW5kZXIgb3JkZXIgaW50byB2MSByZW5kZXIgb3JkZXIuXG4gICAgICogVGhpcyB1c2VzIGEgbWFwIGZyb20gdjAgcmVuZGVyIHF1ZXVlIHRvIHYxIGNvbXBsaWFudCByZW5kZXIgcXVldWUgb2Zmc2V0IHdoaWNoIGlzIGdlbmVyYXRlZCBpbiB7QGxpbmsgX3BvcHVsYXRlUmVuZGVyUXVldWVNYXB9LlxuICAgICAqL1xuICAgIF92MFBhcnNlUmVuZGVyUXVldWUobWF0ZXJpYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBjb25zdCBpc1RyYW5zcGFyZW50ID0gKF9iID0gKF9hID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmtleXdvcmRNYXApID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVsnX0FMUEhBQkxFTkRfT04nXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XG4gICAgICAgIGNvbnN0IGVuYWJsZWRaV3JpdGUgPSAoKF9jID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmZsb2F0UHJvcGVydGllcykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jWydfWldyaXRlJ10pID09PSAxO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgaWYgKGlzVHJhbnNwYXJlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHYwUXVldWUgPSBtYXRlcmlhbFByb3BlcnRpZXMucmVuZGVyUXVldWU7XG4gICAgICAgICAgICBpZiAodjBRdWV1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVuYWJsZWRaV3JpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGhpcy5fcmVuZGVyUXVldWVNYXBUcmFuc3BhcmVudFpXcml0ZS5nZXQodjBRdWV1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLl9yZW5kZXJRdWV1ZU1hcFRyYW5zcGFyZW50LmdldCh2MFF1ZXVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbWFwIHdoaWNoIG1hcHMgdjAgcmVuZGVyIHF1ZXVlIHRvIHYxIGNvbXBsaWFudCByZW5kZXIgcXVldWUgb2Zmc2V0LlxuICAgICAqIFRoaXMgbGlzdHMgdXAgYWxsIHJlbmRlciBxdWV1ZXMgdGhlIG1vZGVsIHVzZSBhbmQgY3JlYXRlcyBhIG1hcCB0byBuZXcgcmVuZGVyIHF1ZXVlIG9mZnNldHMgaW4gdGhlIHNhbWUgb3JkZXIuXG4gICAgICovXG4gICAgX3BvcHVsYXRlUmVuZGVyUXVldWVNYXAobWF0ZXJpYWxQcm9wZXJ0aWVzTGlzdCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBzZXQgb2YgdXNlZCByZW5kZXIgcXVldWVzIGluIFRyYW5zcGFyZW50IG1hdGVyaWFscy5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHJlbmRlclF1ZXVlc1RyYW5zcGFyZW50ID0gbmV3IFNldCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBzZXQgb2YgdXNlZCByZW5kZXIgcXVldWVzIGluIFRyYW5zcGFyZW50WldyaXRlIG1hdGVyaWFscy5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHJlbmRlclF1ZXVlc1RyYW5zcGFyZW50WldyaXRlID0gbmV3IFNldCgpO1xuICAgICAgICAvLyBwb3B1bGF0ZSB0aGUgcmVuZGVyIHF1ZXVlIHNldFxuICAgICAgICBtYXRlcmlhbFByb3BlcnRpZXNMaXN0LmZvckVhY2goKG1hdGVyaWFsUHJvcGVydGllcykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICBjb25zdCBpc1RyYW5zcGFyZW50ID0gKF9iID0gKF9hID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmtleXdvcmRNYXApID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVsnX0FMUEhBQkxFTkRfT04nXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBlbmFibGVkWldyaXRlID0gKChfYyA9IG1hdGVyaWFsUHJvcGVydGllcy5mbG9hdFByb3BlcnRpZXMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY1snX1pXcml0ZSddKSA9PT0gMTtcbiAgICAgICAgICAgIGlmIChpc1RyYW5zcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdjBRdWV1ZSA9IG1hdGVyaWFsUHJvcGVydGllcy5yZW5kZXJRdWV1ZTtcbiAgICAgICAgICAgICAgICBpZiAodjBRdWV1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVkWldyaXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJRdWV1ZXNUcmFuc3BhcmVudFpXcml0ZS5hZGQodjBRdWV1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJRdWV1ZXNUcmFuc3BhcmVudC5hZGQodjBRdWV1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBzaG93IGEgd2FybmluZyBpZiB0aGUgbW9kZWwgdXNlcyB2MSBpbmNvbXBhdGlibGUgbnVtYmVyIG9mIHJlbmRlciBxdWV1ZXNcbiAgICAgICAgaWYgKHJlbmRlclF1ZXVlc1RyYW5zcGFyZW50LnNpemUgPiAxMCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBWUk1NYXRlcmlhbHNWMENvbXBhdFBsdWdpbjogVGhpcyBWUk0gdXNlcyAke3JlbmRlclF1ZXVlc1RyYW5zcGFyZW50LnNpemV9IHJlbmRlciBxdWV1ZXMgZm9yIFRyYW5zcGFyZW50IG1hdGVyaWFscyB3aGlsZSBWUk0gMS4wIG9ubHkgc3VwcG9ydHMgdXAgdG8gMTAgcmVuZGVyIHF1ZXVlcy4gVGhlIG1vZGVsIG1pZ2h0IG5vdCBiZSByZW5kZXJlZCBjb3JyZWN0bHkuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbmRlclF1ZXVlc1RyYW5zcGFyZW50WldyaXRlLnNpemUgPiAxMCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBWUk1NYXRlcmlhbHNWMENvbXBhdFBsdWdpbjogVGhpcyBWUk0gdXNlcyAke3JlbmRlclF1ZXVlc1RyYW5zcGFyZW50WldyaXRlLnNpemV9IHJlbmRlciBxdWV1ZXMgZm9yIFRyYW5zcGFyZW50WldyaXRlIG1hdGVyaWFscyB3aGlsZSBWUk0gMS4wIG9ubHkgc3VwcG9ydHMgdXAgdG8gMTAgcmVuZGVyIHF1ZXVlcy4gVGhlIG1vZGVsIG1pZ2h0IG5vdCBiZSByZW5kZXJlZCBjb3JyZWN0bHkuYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY3JlYXRlIGEgbWFwIGZyb20gdjAgcmVuZGVyIHF1ZXVlIHRvIHYxIHJlbmRlciBxdWV1ZSBvZmZzZXRcbiAgICAgICAgQXJyYXkuZnJvbShyZW5kZXJRdWV1ZXNUcmFuc3BhcmVudClcbiAgICAgICAgICAgIC5zb3J0KClcbiAgICAgICAgICAgIC5mb3JFYWNoKChxdWV1ZSwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3UXVldWVPZmZzZXQgPSBNYXRoLm1pbihNYXRoLm1heChpIC0gcmVuZGVyUXVldWVzVHJhbnNwYXJlbnQuc2l6ZSArIDEsIC05KSwgMCk7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJRdWV1ZU1hcFRyYW5zcGFyZW50LnNldChxdWV1ZSwgbmV3UXVldWVPZmZzZXQpO1xuICAgICAgICB9KTtcbiAgICAgICAgQXJyYXkuZnJvbShyZW5kZXJRdWV1ZXNUcmFuc3BhcmVudFpXcml0ZSlcbiAgICAgICAgICAgIC5zb3J0KClcbiAgICAgICAgICAgIC5mb3JFYWNoKChxdWV1ZSwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3UXVldWVPZmZzZXQgPSBNYXRoLm1pbihNYXRoLm1heChpLCAwKSwgOSk7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJRdWV1ZU1hcFRyYW5zcGFyZW50WldyaXRlLnNldChxdWV1ZSwgbmV3UXVldWVPZmZzZXQpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFZSTU1hdGVyaWFsc1YwQ29tcGF0UGx1Z2luIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHaHlaV1V0ZG5KdExXMWhkR1Z5YVdGc2N5MTJNR052YlhCaGRDNXRiMlIxYkdVdWFuTWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OTBjMnhwWWk5MGMyeHBZaTVsY3pZdWFuTWlMQ0l1TGk5emNtTXZkWFJwYkhNdloyRnRiV0ZGVDFSR0xuUnpJaXdpTGk0dmMzSmpMMVpTVFUxaGRHVnlhV0ZzYzFZd1EyOXRjR0YwVUd4MVoybHVMblJ6SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2NseHVRMjl3ZVhKcFoyaDBJQ2hqS1NCTmFXTnliM052Wm5RZ1EyOXljRzl5WVhScGIyNHVYSEpjYmx4eVhHNVFaWEp0YVhOemFXOXVJSFJ2SUhWelpTd2dZMjl3ZVN3Z2JXOWthV1o1TENCaGJtUXZiM0lnWkdsemRISnBZblYwWlNCMGFHbHpJSE52Wm5SM1lYSmxJR1p2Y2lCaGJubGNjbHh1Y0hWeWNHOXpaU0IzYVhSb0lHOXlJSGRwZEdodmRYUWdabVZsSUdseklHaGxjbVZpZVNCbmNtRnVkR1ZrTGx4eVhHNWNjbHh1VkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaUJCVGtRZ1ZFaEZJRUZWVkVoUFVpQkVTVk5EVEVGSlRWTWdRVXhNSUZkQlVsSkJUbFJKUlZNZ1YwbFVTRnh5WEc1U1JVZEJVa1FnVkU4Z1ZFaEpVeUJUVDBaVVYwRlNSU0JKVGtOTVZVUkpUa2NnUVV4TUlFbE5VRXhKUlVRZ1YwRlNVa0ZPVkVsRlV5QlBSaUJOUlZKRFNFRk9WRUZDU1V4SlZGbGNjbHh1UVU1RUlFWkpWRTVGVTFNdUlFbE9JRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSU0JCVlZSSVQxSWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dVMUJGUTBsQlRDd2dSRWxTUlVOVUxGeHlYRzVKVGtSSlVrVkRWQ3dnVDFJZ1EwOU9VMFZSVlVWT1ZFbEJUQ0JFUVUxQlIwVlRJRTlTSUVGT1dTQkVRVTFCUjBWVElGZElRVlJUVDBWV1JWSWdVa1ZUVlV4VVNVNUhJRVpTVDAxY2NseHVURTlUVXlCUFJpQlZVMFVzSUVSQlZFRWdUMUlnVUZKUFJrbFVVeXdnVjBoRlZFaEZVaUJKVGlCQlRpQkJRMVJKVDA0Z1QwWWdRMDlPVkZKQlExUXNJRTVGUjB4SlIwVk9RMFVnVDFKY2NseHVUMVJJUlZJZ1ZFOVNWRWxQVlZNZ1FVTlVTVTlPTENCQlVrbFRTVTVISUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRlZUUlNCUFVseHlYRzVRUlZKR1QxSk5RVTVEUlNCUFJpQlVTRWxUSUZOUFJsUlhRVkpGTGx4eVhHNHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lBcUwxeHlYRzR2S2lCbmJHOWlZV3dnVW1WbWJHVmpkQ3dnVUhKdmJXbHpaU0FxTDF4eVhHNWNjbHh1ZG1GeUlHVjRkR1Z1WkZOMFlYUnBZM01nUFNCbWRXNWpkR2x2Ymloa0xDQmlLU0I3WEhKY2JpQWdJQ0JsZUhSbGJtUlRkR0YwYVdOeklEMGdUMkpxWldOMExuTmxkRkJ5YjNSdmRIbHdaVTltSUh4OFhISmNiaUFnSUNBZ0lDQWdLSHNnWDE5d2NtOTBiMTlmT2lCYlhTQjlJR2x1YzNSaGJtTmxiMllnUVhKeVlYa2dKaVlnWm5WdVkzUnBiMjRnS0dRc0lHSXBJSHNnWkM1ZlgzQnliM1J2WDE4Z1BTQmlPeUI5S1NCOGZGeHlYRzRnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJQ2hrTENCaUtTQjdJR1p2Y2lBb2RtRnlJSEFnYVc0Z1lpa2dhV1lnS0U5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNoaUxDQndLU2tnWkZ0d1hTQTlJR0piY0YwN0lIMDdYSEpjYmlBZ0lDQnlaWFIxY200Z1pYaDBaVzVrVTNSaGRHbGpjeWhrTENCaUtUdGNjbHh1ZlR0Y2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJWNGRHVnVaSE1vWkN3Z1lpa2dlMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJpSUNFOVBTQmNJbVoxYm1OMGFXOXVYQ0lnSmlZZ1lpQWhQVDBnYm5Wc2JDbGNjbHh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVEyeGhjM01nWlhoMFpXNWtjeUIyWVd4MVpTQmNJaUFySUZOMGNtbHVaeWhpS1NBcklGd2lJR2x6SUc1dmRDQmhJR052Ym5OMGNuVmpkRzl5SUc5eUlHNTFiR3hjSWlrN1hISmNiaUFnSUNCbGVIUmxibVJUZEdGMGFXTnpLR1FzSUdJcE8xeHlYRzRnSUNBZ1puVnVZM1JwYjI0Z1gxOG9LU0I3SUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lnUFNCa095QjlYSEpjYmlBZ0lDQmtMbkJ5YjNSdmRIbHdaU0E5SUdJZ1BUMDlJRzUxYkd3Z1B5QlBZbXBsWTNRdVkzSmxZWFJsS0dJcElEb2dLRjlmTG5CeWIzUnZkSGx3WlNBOUlHSXVjSEp2ZEc5MGVYQmxMQ0J1WlhjZ1gxOG9LU2s3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCMllYSWdYMTloYzNOcFoyNGdQU0JtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUY5ZllYTnphV2R1SUQwZ1QySnFaV04wTG1GemMybG5iaUI4ZkNCbWRXNWpkR2x2YmlCZlgyRnpjMmxuYmloMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnY3l3Z2FTQTlJREVzSUc0Z1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb095QnBJRHdnYmpzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE1nUFNCaGNtZDFiV1Z1ZEhOYmFWMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlIQWdhVzRnY3lrZ2FXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h6TENCd0tTa2dkRnR3WFNBOUlITmJjRjA3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlGOWZZWE56YVdkdUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgzSmxjM1FvY3l3Z1pTa2dlMXh5WEc0Z0lDQWdkbUZ5SUhRZ1BTQjdmVHRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJSEFnYVc0Z2N5a2dhV1lnS0U5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNoekxDQndLU0FtSmlCbExtbHVaR1Y0VDJZb2NDa2dQQ0F3S1Z4eVhHNGdJQ0FnSUNBZ0lIUmJjRjBnUFNCelczQmRPMXh5WEc0Z0lDQWdhV1lnS0hNZ0lUMGdiblZzYkNBbUppQjBlWEJsYjJZZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N5QTlQVDBnWENKbWRXNWpkR2x2Ymx3aUtWeHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQndJRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVUzbHRZbTlzY3loektUc2dhU0E4SUhBdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dVdWFXNWtaWGhQWmlod1cybGRLU0E4SURBZ0ppWWdUMkpxWldOMExuQnliM1J2ZEhsd1pTNXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaUzVqWVd4c0tITXNJSEJiYVYwcEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRnR3VzJsZFhTQTlJSE5iY0Z0cFhWMDdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJSFE3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyUmxZMjl5WVhSbEtHUmxZMjl5WVhSdmNuTXNJSFJoY21kbGRDd2dhMlY1TENCa1pYTmpLU0I3WEhKY2JpQWdJQ0IyWVhJZ1l5QTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3NJSElnUFNCaklEd2dNeUEvSUhSaGNtZGxkQ0E2SUdSbGMyTWdQVDA5SUc1MWJHd2dQeUJrWlhOaklEMGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2loMFlYSm5aWFFzSUd0bGVTa2dPaUJrWlhOakxDQmtPMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJTWldac1pXTjBJRDA5UFNCY0ltOWlhbVZqZEZ3aUlDWW1JSFI1Y0dWdlppQlNaV1pzWldOMExtUmxZMjl5WVhSbElEMDlQU0JjSW1aMWJtTjBhVzl1WENJcElISWdQU0JTWldac1pXTjBMbVJsWTI5eVlYUmxLR1JsWTI5eVlYUnZjbk1zSUhSaGNtZGxkQ3dnYTJWNUxDQmtaWE5qS1R0Y2NseHVJQ0FnSUdWc2MyVWdabTl5SUNoMllYSWdhU0E5SUdSbFkyOXlZWFJ2Y25NdWJHVnVaM1JvSUMwZ01Uc2dhU0ErUFNBd095QnBMUzBwSUdsbUlDaGtJRDBnWkdWamIzSmhkRzl5YzF0cFhTa2djaUE5SUNoaklEd2dNeUEvSUdRb2Npa2dPaUJqSUQ0Z015QS9JR1FvZEdGeVoyVjBMQ0JyWlhrc0lISXBJRG9nWkNoMFlYSm5aWFFzSUd0bGVTa3BJSHg4SUhJN1hISmNiaUFnSUNCeVpYUjFjbTRnWXlBK0lETWdKaVlnY2lBbUppQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEdGeVoyVjBMQ0JyWlhrc0lISXBMQ0J5TzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXdZWEpoYlNod1lYSmhiVWx1WkdWNExDQmtaV052Y21GMGIzSXBJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9kR0Z5WjJWMExDQnJaWGtwSUhzZ1pHVmpiM0poZEc5eUtIUmhjbWRsZEN3Z2EyVjVMQ0J3WVhKaGJVbHVaR1Y0S1RzZ2ZWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTlsYzBSbFkyOXlZWFJsS0dOMGIzSXNJR1JsYzJOeWFYQjBiM0pKYml3Z1pHVmpiM0poZEc5eWN5d2dZMjl1ZEdWNGRFbHVMQ0JwYm1sMGFXRnNhWHBsY25Nc0lHVjRkSEpoU1c1cGRHbGhiR2w2WlhKektTQjdYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQmhZMk5sY0hRb1ppa2dleUJwWmlBb1ppQWhQVDBnZG05cFpDQXdJQ1ltSUhSNWNHVnZaaUJtSUNFOVBTQmNJbVoxYm1OMGFXOXVYQ0lwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkdkVzVqZEdsdmJpQmxlSEJsWTNSbFpGd2lLVHNnY21WMGRYSnVJR1k3SUgxY2NseHVJQ0FnSUhaaGNpQnJhVzVrSUQwZ1kyOXVkR1Y0ZEVsdUxtdHBibVFzSUd0bGVTQTlJR3RwYm1RZ1BUMDlJRndpWjJWMGRHVnlYQ0lnUHlCY0ltZGxkRndpSURvZ2EybHVaQ0E5UFQwZ1hDSnpaWFIwWlhKY0lpQS9JRndpYzJWMFhDSWdPaUJjSW5aaGJIVmxYQ0k3WEhKY2JpQWdJQ0IyWVhJZ2RHRnlaMlYwSUQwZ0lXUmxjMk55YVhCMGIzSkpiaUFtSmlCamRHOXlJRDhnWTI5dWRHVjRkRWx1VzF3aWMzUmhkR2xqWENKZElEOGdZM1J2Y2lBNklHTjBiM0l1Y0hKdmRHOTBlWEJsSURvZ2JuVnNiRHRjY2x4dUlDQWdJSFpoY2lCa1pYTmpjbWx3ZEc5eUlEMGdaR1Z6WTNKcGNIUnZja2x1SUh4OElDaDBZWEpuWlhRZ1B5QlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0hSaGNtZGxkQ3dnWTI5dWRHVjRkRWx1TG01aGJXVXBJRG9nZTMwcE8xeHlYRzRnSUNBZ2RtRnlJRjhzSUdSdmJtVWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0JrWldOdmNtRjBiM0p6TG14bGJtZDBhQ0F0SURFN0lHa2dQajBnTURzZ2FTMHRLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR052Ym5SbGVIUWdQU0I3ZlR0Y2NseHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQndJR2x1SUdOdmJuUmxlSFJKYmlrZ1kyOXVkR1Y0ZEZ0d1hTQTlJSEFnUFQwOUlGd2lZV05qWlhOelhDSWdQeUI3ZlNBNklHTnZiblJsZUhSSmJsdHdYVHRjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCd0lHbHVJR052Ym5SbGVIUkpiaTVoWTJObGMzTXBJR052Ym5SbGVIUXVZV05qWlhOelczQmRJRDBnWTI5dWRHVjRkRWx1TG1GalkyVnpjMXR3WFR0Y2NseHVJQ0FnSUNBZ0lDQmpiMjUwWlhoMExtRmtaRWx1YVhScFlXeHBlbVZ5SUQwZ1puVnVZM1JwYjI0Z0tHWXBJSHNnYVdZZ0tHUnZibVVwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkRZVzV1YjNRZ1lXUmtJR2x1YVhScFlXeHBlbVZ5Y3lCaFpuUmxjaUJrWldOdmNtRjBhVzl1SUdoaGN5QmpiMjF3YkdWMFpXUmNJaWs3SUdWNGRISmhTVzVwZEdsaGJHbDZaWEp6TG5CMWMyZ29ZV05qWlhCMEtHWWdmSHdnYm5Wc2JDa3BPeUI5TzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0FvTUN3Z1pHVmpiM0poZEc5eWMxdHBYU2tvYTJsdVpDQTlQVDBnWENKaFkyTmxjM052Y2x3aUlEOGdleUJuWlhRNklHUmxjMk55YVhCMGIzSXVaMlYwTENCelpYUTZJR1JsYzJOeWFYQjBiM0l1YzJWMElIMGdPaUJrWlhOamNtbHdkRzl5VzJ0bGVWMHNJR052Ym5SbGVIUXBPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHJhVzVrSUQwOVBTQmNJbUZqWTJWemMyOXlYQ0lwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM1ZzZENBOVBUMGdkbTlwWkNBd0tTQmpiMjUwYVc1MVpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDQTlQVDBnYm5Wc2JDQjhmQ0IwZVhCbGIyWWdjbVZ6ZFd4MElDRTlQU0JjSW05aWFtVmpkRndpS1NCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lUMkpxWldOMElHVjRjR1ZqZEdWa1hDSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWHlBOUlHRmpZMlZ3ZENoeVpYTjFiSFF1WjJWMEtTa2daR1Z6WTNKcGNIUnZjaTVuWlhRZ1BTQmZPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWHlBOUlHRmpZMlZ3ZENoeVpYTjFiSFF1YzJWMEtTa2daR1Z6WTNKcGNIUnZjaTV6WlhRZ1BTQmZPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWHlBOUlHRmpZMlZ3ZENoeVpYTjFiSFF1YVc1cGRDa3BJR2x1YVhScFlXeHBlbVZ5Y3k1d2RYTm9LRjhwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hmSUQwZ1lXTmpaWEIwS0hKbGMzVnNkQ2twSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHdHBibVFnUFQwOUlGd2labWxsYkdSY0lpa2dhVzVwZEdsaGJHbDZaWEp6TG5CMWMyZ29YeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ1pHVnpZM0pwY0hSdmNsdHJaWGxkSUQwZ1h6dGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0JwWmlBb2RHRnlaMlYwS1NCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kR0Z5WjJWMExDQmpiMjUwWlhoMFNXNHVibUZ0WlN3Z1pHVnpZM0pwY0hSdmNpazdYSEpjYmlBZ0lDQmtiMjVsSUQwZ2RISjFaVHRjY2x4dWZUdGNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgzSjFia2x1YVhScFlXeHBlbVZ5Y3loMGFHbHpRWEpuTENCcGJtbDBhV0ZzYVhwbGNuTXNJSFpoYkhWbEtTQjdYSEpjYmlBZ0lDQjJZWElnZFhObFZtRnNkV1VnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01qdGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dhVzVwZEdsaGJHbDZaWEp6TG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0IxYzJWV1lXeDFaU0EvSUdsdWFYUnBZV3hwZW1WeWMxdHBYUzVqWVd4c0tIUm9hWE5CY21jc0lIWmhiSFZsS1NBNklHbHVhWFJwWVd4cGVtVnljMXRwWFM1allXeHNLSFJvYVhOQmNtY3BPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlIVnpaVlpoYkhWbElEOGdkbUZzZFdVZ09pQjJiMmxrSURBN1hISmNibjA3WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTl3Y205d1MyVjVLSGdwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwZVhCbGIyWWdlQ0E5UFQwZ1hDSnplVzFpYjJ4Y0lpQS9JSGdnT2lCY0lsd2lMbU52Ym1OaGRDaDRLVHRjY2x4dWZUdGNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgzTmxkRVoxYm1OMGFXOXVUbUZ0WlNobUxDQnVZVzFsTENCd2NtVm1hWGdwSUh0Y2NseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2JtRnRaU0E5UFQwZ1hDSnplVzFpYjJ4Y0lpa2dibUZ0WlNBOUlHNWhiV1V1WkdWelkzSnBjSFJwYjI0Z1B5QmNJbHRjSWk1amIyNWpZWFFvYm1GdFpTNWtaWE5qY21sd2RHbHZiaXdnWENKZFhDSXBJRG9nWENKY0lqdGNjbHh1SUNBZ0lISmxkSFZ5YmlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aaXdnWENKdVlXMWxYQ0lzSUhzZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExDQjJZV3gxWlRvZ2NISmxabWw0SUQ4Z1hDSmNJaTVqYjI1allYUW9jSEpsWm1sNExDQmNJaUJjSWl3Z2JtRnRaU2tnT2lCdVlXMWxJSDBwTzF4eVhHNTlPMXh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZiV1YwWVdSaGRHRW9iV1YwWVdSaGRHRkxaWGtzSUcxbGRHRmtZWFJoVm1Gc2RXVXBJSHRjY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnVW1WbWJHVmpkQ0E5UFQwZ1hDSnZZbXBsWTNSY0lpQW1KaUIwZVhCbGIyWWdVbVZtYkdWamRDNXRaWFJoWkdGMFlTQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUtTQnlaWFIxY200Z1VtVm1iR1ZqZEM1dFpYUmhaR0YwWVNodFpYUmhaR0YwWVV0bGVTd2diV1YwWVdSaGRHRldZV3gxWlNrN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMkYzWVdsMFpYSW9kR2hwYzBGeVp5d2dYMkZ5WjNWdFpXNTBjeXdnVUN3Z1oyVnVaWEpoZEc5eUtTQjdYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQmhaRzl3ZENoMllXeDFaU2tnZXlCeVpYUjFjbTRnZG1Gc2RXVWdhVzV6ZEdGdVkyVnZaaUJRSUQ4Z2RtRnNkV1VnT2lCdVpYY2dVQ2htZFc1amRHbHZiaUFvY21WemIyeDJaU2tnZXlCeVpYTnZiSFpsS0haaGJIVmxLVHNnZlNrN0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dLRkFnZkh3Z0tGQWdQU0JRY205dGFYTmxLU2tvWm5WdVkzUnBiMjRnS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHWjFiR1pwYkd4bFpDaDJZV3gxWlNrZ2V5QjBjbmtnZXlCemRHVndLR2RsYm1WeVlYUnZjaTV1WlhoMEtIWmhiSFZsS1NrN0lIMGdZMkYwWTJnZ0tHVXBJSHNnY21WcVpXTjBLR1VwT3lCOUlIMWNjbHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ5WldwbFkzUmxaQ2gyWVd4MVpTa2dleUIwY25rZ2V5QnpkR1Z3S0dkbGJtVnlZWFJ2Y2x0Y0luUm9jbTkzWENKZEtIWmhiSFZsS1NrN0lIMGdZMkYwWTJnZ0tHVXBJSHNnY21WcVpXTjBLR1VwT3lCOUlIMWNjbHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ6ZEdWd0tISmxjM1ZzZENrZ2V5QnlaWE4xYkhRdVpHOXVaU0EvSUhKbGMyOXNkbVVvY21WemRXeDBMblpoYkhWbEtTQTZJR0ZrYjNCMEtISmxjM1ZzZEM1MllXeDFaU2t1ZEdobGJpaG1kV3htYVd4c1pXUXNJSEpsYW1WamRHVmtLVHNnZlZ4eVhHNGdJQ0FnSUNBZ0lITjBaWEFvS0dkbGJtVnlZWFJ2Y2lBOUlHZGxibVZ5WVhSdmNpNWhjSEJzZVNoMGFHbHpRWEpuTENCZllYSm5kVzFsYm5SeklIeDhJRnRkS1NrdWJtVjRkQ2dwS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTluWlc1bGNtRjBiM0lvZEdocGMwRnlaeXdnWW05a2VTa2dlMXh5WEc0Z0lDQWdkbUZ5SUY4Z1BTQjdJR3hoWW1Wc09pQXdMQ0J6Wlc1ME9pQm1kVzVqZEdsdmJpZ3BJSHNnYVdZZ0tIUmJNRjBnSmlBeEtTQjBhSEp2ZHlCMFd6RmRPeUJ5WlhSMWNtNGdkRnN4WFRzZ2ZTd2dkSEo1Y3pvZ1cxMHNJRzl3Y3pvZ1cxMGdmU3dnWml3Z2VTd2dkQ3dnWnp0Y2NseHVJQ0FnSUhKbGRIVnliaUJuSUQwZ2V5QnVaWGgwT2lCMlpYSmlLREFwTENCY0luUm9jbTkzWENJNklIWmxjbUlvTVNrc0lGd2ljbVYwZFhKdVhDSTZJSFpsY21Jb01pa2dmU3dnZEhsd1pXOW1JRk41YldKdmJDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JQ2huVzFONWJXSnZiQzVwZEdWeVlYUnZjbDBnUFNCbWRXNWpkR2x2YmlncElIc2djbVYwZFhKdUlIUm9hWE03SUgwcExDQm5PMXh5WEc0Z0lDQWdablZ1WTNScGIyNGdkbVZ5WWlodUtTQjdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9kaWtnZXlCeVpYUjFjbTRnYzNSbGNDaGJiaXdnZGwwcE95QjlPeUI5WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJ6ZEdWd0tHOXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR1lwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkhaVzVsY21GMGIzSWdhWE1nWVd4eVpXRmtlU0JsZUdWamRYUnBibWN1WENJcE8xeHlYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaG5JQ1ltSUNobklEMGdNQ3dnYjNCYk1GMGdKaVlnS0Y4Z1BTQXdLU2tzSUY4cElIUnllU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobUlEMGdNU3dnZVNBbUppQW9kQ0E5SUc5d1d6QmRJQ1lnTWlBL0lIbGJYQ0p5WlhSMWNtNWNJbDBnT2lCdmNGc3dYU0EvSUhsYlhDSjBhSEp2ZDF3aVhTQjhmQ0FvS0hRZ1BTQjVXMXdpY21WMGRYSnVYQ0pkS1NBbUppQjBMbU5oYkd3b2VTa3NJREFwSURvZ2VTNXVaWGgwS1NBbUppQWhLSFFnUFNCMExtTmhiR3dvZVN3Z2IzQmJNVjBwS1M1a2IyNWxLU0J5WlhSMWNtNGdkRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hrZ1BTQXdMQ0IwS1NCdmNDQTlJRnR2Y0Zzd1hTQW1JRElzSUhRdWRtRnNkV1ZkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLRzl3V3pCZEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElEQTZJR05oYzJVZ01Ub2dkQ0E5SUc5d095QmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTkRvZ1h5NXNZV0psYkNzck95QnlaWFIxY200Z2V5QjJZV3gxWlRvZ2IzQmJNVjBzSUdSdmJtVTZJR1poYkhObElIMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElEVTZJRjh1YkdGaVpXd3JLenNnZVNBOUlHOXdXekZkT3lCdmNDQTlJRnN3WFRzZ1kyOXVkR2x1ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURjNklHOXdJRDBnWHk1dmNITXVjRzl3S0NrN0lGOHVkSEo1Y3k1d2IzQW9LVHNnWTI5dWRHbHVkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaEtIUWdQU0JmTG5SeWVYTXNJSFFnUFNCMExteGxibWQwYUNBK0lEQWdKaVlnZEZ0MExteGxibWQwYUNBdElERmRLU0FtSmlBb2IzQmJNRjBnUFQwOUlEWWdmSHdnYjNCYk1GMGdQVDA5SURJcEtTQjdJRjhnUFNBd095QmpiMjUwYVc1MVpUc2dmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0Zzd1hTQTlQVDBnTXlBbUppQW9JWFFnZkh3Z0tHOXdXekZkSUQ0Z2RGc3dYU0FtSmlCdmNGc3hYU0E4SUhSYk0xMHBLU2tnZXlCZkxteGhZbVZzSUQwZ2IzQmJNVjA3SUdKeVpXRnJPeUI5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c5d1d6QmRJRDA5UFNBMklDWW1JRjh1YkdGaVpXd2dQQ0IwV3pGZEtTQjdJRjh1YkdGaVpXd2dQU0IwV3pGZE95QjBJRDBnYjNBN0lHSnlaV0ZyT3lCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUWdKaVlnWHk1c1lXSmxiQ0E4SUhSYk1sMHBJSHNnWHk1c1lXSmxiQ0E5SUhSYk1sMDdJRjh1YjNCekxuQjFjMmdvYjNBcE95QmljbVZoYXpzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBXekpkS1NCZkxtOXdjeTV3YjNBb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZkxuUnllWE11Y0c5d0tDazdJR052Ym5ScGJuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdJRDBnWW05a2VTNWpZV3hzS0hSb2FYTkJjbWNzSUY4cE8xeHlYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUhzZ2IzQWdQU0JiTml3Z1pWMDdJSGtnUFNBd095QjlJR1pwYm1Gc2JIa2dleUJtSUQwZ2RDQTlJREE3SUgxY2NseHVJQ0FnSUNBZ0lDQnBaaUFvYjNCYk1GMGdKaUExS1NCMGFISnZkeUJ2Y0ZzeFhUc2djbVYwZFhKdUlIc2dkbUZzZFdVNklHOXdXekJkSUQ4Z2IzQmJNVjBnT2lCMmIybGtJREFzSUdSdmJtVTZJSFJ5ZFdVZ2ZUdGNjbHh1SUNBZ0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJSFpoY2lCZlgyTnlaV0YwWlVKcGJtUnBibWNnUFNCUFltcGxZM1F1WTNKbFlYUmxJRDhnS0daMWJtTjBhVzl1S0c4c0lHMHNJR3NzSUdzeUtTQjdYSEpjYmlBZ0lDQnBaaUFvYXpJZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnYXpJZ1BTQnJPMXh5WEc0Z0lDQWdkbUZ5SUdSbGMyTWdQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtHMHNJR3NwTzF4eVhHNGdJQ0FnYVdZZ0tDRmtaWE5qSUh4OElDaGNJbWRsZEZ3aUlHbHVJR1JsYzJNZ1B5QWhiUzVmWDJWelRXOWtkV3hsSURvZ1pHVnpZeTUzY21sMFlXSnNaU0I4ZkNCa1pYTmpMbU52Ym1acFozVnlZV0pzWlNrcElIdGNjbHh1SUNBZ0lDQWdJQ0JrWlhOaklEMGdleUJsYm5WdFpYSmhZbXhsT2lCMGNuVmxMQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdiVnRyWFRzZ2ZTQjlPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0c4c0lHc3lMQ0JrWlhOaktUdGNjbHh1ZlNrZ09pQW9ablZ1WTNScGIyNG9ieXdnYlN3Z2F5d2dheklwSUh0Y2NseHVJQ0FnSUdsbUlDaHJNaUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQnJNaUE5SUdzN1hISmNiaUFnSUNCdlcyc3lYU0E5SUcxYmExMDdYSEpjYm4wcE8xeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZlpYaHdiM0owVTNSaGNpaHRMQ0J2S1NCN1hISmNiaUFnSUNCbWIzSWdLSFpoY2lCd0lHbHVJRzBwSUdsbUlDaHdJQ0U5UFNCY0ltUmxabUYxYkhSY0lpQW1KaUFoVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c4c0lIQXBLU0JmWDJOeVpXRjBaVUpwYm1ScGJtY29ieXdnYlN3Z2NDazdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDNaaGJIVmxjeWh2S1NCN1hISmNiaUFnSUNCMllYSWdjeUE5SUhSNWNHVnZaaUJUZVcxaWIyd2dQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJUZVcxaWIyd3VhWFJsY21GMGIzSXNJRzBnUFNCeklDWW1JRzliYzEwc0lHa2dQU0F3TzF4eVhHNGdJQ0FnYVdZZ0tHMHBJSEpsZEhWeWJpQnRMbU5oYkd3b2J5azdYSEpjYmlBZ0lDQnBaaUFvYnlBbUppQjBlWEJsYjJZZ2J5NXNaVzVuZEdnZ1BUMDlJRndpYm5WdFltVnlYQ0lwSUhKbGRIVnliaUI3WEhKY2JpQWdJQ0FnSUNBZ2JtVjRkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ieUFtSmlCcElENDlJRzh1YkdWdVozUm9LU0J2SUQwZ2RtOXBaQ0F3TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdleUIyWVd4MVpUb2dieUFtSmlCdlcya3JLMTBzSUdSdmJtVTZJQ0Z2SUgwN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVHRjY2x4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvY3lBL0lGd2lUMkpxWldOMElHbHpJRzV2ZENCcGRHVnlZV0pzWlM1Y0lpQTZJRndpVTNsdFltOXNMbWwwWlhKaGRHOXlJR2x6SUc1dmRDQmtaV1pwYm1Wa0xsd2lLVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmNtVmhaQ2h2TENCdUtTQjdYSEpjYmlBZ0lDQjJZWElnYlNBOUlIUjVjR1Z2WmlCVGVXMWliMndnUFQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCdlcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwN1hISmNiaUFnSUNCcFppQW9JVzBwSUhKbGRIVnliaUJ2TzF4eVhHNGdJQ0FnZG1GeUlHa2dQU0J0TG1OaGJHd29ieWtzSUhJc0lHRnlJRDBnVzEwc0lHVTdYSEpjYmlBZ0lDQjBjbmtnZTF4eVhHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNnb2JpQTlQVDBnZG05cFpDQXdJSHg4SUc0dExTQStJREFwSUNZbUlDRW9jaUE5SUdrdWJtVjRkQ2dwS1M1a2IyNWxLU0JoY2k1d2RYTm9LSEl1ZG1Gc2RXVXBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdZMkYwWTJnZ0tHVnljbTl5S1NCN0lHVWdQU0I3SUdWeWNtOXlPaUJsY25KdmNpQjlPeUI5WEhKY2JpQWdJQ0JtYVc1aGJHeDVJSHRjY2x4dUlDQWdJQ0FnSUNCMGNua2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBbUppQWhjaTVrYjI1bElDWW1JQ2h0SUQwZ2FWdGNJbkpsZEhWeWJsd2lYU2twSUcwdVkyRnNiQ2hwS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWm1sdVlXeHNlU0I3SUdsbUlDaGxLU0IwYUhKdmR5QmxMbVZ5Y205eU95QjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z1lYSTdYSEpjYm4xY2NseHVYSEpjYmk4cUtpQkFaR1Z3Y21WallYUmxaQ0FxTDF4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXpjSEpsWVdRb0tTQjdYSEpjYmlBZ0lDQm1iM0lnS0haaGNpQmhjaUE5SUZ0ZExDQnBJRDBnTURzZ2FTQThJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdJR2tyS3lsY2NseHVJQ0FnSUNBZ0lDQmhjaUE5SUdGeUxtTnZibU5oZENoZlgzSmxZV1FvWVhKbmRXMWxiblJ6VzJsZEtTazdYSEpjYmlBZ0lDQnlaWFIxY200Z1lYSTdYSEpjYm4xY2NseHVYSEpjYmk4cUtpQkFaR1Z3Y21WallYUmxaQ0FxTDF4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXpjSEpsWVdSQmNuSmhlWE1vS1NCN1hISmNiaUFnSUNCbWIzSWdLSFpoY2lCeklEMGdNQ3dnYVNBOUlEQXNJR2xzSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTQThJR2xzT3lCcEt5c3BJSE1nS3owZ1lYSm5kVzFsYm5SelcybGRMbXhsYm1kMGFEdGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlISWdQU0JCY25KaGVTaHpLU3dnYXlBOUlEQXNJR2tnUFNBd095QnBJRHdnYVd3N0lHa3JLeWxjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCaElEMGdZWEpuZFcxbGJuUnpXMmxkTENCcUlEMGdNQ3dnYW13Z1BTQmhMbXhsYm1kMGFEc2dhaUE4SUdwc095QnFLeXNzSUdzckt5bGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NsdHJYU0E5SUdGYmFsMDdYSEpjYmlBZ0lDQnlaWFIxY200Z2NqdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmYzNCeVpXRmtRWEp5WVhrb2RHOHNJR1p5YjIwc0lIQmhZMnNwSUh0Y2NseHVJQ0FnSUdsbUlDaHdZV05ySUh4OElHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BUMDlJRElwSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzSUQwZ1puSnZiUzVzWlc1bmRHZ3NJR0Z5T3lCcElEd2diRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHRnlJSHg4SUNFb2FTQnBiaUJtY205dEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdGeUtTQmhjaUE5SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTNWpZV3hzS0daeWIyMHNJREFzSUdrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNsdHBYU0E5SUdaeWIyMWJhVjA3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUhSdkxtTnZibU5oZENoaGNpQjhmQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2htY205dEtTazdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJGM1lXbDBLSFlwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdseklHbHVjM1JoYm1ObGIyWWdYMTloZDJGcGRDQS9JQ2gwYUdsekxuWWdQU0IyTENCMGFHbHpLU0E2SUc1bGR5QmZYMkYzWVdsMEtIWXBPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5aGMzbHVZMGRsYm1WeVlYUnZjaWgwYUdselFYSm5MQ0JmWVhKbmRXMWxiblJ6TENCblpXNWxjbUYwYjNJcElIdGNjbHh1SUNBZ0lHbG1JQ2doVTNsdFltOXNMbUZ6ZVc1alNYUmxjbUYwYjNJcElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pUZVcxaWIyd3VZWE41Ym1OSmRHVnlZWFJ2Y2lCcGN5QnViM1FnWkdWbWFXNWxaQzVjSWlrN1hISmNiaUFnSUNCMllYSWdaeUE5SUdkbGJtVnlZWFJ2Y2k1aGNIQnNlU2gwYUdselFYSm5MQ0JmWVhKbmRXMWxiblJ6SUh4OElGdGRLU3dnYVN3Z2NTQTlJRnRkTzF4eVhHNGdJQ0FnY21WMGRYSnVJR2tnUFNCN2ZTd2dkbVZ5WWloY0ltNWxlSFJjSWlrc0lIWmxjbUlvWENKMGFISnZkMXdpS1N3Z2RtVnlZaWhjSW5KbGRIVnlibHdpS1N3Z2FWdFRlVzFpYjJ3dVlYTjVibU5KZEdWeVlYUnZjbDBnUFNCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQjBhR2x6T3lCOUxDQnBPMXh5WEc0Z0lDQWdablZ1WTNScGIyNGdkbVZ5WWlodUtTQjdJR2xtSUNoblcyNWRLU0JwVzI1ZElEMGdablZ1WTNScGIyNGdLSFlwSUhzZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUlDaGhMQ0JpS1NCN0lIRXVjSFZ6YUNoYmJpd2dkaXdnWVN3Z1lsMHBJRDRnTVNCOGZDQnlaWE4xYldVb2Jpd2dkaWs3SUgwcE95QjlPeUI5WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJ5WlhOMWJXVW9iaXdnZGlrZ2V5QjBjbmtnZXlCemRHVndLR2RiYmwwb2Rpa3BPeUI5SUdOaGRHTm9JQ2hsS1NCN0lITmxkSFJzWlNoeFd6QmRXek5kTENCbEtUc2dmU0I5WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJ6ZEdWd0tISXBJSHNnY2k1MllXeDFaU0JwYm5OMFlXNWpaVzltSUY5ZllYZGhhWFFnUHlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvY2k1MllXeDFaUzUyS1M1MGFHVnVLR1oxYkdacGJHd3NJSEpsYW1WamRDa2dPaUJ6WlhSMGJHVW9jVnN3WFZzeVhTd2djaWs3SUgxY2NseHVJQ0FnSUdaMWJtTjBhVzl1SUdaMWJHWnBiR3dvZG1Gc2RXVXBJSHNnY21WemRXMWxLRndpYm1WNGRGd2lMQ0IyWVd4MVpTazdJSDFjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSEpsYW1WamRDaDJZV3gxWlNrZ2V5QnlaWE4xYldVb1hDSjBhSEp2ZDF3aUxDQjJZV3gxWlNrN0lIMWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlITmxkSFJzWlNobUxDQjJLU0I3SUdsbUlDaG1LSFlwTENCeExuTm9hV1owS0Nrc0lIRXViR1Z1WjNSb0tTQnlaWE4xYldVb2NWc3dYVnN3WFN3Z2NWc3dYVnN4WFNrN0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWVhONWJtTkVaV3hsWjJGMGIzSW9ieWtnZTF4eVhHNGdJQ0FnZG1GeUlHa3NJSEE3WEhKY2JpQWdJQ0J5WlhSMWNtNGdhU0E5SUh0OUxDQjJaWEppS0Z3aWJtVjRkRndpS1N3Z2RtVnlZaWhjSW5Sb2NtOTNYQ0lzSUdaMWJtTjBhVzl1SUNobEtTQjdJSFJvY205M0lHVTdJSDBwTENCMlpYSmlLRndpY21WMGRYSnVYQ0lwTENCcFcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwZ1BTQm1kVzVqZEdsdmJpQW9LU0I3SUhKbGRIVnliaUIwYUdsek95QjlMQ0JwTzF4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnZG1WeVlpaHVMQ0JtS1NCN0lHbGJibDBnUFNCdlcyNWRJRDhnWm5WdVkzUnBiMjRnS0hZcElIc2djbVYwZFhKdUlDaHdJRDBnSVhBcElEOGdleUIyWVd4MVpUb2dYMTloZDJGcGRDaHZXMjVkS0hZcEtTd2daRzl1WlRvZ1ptRnNjMlVnZlNBNklHWWdQeUJtS0hZcElEb2dkanNnZlNBNklHWTdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZllYTjVibU5XWVd4MVpYTW9ieWtnZTF4eVhHNGdJQ0FnYVdZZ0tDRlRlVzFpYjJ3dVlYTjVibU5KZEdWeVlYUnZjaWtnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lsTjViV0p2YkM1aGMzbHVZMGwwWlhKaGRHOXlJR2x6SUc1dmRDQmtaV1pwYm1Wa0xsd2lLVHRjY2x4dUlDQWdJSFpoY2lCdElEMGdiMXRUZVcxaWIyd3VZWE41Ym1OSmRHVnlZWFJ2Y2wwc0lHazdYSEpjYmlBZ0lDQnlaWFIxY200Z2JTQS9JRzB1WTJGc2JDaHZLU0E2SUNodklEMGdkSGx3Wlc5bUlGOWZkbUZzZFdWeklEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ1B5QmZYM1poYkhWbGN5aHZLU0E2SUc5YlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNncExDQnBJRDBnZTMwc0lIWmxjbUlvWENKdVpYaDBYQ0lwTENCMlpYSmlLRndpZEdoeWIzZGNJaWtzSUhabGNtSW9YQ0p5WlhSMWNtNWNJaWtzSUdsYlUzbHRZbTlzTG1GemVXNWpTWFJsY21GMGIzSmRJRDBnWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z2RHaHBjenNnZlN3Z2FTazdYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQjJaWEppS0c0cElIc2dhVnR1WFNBOUlHOWJibDBnSmlZZ1puVnVZM1JwYjI0Z0tIWXBJSHNnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1SUNoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUhzZ2RpQTlJRzliYmwwb2Rpa3NJSE5sZEhSc1pTaHlaWE52YkhabExDQnlaV3BsWTNRc0lIWXVaRzl1WlN3Z2RpNTJZV3gxWlNrN0lIMHBPeUI5T3lCOVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCelpYUjBiR1VvY21WemIyeDJaU3dnY21WcVpXTjBMQ0JrTENCMktTQjdJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTaDJLUzUwYUdWdUtHWjFibU4wYVc5dUtIWXBJSHNnY21WemIyeDJaU2g3SUhaaGJIVmxPaUIyTENCa2IyNWxPaUJrSUgwcE95QjlMQ0J5WldwbFkzUXBPeUI5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyMWhhMlZVWlcxd2JHRjBaVTlpYW1WamRDaGpiMjlyWldRc0lISmhkeWtnZTF4eVhHNGdJQ0FnYVdZZ0tFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2tnZXlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29ZMjl2YTJWa0xDQmNJbkpoZDF3aUxDQjdJSFpoYkhWbE9pQnlZWGNnZlNrN0lIMGdaV3h6WlNCN0lHTnZiMnRsWkM1eVlYY2dQU0J5WVhjN0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCamIyOXJaV1E3WEhKY2JuMDdYSEpjYmx4eVhHNTJZWElnWDE5elpYUk5iMlIxYkdWRVpXWmhkV3gwSUQwZ1QySnFaV04wTG1OeVpXRjBaU0EvSUNobWRXNWpkR2x2YmlodkxDQjJLU0I3WEhKY2JpQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2J5d2dYQ0prWldaaGRXeDBYQ0lzSUhzZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN3Z2RtRnNkV1U2SUhZZ2ZTazdYSEpjYm4wcElEb2dablZ1WTNScGIyNG9ieXdnZGlrZ2UxeHlYRzRnSUNBZ2IxdGNJbVJsWm1GMWJIUmNJbDBnUFNCMk8xeHlYRzU5TzF4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmYVcxd2IzSjBVM1JoY2lodGIyUXBJSHRjY2x4dUlDQWdJR2xtSUNodGIyUWdKaVlnYlc5a0xsOWZaWE5OYjJSMWJHVXBJSEpsZEhWeWJpQnRiMlE3WEhKY2JpQWdJQ0IyWVhJZ2NtVnpkV3gwSUQwZ2UzMDdYSEpjYmlBZ0lDQnBaaUFvYlc5a0lDRTlJRzUxYkd3cElHWnZjaUFvZG1GeUlHc2dhVzRnYlc5a0tTQnBaaUFvYXlBaFBUMGdYQ0prWldaaGRXeDBYQ0lnSmlZZ1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHMXZaQ3dnYXlrcElGOWZZM0psWVhSbFFtbHVaR2x1WnloeVpYTjFiSFFzSUcxdlpDd2dheWs3WEhKY2JpQWdJQ0JmWDNObGRFMXZaSFZzWlVSbFptRjFiSFFvY21WemRXeDBMQ0J0YjJRcE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmFXMXdiM0owUkdWbVlYVnNkQ2h0YjJRcElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlBb2JXOWtJQ1ltSUcxdlpDNWZYMlZ6VFc5a2RXeGxLU0EvSUcxdlpDQTZJSHNnWkdWbVlYVnNkRG9nYlc5a0lIMDdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJOc1lYTnpVSEpwZG1GMFpVWnBaV3hrUjJWMEtISmxZMlZwZG1WeUxDQnpkR0YwWlN3Z2EybHVaQ3dnWmlrZ2UxeHlYRzRnSUNBZ2FXWWdLR3RwYm1RZ1BUMDlJRndpWVZ3aUlDWW1JQ0ZtS1NCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lVSEpwZG1GMFpTQmhZMk5sYzNOdmNpQjNZWE1nWkdWbWFXNWxaQ0IzYVhSb2IzVjBJR0VnWjJWMGRHVnlYQ0lwTzF4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCemRHRjBaU0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJRDhnY21WalpXbDJaWElnSVQwOUlITjBZWFJsSUh4OElDRm1JRG9nSVhOMFlYUmxMbWhoY3loeVpXTmxhWFpsY2lrcElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pEWVc1dWIzUWdjbVZoWkNCd2NtbDJZWFJsSUcxbGJXSmxjaUJtY205dElHRnVJRzlpYW1WamRDQjNhRzl6WlNCamJHRnpjeUJrYVdRZ2JtOTBJR1JsWTJ4aGNtVWdhWFJjSWlrN1hISmNiaUFnSUNCeVpYUjFjbTRnYTJsdVpDQTlQVDBnWENKdFhDSWdQeUJtSURvZ2EybHVaQ0E5UFQwZ1hDSmhYQ0lnUHlCbUxtTmhiR3dvY21WalpXbDJaWElwSURvZ1ppQS9JR1l1ZG1Gc2RXVWdPaUJ6ZEdGMFpTNW5aWFFvY21WalpXbDJaWElwTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOWpiR0Z6YzFCeWFYWmhkR1ZHYVdWc1pGTmxkQ2h5WldObGFYWmxjaXdnYzNSaGRHVXNJSFpoYkhWbExDQnJhVzVrTENCbUtTQjdYSEpjYmlBZ0lDQnBaaUFvYTJsdVpDQTlQVDBnWENKdFhDSXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKUWNtbDJZWFJsSUcxbGRHaHZaQ0JwY3lCdWIzUWdkM0pwZEdGaWJHVmNJaWs3WEhKY2JpQWdJQ0JwWmlBb2EybHVaQ0E5UFQwZ1hDSmhYQ0lnSmlZZ0lXWXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKUWNtbDJZWFJsSUdGalkyVnpjMjl5SUhkaGN5QmtaV1pwYm1Wa0lIZHBkR2h2ZFhRZ1lTQnpaWFIwWlhKY0lpazdYSEpjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSE4wWVhSbElEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ1B5QnlaV05sYVhabGNpQWhQVDBnYzNSaGRHVWdmSHdnSVdZZ09pQWhjM1JoZEdVdWFHRnpLSEpsWTJWcGRtVnlLU2tnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrTmhibTV2ZENCM2NtbDBaU0J3Y21sMllYUmxJRzFsYldKbGNpQjBieUJoYmlCdlltcGxZM1FnZDJodmMyVWdZMnhoYzNNZ1pHbGtJRzV2ZENCa1pXTnNZWEpsSUdsMFhDSXBPMXh5WEc0Z0lDQWdjbVYwZFhKdUlDaHJhVzVrSUQwOVBTQmNJbUZjSWlBL0lHWXVZMkZzYkNoeVpXTmxhWFpsY2l3Z2RtRnNkV1VwSURvZ1ppQS9JR1l1ZG1Gc2RXVWdQU0IyWVd4MVpTQTZJSE4wWVhSbExuTmxkQ2h5WldObGFYWmxjaXdnZG1Gc2RXVXBLU3dnZG1Gc2RXVTdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJOc1lYTnpVSEpwZG1GMFpVWnBaV3hrU1c0b2MzUmhkR1VzSUhKbFkyVnBkbVZ5S1NCN1hISmNiaUFnSUNCcFppQW9jbVZqWldsMlpYSWdQVDA5SUc1MWJHd2dmSHdnS0hSNWNHVnZaaUJ5WldObGFYWmxjaUFoUFQwZ1hDSnZZbXBsWTNSY0lpQW1KaUIwZVhCbGIyWWdjbVZqWldsMlpYSWdJVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa3BJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKRFlXNXViM1FnZFhObElDZHBiaWNnYjNCbGNtRjBiM0lnYjI0Z2JtOXVMVzlpYW1WamRGd2lLVHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBlWEJsYjJZZ2MzUmhkR1VnUFQwOUlGd2lablZ1WTNScGIyNWNJaUEvSUhKbFkyVnBkbVZ5SUQwOVBTQnpkR0YwWlNBNklITjBZWFJsTG1oaGN5aHlaV05sYVhabGNpazdYSEpjYm4xY2NseHVJaXdpWlhod2IzSjBJR1oxYm1OMGFXOXVJR2RoYlcxaFJVOVVSaWhsT2lCdWRXMWlaWElwT2lCdWRXMWlaWElnZTF4dUlDQnlaWFIxY200Z1RXRjBhQzV3YjNjb1pTd2dNaTR5S1R0Y2JuMWNiaUlzSW1sdGNHOXlkQ0FxSUdGeklGUklVa1ZGSUdaeWIyMGdKM1JvY21WbEp6dGNibWx0Y0c5eWRDQjdJRlpTVFNCaGN5QldNRlpTVFN3Z1RXRjBaWEpwWVd3Z1lYTWdWakJOWVhSbGNtbGhiQ0I5SUdaeWIyMGdKMEJ3YVhocGRpOTBlWEJsY3kxMmNtMHRNQzR3Snp0Y2JtbHRjRzl5ZENBcUlHRnpJRll4VFZSdmIyNVRZMmhsYldFZ1puSnZiU0FuUUhCcGVHbDJMM1I1Y0dWekxYWnliV010YldGMFpYSnBZV3h6TFcxMGIyOXVMVEV1TUNjN1hHNXBiWEJ2Y25RZ2RIbHdaU0I3SUVkTVZFWk1iMkZrWlhKUWJIVm5hVzRzSUVkTVZFWlFZWEp6WlhJZ2ZTQm1jbTl0SUNkMGFISmxaUzlsZUdGdGNHeGxjeTlxYzIwdmJHOWhaR1Z5Y3k5SFRGUkdURzloWkdWeUxtcHpKenRjYm1sdGNHOXlkQ0I3SUdkaGJXMWhSVTlVUmlCOUlHWnliMjBnSnk0dmRYUnBiSE12WjJGdGJXRkZUMVJHSnp0Y2JtbHRjRzl5ZENCN0lFZE1WRVlnWVhNZ1IweFVSbE5qYUdWdFlTQjlJR1p5YjIwZ0owQm5iSFJtTFhSeVlXNXpabTl5YlM5amIzSmxKenRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRlpTVFUxaGRHVnlhV0ZzYzFZd1EyOXRjR0YwVUd4MVoybHVJR2x0Y0d4bGJXVnVkSE1nUjB4VVJreHZZV1JsY2xCc2RXZHBiaUI3WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCd1lYSnpaWEk2SUVkTVZFWlFZWEp6WlhJN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVFZ2JXRndJR1p5YjIwZ2RqQWdjbVZ1WkdWeUlIRjFaWFZsSUhSdklIWXhJSEpsYm1SbGNpQnhkV1YxWlNCdlptWnpaWFFzSUdadmNpQlVjbUZ1YzNCaGNtVnVkQ0J0WVhSbGNtbGhiSE11WEc0Z0lDQXFMMXh1SUNCd2NtbDJZWFJsSUhKbFlXUnZibXg1SUY5eVpXNWtaWEpSZFdWMVpVMWhjRlJ5WVc1emNHRnlaVzUwT2lCTllYQThiblZ0WW1WeUxDQnVkVzFpWlhJK08xeHVYRzRnSUM4cUtseHVJQ0FnS2lCQklHMWhjQ0JtY205dElIWXdJSEpsYm1SbGNpQnhkV1YxWlNCMGJ5QjJNU0J5Wlc1a1pYSWdjWFZsZFdVZ2IyWm1jMlYwTENCbWIzSWdWSEpoYm5Od1lYSmxiblJhVjNKcGRHVWdiV0YwWlhKcFlXeHpMbHh1SUNBZ0tpOWNiaUFnY0hKcGRtRjBaU0J5WldGa2IyNXNlU0JmY21WdVpHVnlVWFZsZFdWTllYQlVjbUZ1YzNCaGNtVnVkRnBYY21sMFpUb2dUV0Z3UEc1MWJXSmxjaXdnYm5WdFltVnlQanRjYmx4dUlDQndkV0pzYVdNZ1oyVjBJRzVoYldVb0tUb2djM1J5YVc1bklIdGNiaUFnSUNCeVpYUjFjbTRnSjFaU1RVMWhkR1Z5YVdGc2MxWXdRMjl0Y0dGMFVHeDFaMmx1Snp0Y2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCamIyNXpkSEoxWTNSdmNpaHdZWEp6WlhJNklFZE1WRVpRWVhKelpYSXBJSHRjYmlBZ0lDQjBhR2x6TG5CaGNuTmxjaUE5SUhCaGNuTmxjanRjYmx4dUlDQWdJSFJvYVhNdVgzSmxibVJsY2xGMVpYVmxUV0Z3VkhKaGJuTndZWEpsYm5RZ1BTQnVaWGNnVFdGd0tDazdYRzRnSUNBZ2RHaHBjeTVmY21WdVpHVnlVWFZsZFdWTllYQlVjbUZ1YzNCaGNtVnVkRnBYY21sMFpTQTlJRzVsZHlCTllYQW9LVHRjYmx4dUlDQWdJQzh2SUZkUFVrdEJVazlWVGtRNklFRmtaQ0JMU0ZKZmRHVjRkSFZ5WlY5MGNtRnVjMlp2Y20wZ2RHOGdaWGgwWlc1emFXOXVjMVZ6WldSY2JpQWdJQ0F2THlCSmRDQnBjeUIwYjI4Z2JHRjBaU0IwYnlCaFpHUWdkR2hwY3lCcGJpQmlaV1p2Y21WU2IyOTBYRzRnSUNBZ1kyOXVjM1FnYW5OdmJpQTlJSFJvYVhNdWNHRnljMlZ5TG1wemIyNGdZWE1nUjB4VVJsTmphR1Z0WVM1SlIweFVSanRjYmx4dUlDQWdJR3B6YjI0dVpYaDBaVzV6YVc5dWMxVnpaV1FnUFNCcWMyOXVMbVY0ZEdWdWMybHZibk5WYzJWa0lEOC9JRnRkTzF4dUlDQWdJR2xtSUNocWMyOXVMbVY0ZEdWdWMybHZibk5WYzJWa0xtbHVaR1Y0VDJZb0owdElVbDkwWlhoMGRYSmxYM1J5WVc1elptOXliU2NwSUQwOVBTQXRNU2tnZTF4dUlDQWdJQ0FnYW5OdmJpNWxlSFJsYm5OcGIyNXpWWE5sWkM1d2RYTm9LQ2RMU0ZKZmRHVjRkSFZ5WlY5MGNtRnVjMlp2Y20wbktUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQndkV0pzYVdNZ1lYTjVibU1nWW1WbWIzSmxVbTl2ZENncE9pQlFjbTl0YVhObFBIWnZhV1ErSUh0Y2JpQWdJQ0JqYjI1emRDQnFjMjl1SUQwZ2RHaHBjeTV3WVhKelpYSXVhbk52YmlCaGN5QkhURlJHVTJOb1pXMWhMa2xIVEZSR08xeHVYRzRnSUNBZ0x5OGdaV0Z5YkhrZ1lXSnZjblFnYVdZZ2FYUWdaRzlsYzI0bmRDQjFjMlVnVmpCV1VrMWNiaUFnSUNCamIyNXpkQ0IyTUZaU1RVVjRkR1Z1YzJsdmJpQTlJR3B6YjI0dVpYaDBaVzV6YVc5dWN6OHVXeWRXVWswblhTQmhjeUJXTUZaU1RTQjhJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQmpiMjV6ZENCMk1FMWhkR1Z5YVdGc1VISnZjR1Z5ZEdsbGN5QTlJSFl3VmxKTlJYaDBaVzV6YVc5dVB5NXRZWFJsY21saGJGQnliM0JsY25ScFpYTTdYRzRnSUNBZ2FXWWdLQ0YyTUUxaGRHVnlhV0ZzVUhKdmNHVnlkR2xsY3lrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUhCdmNIVnNZWFJsSUhKbGJtUmxjaUJ4ZFdWMVpTQnRZWEJjYmlBZ0lDQjBhR2x6TGw5d2IzQjFiR0YwWlZKbGJtUmxjbEYxWlhWbFRXRndLSFl3VFdGMFpYSnBZV3hRY205d1pYSjBhV1Z6S1R0Y2JseHVJQ0FnSUM4dklHTnZiblpsY25RZ1ZqQWdiV0YwWlhKcFlXd2djSEp2Y0dWeWRHbGxjeUJwYm5SdklGWXhJR052YlhCaGRHbGliR1VnWm05eWJXRjBYRzRnSUNBZ2RqQk5ZWFJsY21saGJGQnliM0JsY25ScFpYTXVabTl5UldGamFDZ29iV0YwWlhKcFlXeFFjbTl3WlhKMGFXVnpMQ0J0WVhSbGNtbGhiRWx1WkdWNEtTQTlQaUI3WEc0Z0lDQWdJQ0JqYjI1emRDQnRZWFJsY21saGJFUmxaaUE5SUdwemIyNHViV0YwWlhKcFlXeHpQeTViYldGMFpYSnBZV3hKYm1SbGVGMDdYRzVjYmlBZ0lDQWdJR2xtSUNodFlYUmxjbWxoYkVSbFppQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmloY2JpQWdJQ0FnSUNBZ0lDQmdWbEpOVFdGMFpYSnBZV3h6VmpCRGIyMXdZWFJRYkhWbmFXNDZJRUYwZEdWdGNIUWdkRzhnZFhObElHMWhkR1Z5YVdGc2Mxc2tlMjFoZEdWeWFXRnNTVzVrWlhoOVhTQnZaaUJuYkZSR0lHSjFkQ0IwYUdVZ2JXRjBaWEpwWVd3Z1pHOWxjMjRuZENCbGVHbHpkR0FzWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLRzFoZEdWeWFXRnNVSEp2Y0dWeWRHbGxjeTV6YUdGa1pYSWdQVDA5SUNkV1VrMHZUVlJ2YjI0bktTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHMWhkR1Z5YVdGc0lEMGdkR2hwY3k1ZmNHRnljMlZXTUUxVWIyOXVVSEp2Y0dWeWRHbGxjeWh0WVhSbGNtbGhiRkJ5YjNCbGNuUnBaWE1zSUcxaGRHVnlhV0ZzUkdWbUtUdGNiaUFnSUNBZ0lDQWdhbk52Ymk1dFlYUmxjbWxoYkhNaFcyMWhkR1Z5YVdGc1NXNWtaWGhkSUQwZ2JXRjBaWEpwWVd3N1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHMWhkR1Z5YVdGc1VISnZjR1Z5ZEdsbGN5NXphR0ZrWlhJL0xuTjBZWEowYzFkcGRHZ29KMVpTVFM5VmJteHBkQ2NwS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUcxaGRHVnlhV0ZzSUQwZ2RHaHBjeTVmY0dGeWMyVldNRlZ1YkdsMFVISnZjR1Z5ZEdsbGN5aHRZWFJsY21saGJGQnliM0JsY25ScFpYTXNJRzFoZEdWeWFXRnNSR1ZtS1R0Y2JpQWdJQ0FnSUNBZ2FuTnZiaTV0WVhSbGNtbGhiSE1oVzIxaGRHVnlhV0ZzU1c1a1pYaGRJRDBnYldGMFpYSnBZV3c3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0cxaGRHVnlhV0ZzVUhKdmNHVnlkR2xsY3k1emFHRmtaWElnUFQwOUlDZFdVazFmVlZORlgwZE1WRVpUU0VGRVJWSW5LU0I3WEc0Z0lDQWdJQ0FnSUM4dklHQnFjMjl1TG0xaGRHVnlhV0ZzYzF0dFlYUmxjbWxoYkVsdVpHVjRYV0FnYzJodmRXeGtJR0psSUdGc2NtVmhaSGtnZG1Gc2FXUmNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWhnVmxKTlRXRjBaWEpwWVd4elZqQkRiMjF3WVhSUWJIVm5hVzQ2SUZWdWEyNXZkMjRnYzJoaFpHVnlPaUFrZTIxaGRHVnlhV0ZzVUhKdmNHVnlkR2xsY3k1emFHRmtaWEo5WUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQndjbWwyWVhSbElGOXdZWEp6WlZZd1RWUnZiMjVRY205d1pYSjBhV1Z6S0Z4dUlDQWdJRzFoZEdWeWFXRnNVSEp2Y0dWeWRHbGxjem9nVmpCTllYUmxjbWxoYkN4Y2JpQWdJQ0J6WTJobGJXRk5ZWFJsY21saGJEb2dSMHhVUmxOamFHVnRZUzVKVFdGMFpYSnBZV3dzWEc0Z0lDazZJRWRNVkVaVFkyaGxiV0V1U1UxaGRHVnlhV0ZzSUh0Y2JpQWdJQ0JqYjI1emRDQnBjMVJ5WVc1emNHRnlaVzUwSUQwZ2JXRjBaWEpwWVd4UWNtOXdaWEowYVdWekxtdGxlWGR2Y21STllYQS9MbHNuWDBGTVVFaEJRa3hGVGtSZlQwNG5YU0EvUHlCbVlXeHpaVHRjYmlBZ0lDQmpiMjV6ZENCbGJtRmliR1ZrV2xkeWFYUmxJRDBnYldGMFpYSnBZV3hRY205d1pYSjBhV1Z6TG1ac2IyRjBVSEp2Y0dWeWRHbGxjejh1V3lkZldsZHlhWFJsSjEwZ1BUMDlJREU3WEc0Z0lDQWdZMjl1YzNRZ2RISmhibk53WVhKbGJuUlhhWFJvV2xkeWFYUmxJRDBnWlc1aFlteGxaRnBYY21sMFpTQW1KaUJwYzFSeVlXNXpjR0Z5Wlc1ME8xeHVYRzRnSUNBZ1kyOXVjM1FnY21WdVpHVnlVWFZsZFdWUFptWnpaWFJPZFcxaVpYSWdQU0IwYUdsekxsOTJNRkJoY25ObFVtVnVaR1Z5VVhWbGRXVW9iV0YwWlhKcFlXeFFjbTl3WlhKMGFXVnpLVHRjYmx4dUlDQWdJR052Ym5OMElHbHpRM1YwYjJabUlEMGdiV0YwWlhKcFlXeFFjbTl3WlhKMGFXVnpMbXRsZVhkdmNtUk5ZWEEvTGxzblgwRk1VRWhCVkVWVFZGOVBUaWRkSUQ4L0lHWmhiSE5sTzF4dUlDQWdJR052Ym5OMElHRnNjR2hoVFc5a1pTQTlJR2x6VkhKaGJuTndZWEpsYm5RZ1B5QW5Ra3hGVGtRbklEb2dhWE5EZFhSdlptWWdQeUFuVFVGVFN5Y2dPaUFuVDFCQlVWVkZKenRjYmlBZ0lDQmpiMjV6ZENCaGJIQm9ZVU4xZEc5bVppQTlJR2x6UTNWMGIyWm1JRDhnYldGMFpYSnBZV3hRY205d1pYSjBhV1Z6TG1ac2IyRjBVSEp2Y0dWeWRHbGxjejh1V3lkZlEzVjBiMlptSjEwZ09pQjFibVJsWm1sdVpXUTdYRzVjYmlBZ0lDQmpiMjV6ZENCamRXeHNUVzlrWlNBOUlHMWhkR1Z5YVdGc1VISnZjR1Z5ZEdsbGN5NW1iRzloZEZCeWIzQmxjblJwWlhNL0xsc25YME4xYkd4TmIyUmxKMTBnUHo4Z01qc2dMeThnWlc1MWJTd2dleUJQWm1Zc0lFWnliMjUwTENCQ1lXTnJJSDFjYmlBZ0lDQmpiMjV6ZENCa2IzVmliR1ZUYVdSbFpDQTlJR04xYkd4TmIyUmxJRDA5UFNBd08xeHVYRzRnSUNBZ1kyOXVjM1FnZEdWNGRIVnlaVlJ5WVc1elptOXliVVY0ZENBOUlIUm9hWE11WDNCdmNuUlVaWGgwZFhKbFZISmhibk5tYjNKdEtHMWhkR1Z5YVdGc1VISnZjR1Z5ZEdsbGN5azdYRzVjYmlBZ0lDQmpiMjV6ZENCaVlYTmxRMjlzYjNKR1lXTjBiM0lnUFNCdFlYUmxjbWxoYkZCeWIzQmxjblJwWlhNdWRtVmpkRzl5VUhKdmNHVnlkR2xsY3o4dVd5ZGZRMjlzYjNJblhUOHViV0Z3S0Z4dUlDQWdJQ0FnS0hZNklHNTFiV0psY2l3Z2FUb2diblZ0WW1WeUtTQTlQaUFvYVNBOVBUMGdNeUEvSUhZZ09pQm5ZVzF0WVVWUFZFWW9kaWtwTENBdkx5QmhiSEJvWVNCamFHRnVibVZzSUdseklITjBiM0psWkNCcGJpQnNhVzVsWVhKY2JpQWdJQ0FwTzF4dUlDQWdJR052Ym5OMElHSmhjMlZEYjJ4dmNsUmxlSFIxY21WSmJtUmxlQ0E5SUcxaGRHVnlhV0ZzVUhKdmNHVnlkR2xsY3k1MFpYaDBkWEpsVUhKdmNHVnlkR2xsY3o4dVd5ZGZUV0ZwYmxSbGVDZGRPMXh1SUNBZ0lHTnZibk4wSUdKaGMyVkRiMnh2Y2xSbGVIUjFjbVVnUFZ4dUlDQWdJQ0FnWW1GelpVTnZiRzl5VkdWNGRIVnlaVWx1WkdWNElDRTlJRzUxYkd4Y2JpQWdJQ0FnSUNBZ1B5QjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlRG9nWW1GelpVTnZiRzl5VkdWNGRIVnlaVWx1WkdWNExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhoMFpXNXphVzl1Y3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdUxpNTBaWGgwZFhKbFZISmhibk5tYjNKdFJYaDBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUNBZ1kyOXVjM1FnYm05eWJXRnNWR1Y0ZEhWeVpWTmpZV3hsSUQwZ2JXRjBaWEpwWVd4UWNtOXdaWEowYVdWekxtWnNiMkYwVUhKdmNHVnlkR2xsY3o4dVd5ZGZRblZ0Y0ZOallXeGxKMTA3WEc0Z0lDQWdZMjl1YzNRZ2JtOXliV0ZzVkdWNGRIVnlaVWx1WkdWNElEMGdiV0YwWlhKcFlXeFFjbTl3WlhKMGFXVnpMblJsZUhSMWNtVlFjbTl3WlhKMGFXVnpQeTViSjE5Q2RXMXdUV0Z3SjEwN1hHNGdJQ0FnWTI5dWMzUWdibTl5YldGc1ZHVjRkSFZ5WlNBOVhHNGdJQ0FnSUNCdWIzSnRZV3hVWlhoMGRYSmxTVzVrWlhnZ0lUMGdiblZzYkZ4dUlDQWdJQ0FnSUNBL0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRPaUJ1YjNKdFlXeFVaWGgwZFhKbFNXNWtaWGdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpZMkZzWlRvZ2JtOXliV0ZzVkdWNGRIVnlaVk5qWVd4bExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhoMFpXNXphVzl1Y3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdUxpNTBaWGgwZFhKbFZISmhibk5tYjNKdFJYaDBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUNBZ1kyOXVjM1FnWlcxcGMzTnBkbVZHWVdOMGIzSWdQU0J0WVhSbGNtbGhiRkJ5YjNCbGNuUnBaWE11ZG1WamRHOXlVSEp2Y0dWeWRHbGxjejh1V3lkZlJXMXBjM05wYjI1RGIyeHZjaWRkUHk1dFlYQW9aMkZ0YldGRlQxUkdLVHRjYmlBZ0lDQmpiMjV6ZENCbGJXbHpjMmwyWlZSbGVIUjFjbVZKYm1SbGVDQTlJRzFoZEdWeWFXRnNVSEp2Y0dWeWRHbGxjeTUwWlhoMGRYSmxVSEp2Y0dWeWRHbGxjejh1V3lkZlJXMXBjM05wYjI1TllYQW5YVHRjYmlBZ0lDQmpiMjV6ZENCbGJXbHpjMmwyWlZSbGVIUjFjbVVnUFZ4dUlDQWdJQ0FnWlcxcGMzTnBkbVZVWlhoMGRYSmxTVzVrWlhnZ0lUMGdiblZzYkZ4dUlDQWdJQ0FnSUNBL0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRPaUJsYldsemMybDJaVlJsZUhSMWNtVkpibVJsZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Y0ZEdWdWMybHZibk02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTGk0dWRHVjRkSFZ5WlZSeVlXNXpabTl5YlVWNGRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0E2SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0FnSUdOdmJuTjBJSE5vWVdSbFEyOXNiM0pHWVdOMGIzSWdQU0J0WVhSbGNtbGhiRkJ5YjNCbGNuUnBaWE11ZG1WamRHOXlVSEp2Y0dWeWRHbGxjejh1V3lkZlUyaGhaR1ZEYjJ4dmNpZGRQeTV0WVhBb1oyRnRiV0ZGVDFSR0tUdGNiaUFnSUNCamIyNXpkQ0J6YUdGa1pVMTFiSFJwY0d4NVZHVjRkSFZ5WlVsdVpHVjRJRDBnYldGMFpYSnBZV3hRY205d1pYSjBhV1Z6TG5SbGVIUjFjbVZRY205d1pYSjBhV1Z6UHk1YkoxOVRhR0ZrWlZSbGVIUjFjbVVuWFR0Y2JpQWdJQ0JqYjI1emRDQnphR0ZrWlUxMWJIUnBjR3g1VkdWNGRIVnlaU0E5WEc0Z0lDQWdJQ0J6YUdGa1pVMTFiSFJwY0d4NVZHVjRkSFZ5WlVsdVpHVjRJQ0U5SUc1MWJHeGNiaUFnSUNBZ0lDQWdQeUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibVJsZURvZ2MyaGhaR1ZOZFd4MGFYQnNlVlJsZUhSMWNtVkpibVJsZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Y0ZEdWdWMybHZibk02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTGk0dWRHVjRkSFZ5WlZSeVlXNXpabTl5YlVWNGRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0E2SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0FnSUM4dklDOHZJR052Ym5abGNuUWdkakFnYzJoaFpHVWdjMmhwWm5RZ0x5QnphR0ZrWlNCMGIyOXVlVnh1SUNBZ0lHeGxkQ0J6YUdGa2FXNW5VMmhwWm5SR1lXTjBiM0lnUFNCdFlYUmxjbWxoYkZCeWIzQmxjblJwWlhNdVpteHZZWFJRY205d1pYSjBhV1Z6UHk1YkoxOVRhR0ZrWlZOb2FXWjBKMTBnUHo4Z01DNHdPMXh1SUNBZ0lHeGxkQ0J6YUdGa2FXNW5WRzl2Ym5sR1lXTjBiM0lnUFNCdFlYUmxjbWxoYkZCeWIzQmxjblJwWlhNdVpteHZZWFJRY205d1pYSjBhV1Z6UHk1YkoxOVRhR0ZrWlZSdmIyNTVKMTBnUHo4Z01DNDVPMXh1SUNBZ0lITm9ZV1JwYm1kVWIyOXVlVVpoWTNSdmNpQTlJRlJJVWtWRkxrMWhkR2hWZEdsc2N5NXNaWEp3S0hOb1lXUnBibWRVYjI5dWVVWmhZM1J2Y2l3Z01TNHdMQ0F3TGpVZ0t5QXdMalVnS2lCemFHRmthVzVuVTJocFpuUkdZV04wYjNJcE8xeHVJQ0FnSUhOb1lXUnBibWRUYUdsbWRFWmhZM1J2Y2lBOUlDMXphR0ZrYVc1blUyaHBablJHWVdOMGIzSWdMU0FvTVM0d0lDMGdjMmhoWkdsdVoxUnZiMjU1Um1GamRHOXlLVHRjYmx4dUlDQWdJR052Ym5OMElHZHBTVzUwWlc1emFYUjVSbUZqZEc5eUlEMGdiV0YwWlhKcFlXeFFjbTl3WlhKMGFXVnpMbVpzYjJGMFVISnZjR1Z5ZEdsbGN6OHVXeWRmU1c1a2FYSmxZM1JNYVdkb2RFbHVkR1Z1YzJsMGVTZGRPMXh1SUNBZ0lHTnZibk4wSUdkcFJYRjFZV3hwZW1GMGFXOXVSbUZqZEc5eUlEMGdaMmxKYm5SbGJuTnBkSGxHWVdOMGIzSWdQeUF4TGpBZ0xTQm5hVWx1ZEdWdWMybDBlVVpoWTNSdmNpQTZJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQWdJR052Ym5OMElHMWhkR05oY0ZSbGVIUjFjbVZKYm1SbGVDQTlJRzFoZEdWeWFXRnNVSEp2Y0dWeWRHbGxjeTUwWlhoMGRYSmxVSEp2Y0dWeWRHbGxjejh1V3lkZlUzQm9aWEpsUVdSa0oxMDdYRzRnSUNBZ1kyOXVjM1FnYldGMFkyRndSbUZqZEc5eUlEMGdiV0YwWTJGd1ZHVjRkSFZ5WlVsdVpHVjRJQ0U5SUc1MWJHd2dQeUJiTVM0d0xDQXhMakFzSURFdU1GMGdPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdZMjl1YzNRZ2JXRjBZMkZ3VkdWNGRIVnlaU0E5WEc0Z0lDQWdJQ0J0WVhSallYQlVaWGgwZFhKbFNXNWtaWGdnSVQwZ2JuVnNiRnh1SUNBZ0lDQWdJQ0EvSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNE9pQnRZWFJqWVhCVVpYaDBkWEpsU1c1a1pYZ3NYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBNklIVnVaR1ZtYVc1bFpEdGNibHh1SUNBZ0lHTnZibk4wSUhKcGJVeHBaMmgwYVc1blRXbDRSbUZqZEc5eUlEMGdiV0YwWlhKcFlXeFFjbTl3WlhKMGFXVnpMbVpzYjJGMFVISnZjR1Z5ZEdsbGN6OHVXeWRmVW1sdFRHbG5hSFJwYm1kTmFYZ25YVHRjYmlBZ0lDQmpiMjV6ZENCeWFXMU5kV3gwYVhCc2VWUmxlSFIxY21WSmJtUmxlQ0E5SUcxaGRHVnlhV0ZzVUhKdmNHVnlkR2xsY3k1MFpYaDBkWEpsVUhKdmNHVnlkR2xsY3o4dVd5ZGZVbWx0VkdWNGRIVnlaU2RkTzF4dUlDQWdJR052Ym5OMElISnBiVTExYkhScGNHeDVWR1Y0ZEhWeVpTQTlYRzRnSUNBZ0lDQnlhVzFOZFd4MGFYQnNlVlJsZUhSMWNtVkpibVJsZUNBaFBTQnVkV3hzWEc0Z0lDQWdJQ0FnSUQ4Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZzZJSEpwYlUxMWJIUnBjR3g1VkdWNGRIVnlaVWx1WkdWNExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhoMFpXNXphVzl1Y3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdUxpNTBaWGgwZFhKbFZISmhibk5tYjNKdFJYaDBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUNBZ1kyOXVjM1FnY0dGeVlXMWxkSEpwWTFKcGJVTnZiRzl5Um1GamRHOXlJRDBnYldGMFpYSnBZV3hRY205d1pYSjBhV1Z6TG5abFkzUnZjbEJ5YjNCbGNuUnBaWE0vTGxzblgxSnBiVU52Ykc5eUoxMC9MbTFoY0NobllXMXRZVVZQVkVZcE8xeHVJQ0FnSUdOdmJuTjBJSEJoY21GdFpYUnlhV05TYVcxR2NtVnpibVZzVUc5M1pYSkdZV04wYjNJZ1BTQnRZWFJsY21saGJGQnliM0JsY25ScFpYTXVabXh2WVhSUWNtOXdaWEowYVdWelB5NWJKMTlTYVcxR2NtVnpibVZzVUc5M1pYSW5YVHRjYmlBZ0lDQmpiMjV6ZENCd1lYSmhiV1YwY21salVtbHRUR2xtZEVaaFkzUnZjaUE5SUcxaGRHVnlhV0ZzVUhKdmNHVnlkR2xsY3k1bWJHOWhkRkJ5YjNCbGNuUnBaWE0vTGxzblgxSnBiVXhwWm5RblhUdGNibHh1SUNBZ0lHTnZibk4wSUc5MWRHeHBibVZYYVdSMGFFMXZaR1VnUFNCYkoyNXZibVVuTENBbmQyOXliR1JEYjI5eVpHbHVZWFJsY3ljc0lDZHpZM0psWlc1RGIyOXlaR2x1WVhSbGN5ZGRXMXh1SUNBZ0lDQWdiV0YwWlhKcFlXeFFjbTl3WlhKMGFXVnpMbVpzYjJGMFVISnZjR1Z5ZEdsbGN6OHVXeWRmVDNWMGJHbHVaVmRwWkhSb1RXOWtaU2RkSUQ4L0lEQmNiaUFnSUNCZElHRnpJRll4VFZSdmIyNVRZMmhsYldFdVRXRjBaWEpwWVd4elRWUnZiMjVQZFhSc2FXNWxWMmxrZEdoTmIyUmxPMXh1WEc0Z0lDQWdMeThnTHk4Z2RqQWdiM1YwYkdsdVpWZHBaSFJvUm1GamRHOXlJR2x6SUdsdUlHTmxiblJwYldWMFpYSmNiaUFnSUNCc1pYUWdiM1YwYkdsdVpWZHBaSFJvUm1GamRHOXlJRDBnYldGMFpYSnBZV3hRY205d1pYSjBhV1Z6TG1ac2IyRjBVSEp2Y0dWeWRHbGxjejh1V3lkZlQzVjBiR2x1WlZkcFpIUm9KMTBnUHo4Z01DNHdPMXh1SUNBZ0lHOTFkR3hwYm1WWGFXUjBhRVpoWTNSdmNpQTlJREF1TURFZ0tpQnZkWFJzYVc1bFYybGtkR2hHWVdOMGIzSTdYRzVjYmlBZ0lDQmpiMjV6ZENCdmRYUnNhVzVsVjJsa2RHaE5kV3gwYVhCc2VWUmxlSFIxY21WSmJtUmxlQ0E5SUcxaGRHVnlhV0ZzVUhKdmNHVnlkR2xsY3k1MFpYaDBkWEpsVUhKdmNHVnlkR2xsY3o4dVd5ZGZUM1YwYkdsdVpWZHBaSFJvVkdWNGRIVnlaU2RkTzF4dUlDQWdJR052Ym5OMElHOTFkR3hwYm1WWGFXUjBhRTExYkhScGNHeDVWR1Y0ZEhWeVpTQTlYRzRnSUNBZ0lDQnZkWFJzYVc1bFYybGtkR2hOZFd4MGFYQnNlVlJsZUhSMWNtVkpibVJsZUNBaFBTQnVkV3hzWEc0Z0lDQWdJQ0FnSUQ4Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZzZJRzkxZEd4cGJtVlhhV1IwYUUxMWJIUnBjR3g1VkdWNGRIVnlaVWx1WkdWNExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhoMFpXNXphVzl1Y3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdUxpNTBaWGgwZFhKbFZISmhibk5tYjNKdFJYaDBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUNBZ1kyOXVjM1FnYjNWMGJHbHVaVU52Ykc5eVJtRmpkRzl5SUQwZ2JXRjBaWEpwWVd4UWNtOXdaWEowYVdWekxuWmxZM1J2Y2xCeWIzQmxjblJwWlhNL0xsc25YMDkxZEd4cGJtVkRiMnh2Y2lkZFB5NXRZWEFvWjJGdGJXRkZUMVJHS1R0Y2JpQWdJQ0JqYjI1emRDQnZkWFJzYVc1bFEyOXNiM0pOYjJSbElEMGdiV0YwWlhKcFlXeFFjbTl3WlhKMGFXVnpMbVpzYjJGMFVISnZjR1Z5ZEdsbGN6OHVXeWRmVDNWMGJHbHVaVU52Ykc5eVRXOWtaU2RkT3lBdkx5QmxiblZ0TENCN0lFWnBlR1ZrTENCTmFYaGxaQ0I5WEc0Z0lDQWdZMjl1YzNRZ2IzVjBiR2x1WlV4cFoyaDBhVzVuVFdsNFJtRmpkRzl5SUQxY2JpQWdJQ0FnSUc5MWRHeHBibVZEYjJ4dmNrMXZaR1VnUFQwOUlERWdQeUJ0WVhSbGNtbGhiRkJ5YjNCbGNuUnBaWE11Wm14dllYUlFjbTl3WlhKMGFXVnpQeTViSjE5UGRYUnNhVzVsVEdsbmFIUnBibWROYVhnblhTQTZJREF1TUR0Y2JseHVJQ0FnSUdOdmJuTjBJSFYyUVc1cGJXRjBhVzl1VFdGemExUmxlSFIxY21WSmJtUmxlQ0E5SUcxaGRHVnlhV0ZzVUhKdmNHVnlkR2xsY3k1MFpYaDBkWEpsVUhKdmNHVnlkR2xsY3o4dVd5ZGZWWFpCYm1sdFRXRnphMVJsZUhSMWNtVW5YVHRjYmlBZ0lDQmpiMjV6ZENCMWRrRnVhVzFoZEdsdmJrMWhjMnRVWlhoMGRYSmxJRDFjYmlBZ0lDQWdJSFYyUVc1cGJXRjBhVzl1VFdGemExUmxlSFIxY21WSmJtUmxlQ0FoUFNCdWRXeHNYRzRnSUNBZ0lDQWdJRDhnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnNklIVjJRVzVwYldGMGFXOXVUV0Z6YTFSbGVIUjFjbVZKYm1SbGVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdWNGRHVnVjMmx2Ym5NNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0xpNHVkR1Y0ZEhWeVpWUnlZVzV6Wm05eWJVVjRkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBNklIVnVaR1ZtYVc1bFpEdGNibHh1SUNBZ0lHTnZibk4wSUhWMlFXNXBiV0YwYVc5dVUyTnliMnhzV0ZOd1pXVmtSbUZqZEc5eUlEMGdiV0YwWlhKcFlXeFFjbTl3WlhKMGFXVnpMbVpzYjJGMFVISnZjR1Z5ZEdsbGN6OHVXeWRmVlhaQmJtbHRVMk55YjJ4c1dDZGRPMXh1WEc0Z0lDQWdMeThnZFhaQmJtbHRZWFJwYjI1VFkzSnZiR3haVTNCbFpXUkdZV04wYjNJZ2QybHNiQ0JpWlNCdmNIQnZjMmwwWlNCaVpYUjNaV1Z1SUZZd0lHRnVaQ0JXTVZ4dUlDQWdJR3hsZENCMWRrRnVhVzFoZEdsdmJsTmpjbTlzYkZsVGNHVmxaRVpoWTNSdmNpQTlJRzFoZEdWeWFXRnNVSEp2Y0dWeWRHbGxjeTVtYkc5aGRGQnliM0JsY25ScFpYTS9MbHNuWDFWMlFXNXBiVk5qY205c2JGa25YVHRjYmlBZ0lDQnBaaUFvZFhaQmJtbHRZWFJwYjI1VFkzSnZiR3haVTNCbFpXUkdZV04wYjNJZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ2RYWkJibWx0WVhScGIyNVRZM0p2Ykd4WlUzQmxaV1JHWVdOMGIzSWdQU0F0ZFhaQmJtbHRZWFJwYjI1VFkzSnZiR3haVTNCbFpXUkdZV04wYjNJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdkWFpCYm1sdFlYUnBiMjVTYjNSaGRHbHZibE53WldWa1JtRmpkRzl5SUQwZ2JXRjBaWEpwWVd4UWNtOXdaWEowYVdWekxtWnNiMkYwVUhKdmNHVnlkR2xsY3o4dVd5ZGZWWFpCYm1sdFVtOTBZWFJwYjI0blhUdGNibHh1SUNBZ0lHTnZibk4wSUcxMGIyOXVSWGgwWlc1emFXOXVPaUJXTVUxVWIyOXVVMk5vWlcxaExsWlNUVU5OWVhSbGNtbGhiSE5OVkc5dmJpQTlJSHRjYmlBZ0lDQWdJSE53WldOV1pYSnphVzl1T2lBbk1TNHdKeXhjYmlBZ0lDQWdJSFJ5WVc1emNHRnlaVzUwVjJsMGFGcFhjbWwwWlN4Y2JpQWdJQ0FnSUhKbGJtUmxjbEYxWlhWbFQyWm1jMlYwVG5WdFltVnlMRnh1SUNBZ0lDQWdjMmhoWkdWRGIyeHZja1poWTNSdmNpeGNiaUFnSUNBZ0lITm9ZV1JsVFhWc2RHbHdiSGxVWlhoMGRYSmxMRnh1SUNBZ0lDQWdjMmhoWkdsdVoxTm9hV1owUm1GamRHOXlMRnh1SUNBZ0lDQWdjMmhoWkdsdVoxUnZiMjU1Um1GamRHOXlMRnh1SUNBZ0lDQWdaMmxGY1hWaGJHbDZZWFJwYjI1R1lXTjBiM0lzWEc0Z0lDQWdJQ0J0WVhSallYQkdZV04wYjNJc1hHNGdJQ0FnSUNCdFlYUmpZWEJVWlhoMGRYSmxMRnh1SUNBZ0lDQWdjbWx0VEdsbmFIUnBibWROYVhoR1lXTjBiM0lzWEc0Z0lDQWdJQ0J5YVcxTmRXeDBhWEJzZVZSbGVIUjFjbVVzWEc0Z0lDQWdJQ0J3WVhKaGJXVjBjbWxqVW1sdFEyOXNiM0pHWVdOMGIzSXNYRzRnSUNBZ0lDQndZWEpoYldWMGNtbGpVbWx0Um5KbGMyNWxiRkJ2ZDJWeVJtRmpkRzl5TEZ4dUlDQWdJQ0FnY0dGeVlXMWxkSEpwWTFKcGJVeHBablJHWVdOMGIzSXNYRzRnSUNBZ0lDQnZkWFJzYVc1bFYybGtkR2hOYjJSbExGeHVJQ0FnSUNBZ2IzVjBiR2x1WlZkcFpIUm9SbUZqZEc5eUxGeHVJQ0FnSUNBZ2IzVjBiR2x1WlZkcFpIUm9UWFZzZEdsd2JIbFVaWGgwZFhKbExGeHVJQ0FnSUNBZ2IzVjBiR2x1WlVOdmJHOXlSbUZqZEc5eUxGeHVJQ0FnSUNBZ2IzVjBiR2x1WlV4cFoyaDBhVzVuVFdsNFJtRmpkRzl5TEZ4dUlDQWdJQ0FnZFhaQmJtbHRZWFJwYjI1TllYTnJWR1Y0ZEhWeVpTeGNiaUFnSUNBZ0lIVjJRVzVwYldGMGFXOXVVMk55YjJ4c1dGTndaV1ZrUm1GamRHOXlMRnh1SUNBZ0lDQWdkWFpCYm1sdFlYUnBiMjVUWTNKdmJHeFpVM0JsWldSR1lXTjBiM0lzWEc0Z0lDQWdJQ0IxZGtGdWFXMWhkR2x2YmxKdmRHRjBhVzl1VTNCbFpXUkdZV04wYjNJc1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0F1TGk1elkyaGxiV0ZOWVhSbGNtbGhiQ3hjYmx4dUlDQWdJQ0FnY0dKeVRXVjBZV3hzYVdOU2IzVm5hRzVsYzNNNklIdGNiaUFnSUNBZ0lDQWdZbUZ6WlVOdmJHOXlSbUZqZEc5eUxGeHVJQ0FnSUNBZ0lDQmlZWE5sUTI5c2IzSlVaWGgwZFhKbExGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lHNXZjbTFoYkZSbGVIUjFjbVVzWEc0Z0lDQWdJQ0JsYldsemMybDJaVlJsZUhSMWNtVXNYRzRnSUNBZ0lDQmxiV2x6YzJsMlpVWmhZM1J2Y2l4Y2JpQWdJQ0FnSUdGc2NHaGhUVzlrWlN4Y2JpQWdJQ0FnSUdGc2NHaGhRM1YwYjJabUxGeHVJQ0FnSUNBZ1pHOTFZbXhsVTJsa1pXUXNYRzRnSUNBZ0lDQmxlSFJsYm5OcGIyNXpPaUI3WEc0Z0lDQWdJQ0FnSUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCQWRIbHdaWE5qY21sd2RDMWxjMnhwYm5RdmJtRnRhVzVuTFdOdmJuWmxiblJwYjI1Y2JpQWdJQ0FnSUNBZ1ZsSk5RMTl0WVhSbGNtbGhiSE5mYlhSdmIyNDZJRzEwYjI5dVJYaDBaVzV6YVc5dUxGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNCOU8xeHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQmZjR0Z5YzJWV01GVnViR2wwVUhKdmNHVnlkR2xsY3loY2JpQWdJQ0J0WVhSbGNtbGhiRkJ5YjNCbGNuUnBaWE02SUZZd1RXRjBaWEpwWVd3c1hHNGdJQ0FnYzJOb1pXMWhUV0YwWlhKcFlXdzZJRWRNVkVaVFkyaGxiV0V1U1UxaGRHVnlhV0ZzTEZ4dUlDQXBPaUJIVEZSR1UyTm9aVzFoTGtsTllYUmxjbWxoYkNCN1hHNGdJQ0FnWTI5dWMzUWdhWE5VY21GdWMzQmhjbVZ1ZEZwWGNtbDBaU0E5SUcxaGRHVnlhV0ZzVUhKdmNHVnlkR2xsY3k1emFHRmtaWElnUFQwOUlDZFdVazB2Vlc1c2FYUlVjbUZ1YzNCaGNtVnVkRnBYY21sMFpTYzdYRzRnSUNBZ1kyOXVjM1FnYVhOVWNtRnVjM0JoY21WdWRDQTlJRzFoZEdWeWFXRnNVSEp2Y0dWeWRHbGxjeTV6YUdGa1pYSWdQVDA5SUNkV1VrMHZWVzVzYVhSVWNtRnVjM0JoY21WdWRDY2dmSHdnYVhOVWNtRnVjM0JoY21WdWRGcFhjbWwwWlR0Y2JseHVJQ0FnSUdOdmJuTjBJSEpsYm1SbGNsRjFaWFZsVDJabWMyVjBUblZ0WW1WeUlEMGdkR2hwY3k1ZmRqQlFZWEp6WlZKbGJtUmxjbEYxWlhWbEtHMWhkR1Z5YVdGc1VISnZjR1Z5ZEdsbGN5azdYRzVjYmlBZ0lDQmpiMjV6ZENCcGMwTjFkRzltWmlBOUlHMWhkR1Z5YVdGc1VISnZjR1Z5ZEdsbGN5NXphR0ZrWlhJZ1BUMDlJQ2RXVWswdlZXNXNhWFJEZFhSdmRYUW5PMXh1SUNBZ0lHTnZibk4wSUdGc2NHaGhUVzlrWlNBOUlHbHpWSEpoYm5Od1lYSmxiblFnUHlBblFreEZUa1FuSURvZ2FYTkRkWFJ2Wm1ZZ1B5QW5UVUZUU3ljZ09pQW5UMUJCVVZWRkp6dGNiaUFnSUNCamIyNXpkQ0JoYkhCb1lVTjFkRzltWmlBOUlHbHpRM1YwYjJabUlEOGdiV0YwWlhKcFlXeFFjbTl3WlhKMGFXVnpMbVpzYjJGMFVISnZjR1Z5ZEdsbGN6OHVXeWRmUTNWMGIyWm1KMTBnT2lCMWJtUmxabWx1WldRN1hHNWNiaUFnSUNCamIyNXpkQ0IwWlhoMGRYSmxWSEpoYm5ObWIzSnRSWGgwSUQwZ2RHaHBjeTVmY0c5eWRGUmxlSFIxY21WVWNtRnVjMlp2Y20wb2JXRjBaWEpwWVd4UWNtOXdaWEowYVdWektUdGNibHh1SUNBZ0lHTnZibk4wSUdKaGMyVkRiMnh2Y2taaFkzUnZjaUE5SUcxaGRHVnlhV0ZzVUhKdmNHVnlkR2xsY3k1MlpXTjBiM0pRY205d1pYSjBhV1Z6UHk1YkoxOURiMnh2Y2lkZFB5NXRZWEFvWjJGdGJXRkZUMVJHS1R0Y2JpQWdJQ0JqYjI1emRDQmlZWE5sUTI5c2IzSlVaWGgwZFhKbFNXNWtaWGdnUFNCdFlYUmxjbWxoYkZCeWIzQmxjblJwWlhNdWRHVjRkSFZ5WlZCeWIzQmxjblJwWlhNL0xsc25YMDFoYVc1VVpYZ25YVHRjYmlBZ0lDQmpiMjV6ZENCaVlYTmxRMjlzYjNKVVpYaDBkWEpsSUQxY2JpQWdJQ0FnSUdKaGMyVkRiMnh2Y2xSbGVIUjFjbVZKYm1SbGVDQWhQU0J1ZFd4c1hHNGdJQ0FnSUNBZ0lEOGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGc2SUdKaGMyVkRiMnh2Y2xSbGVIUjFjbVZKYm1SbGVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdWNGRHVnVjMmx2Ym5NNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0xpNHVkR1Y0ZEhWeVpWUnlZVzV6Wm05eWJVVjRkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBNklIVnVaR1ZtYVc1bFpEdGNibHh1SUNBZ0lDOHZJSFZ6WlNCdGRHOXZiaUJwYm5OMFpXRmtJRzltSUhWdWJHbDBMQ0J6YVc1alpTQjBhR1Z5WlNCdGFXZG9kQ0JpWlNCV1VrMHdMakFnYzNCbFkybG1hV01nWm1WaGRIVnlaWE1nZEdoaGRDQmhjbVVnYm05MElITjFjSEJ2Y25SbFpDQmllU0JuYkhSbVhHNGdJQ0FnWTI5dWMzUWdiWFJ2YjI1RmVIUmxibk5wYjI0NklGWXhUVlJ2YjI1VFkyaGxiV0V1VmxKTlEwMWhkR1Z5YVdGc2MwMVViMjl1SUQwZ2UxeHVJQ0FnSUNBZ2MzQmxZMVpsY25OcGIyNDZJQ2N4TGpBbkxGeHVJQ0FnSUNBZ2RISmhibk53WVhKbGJuUlhhWFJvV2xkeWFYUmxPaUJwYzFSeVlXNXpjR0Z5Wlc1MFdsZHlhWFJsTEZ4dUlDQWdJQ0FnY21WdVpHVnlVWFZsZFdWUFptWnpaWFJPZFcxaVpYSXNYRzRnSUNBZ0lDQnphR0ZrWlVOdmJHOXlSbUZqZEc5eU9pQmlZWE5sUTI5c2IzSkdZV04wYjNJc1hHNGdJQ0FnSUNCemFHRmtaVTExYkhScGNHeDVWR1Y0ZEhWeVpUb2dZbUZ6WlVOdmJHOXlWR1Y0ZEhWeVpTeGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUM0dUxuTmphR1Z0WVUxaGRHVnlhV0ZzTEZ4dVhHNGdJQ0FnSUNCd1luSk5aWFJoYkd4cFkxSnZkV2RvYm1WemN6b2dlMXh1SUNBZ0lDQWdJQ0JpWVhObFEyOXNiM0pHWVdOMGIzSXNYRzRnSUNBZ0lDQWdJR0poYzJWRGIyeHZjbFJsZUhSMWNtVXNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdZV3h3YUdGTmIyUmxMRnh1SUNBZ0lDQWdZV3h3YUdGRGRYUnZabVlzWEc0Z0lDQWdJQ0JsZUhSbGJuTnBiMjV6T2lCN1hHNGdJQ0FnSUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQkFkSGx3WlhOamNtbHdkQzFsYzJ4cGJuUXZibUZ0YVc1bkxXTnZiblpsYm5ScGIyNWNiaUFnSUNBZ0lDQWdWbEpOUTE5dFlYUmxjbWxoYkhOZmJYUnZiMjQ2SUcxMGIyOXVSWGgwWlc1emFXOXVMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQjlPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOeVpXRjBaU0JoSUdkc1ZFWWdZRXRJVWw5MFpYaDBkWEpsWDNSeVlXNXpabTl5YldBZ1pYaDBaVzV6YVc5dUlHWnliMjBnZGpBZ2RHVjRkSFZ5WlNCMGNtRnVjMlp2Y20wZ2FXNW1ieTVjYmlBZ0lDb3ZYRzRnSUhCeWFYWmhkR1VnWDNCdmNuUlVaWGgwZFhKbFZISmhibk5tYjNKdEtHMWhkR1Z5YVdGc1VISnZjR1Z5ZEdsbGN6b2dWakJOWVhSbGNtbGhiQ2s2SUhzZ1cyNWhiV1U2SUhOMGNtbHVaMTA2SUdGdWVTQjlJSHRjYmlBZ0lDQmpiMjV6ZENCMFpYaDBkWEpsVkhKaGJuTm1iM0p0SUQwZ2JXRjBaWEpwWVd4UWNtOXdaWEowYVdWekxuWmxZM1J2Y2xCeWIzQmxjblJwWlhNL0xsc25YMDFoYVc1VVpYZ25YVHRjYmlBZ0lDQnBaaUFvZEdWNGRIVnlaVlJ5WVc1elptOXliU0E5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdlMzA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2IyWm1jMlYwSUQwZ1czUmxlSFIxY21WVWNtRnVjMlp2Y20wL0xsc3dYU0EvUHlBd0xqQXNJSFJsZUhSMWNtVlVjbUZ1YzJadmNtMC9MbHN4WFNBL1B5QXdMakJkTzF4dUlDQWdJR052Ym5OMElITmpZV3hsSUQwZ1czUmxlSFIxY21WVWNtRnVjMlp2Y20wL0xsc3lYU0EvUHlBeExqQXNJSFJsZUhSMWNtVlVjbUZ1YzJadmNtMC9MbHN6WFNBL1B5QXhMakJkTzF4dVhHNGdJQ0FnYjJabWMyVjBXekZkSUQwZ0tITmpZV3hsV3pGZElDb2dLREV1TUNBdElHOW1abk5sZEZzeFhTa3BJQ1VnTVM0d08xeHVYRzRnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCQWRIbHdaWE5qY21sd2RDMWxjMnhwYm5RdmJtRnRhVzVuTFdOdmJuWmxiblJwYjI1Y2JpQWdJQ0FnSUV0SVVsOTBaWGgwZFhKbFgzUnlZVzV6Wm05eWJUb2dleUJ2Wm1aelpYUXNJSE5qWVd4bElIMHNYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEYjI1MlpYSjBJSFl3SUhKbGJtUmxjaUJ2Y21SbGNpQnBiblJ2SUhZeElISmxibVJsY2lCdmNtUmxjaTVjYmlBZ0lDb2dWR2hwY3lCMWMyVnpJR0VnYldGd0lHWnliMjBnZGpBZ2NtVnVaR1Z5SUhGMVpYVmxJSFJ2SUhZeElHTnZiWEJzYVdGdWRDQnlaVzVrWlhJZ2NYVmxkV1VnYjJabWMyVjBJSGRvYVdOb0lHbHpJR2RsYm1WeVlYUmxaQ0JwYmlCN1FHeHBibXNnWDNCdmNIVnNZWFJsVW1WdVpHVnlVWFZsZFdWTllYQjlMbHh1SUNBZ0tpOWNiaUFnY0hKcGRtRjBaU0JmZGpCUVlYSnpaVkpsYm1SbGNsRjFaWFZsS0cxaGRHVnlhV0ZzVUhKdmNHVnlkR2xsY3pvZ1ZqQk5ZWFJsY21saGJDazZJRzUxYldKbGNpQjdYRzRnSUNBZ1kyOXVjM1FnYVhOVWNtRnVjM0JoY21WdWRDQTlJRzFoZEdWeWFXRnNVSEp2Y0dWeWRHbGxjeTVyWlhsM2IzSmtUV0Z3UHk1YkoxOUJURkJJUVVKTVJVNUVYMDlPSjEwZ1B6OGdabUZzYzJVN1hHNGdJQ0FnWTI5dWMzUWdaVzVoWW14bFpGcFhjbWwwWlNBOUlHMWhkR1Z5YVdGc1VISnZjR1Z5ZEdsbGN5NW1iRzloZEZCeWIzQmxjblJwWlhNL0xsc25YMXBYY21sMFpTZGRJRDA5UFNBeE8xeHVYRzRnSUNBZ2JHVjBJRzltWm5ObGRDQTlJREE3WEc1Y2JpQWdJQ0JwWmlBb2FYTlVjbUZ1YzNCaGNtVnVkQ2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdkakJSZFdWMVpTQTlJRzFoZEdWeWFXRnNVSEp2Y0dWeWRHbGxjeTV5Wlc1a1pYSlJkV1YxWlR0Y2JseHVJQ0FnSUNBZ2FXWWdLSFl3VVhWbGRXVWdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1pXNWhZbXhsWkZwWGNtbDBaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHOW1abk5sZENBOUlIUm9hWE11WDNKbGJtUmxjbEYxWlhWbFRXRndWSEpoYm5Od1lYSmxiblJhVjNKcGRHVXVaMlYwS0hZd1VYVmxkV1VwSVR0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnZabVp6WlhRZ1BTQjBhR2x6TGw5eVpXNWtaWEpSZFdWMVpVMWhjRlJ5WVc1emNHRnlaVzUwTG1kbGRDaDJNRkYxWlhWbEtTRTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2IyWm1jMlYwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnlaV0YwWlNCaElHMWhjQ0IzYUdsamFDQnRZWEJ6SUhZd0lISmxibVJsY2lCeGRXVjFaU0IwYnlCMk1TQmpiMjF3YkdsaGJuUWdjbVZ1WkdWeUlIRjFaWFZsSUc5bVpuTmxkQzVjYmlBZ0lDb2dWR2hwY3lCc2FYTjBjeUIxY0NCaGJHd2djbVZ1WkdWeUlIRjFaWFZsY3lCMGFHVWdiVzlrWld3Z2RYTmxJR0Z1WkNCamNtVmhkR1Z6SUdFZ2JXRndJSFJ2SUc1bGR5QnlaVzVrWlhJZ2NYVmxkV1VnYjJabWMyVjBjeUJwYmlCMGFHVWdjMkZ0WlNCdmNtUmxjaTVjYmlBZ0lDb3ZYRzRnSUhCeWFYWmhkR1VnWDNCdmNIVnNZWFJsVW1WdVpHVnlVWFZsZFdWTllYQW9iV0YwWlhKcFlXeFFjbTl3WlhKMGFXVnpUR2x6ZERvZ1ZqQk5ZWFJsY21saGJGdGRLU0I3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVNCelpYUWdiMllnZFhObFpDQnlaVzVrWlhJZ2NYVmxkV1Z6SUdsdUlGUnlZVzV6Y0dGeVpXNTBJRzFoZEdWeWFXRnNjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQmpiMjV6ZENCeVpXNWtaWEpSZFdWMVpYTlVjbUZ1YzNCaGNtVnVkQ0E5SUc1bGR5QlRaWFE4Ym5WdFltVnlQaWdwTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FTQnpaWFFnYjJZZ2RYTmxaQ0J5Wlc1a1pYSWdjWFZsZFdWeklHbHVJRlJ5WVc1emNHRnlaVzUwV2xkeWFYUmxJRzFoZEdWeWFXRnNjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQmpiMjV6ZENCeVpXNWtaWEpSZFdWMVpYTlVjbUZ1YzNCaGNtVnVkRnBYY21sMFpTQTlJRzVsZHlCVFpYUThiblZ0WW1WeVBpZ3BPMXh1WEc0Z0lDQWdMeThnY0c5d2RXeGhkR1VnZEdobElISmxibVJsY2lCeGRXVjFaU0J6WlhSY2JpQWdJQ0J0WVhSbGNtbGhiRkJ5YjNCbGNuUnBaWE5NYVhOMExtWnZja1ZoWTJnb0tHMWhkR1Z5YVdGc1VISnZjR1Z5ZEdsbGN5a2dQVDRnZTF4dUlDQWdJQ0FnWTI5dWMzUWdhWE5VY21GdWMzQmhjbVZ1ZENBOUlHMWhkR1Z5YVdGc1VISnZjR1Z5ZEdsbGN5NXJaWGwzYjNKa1RXRndQeTViSjE5QlRGQklRVUpNUlU1RVgwOU9KMTBnUHo4Z1ptRnNjMlU3WEc0Z0lDQWdJQ0JqYjI1emRDQmxibUZpYkdWa1dsZHlhWFJsSUQwZ2JXRjBaWEpwWVd4UWNtOXdaWEowYVdWekxtWnNiMkYwVUhKdmNHVnlkR2xsY3o4dVd5ZGZXbGR5YVhSbEoxMGdQVDA5SURFN1hHNWNiaUFnSUNBZ0lHbG1JQ2hwYzFSeVlXNXpjR0Z5Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIWXdVWFZsZFdVZ1BTQnRZWFJsY21saGJGQnliM0JsY25ScFpYTXVjbVZ1WkdWeVVYVmxkV1U3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFl3VVhWbGRXVWdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGxibUZpYkdWa1dsZHlhWFJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5Wlc1a1pYSlJkV1YxWlhOVWNtRnVjM0JoY21WdWRGcFhjbWwwWlM1aFpHUW9kakJSZFdWMVpTazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxibVJsY2xGMVpYVmxjMVJ5WVc1emNHRnlaVzUwTG1Ga1pDaDJNRkYxWlhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUM4dklITm9iM2NnWVNCM1lYSnVhVzVuSUdsbUlIUm9aU0J0YjJSbGJDQjFjMlZ6SUhZeElHbHVZMjl0Y0dGMGFXSnNaU0J1ZFcxaVpYSWdiMllnY21WdVpHVnlJSEYxWlhWbGMxeHVJQ0FnSUdsbUlDaHlaVzVrWlhKUmRXVjFaWE5VY21GdWMzQmhjbVZ1ZEM1emFYcGxJRDRnTVRBcElIdGNiaUFnSUNBZ0lHTnZibk52YkdVdWQyRnliaWhjYmlBZ0lDQWdJQ0FnWUZaU1RVMWhkR1Z5YVdGc2MxWXdRMjl0Y0dGMFVHeDFaMmx1T2lCVWFHbHpJRlpTVFNCMWMyVnpJQ1I3Y21WdVpHVnlVWFZsZFdWelZISmhibk53WVhKbGJuUXVjMmw2WlgwZ2NtVnVaR1Z5SUhGMVpYVmxjeUJtYjNJZ1ZISmhibk53WVhKbGJuUWdiV0YwWlhKcFlXeHpJSGRvYVd4bElGWlNUU0F4TGpBZ2IyNXNlU0J6ZFhCd2IzSjBjeUIxY0NCMGJ5QXhNQ0J5Wlc1a1pYSWdjWFZsZFdWekxpQlVhR1VnYlc5a1pXd2diV2xuYUhRZ2JtOTBJR0psSUhKbGJtUmxjbVZrSUdOdmNuSmxZM1JzZVM1Z0xGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jbVZ1WkdWeVVYVmxkV1Z6VkhKaGJuTndZWEpsYm5SYVYzSnBkR1V1YzJsNlpTQStJREV3S1NCN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9YRzRnSUNBZ0lDQWdJR0JXVWsxTllYUmxjbWxoYkhOV01FTnZiWEJoZEZCc2RXZHBiam9nVkdocGN5QldVazBnZFhObGN5QWtlM0psYm1SbGNsRjFaWFZsYzFSeVlXNXpjR0Z5Wlc1MFdsZHlhWFJsTG5OcGVtVjlJSEpsYm1SbGNpQnhkV1YxWlhNZ1ptOXlJRlJ5WVc1emNHRnlaVzUwV2xkeWFYUmxJRzFoZEdWeWFXRnNjeUIzYUdsc1pTQldVazBnTVM0d0lHOXViSGtnYzNWd2NHOXlkSE1nZFhBZ2RHOGdNVEFnY21WdVpHVnlJSEYxWlhWbGN5NGdWR2hsSUcxdlpHVnNJRzFwWjJoMElHNXZkQ0JpWlNCeVpXNWtaWEpsWkNCamIzSnlaV04wYkhrdVlDeGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdZM0psWVhSbElHRWdiV0Z3SUdaeWIyMGdkakFnY21WdVpHVnlJSEYxWlhWbElIUnZJSFl4SUhKbGJtUmxjaUJ4ZFdWMVpTQnZabVp6WlhSY2JpQWdJQ0JCY25KaGVTNW1jbTl0S0hKbGJtUmxjbEYxWlhWbGMxUnlZVzV6Y0dGeVpXNTBLVnh1SUNBZ0lDQWdMbk52Y25Rb0tWeHVJQ0FnSUNBZ0xtWnZja1ZoWTJnb0tIRjFaWFZsTENCcEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzVsZDFGMVpYVmxUMlptYzJWMElEMGdUV0YwYUM1dGFXNG9UV0YwYUM1dFlYZ29hU0F0SUhKbGJtUmxjbEYxWlhWbGMxUnlZVzV6Y0dGeVpXNTBMbk5wZW1VZ0t5QXhMQ0F0T1Nrc0lEQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlaVzVrWlhKUmRXVjFaVTFoY0ZSeVlXNXpjR0Z5Wlc1MExuTmxkQ2h4ZFdWMVpTd2dibVYzVVhWbGRXVlBabVp6WlhRcE8xeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQkJjbkpoZVM1bWNtOXRLSEpsYm1SbGNsRjFaWFZsYzFSeVlXNXpjR0Z5Wlc1MFdsZHlhWFJsS1Z4dUlDQWdJQ0FnTG5OdmNuUW9LVnh1SUNBZ0lDQWdMbVp2Y2tWaFkyZ29LSEYxWlhWbExDQnBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUc1bGQxRjFaWFZsVDJabWMyVjBJRDBnVFdGMGFDNXRhVzRvVFdGMGFDNXRZWGdvYVN3Z01Da3NJRGtwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5Wlc1a1pYSlJkV1YxWlUxaGNGUnlZVzV6Y0dGeVpXNTBXbGR5YVhSbExuTmxkQ2h4ZFdWMVpTd2dibVYzVVhWbGRXVlBabVp6WlhRcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUgxY2JuMWNiaUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVzlIUVR0QlFVTlBMRk5CUVZNc1UwRkJVeXhEUVVGRExFOUJRVThzUlVGQlJTeFZRVUZWTEVWQlFVVXNRMEZCUXl4RlFVRkZMRk5CUVZNc1JVRkJSVHRCUVVNM1JDeEpRVUZKTEZOQlFWTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1JVRkJSU3hGUVVGRkxFOUJRVThzUzBGQlN5eFpRVUZaTEVOQlFVTXNSMEZCUnl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU1zVlVGQlZTeFBRVUZQTEVWQlFVVXNSVUZCUlN4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlR0QlFVTm9TQ3hKUVVGSkxFOUJRVThzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRTlCUVU4c1EwRkJReXhGUVVGRkxGVkJRVlVzVDBGQlR5eEZRVUZGTEUxQlFVMHNSVUZCUlR0QlFVTXZSQ3hSUVVGUkxGTkJRVk1zVTBGQlV5eERRVUZETEV0QlFVc3NSVUZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCUlN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVTdRVUZEYmtjc1VVRkJVU3hUUVVGVExGRkJRVkVzUTBGQlF5eExRVUZMTEVWQlFVVXNSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCUlN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVTdRVUZEZEVjc1VVRkJVU3hUUVVGVExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNSVUZCUlN4TlFVRk5MRU5CUVVNc1NVRkJTU3hIUVVGSExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETEVWQlFVVTdRVUZEZEVnc1VVRkJVU3hKUVVGSkxFTkJRVU1zUTBGQlF5eFRRVUZUTEVkQlFVY3NVMEZCVXl4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzVlVGQlZTeEpRVUZKTEVWQlFVVXNRMEZCUXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRE9VVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRVRHM3UVVNeFNFMHNVMEZCVlN4VFFVRlRMRU5CUVVNc1EwRkJVeXhGUVVGQk8wbEJRMnBETEU5QlFVOHNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZETVVJN08wMURTMkVzTUVKQlFUQkNMRU5CUVVFN1FVRmhja01zU1VGQlFTeEpRVUZYTEVsQlFVa3NSMEZCUVR0QlFVTmlMRkZCUVVFc1QwRkJUeXcwUWtGQk5FSXNRMEZCUXp0TFFVTnlRenRCUVVWRUxFbEJRVUVzVjBGQlFTeERRVUZ0UWl4TlFVRnJRaXhGUVVGQk96dEJRVU51UXl4UlFVRkJMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETzBGQlJYSkNMRkZCUVVFc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4SFFVRkhMRWxCUVVrc1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRE5VTXNVVUZCUVN4SlFVRkpMRU5CUVVNc1owTkJRV2RETEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUVVVc1EwRkJRenM3TzBGQlNXeEVMRkZCUVVFc1RVRkJUU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRjNRaXhEUVVGRE8xRkJSV3hFTEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1EwRkJRU3hGUVVGQkxFZEJRVUVzU1VGQlNTeERRVUZETEdOQlFXTXNUVUZCU1N4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkZMRU5CUVVNN1VVRkRhRVFzU1VGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTlCUVU4c1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJReTlFTEZsQlFVRXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1EwRkJRenRCUVVOdVJDeFRRVUZCTzB0QlEwWTdTVUZGV1N4VlFVRlZMRWRCUVVFN096dEJRVU55UWl4WlFVRkJMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCZDBJc1EwRkJRenM3V1VGSGJFUXNUVUZCVFN4alFVRmpMRWRCUVVjc1EwRkJRU3hGUVVGQkxFZEJRVUVzU1VGQlNTeERRVUZETEZWQlFWVXNUVUZCUVN4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1EwRkJSeXhMUVVGTExFTkJRWE5DTEVOQlFVTTdXVUZEY2tVc1RVRkJUU3h2UWtGQmIwSXNSMEZCUnl4alFVRmpMRXRCUVVFc1NVRkJRU3hKUVVGa0xHTkJRV01zUzBGQlpDeExRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hqUVVGakxFTkJRVVVzYTBKQlFXdENMRU5CUVVNN1dVRkRhRVVzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhGUVVGRk8yZENRVU42UWl4UFFVRlBPMEZCUTFJc1lVRkJRVHM3UVVGSFJDeFpRVUZCTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhEUVVGRE96dFpRVWR1UkN4dlFrRkJiMElzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4clFrRkJhMElzUlVGQlJTeGhRVUZoTEV0QlFVazdPMmRDUVVOcVJTeE5RVUZOTEZkQlFWY3NSMEZCUnl4RFFVRkJMRVZCUVVFc1IwRkJRU3hKUVVGSkxFTkJRVU1zVTBGQlV5eE5RVUZCTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4RFFVRkhMR0ZCUVdFc1EwRkJReXhEUVVGRE8yZENRVVZ3UkN4SlFVRkpMRmRCUVZjc1NVRkJTU3hKUVVGSkxFVkJRVVU3UVVGRGRrSXNiMEpCUVVFc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGRFZpeDNSRUZCZDBRc1lVRkJZU3hEUVVGQkxIZERRVUZCTEVOQlFUQkRMRU5CUTJoSUxFTkJRVU03YjBKQlEwWXNUMEZCVHp0QlFVTlNMR2xDUVVGQk8wRkJSVVFzWjBKQlFVRXNTVUZCU1N4clFrRkJhMElzUTBGQlF5eE5RVUZOTEV0QlFVc3NWMEZCVnl4RlFVRkZPMjlDUVVNM1F5eE5RVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlFVTTdRVUZETDBVc2IwSkJRVUVzU1VGQlNTeERRVUZETEZOQlFWVXNRMEZCUXl4aFFVRmhMRU5CUVVNc1IwRkJSeXhSUVVGUkxFTkJRVU03UVVGRE0wTXNhVUpCUVVFN2NVSkJRVTBzU1VGQlNTeERRVUZCTEVWQlFVRXNSMEZCUVN4clFrRkJhMElzUTBGQlF5eE5RVUZOTERCRFFVRkZMRlZCUVZVc1EwRkJReXhYUVVGWExFTkJRVU1zUlVGQlJUdHZRa0ZETjBRc1RVRkJUU3hSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExHdENRVUZyUWl4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRE8wRkJReTlGTEc5Q1FVRkJMRWxCUVVrc1EwRkJReXhUUVVGVkxFTkJRVU1zWVVGQllTeERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRPMEZCUXpORExHbENRVUZCTzBGQlFVMHNjVUpCUVVFc1NVRkJTU3hyUWtGQmEwSXNRMEZCUXl4TlFVRk5MRXRCUVVzc2IwSkJRVzlDTEVWQlFVVXNRMEZGT1VRN1FVRkJUU3h4UWtGQlFUdHZRa0ZEVEN4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVUVzTkVOQlFVRXNSVUZCSzBNc2EwSkJRV3RDTEVOQlFVTXNUVUZCVFN4RFFVRkZMRU5CUVVFc1EwRkJReXhEUVVGRE8wRkJRekZHTEdsQ1FVRkJPMEZCUTBnc1lVRkJReXhEUVVGRExFTkJRVU03TzBGQlEwb3NTMEZCUVR0SlFVVlBMSFZDUVVGMVFpeERRVU0zUWl4clFrRkJPRUlzUlVGRE9VSXNZMEZCYjBNc1JVRkJRVHM3UVVGRmNFTXNVVUZCUVN4TlFVRk5MR0ZCUVdFc1IwRkJSeXhEUVVGQkxFVkJRVUVzUjBGQlFTeERRVUZCTEVWQlFVRXNSMEZCUVN4clFrRkJhMElzUTBGQlF5eFZRVUZWTEUxQlFVRXNTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRU5CUVVjc1owSkJRV2RDTEVOQlFVTXNUVUZCU1N4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4TFFVRkxMRU5CUVVNN1FVRkRha1lzVVVGQlFTeE5RVUZOTEdGQlFXRXNSMEZCUnl4RFFVRkJMRU5CUVVFc1JVRkJRU3hIUVVGQkxHdENRVUZyUWl4RFFVRkRMR1ZCUVdVc1RVRkJRU3hKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlJ5eFRRVUZUTEVOQlFVTXNUVUZCU3l4RFFVRkRMRU5CUVVNN1FVRkROVVVzVVVGQlFTeE5RVUZOTEhGQ1FVRnhRaXhIUVVGSExHRkJRV0VzU1VGQlNTeGhRVUZoTEVOQlFVTTdVVUZGTjBRc1RVRkJUU3gxUWtGQmRVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF6dEJRVVUzUlN4UlFVRkJMRTFCUVUwc1VVRkJVU3hIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEVOQlFVRXNSVUZCUVN4SFFVRkJMR3RDUVVGclFpeERRVUZETEZWQlFWVXNUVUZCUVN4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1EwRkJSeXhsUVVGbExFTkJRVU1zVFVGQlNTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeExRVUZMTEVOQlFVTTdRVUZETTBVc1VVRkJRU3hOUVVGTkxGTkJRVk1zUjBGQlJ5eGhRVUZoTEVkQlFVY3NUMEZCVHl4SFFVRkhMRkZCUVZFc1IwRkJSeXhOUVVGTkxFZEJRVWNzVVVGQlVTeERRVUZETzBGQlEzcEZMRkZCUVVFc1RVRkJUU3hYUVVGWExFZEJRVWNzVVVGQlVTeEhRVUZITEVOQlFVRXNSVUZCUVN4SFFVRkJMR3RDUVVGclFpeERRVUZETEdWQlFXVXNNRU5CUVVjc1UwRkJVeXhEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETzBGQlJUTkdMRkZCUVVFc1RVRkJUU3hSUVVGUkxFZEJRVWNzUTBGQlFTeEZRVUZCTEVkQlFVRXNRMEZCUVN4RlFVRkJMRWRCUVVFc2EwSkJRV3RDTEVOQlFVTXNaVUZCWlN4TlFVRkhMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGQkxGZEJRVmNzUTBGQlF5eE5RVUZCTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTjRSU3hSUVVGQkxFMUJRVTBzVjBGQlZ5eEhRVUZITEZGQlFWRXNTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRkZia01zVFVGQlRTeHRRa0ZCYlVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXp0QlFVVXpSU3hSUVVGQkxFMUJRVTBzWlVGQlpTeEhRVUZITEVOQlFVRXNSVUZCUVN4SFFVRkJMRU5CUVVFc1JVRkJRU3hIUVVGQkxHdENRVUZyUWl4RFFVRkRMR2RDUVVGblFpeE5RVUZCTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4RFFVRkhMRkZCUVZFc1EwRkJReXd3UTBGQlJTeEhRVUZITEVOQlF6RkZMRU5CUVVNc1EwRkJVeXhGUVVGRkxFTkJRVk1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZEZGtRc1EwRkJRenRSUVVOR0xFMUJRVTBzY1VKQlFYRkNMRWRCUVVjc1EwRkJRU3hGUVVGQkxFZEJRVUVzYTBKQlFXdENMRU5CUVVNc2FVSkJRV2xDTEUxQlFVRXNTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRU5CUVVjc1ZVRkJWU3hEUVVGRExFTkJRVU03UVVGRGFrWXNVVUZCUVN4TlFVRk5MR2RDUVVGblFpeEhRVU53UWl4eFFrRkJjVUlzU1VGQlNTeEpRVUZKTzBGQlF6TkNMR05CUVVVN1FVRkRSU3huUWtGQlFTeExRVUZMTEVWQlFVVXNjVUpCUVhGQ08yZENRVU0xUWl4VlFVRlZMRVZCUVVFc1RVRkJRU3hEUVVGQkxFMUJRVUVzUTBGQlFTeEZRVUZCTEVWQlEwd3NiVUpCUVcxQ0xFTkJRM1pDTzBGQlEwWXNZVUZCUVR0alFVTkVMRk5CUVZNc1EwRkJRenRSUVVWb1FpeE5RVUZOTEd0Q1FVRnJRaXhIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEd0Q1FVRnJRaXhEUVVGRExHVkJRV1VzVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNRMEZCUnl4WlFVRlpMRU5CUVVNc1EwRkJRenRSUVVNNVJTeE5RVUZOTEd0Q1FVRnJRaXhIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEd0Q1FVRnJRaXhEUVVGRExHbENRVUZwUWl4TlFVRkJMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGSExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlF6bEZMRkZCUVVFc1RVRkJUU3hoUVVGaExFZEJRMnBDTEd0Q1FVRnJRaXhKUVVGSkxFbEJRVWs3UVVGRGVFSXNZMEZCUlR0QlFVTkZMR2RDUVVGQkxFdEJRVXNzUlVGQlJTeHJRa0ZCYTBJN1FVRkRla0lzWjBKQlFVRXNTMEZCU3l4RlFVRkZMR3RDUVVGclFqdG5Ra0ZEZWtJc1ZVRkJWU3hGUVVGQkxFMUJRVUVzUTBGQlFTeE5RVUZCTEVOQlFVRXNSVUZCUVN4RlFVTk1MRzFDUVVGdFFpeERRVU4yUWp0QlFVTkdMR0ZCUVVFN1kwRkRSQ3hUUVVGVExFTkJRVU03UVVGRmFFSXNVVUZCUVN4TlFVRk5MR05CUVdNc1IwRkJSeXhEUVVGQkxFVkJRVUVzUjBGQlFTeERRVUZCTEVWQlFVRXNSMEZCUVN4clFrRkJhMElzUTBGQlF5eG5Ra0ZCWjBJc1RVRkJSeXhKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlFTeG5Ra0ZCWjBJc1EwRkJReXhOUVVGRkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeERRVUZCTEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRSUVVNdlJpeE5RVUZOTEc5Q1FVRnZRaXhIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEd0Q1FVRnJRaXhEUVVGRExHbENRVUZwUWl4TlFVRkJMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGSExHTkJRV01zUTBGQlF5eERRVUZETzBGQlEzQkdMRkZCUVVFc1RVRkJUU3hsUVVGbExFZEJRMjVDTEc5Q1FVRnZRaXhKUVVGSkxFbEJRVWs3UVVGRE1VSXNZMEZCUlR0QlFVTkZMR2RDUVVGQkxFdEJRVXNzUlVGQlJTeHZRa0ZCYjBJN1owSkJRek5DTEZWQlFWVXNSVUZCUVN4TlFVRkJMRU5CUVVFc1RVRkJRU3hEUVVGQkxFVkJRVUVzUlVGRFRDeHRRa0ZCYlVJc1EwRkRka0k3UVVGRFJpeGhRVUZCTzJOQlEwUXNVMEZCVXl4RFFVRkRPMEZCUldoQ0xGRkJRVUVzVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhEUVVGQkxFVkJRVUVzUjBGQlFTeERRVUZCTEVWQlFVRXNSMEZCUVN4clFrRkJhMElzUTBGQlF5eG5Ra0ZCWjBJc1RVRkJSeXhKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlFTeGhRVUZoTEVOQlFVTXNUVUZCUlN4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1EwRkJRU3hIUVVGSExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdVVUZET1VZc1RVRkJUU3g1UWtGQmVVSXNSMEZCUnl4RFFVRkJMRVZCUVVFc1IwRkJRU3hyUWtGQmEwSXNRMEZCUXl4cFFrRkJhVUlzVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNRMEZCUnl4bFFVRmxMRU5CUVVNc1EwRkJRenRCUVVNeFJpeFJRVUZCTEUxQlFVMHNiMEpCUVc5Q0xFZEJRM2hDTEhsQ1FVRjVRaXhKUVVGSkxFbEJRVWs3UVVGREwwSXNZMEZCUlR0QlFVTkZMR2RDUVVGQkxFdEJRVXNzUlVGQlJTeDVRa0ZCZVVJN1owSkJRMmhETEZWQlFWVXNSVUZCUVN4TlFVRkJMRU5CUVVFc1RVRkJRU3hEUVVGQkxFVkJRVUVzUlVGRFRDeHRRa0ZCYlVJc1EwRkRka0k3UVVGRFJpeGhRVUZCTzJOQlEwUXNVMEZCVXl4RFFVRkRPenRCUVVkb1FpeFJRVUZCTEVsQlFVa3NhMEpCUVd0Q0xFZEJRVWNzUTBGQlFTeEZRVUZCTEVkQlFVRXNRMEZCUVN4RlFVRkJMRWRCUVVFc2EwSkJRV3RDTEVOQlFVTXNaVUZCWlN4TlFVRkJMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGSExHRkJRV0VzUTBGQlF5eE5RVUZKTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEVkQlFVY3NRMEZCUXp0QlFVTndSaXhSUVVGQkxFbEJRVWtzYTBKQlFXdENMRWRCUVVjc1EwRkJRU3hGUVVGQkxFZEJRVUVzUTBGQlFTeEZRVUZCTEVkQlFVRXNhMEpCUVd0Q0xFTkJRVU1zWlVGQlpTeE5RVUZCTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4RFFVRkhMR0ZCUVdFc1EwRkJReXhOUVVGSkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxFZEJRVWNzUTBGQlF6dEJRVU53Uml4UlFVRkJMR3RDUVVGclFpeEhRVUZITEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFZEJRVWNzUjBGQlJ5eEhRVUZITEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03VVVGRGJrY3NhMEpCUVd0Q0xFZEJRVWNzUTBGQlF5eHJRa0ZCYTBJc1NVRkJTU3hIUVVGSExFZEJRVWNzYTBKQlFXdENMRU5CUVVNc1EwRkJRenRSUVVWMFJTeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEd0Q1FVRnJRaXhEUVVGRExHVkJRV1VzVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNRMEZCUnl4NVFrRkJlVUlzUTBGQlF5eERRVUZETzBGQlF6RkdMRkZCUVVFc1RVRkJUU3h2UWtGQmIwSXNSMEZCUnl4cFFrRkJhVUlzUjBGQlJ5eEhRVUZITEVkQlFVY3NhVUpCUVdsQ0xFZEJRVWNzVTBGQlV5eERRVUZETzFGQlJYSkdMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NRMEZCUVN4RlFVRkJMRWRCUVVFc2EwSkJRV3RDTEVOQlFVTXNhVUpCUVdsQ0xFMUJRVUVzU1VGQlFTeEpRVUZCTEVWQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVOQlFVY3NXVUZCV1N4RFFVRkRMRU5CUVVNN1FVRkRhRVlzVVVGQlFTeE5RVUZOTEZsQlFWa3NSMEZCUnl4clFrRkJhMElzU1VGQlNTeEpRVUZKTEVkQlFVY3NRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eEhRVUZITEZOQlFWTXNRMEZCUXp0QlFVTTVSU3hSUVVGQkxFMUJRVTBzWVVGQllTeEhRVU5xUWl4clFrRkJhMElzU1VGQlNTeEpRVUZKTzBGQlEzaENMR05CUVVVN1FVRkRSU3huUWtGQlFTeExRVUZMTEVWQlFVVXNhMEpCUVd0Q08wRkJRekZDTEdGQlFVRTdZMEZEUkN4VFFVRlRMRU5CUVVNN1VVRkZhRUlzVFVGQlRTeHZRa0ZCYjBJc1IwRkJSeXhEUVVGQkxFVkJRVUVzUjBGQlFTeHJRa0ZCYTBJc1EwRkJReXhsUVVGbExFMUJRVUVzU1VGQlFTeEpRVUZCTEVWQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVOQlFVY3NhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dFJRVU55Uml4TlFVRk5MSFZDUVVGMVFpeEhRVUZITEVOQlFVRXNSVUZCUVN4SFFVRkJMR3RDUVVGclFpeERRVUZETEdsQ1FVRnBRaXhOUVVGQkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeERRVUZITEdGQlFXRXNRMEZCUXl4RFFVRkRPMEZCUTNSR0xGRkJRVUVzVFVGQlRTeHJRa0ZCYTBJc1IwRkRkRUlzZFVKQlFYVkNMRWxCUVVrc1NVRkJTVHRCUVVNM1FpeGpRVUZGTzBGQlEwVXNaMEpCUVVFc1MwRkJTeXhGUVVGRkxIVkNRVUYxUWp0blFrRkRPVUlzVlVGQlZTeEZRVUZCTEUxQlFVRXNRMEZCUVN4TlFVRkJMRU5CUVVFc1JVRkJRU3hGUVVOTUxHMUNRVUZ0UWl4RFFVTjJRanRCUVVOR0xHRkJRVUU3WTBGRFJDeFRRVUZUTEVOQlFVTTdRVUZGYUVJc1VVRkJRU3hOUVVGTkxIZENRVUYzUWl4SFFVRkhMRU5CUVVFc1JVRkJRU3hIUVVGQkxFTkJRVUVzUlVGQlFTeEhRVUZCTEd0Q1FVRnJRaXhEUVVGRExHZENRVUZuUWl4TlFVRkhMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGQkxGZEJRVmNzUTBGQlF5eE5RVUZGTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4RFFVRkJMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFJRVU53Unl4TlFVRk5MQ3RDUVVFclFpeEhRVUZITEVOQlFVRXNSVUZCUVN4SFFVRkJMR3RDUVVGclFpeERRVUZETEdWQlFXVXNUVUZCUVN4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1EwRkJSeXhyUWtGQmEwSXNRMEZCUXl4RFFVRkRPMUZCUTJwSExFMUJRVTBzZFVKQlFYVkNMRWRCUVVjc1EwRkJRU3hGUVVGQkxFZEJRVUVzYTBKQlFXdENMRU5CUVVNc1pVRkJaU3hOUVVGQkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeERRVUZITEZWQlFWVXNRMEZCUXl4RFFVRkRPMUZCUldwR0xFMUJRVTBzWjBKQlFXZENMRWRCUVVjc1EwRkJReXhOUVVGTkxFVkJRVVVzYTBKQlFXdENMRVZCUVVVc2JVSkJRVzFDTEVOQlFVTXNRMEZEZUVVc1RVRkJRU3hEUVVGQkxFVkJRVUVzUjBGQlFTeHJRa0ZCYTBJc1EwRkJReXhsUVVGbExFMUJRVUVzU1VGQlFTeEpRVUZCTEVWQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVOQlFVY3NiVUpCUVcxQ0xFTkJRVU1zVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlNTeERRVUZETEVOQlEyWXNRMEZCUXpzN1FVRkhiRVFzVVVGQlFTeEpRVUZKTEd0Q1FVRnJRaXhIUVVGSExFTkJRVUVzUjBGQlFTeEhRVUZCTEVOQlFVRXNSVUZCUVN4SFFVRkJMR3RDUVVGclFpeERRVUZETEdWQlFXVXNUVUZCUVN4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1EwRkJSeXhsUVVGbExFTkJRVU1zVFVGQlNTeEpRVUZCTEVsQlFVRXNSMEZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFZEJRVUVzUjBGQlFTeEhRVUZITEVOQlFVTTdRVUZEZEVZc1VVRkJRU3hyUWtGQmEwSXNSMEZCUnl4SlFVRkpMRWRCUVVjc2EwSkJRV3RDTEVOQlFVTTdVVUZGTDBNc1RVRkJUU3huUTBGQlowTXNSMEZCUnl4RFFVRkJMRWRCUVVFc1IwRkJRU3hyUWtGQmEwSXNRMEZCUXl4cFFrRkJhVUlzVFVGQlFTeEpRVUZCTEVsQlFVRXNSMEZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVkQlFVRXNRMEZCUnl4elFrRkJjMElzUTBGQlF5eERRVUZETzBGQlEzaEhMRkZCUVVFc1RVRkJUU3d5UWtGQk1rSXNSMEZETDBJc1owTkJRV2RETEVsQlFVa3NTVUZCU1R0QlFVTjBReXhqUVVGRk8wRkJRMFVzWjBKQlFVRXNTMEZCU3l4RlFVRkZMR2REUVVGblF6dG5Ra0ZEZGtNc1ZVRkJWU3hGUVVGQkxFMUJRVUVzUTBGQlFTeE5RVUZCTEVOQlFVRXNSVUZCUVN4RlFVTk1MRzFDUVVGdFFpeERRVU4yUWp0QlFVTkdMR0ZCUVVFN1kwRkRSQ3hUUVVGVExFTkJRVU03UVVGRmFFSXNVVUZCUVN4TlFVRk5MR3RDUVVGclFpeEhRVUZITEVOQlFVRXNSMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hIUVVGQkxHdENRVUZyUWl4RFFVRkRMR2RDUVVGblFpeE5RVUZITEVsQlFVRXNTVUZCUVN4SFFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSMEZCUVN4RFFVRkJMR1ZCUVdVc1EwRkJReXhOUVVGRkxFbEJRVUVzU1VGQlFTeEhRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUjBGQlFTeERRVUZCTEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRSUVVOc1J5eE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExFTkJRVUVzUjBGQlFTeEhRVUZCTEd0Q1FVRnJRaXhEUVVGRExHVkJRV1VzVFVGQlFTeEpRVUZCTEVsQlFVRXNSMEZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVkQlFVRXNRMEZCUnl4dFFrRkJiVUlzUTBGQlF5eERRVUZETzBGQlEyNUdMRkZCUVVFc1RVRkJUU3gzUWtGQmQwSXNSMEZETlVJc1owSkJRV2RDTEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVFc1IwRkJRU3hIUVVGQkxHdENRVUZyUWl4RFFVRkRMR1ZCUVdVc05FTkJRVWNzY1VKQlFYRkNMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRk4wWXNUVUZCVFN3eVFrRkJNa0lzUjBGQlJ5eERRVUZCTEVkQlFVRXNSMEZCUVN4clFrRkJhMElzUTBGQlF5eHBRa0ZCYVVJc1RVRkJRU3hKUVVGQkxFbEJRVUVzUjBGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFZEJRVUVzUTBGQlJ5eHZRa0ZCYjBJc1EwRkJReXhEUVVGRE8wRkJRMnBITEZGQlFVRXNUVUZCVFN4elFrRkJjMElzUjBGRE1VSXNNa0pCUVRKQ0xFbEJRVWtzU1VGQlNUdEJRVU5xUXl4alFVRkZPMEZCUTBVc1owSkJRVUVzUzBGQlN5eEZRVUZGTERKQ1FVRXlRanRuUWtGRGJFTXNWVUZCVlN4RlFVRkJMRTFCUVVFc1EwRkJRU3hOUVVGQkxFTkJRVUVzUlVGQlFTeEZRVU5NTEcxQ1FVRnRRaXhEUVVOMlFqdEJRVU5HTEdGQlFVRTdZMEZEUkN4VFFVRlRMRU5CUVVNN1VVRkZhRUlzVFVGQlRTdzJRa0ZCTmtJc1IwRkJSeXhEUVVGQkxFZEJRVUVzUjBGQlFTeHJRa0ZCYTBJc1EwRkJReXhsUVVGbExFMUJRVUVzU1VGQlFTeEpRVUZCTEVkQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEhRVUZCTEVOQlFVY3NaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6czdVVUZITjBZc1NVRkJTU3cyUWtGQk5rSXNSMEZCUnl4RFFVRkJMRWRCUVVFc1IwRkJRU3hyUWtGQmEwSXNRMEZCUXl4bFFVRmxMRTFCUVVFc1NVRkJRU3hKUVVGQkxFZEJRVUVzUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hIUVVGQkxFTkJRVWNzWjBKQlFXZENMRU5CUVVNc1EwRkJRenRSUVVNelJpeEpRVUZKTERaQ1FVRTJRaXhKUVVGSkxFbEJRVWtzUlVGQlJUdFpRVU42UXl3MlFrRkJOa0lzUjBGQlJ5eERRVUZETERaQ1FVRTJRaXhEUVVGRE8wRkJRMmhGTEZOQlFVRTdVVUZGUkN4TlFVRk5MRGhDUVVFNFFpeEhRVUZITEVOQlFVRXNSMEZCUVN4SFFVRkJMR3RDUVVGclFpeERRVUZETEdWQlFXVXNUVUZCUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRWRCUVVFc1EwRkJSeXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMEZCUlM5R0xGRkJRVUVzVFVGQlRTeGpRVUZqTEVkQlFYRkRPMEZCUTNaRUxGbEJRVUVzVjBGQlZ5eEZRVUZGTEV0QlFVczdXVUZEYkVJc2NVSkJRWEZDTzFsQlEzSkNMSFZDUVVGMVFqdFpRVU4yUWl4blFrRkJaMEk3V1VGRGFFSXNiMEpCUVc5Q08xbEJRM0JDTEd0Q1FVRnJRanRaUVVOc1FpeHJRa0ZCYTBJN1dVRkRiRUlzYjBKQlFXOUNPMWxCUTNCQ0xGbEJRVms3V1VGRFdpeGhRVUZoTzFsQlEySXNiMEpCUVc5Q08xbEJRM0JDTEd0Q1FVRnJRanRaUVVOc1FpeDNRa0ZCZDBJN1dVRkRlRUlzSzBKQlFTdENPMWxCUXk5Q0xIVkNRVUYxUWp0WlFVTjJRaXhuUWtGQlowSTdXVUZEYUVJc2EwSkJRV3RDTzFsQlEyeENMREpDUVVFeVFqdFpRVU16UWl4clFrRkJhMEk3V1VGRGJFSXNkMEpCUVhkQ08xbEJRM2hDTEhOQ1FVRnpRanRaUVVOMFFpdzJRa0ZCTmtJN1dVRkROMElzTmtKQlFUWkNPMWxCUXpkQ0xEaENRVUU0UWp0VFFVTXZRaXhEUVVGRE8xRkJSVVlzVDBGRFN5eE5RVUZCTEVOQlFVRXNUVUZCUVN4RFFVRkJMRTFCUVVFc1EwRkJRU3hOUVVGQkxFTkJRVUVzUlVGQlFTeEZRVUZCTEdOQlFXTXNRMEZGYWtJc1JVRkJRU3hGUVVGQkxHOUNRVUZ2UWl4RlFVRkZPMmRDUVVOd1FpeGxRVUZsTzJkQ1FVTm1MR2RDUVVGblFqdEJRVU5xUWl4aFFVRkJMRVZCUTBRc1lVRkJZVHRaUVVOaUxHVkJRV1U3V1VGRFppeGpRVUZqTzFsQlEyUXNVMEZCVXp0WlFVTlVMRmRCUVZjN1dVRkRXQ3hYUVVGWExFVkJRMWdzVlVGQlZTeEZRVUZGT3p0QlFVVldMR2RDUVVGQkxHOUNRVUZ2UWl4RlFVRkZMR05CUVdNN1lVRkRja01zUlVGRFJDeERRVUZCTEVOQlFVRTdTMEZEU0R0SlFVVlBMSFZDUVVGMVFpeERRVU0zUWl4clFrRkJPRUlzUlVGRE9VSXNZMEZCYjBNc1JVRkJRVHM3UVVGRmNFTXNVVUZCUVN4TlFVRk5MRzFDUVVGdFFpeEhRVUZITEd0Q1FVRnJRaXhEUVVGRExFMUJRVTBzUzBGQlN5dzBRa0ZCTkVJc1EwRkJRenRSUVVOMlJpeE5RVUZOTEdGQlFXRXNSMEZCUnl4clFrRkJhMElzUTBGQlF5eE5RVUZOTEV0QlFVc3NjMEpCUVhOQ0xFbEJRVWtzYlVKQlFXMUNMRU5CUVVNN1VVRkZiRWNzVFVGQlRTeDFRa0ZCZFVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXp0QlFVVTNSU3hSUVVGQkxFMUJRVTBzVVVGQlVTeEhRVUZITEd0Q1FVRnJRaXhEUVVGRExFMUJRVTBzUzBGQlN5eHBRa0ZCYVVJc1EwRkJRenRCUVVOcVJTeFJRVUZCTEUxQlFVMHNVMEZCVXl4SFFVRkhMR0ZCUVdFc1IwRkJSeXhQUVVGUExFZEJRVWNzVVVGQlVTeEhRVUZITEUxQlFVMHNSMEZCUnl4UlFVRlJMRU5CUVVNN1FVRkRla1VzVVVGQlFTeE5RVUZOTEZkQlFWY3NSMEZCUnl4UlFVRlJMRWRCUVVjc1EwRkJRU3hGUVVGQkxFZEJRVUVzYTBKQlFXdENMRU5CUVVNc1pVRkJaU3d3UTBGQlJ5eFRRVUZUTEVOQlFVTXNSMEZCUnl4VFFVRlRMRU5CUVVNN1VVRkZNMFlzVFVGQlRTeHRRa0ZCYlVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXp0QlFVVXpSU3hSUVVGQkxFMUJRVTBzWlVGQlpTeEhRVUZITEVOQlFVRXNSVUZCUVN4SFFVRkJMRU5CUVVFc1JVRkJRU3hIUVVGQkxHdENRVUZyUWl4RFFVRkRMR2RDUVVGblFpeE5RVUZITEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4RFFVRkJMRkZCUVZFc1EwRkJReXhOUVVGRkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeERRVUZCTEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRSUVVONFJpeE5RVUZOTEhGQ1FVRnhRaXhIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEd0Q1FVRnJRaXhEUVVGRExHbENRVUZwUWl4TlFVRkJMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGSExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlEycEdMRkZCUVVFc1RVRkJUU3huUWtGQlowSXNSMEZEY0VJc2NVSkJRWEZDTEVsQlFVa3NTVUZCU1R0QlFVTXpRaXhqUVVGRk8wRkJRMFVzWjBKQlFVRXNTMEZCU3l4RlFVRkZMSEZDUVVGeFFqdG5Ra0ZETlVJc1ZVRkJWU3hGUVVGQkxFMUJRVUVzUTBGQlFTeE5RVUZCTEVOQlFVRXNSVUZCUVN4RlFVTk1MRzFDUVVGdFFpeERRVU4yUWp0QlFVTkdMR0ZCUVVFN1kwRkRSQ3hUUVVGVExFTkJRVU03TzBGQlIyaENMRkZCUVVFc1RVRkJUU3hqUVVGakxFZEJRWEZETzBGQlEzWkVMRmxCUVVFc1YwRkJWeXhGUVVGRkxFdEJRVXM3UVVGRGJFSXNXVUZCUVN4eFFrRkJjVUlzUlVGQlJTeHRRa0ZCYlVJN1dVRkRNVU1zZFVKQlFYVkNPMEZCUTNaQ0xGbEJRVUVzWjBKQlFXZENMRVZCUVVVc1pVRkJaVHRCUVVOcVF5eFpRVUZCTEc5Q1FVRnZRaXhGUVVGRkxHZENRVUZuUWp0VFFVTjJReXhEUVVGRE8xRkJSVVlzVDBGRFN5eE5RVUZCTEVOQlFVRXNUVUZCUVN4RFFVRkJMRTFCUVVFc1EwRkJRU3hOUVVGQkxFTkJRVUVzUlVGQlFTeEZRVUZCTEdOQlFXTXNRMEZGYWtJc1JVRkJRU3hGUVVGQkxHOUNRVUZ2UWl4RlFVRkZPMmRDUVVOd1FpeGxRVUZsTzJkQ1FVTm1MR2RDUVVGblFqdEJRVU5xUWl4aFFVRkJMRVZCUTBRc1UwRkJVenRaUVVOVUxGZEJRVmNzUlVGRFdDeFZRVUZWTEVWQlFVVTdPMEZCUlZZc1owSkJRVUVzYjBKQlFXOUNMRVZCUVVVc1kwRkJZenRoUVVOeVF5eEZRVU5FTEVOQlFVRXNRMEZCUVR0TFFVTklPMEZCUlVRN08wRkJSVWM3UVVGRFN5eEpRVUZCTEhGQ1FVRnhRaXhEUVVGRExHdENRVUU0UWl4RlFVRkJPenRSUVVNeFJDeE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEd0Q1FVRnJRaXhEUVVGRExHZENRVUZuUWl4TlFVRkJMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGSExGVkJRVlVzUTBGQlF5eERRVUZETzFGQlF6TkZMRWxCUVVrc1owSkJRV2RDTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUXpWQ0xGbEJRVUVzVDBGQlR5eEZRVUZGTEVOQlFVTTdRVUZEV0N4VFFVRkJPMUZCUlVRc1RVRkJUU3hOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZCTEVWQlFVRXNSMEZCUVN4blFrRkJaMElzUzBGQmFFSXNTVUZCUVN4SlFVRkJMR2RDUVVGblFpeExRVUZvUWl4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeG5Ra0ZCWjBJc1EwRkJSeXhEUVVGRExFTkJRVU1zVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlNTeEhRVUZITEVWQlFVVXNRMEZCUVN4RlFVRkJMRWRCUVVFc1owSkJRV2RDTEV0QlFXaENMRWxCUVVFc1NVRkJRU3huUWtGQlowSXNTMEZCYUVJc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNaMEpCUVdkQ0xFTkJRVWNzUTBGQlF5eERRVUZETEUxQlFVRXNTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkROVVVzVFVGQlRTeExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkJMRVZCUVVFc1IwRkJRU3huUWtGQlowSXNTMEZCYUVJc1NVRkJRU3hKUVVGQkxHZENRVUZuUWl4TFFVRm9RaXhMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4blFrRkJaMElzUTBGQlJ5eERRVUZETEVOQlFVTXNUVUZCUVN4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCU1N4SFFVRkhMRVZCUVVVc1EwRkJRU3hGUVVGQkxFZEJRVUVzWjBKQlFXZENMRXRCUVdoQ0xFbEJRVUVzU1VGQlFTeG5Ra0ZCWjBJc1MwRkJhRUlzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1owSkJRV2RDTEVOQlFVY3NRMEZCUXl4RFFVRkRMRTFCUVVFc1NVRkJRU3hKUVVGQkxFVkJRVUVzUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRk0wVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRWRCUVVjc1IwRkJSeXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4SFFVRkhMRU5CUVVNN1VVRkZha1FzVDBGQlR6czdRVUZGVEN4WlFVRkJMSEZDUVVGeFFpeEZRVUZGTEVWQlFVVXNUVUZCVFN4RlFVRkZMRXRCUVVzc1JVRkJSVHRUUVVONlF5eERRVUZETzB0QlEwZzdRVUZGUkRzN08wRkJSMGM3UVVGRFN5eEpRVUZCTEcxQ1FVRnRRaXhEUVVGRExHdENRVUU0UWl4RlFVRkJPenRCUVVONFJDeFJRVUZCTEUxQlFVMHNZVUZCWVN4SFFVRkhMRU5CUVVFc1JVRkJRU3hIUVVGQkxFTkJRVUVzUlVGQlFTeEhRVUZCTEd0Q1FVRnJRaXhEUVVGRExGVkJRVlVzVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNRMEZCUnl4blFrRkJaMElzUTBGQlF5eE5RVUZKTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEV0QlFVc3NRMEZCUXp0QlFVTnFSaXhSUVVGQkxFMUJRVTBzWVVGQllTeEhRVUZITEVOQlFVRXNRMEZCUVN4RlFVRkJMRWRCUVVFc2EwSkJRV3RDTEVOQlFVTXNaVUZCWlN4TlFVRkJMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGSExGTkJRVk1zUTBGQlF5eE5RVUZMTEVOQlFVTXNRMEZCUXp0UlFVVTFSU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZGWml4UlFVRkJMRWxCUVVrc1lVRkJZU3hGUVVGRk8wRkJRMnBDTEZsQlFVRXNUVUZCVFN4UFFVRlBMRWRCUVVjc2EwSkJRV3RDTEVOQlFVTXNWMEZCVnl4RFFVRkRPMWxCUlM5RExFbEJRVWtzVDBGQlR5eEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTnVRaXhuUWtGQlFTeEpRVUZKTEdGQlFXRXNSVUZCUlR0dlFrRkRha0lzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4blEwRkJaME1zUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkZMRU5CUVVNN1FVRkRPVVFzYVVKQlFVRTdRVUZCVFN4eFFrRkJRVHR2UWtGRFRDeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMREJDUVVFd1FpeERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVVc1EwRkJRenRCUVVONFJDeHBRa0ZCUVR0QlFVTkdMR0ZCUVVFN1FVRkRSaXhUUVVGQk8wRkJSVVFzVVVGQlFTeFBRVUZQTEUxQlFVMHNRMEZCUXp0TFFVTm1PMEZCUlVRN096dEJRVWRITzBGQlEwc3NTVUZCUVN4MVFrRkJkVUlzUTBGQlF5eHpRa0ZCYjBNc1JVRkJRVHRCUVVOc1JUczdRVUZGUnp0QlFVTklMRkZCUVVFc1RVRkJUU3gxUWtGQmRVSXNSMEZCUnl4SlFVRkpMRWRCUVVjc1JVRkJWU3hEUVVGRE8wRkJSV3hFT3p0QlFVVkhPMEZCUTBnc1VVRkJRU3hOUVVGTkxEWkNRVUUyUWl4SFFVRkhMRWxCUVVrc1IwRkJSeXhGUVVGVkxFTkJRVU03TzBGQlIzaEVMRkZCUVVFc2MwSkJRWE5DTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc2EwSkJRV3RDTEV0QlFVazdPMEZCUTNCRUxGbEJRVUVzVFVGQlRTeGhRVUZoTEVkQlFVY3NRMEZCUVN4RlFVRkJMRWRCUVVFc1EwRkJRU3hGUVVGQkxFZEJRVUVzYTBKQlFXdENMRU5CUVVNc1ZVRkJWU3hOUVVGQkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeERRVUZITEdkQ1FVRm5RaXhEUVVGRExFMUJRVWtzU1VGQlFTeEpRVUZCTEVWQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzUzBGQlN5eERRVUZETzBGQlEycEdMRmxCUVVFc1RVRkJUU3hoUVVGaExFZEJRVWNzUTBGQlFTeERRVUZCTEVWQlFVRXNSMEZCUVN4clFrRkJhMElzUTBGQlF5eGxRVUZsTEUxQlFVRXNTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRU5CUVVjc1UwRkJVeXhEUVVGRExFMUJRVXNzUTBGQlF5eERRVUZETzBGQlJUVkZMRmxCUVVFc1NVRkJTU3hoUVVGaExFVkJRVVU3UVVGRGFrSXNaMEpCUVVFc1RVRkJUU3hQUVVGUExFZEJRVWNzYTBKQlFXdENMRU5CUVVNc1YwRkJWeXhEUVVGRE8yZENRVVV2UXl4SlFVRkpMRTlCUVU4c1NVRkJTU3hKUVVGSkxFVkJRVVU3UVVGRGJrSXNiMEpCUVVFc1NVRkJTU3hoUVVGaExFVkJRVVU3UVVGRGFrSXNkMEpCUVVFc05rSkJRVFpDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJRelZETEhGQ1FVRkJPMEZCUVUwc2VVSkJRVUU3UVVGRFRDeDNRa0ZCUVN4MVFrRkJkVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkRkRU1zY1VKQlFVRTdRVUZEUml4cFFrRkJRVHRCUVVOR0xHRkJRVUU3UVVGRFNDeFRRVUZETEVOQlFVTXNRMEZCUXpzN1FVRkhTQ3hSUVVGQkxFbEJRVWtzZFVKQlFYVkNMRU5CUVVNc1NVRkJTU3hIUVVGSExFVkJRVVVzUlVGQlJUdFpRVU55UXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVOV0xFTkJRVUVzTUVOQlFVRXNSVUZCTmtNc2RVSkJRWFZDTEVOQlFVTXNTVUZCU1N4RFFVRjVTU3gxU1VGQlFTeERRVUZCTEVOQlEyNU9MRU5CUVVNN1FVRkRTQ3hUUVVGQk8wRkJSVVFzVVVGQlFTeEpRVUZKTERaQ1FVRTJRaXhEUVVGRExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVWQlFVVTdXVUZETTBNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGRFZpeERRVUZCTERCRFFVRkJMRVZCUVRaRExEWkNRVUUyUWl4RFFVRkRMRWxCUVVrc1EwRkJLMGtzTmtsQlFVRXNRMEZCUVN4RFFVTXZUaXhEUVVGRE8wRkJRMGdzVTBGQlFUczdRVUZIUkN4UlFVRkJMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNN1FVRkRhRU1zWVVGQlFTeEpRVUZKTEVWQlFVVTdRVUZEVGl4aFFVRkJMRTlCUVU4c1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEV0QlFVazdXVUZEY0VJc1RVRkJUU3hqUVVGakxFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eDFRa0ZCZFVJc1EwRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGRrWXNTVUZCU1N4RFFVRkRMREJDUVVFd1FpeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRVZCUVVVc1kwRkJZeXhEUVVGRExFTkJRVU03UVVGRE4wUXNVMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkZUQ3hSUVVGQkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNOa0pCUVRaQ0xFTkJRVU03UVVGRGRFTXNZVUZCUVN4SlFVRkpMRVZCUVVVN1FVRkRUaXhoUVVGQkxFOUJRVThzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRMRXRCUVVrN1FVRkRjRUlzV1VGQlFTeE5RVUZOTEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyNUVMRWxCUVVrc1EwRkJReXhuUTBGQlowTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhGUVVGRkxHTkJRV01zUTBGQlF5eERRVUZETzBGQlEyNUZMRk5CUVVNc1EwRkJReXhEUVVGRE8wdEJRMDQ3UVVGRFJqczdPenNpZlE9PVxuIiwiLyohXG4gKiBAcGl4aXYvdGhyZWUtdnJtLW5vZGUtY29uc3RyYWludCB2Mi4wLjFcbiAqIE5vZGUgY29uc3RyYWludCBtb2R1bGUgZm9yIEBwaXhpdi90aHJlZS12cm1cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAtMjAyMyBwaXhpdiBJbmMuXG4gKiBAcGl4aXYvdGhyZWUtdnJtLW5vZGUtY29uc3RyYWludCBpcyBkaXN0cmlidXRlZCB1bmRlciBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BpeGl2L3RocmVlLXZybS9ibG9iL3JlbGVhc2UvTElDRU5TRVxuICovXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmNvbnN0IF92M0EkMyA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5jbGFzcyBWUk1Ob2RlQ29uc3RyYWludEhlbHBlciBleHRlbmRzIFRIUkVFLkdyb3VwIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25zdHJhaW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2F0dHJQb3NpdGlvbiA9IG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShbMCwgMCwgMCwgMCwgMCwgMF0pLCAzKTtcbiAgICAgICAgdGhpcy5fYXR0clBvc2l0aW9uLnNldFVzYWdlKFRIUkVFLkR5bmFtaWNEcmF3VXNhZ2UpO1xuICAgICAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgICAgICBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgdGhpcy5fYXR0clBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe1xuICAgICAgICAgICAgY29sb3I6IDB4ZmYwMGZmLFxuICAgICAgICAgICAgZGVwdGhUZXN0OiBmYWxzZSxcbiAgICAgICAgICAgIGRlcHRoV3JpdGU6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbGluZSA9IG5ldyBUSFJFRS5MaW5lKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG4gICAgICAgIHRoaXMuYWRkKHRoaXMuX2xpbmUpO1xuICAgICAgICB0aGlzLmNvbnN0cmFpbnQgPSBjb25zdHJhaW50O1xuICAgIH1cbiAgICB1cGRhdGVNYXRyaXhXb3JsZChmb3JjZSkge1xuICAgICAgICBfdjNBJDMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMuY29uc3RyYWludC5kZXN0aW5hdGlvbi5tYXRyaXhXb3JsZCk7XG4gICAgICAgIHRoaXMuX2F0dHJQb3NpdGlvbi5zZXRYWVooMCwgX3YzQSQzLngsIF92M0EkMy55LCBfdjNBJDMueik7XG4gICAgICAgIGlmICh0aGlzLmNvbnN0cmFpbnQuc291cmNlKSB7XG4gICAgICAgICAgICBfdjNBJDMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMuY29uc3RyYWludC5zb3VyY2UubWF0cml4V29ybGQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2F0dHJQb3NpdGlvbi5zZXRYWVooMSwgX3YzQSQzLngsIF92M0EkMy55LCBfdjNBJDMueik7XG4gICAgICAgIHRoaXMuX2F0dHJQb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRlY29tcG9zZVBvc2l0aW9uKG1hdHJpeCwgdGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRhcmdldC5zZXQobWF0cml4LmVsZW1lbnRzWzEyXSwgbWF0cml4LmVsZW1lbnRzWzEzXSwgbWF0cml4LmVsZW1lbnRzWzE0XSk7XG59XG5cbmNvbnN0IF92M0EkMiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5jb25zdCBfdjNCJDEgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuZnVuY3Rpb24gZGVjb21wb3NlUm90YXRpb24obWF0cml4LCB0YXJnZXQpIHtcbiAgICBtYXRyaXguZGVjb21wb3NlKF92M0EkMiwgdGFyZ2V0LCBfdjNCJDEpO1xuICAgIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQSBjb21wYXQgZnVuY3Rpb24gZm9yIGBRdWF0ZXJuaW9uLmludmVydCgpYCAvIGBRdWF0ZXJuaW9uLmludmVyc2UoKWAuXG4gKiBgUXVhdGVybmlvbi5pbnZlcnQoKWAgaXMgaW50cm9kdWNlZCBpbiByMTIzIGFuZCBgUXVhdGVybmlvbi5pbnZlcnNlKClgIGVtaXRzIGEgd2FybmluZy5cbiAqIFdlIGFyZSBnb2luZyB0byB1c2UgdGhpcyBjb21wYXQgZm9yIGEgd2hpbGUuXG4gKiBAcGFyYW0gdGFyZ2V0IEEgdGFyZ2V0IHF1YXRlcm5pb25cbiAqL1xuZnVuY3Rpb24gcXVhdEludmVydENvbXBhdCh0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0LmludmVydCkge1xuICAgICAgICB0YXJnZXQuaW52ZXJ0KCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0YXJnZXQuaW52ZXJzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIEEgYmFzZSBjbGFzcyBvZiBWUk0gY29uc3RyYWludCBjbGFzc2VzLlxuICovXG5jbGFzcyBWUk1Ob2RlQ29uc3RyYWludCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGRlc3RpbmF0aW9uIFRoZSBkZXN0aW5hdGlvbiBvYmplY3RcbiAgICAgKiBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLndlaWdodCA9IDEuMDtcbiAgICB9XG59XG5cbmNvbnN0IF92M0EkMSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5jb25zdCBfdjNCID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbmNvbnN0IF92M0MgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuY29uc3QgX3F1YXRBJDIgPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuY29uc3QgX3F1YXRCJDIgPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuY29uc3QgX3F1YXRDID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbi8qKlxuICogQSBjb25zdHJhaW50IHRoYXQgbWFrZXMgaXQgbG9vayBhdCBhIHNvdXJjZSBvYmplY3QuXG4gKlxuICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdnJtLWMvdnJtLXNwZWNpZmljYXRpb24vdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi9WUk1DX25vZGVfY29uc3RyYWludC0xLjBfYmV0YSNyb2xsLWNvbnN0cmFpbnRcbiAqL1xuY2xhc3MgVlJNQWltQ29uc3RyYWludCBleHRlbmRzIFZSTU5vZGVDb25zdHJhaW50IHtcbiAgICAvKipcbiAgICAgKiBUaGUgYWltIGF4aXMgb2YgdGhlIGNvbnN0cmFpbnQuXG4gICAgICovXG4gICAgZ2V0IGFpbUF4aXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9haW1BeGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgYWltIGF4aXMgb2YgdGhlIGNvbnN0cmFpbnQuXG4gICAgICovXG4gICAgc2V0IGFpbUF4aXMoYWltQXhpcykge1xuICAgICAgICB0aGlzLl9haW1BeGlzID0gYWltQXhpcztcbiAgICAgICAgdGhpcy5fdjNBaW1BeGlzLnNldChhaW1BeGlzID09PSAnUG9zaXRpdmVYJyA/IDEuMCA6IGFpbUF4aXMgPT09ICdOZWdhdGl2ZVgnID8gLTEuMCA6IDAuMCwgYWltQXhpcyA9PT0gJ1Bvc2l0aXZlWScgPyAxLjAgOiBhaW1BeGlzID09PSAnTmVnYXRpdmVZJyA/IC0xLjAgOiAwLjAsIGFpbUF4aXMgPT09ICdQb3NpdGl2ZVonID8gMS4wIDogYWltQXhpcyA9PT0gJ05lZ2F0aXZlWicgPyAtMS4wIDogMC4wKTtcbiAgICB9XG4gICAgZ2V0IGRlcGVuZGVuY2llcygpIHtcbiAgICAgICAgY29uc3Qgc2V0ID0gbmV3IFNldChbdGhpcy5zb3VyY2VdKTtcbiAgICAgICAgaWYgKHRoaXMuZGVzdGluYXRpb24ucGFyZW50KSB7XG4gICAgICAgICAgICBzZXQuYWRkKHRoaXMuZGVzdGluYXRpb24ucGFyZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHN1cGVyKGRlc3RpbmF0aW9uLCBzb3VyY2UpO1xuICAgICAgICB0aGlzLl9haW1BeGlzID0gJ1Bvc2l0aXZlWCc7XG4gICAgICAgIHRoaXMuX3YzQWltQXhpcyA9IG5ldyBUSFJFRS5WZWN0b3IzKDEsIDAsIDApO1xuICAgICAgICB0aGlzLl9kc3RSZXN0UXVhdCA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG4gICAgfVxuICAgIHNldEluaXRTdGF0ZSgpIHtcbiAgICAgICAgdGhpcy5fZHN0UmVzdFF1YXQuY29weSh0aGlzLmRlc3RpbmF0aW9uLnF1YXRlcm5pb24pO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIC8vIHVwZGF0ZSB3b3JsZCBtYXRyaXggb2YgZGVzdGluYXRpb24gYW5kIHNvdXJjZSBtYW51YWxseVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLnVwZGF0ZVdvcmxkTWF0cml4KHRydWUsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5zb3VyY2UudXBkYXRlV29ybGRNYXRyaXgodHJ1ZSwgZmFsc2UpO1xuICAgICAgICAvLyBnZXQgd29ybGQgcXVhdGVybmlvbiBvZiB0aGUgcGFyZW50IG9mIHRoZSBkZXN0aW5hdGlvblxuICAgICAgICBjb25zdCBkc3RQYXJlbnRXb3JsZFF1YXQgPSBfcXVhdEEkMi5pZGVudGl0eSgpO1xuICAgICAgICBjb25zdCBpbnZEc3RQYXJlbnRXb3JsZFF1YXQgPSBfcXVhdEIkMi5pZGVudGl0eSgpO1xuICAgICAgICBpZiAodGhpcy5kZXN0aW5hdGlvbi5wYXJlbnQpIHtcbiAgICAgICAgICAgIGRlY29tcG9zZVJvdGF0aW9uKHRoaXMuZGVzdGluYXRpb24ucGFyZW50Lm1hdHJpeFdvcmxkLCBkc3RQYXJlbnRXb3JsZFF1YXQpO1xuICAgICAgICAgICAgcXVhdEludmVydENvbXBhdChpbnZEc3RQYXJlbnRXb3JsZFF1YXQuY29weShkc3RQYXJlbnRXb3JsZFF1YXQpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjYWxjdWxhdGUgZnJvbS10byB2ZWN0b3JzIGluIHdvcmxkIGNvb3JkXG4gICAgICAgIGNvbnN0IGEwID0gX3YzQSQxLmNvcHkodGhpcy5fdjNBaW1BeGlzKS5hcHBseVF1YXRlcm5pb24odGhpcy5fZHN0UmVzdFF1YXQpLmFwcGx5UXVhdGVybmlvbihkc3RQYXJlbnRXb3JsZFF1YXQpO1xuICAgICAgICBjb25zdCBhMSA9IGRlY29tcG9zZVBvc2l0aW9uKHRoaXMuc291cmNlLm1hdHJpeFdvcmxkLCBfdjNCKVxuICAgICAgICAgICAgLnN1YihkZWNvbXBvc2VQb3NpdGlvbih0aGlzLmRlc3RpbmF0aW9uLm1hdHJpeFdvcmxkLCBfdjNDKSlcbiAgICAgICAgICAgIC5ub3JtYWxpemUoKTtcbiAgICAgICAgLy8gY3JlYXRlIGEgZnJvbS10byBxdWF0ZXJuaW9uLCBjb252ZXJ0IHRvIGRlc3RpbmF0aW9uIGxvY2FsIGNvb3JkLCB0aGVuIG11bHRpcGx5IHJlc3QgcXVhdGVybmlvblxuICAgICAgICBjb25zdCB0YXJnZXRRdWF0ID0gX3F1YXRDXG4gICAgICAgICAgICAuc2V0RnJvbVVuaXRWZWN0b3JzKGEwLCBhMSlcbiAgICAgICAgICAgIC5wcmVtdWx0aXBseShpbnZEc3RQYXJlbnRXb3JsZFF1YXQpXG4gICAgICAgICAgICAubXVsdGlwbHkoZHN0UGFyZW50V29ybGRRdWF0KVxuICAgICAgICAgICAgLm11bHRpcGx5KHRoaXMuX2RzdFJlc3RRdWF0KTtcbiAgICAgICAgLy8gYmxlbmQgd2l0aCB0aGUgcmVzdCBxdWF0ZXJuaW9uIHVzaW5nIHdlaWdodFxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLnF1YXRlcm5pb24uY29weSh0aGlzLl9kc3RSZXN0UXVhdCkuc2xlcnAodGFyZ2V0UXVhdCwgdGhpcy53ZWlnaHQpO1xuICAgIH1cbn1cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcblxyXG5mdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XG5cbi8qKlxuICogVHJhdmVyc2UgYW5jZXN0b3JzIG9mIGdpdmVuIG9iamVjdCBhbmQgY2FsbCBnaXZlbiBjYWxsYmFjayBmcm9tIHJvb3Qgc2lkZS5cbiAqIEl0IHdpbGwgaW5jbHVkZSB0aGUgZ2l2ZW4gb2JqZWN0IGl0c2VsZi5cbiAqXG4gKiBAcGFyYW0gb2JqZWN0IFRoZSBvYmplY3QgeW91IHdhbnQgdG8gdHJhdmVyc2VcbiAqIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbCBiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2ggYW5jZXN0b3JzXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlQW5jZXN0b3JzRnJvbVJvb3Qob2JqZWN0LCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGFuY2VzdG9ycyA9IFtvYmplY3RdO1xuICAgIGxldCBoZWFkID0gb2JqZWN0LnBhcmVudDtcbiAgICB3aGlsZSAoaGVhZCAhPT0gbnVsbCkge1xuICAgICAgICBhbmNlc3RvcnMudW5zaGlmdChoZWFkKTtcbiAgICAgICAgaGVhZCA9IGhlYWQucGFyZW50O1xuICAgIH1cbiAgICBhbmNlc3RvcnMuZm9yRWFjaCgoYW5jZXN0b3IpID0+IHtcbiAgICAgICAgY2FsbGJhY2soYW5jZXN0b3IpO1xuICAgIH0pO1xufVxuXG5jbGFzcyBWUk1Ob2RlQ29uc3RyYWludE1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9jb25zdHJhaW50cyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5fb2JqZWN0Q29uc3RyYWludHNNYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGdldCBjb25zdHJhaW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnN0cmFpbnRzO1xuICAgIH1cbiAgICBhZGRDb25zdHJhaW50KGNvbnN0cmFpbnQpIHtcbiAgICAgICAgdGhpcy5fY29uc3RyYWludHMuYWRkKGNvbnN0cmFpbnQpO1xuICAgICAgICBsZXQgb2JqZWN0U2V0ID0gdGhpcy5fb2JqZWN0Q29uc3RyYWludHNNYXAuZ2V0KGNvbnN0cmFpbnQuZGVzdGluYXRpb24pO1xuICAgICAgICBpZiAob2JqZWN0U2V0ID09IG51bGwpIHtcbiAgICAgICAgICAgIG9iamVjdFNldCA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIHRoaXMuX29iamVjdENvbnN0cmFpbnRzTWFwLnNldChjb25zdHJhaW50LmRlc3RpbmF0aW9uLCBvYmplY3RTZXQpO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdFNldC5hZGQoY29uc3RyYWludCk7XG4gICAgfVxuICAgIGRlbGV0ZUNvbnN0cmFpbnQoY29uc3RyYWludCkge1xuICAgICAgICB0aGlzLl9jb25zdHJhaW50cy5kZWxldGUoY29uc3RyYWludCk7XG4gICAgICAgIGNvbnN0IG9iamVjdFNldCA9IHRoaXMuX29iamVjdENvbnN0cmFpbnRzTWFwLmdldChjb25zdHJhaW50LmRlc3RpbmF0aW9uKTtcbiAgICAgICAgb2JqZWN0U2V0LmRlbGV0ZShjb25zdHJhaW50KTtcbiAgICB9XG4gICAgc2V0SW5pdFN0YXRlKCkge1xuICAgICAgICBjb25zdCBjb25zdHJhaW50c1RyaWVkID0gbmV3IFNldCgpO1xuICAgICAgICBjb25zdCBjb25zdHJhaW50c0RvbmUgPSBuZXcgU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3QgY29uc3RyYWludCBvZiB0aGlzLl9jb25zdHJhaW50cykge1xuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc0NvbnN0cmFpbnQoY29uc3RyYWludCwgY29uc3RyYWludHNUcmllZCwgY29uc3RyYWludHNEb25lLCAoY29uc3RyYWludCkgPT4gY29uc3RyYWludC5zZXRJbml0U3RhdGUoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBjb25zdCBjb25zdHJhaW50c1RyaWVkID0gbmV3IFNldCgpO1xuICAgICAgICBjb25zdCBjb25zdHJhaW50c0RvbmUgPSBuZXcgU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3QgY29uc3RyYWludCBvZiB0aGlzLl9jb25zdHJhaW50cykge1xuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc0NvbnN0cmFpbnQoY29uc3RyYWludCwgY29uc3RyYWludHNUcmllZCwgY29uc3RyYWludHNEb25lLCAoY29uc3RyYWludCkgPT4gY29uc3RyYWludC51cGRhdGUoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIGEgY29uc3RyYWludC5cbiAgICAgKiBJZiB0aGVyZSBhcmUgb3RoZXIgY29uc3RyYWludHMgdGhhdCBhcmUgZGVwZW5kYW50LCBpdCB3aWxsIHRyeSB0byB1cGRhdGUgdGhlbSByZWN1cnNpdmVseS5cbiAgICAgKiBJdCBtaWdodCB0aHJvdyBhbiBlcnJvciBpZiB0aGVyZSBhcmUgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuICAgICAqXG4gICAgICogSW50ZW5kZWQgdG8gYmUgdXNlZCBpbiB7QGxpbmsgdXBkYXRlfSBhbmQge0BsaW5rIF9wcm9jZXNzQ29uc3RyYWludH0gaXRzZWxmIHJlY3Vyc2l2ZWx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnN0cmFpbnQgQSBjb25zdHJhaW50IHlvdSB3YW50IHRvIHVwZGF0ZVxuICAgICAqIEBwYXJhbSBjb25zdHJhaW50c1RyaWVkIFNldCBvZiBjb25zdHJhaW50cyB0aGF0IGFyZSBhbHJlYWR5IHRyaWVkIHRvIGJlIHVwZGF0ZWRcbiAgICAgKiBAcGFyYW0gY29uc3RyYWludHNEb25lIFNldCBvZiBjb25zdHJhaW50cyB0aGF0IGFyZSBhbHJlYWR5IHVwIHRvIGRhdGVcbiAgICAgKi9cbiAgICBfcHJvY2Vzc0NvbnN0cmFpbnQoY29uc3RyYWludCwgY29uc3RyYWludHNUcmllZCwgY29uc3RyYWludHNEb25lLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoY29uc3RyYWludHNEb25lLmhhcyhjb25zdHJhaW50KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25zdHJhaW50c1RyaWVkLmhhcyhjb25zdHJhaW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWUk1Ob2RlQ29uc3RyYWludE1hbmFnZXI6IENpcmN1bGFyIGRlcGVuZGVuY3kgZGV0ZWN0ZWQgd2hpbGUgdXBkYXRpbmcgY29uc3RyYWludHMnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdHJhaW50c1RyaWVkLmFkZChjb25zdHJhaW50KTtcbiAgICAgICAgY29uc3QgZGVwT2JqZWN0cyA9IGNvbnN0cmFpbnQuZGVwZW5kZW5jaWVzO1xuICAgICAgICBmb3IgKGNvbnN0IGRlcE9iamVjdCBvZiBkZXBPYmplY3RzKSB7XG4gICAgICAgICAgICB0cmF2ZXJzZUFuY2VzdG9yc0Zyb21Sb290KGRlcE9iamVjdCwgKGRlcE9iamVjdEFuY2VzdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqZWN0U2V0ID0gdGhpcy5fb2JqZWN0Q29uc3RyYWludHNNYXAuZ2V0KGRlcE9iamVjdEFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0U2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGVwQ29uc3RyYWludCBvZiBvYmplY3RTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NDb25zdHJhaW50KGRlcENvbnN0cmFpbnQsIGNvbnN0cmFpbnRzVHJpZWQsIGNvbnN0cmFpbnRzRG9uZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2soY29uc3RyYWludCk7XG4gICAgICAgIGNvbnN0cmFpbnRzRG9uZS5hZGQoY29uc3RyYWludCk7XG4gICAgfVxufVxuXG5jb25zdCBfcXVhdEEkMSA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG5jb25zdCBfcXVhdEIkMSA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG4vKipcbiAqIEEgY29uc3RyYWludCB0aGF0IHRyYW5zZmVycyBhIHJvdGF0aW9uIGFyb3VuZCBvbmUgYXhpcyBvZiBhIHNvdXJjZS5cbiAqXG4gKiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92cm0tYy92cm0tc3BlY2lmaWNhdGlvbi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uL1ZSTUNfbm9kZV9jb25zdHJhaW50LTEuMF9iZXRhI3JvbGwtY29uc3RyYWludFxuICovXG5jbGFzcyBWUk1Sb3RhdGlvbkNvbnN0cmFpbnQgZXh0ZW5kcyBWUk1Ob2RlQ29uc3RyYWludCB7XG4gICAgZ2V0IGRlcGVuZGVuY2llcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZXQoW3RoaXMuc291cmNlXSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgICAgc3VwZXIoZGVzdGluYXRpb24sIHNvdXJjZSk7XG4gICAgICAgIHRoaXMuX2RzdFJlc3RRdWF0ID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbiAgICAgICAgdGhpcy5faW52U3JjUmVzdFF1YXQgPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuICAgIH1cbiAgICBzZXRJbml0U3RhdGUoKSB7XG4gICAgICAgIHRoaXMuX2RzdFJlc3RRdWF0LmNvcHkodGhpcy5kZXN0aW5hdGlvbi5xdWF0ZXJuaW9uKTtcbiAgICAgICAgcXVhdEludmVydENvbXBhdCh0aGlzLl9pbnZTcmNSZXN0UXVhdC5jb3B5KHRoaXMuc291cmNlLnF1YXRlcm5pb24pKTtcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIGRlbHRhIHJvdGF0aW9uIGZyb20gdGhlIHJlc3QgYWJvdXQgdGhlIHNvdXJjZVxuICAgICAgICBjb25zdCBzcmNEZWx0YVF1YXQgPSBfcXVhdEEkMS5jb3B5KHRoaXMuX2ludlNyY1Jlc3RRdWF0KS5tdWx0aXBseSh0aGlzLnNvdXJjZS5xdWF0ZXJuaW9uKTtcbiAgICAgICAgLy8gbXVsdGlwbHkgdGhlIGRlbHRhIHRvIHRoZSByZXN0IG9mIHRoZSBkZXN0aW5hdGlvblxuICAgICAgICBjb25zdCB0YXJnZXRRdWF0ID0gX3F1YXRCJDEuY29weSh0aGlzLl9kc3RSZXN0UXVhdCkubXVsdGlwbHkoc3JjRGVsdGFRdWF0KTtcbiAgICAgICAgLy8gYmxlbmQgd2l0aCB0aGUgcmVzdCBxdWF0ZXJuaW9uIHVzaW5nIHdlaWdodFxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLnF1YXRlcm5pb24uY29weSh0aGlzLl9kc3RSZXN0UXVhdCkuc2xlcnAodGFyZ2V0UXVhdCwgdGhpcy53ZWlnaHQpO1xuICAgIH1cbn1cblxuY29uc3QgX3YzQSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5jb25zdCBfcXVhdEEgPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuY29uc3QgX3F1YXRCID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbi8qKlxuICogQSBjb25zdHJhaW50IHRoYXQgdHJhbnNmZXJzIGEgcm90YXRpb24gYXJvdW5kIG9uZSBheGlzIG9mIGEgc291cmNlLlxuICpcbiAqIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3ZybS1jL3ZybS1zcGVjaWZpY2F0aW9uL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vVlJNQ19ub2RlX2NvbnN0cmFpbnQtMS4wX2JldGEjcm9sbC1jb25zdHJhaW50XG4gKi9cbmNsYXNzIFZSTVJvbGxDb25zdHJhaW50IGV4dGVuZHMgVlJNTm9kZUNvbnN0cmFpbnQge1xuICAgIC8qKlxuICAgICAqIFRoZSByb2xsIGF4aXMgb2YgdGhlIGNvbnN0cmFpbnQuXG4gICAgICovXG4gICAgZ2V0IHJvbGxBeGlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm9sbEF4aXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSByb2xsIGF4aXMgb2YgdGhlIGNvbnN0cmFpbnQuXG4gICAgICovXG4gICAgc2V0IHJvbGxBeGlzKHJvbGxBeGlzKSB7XG4gICAgICAgIHRoaXMuX3JvbGxBeGlzID0gcm9sbEF4aXM7XG4gICAgICAgIHRoaXMuX3YzUm9sbEF4aXMuc2V0KHJvbGxBeGlzID09PSAnWCcgPyAxLjAgOiAwLjAsIHJvbGxBeGlzID09PSAnWScgPyAxLjAgOiAwLjAsIHJvbGxBeGlzID09PSAnWicgPyAxLjAgOiAwLjApO1xuICAgIH1cbiAgICBnZXQgZGVwZW5kZW5jaWVzKCkge1xuICAgICAgICByZXR1cm4gbmV3IFNldChbdGhpcy5zb3VyY2VdKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICBzdXBlcihkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICAgICAgdGhpcy5fcm9sbEF4aXMgPSAnWCc7XG4gICAgICAgIHRoaXMuX3YzUm9sbEF4aXMgPSBuZXcgVEhSRUUuVmVjdG9yMygxLCAwLCAwKTtcbiAgICAgICAgdGhpcy5fZHN0UmVzdFF1YXQgPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuICAgICAgICB0aGlzLl9pbnZEc3RSZXN0UXVhdCA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG4gICAgICAgIHRoaXMuX2ludlNyY1Jlc3RRdWF0TXVsRHN0UmVzdFF1YXQgPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuICAgIH1cbiAgICBzZXRJbml0U3RhdGUoKSB7XG4gICAgICAgIHRoaXMuX2RzdFJlc3RRdWF0LmNvcHkodGhpcy5kZXN0aW5hdGlvbi5xdWF0ZXJuaW9uKTtcbiAgICAgICAgcXVhdEludmVydENvbXBhdCh0aGlzLl9pbnZEc3RSZXN0UXVhdC5jb3B5KHRoaXMuX2RzdFJlc3RRdWF0KSk7XG4gICAgICAgIHF1YXRJbnZlcnRDb21wYXQodGhpcy5faW52U3JjUmVzdFF1YXRNdWxEc3RSZXN0UXVhdC5jb3B5KHRoaXMuc291cmNlLnF1YXRlcm5pb24pKS5tdWx0aXBseSh0aGlzLl9kc3RSZXN0UXVhdCk7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBkZWx0YSByb3RhdGlvbiBmcm9tIHRoZSByZXN0IGFib3V0IHRoZSBzb3VyY2UsIHRoZW4gY29udmVydCB0byB0aGUgZGVzdGluYXRpb24gbG9jYWwgY29vcmRcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoYXQgdGhlIHF1YXREZWx0YSBpcyBpbnRlbmRlZCB0byBiZTpcbiAgICAgICAgICpcbiAgICAgICAgICogYGBgdHNcbiAgICAgICAgICogY29uc3QgcXVhdFNyY0RlbHRhID0gX3F1YXRBXG4gICAgICAgICAqICAgLmNvcHkoIHRoaXMuX2ludlNyY1Jlc3RRdWF0IClcbiAgICAgICAgICogICAubXVsdGlwbHkoIHRoaXMuc291cmNlLnF1YXRlcm5pb24gKTtcbiAgICAgICAgICogY29uc3QgcXVhdFNyY0RlbHRhSW5QYXJlbnQgPSBfcXVhdEJcbiAgICAgICAgICogICAuY29weSggdGhpcy5fc3JjUmVzdFF1YXQgKVxuICAgICAgICAgKiAgIC5tdWx0aXBseSggcXVhdFNyY0RlbHRhIClcbiAgICAgICAgICogICAubXVsdGlwbHkoIHRoaXMuX2ludlNyY1Jlc3RRdWF0ICk7XG4gICAgICAgICAqIGNvbnN0IHF1YXRTcmNEZWx0YUluRHN0ID0gX3F1YXRBXG4gICAgICAgICAqICAgLmNvcHkoIHRoaXMuX2ludkRzdFJlc3RRdWF0IClcbiAgICAgICAgICogICAubXVsdGlwbHkoIHF1YXRTcmNEZWx0YUluUGFyZW50IClcbiAgICAgICAgICogICAubXVsdGlwbHkoIHRoaXMuX2RzdFJlc3RRdWF0ICk7XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgcXVhdERlbHRhID0gX3F1YXRBXG4gICAgICAgICAgICAuY29weSh0aGlzLl9pbnZEc3RSZXN0UXVhdClcbiAgICAgICAgICAgIC5tdWx0aXBseSh0aGlzLnNvdXJjZS5xdWF0ZXJuaW9uKVxuICAgICAgICAgICAgLm11bHRpcGx5KHRoaXMuX2ludlNyY1Jlc3RRdWF0TXVsRHN0UmVzdFF1YXQpO1xuICAgICAgICAvLyBjcmVhdGUgYSBmcm9tLXRvIHF1YXRlcm5pb25cbiAgICAgICAgY29uc3QgbjEgPSBfdjNBLmNvcHkodGhpcy5fdjNSb2xsQXhpcykuYXBwbHlRdWF0ZXJuaW9uKHF1YXREZWx0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGF0IHRoZSBxdWF0RnJvbVRvIGlzIGludGVuZGVkIHRvIGJlOlxuICAgICAgICAgKlxuICAgICAgICAgKiBgYGB0c1xuICAgICAgICAgKiBjb25zdCBxdWF0RnJvbVRvID0gX3F1YXRCLnNldEZyb21Vbml0VmVjdG9ycyggdGhpcy5fdjNSb2xsQXhpcywgbjEgKS5pbnZlcnNlKCk7XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgcXVhdEZyb21UbyA9IF9xdWF0Qi5zZXRGcm9tVW5pdFZlY3RvcnMobjEsIHRoaXMuX3YzUm9sbEF4aXMpO1xuICAgICAgICAvLyBxdWF0RnJvbVRvICogcXVhdERlbHRhID09IHJvbGwgZXh0cmFjdGVkIGZyb20gcXVhdERlbHRhXG4gICAgICAgIGNvbnN0IHRhcmdldFF1YXQgPSBxdWF0RnJvbVRvLnByZW11bHRpcGx5KHRoaXMuX2RzdFJlc3RRdWF0KS5tdWx0aXBseShxdWF0RGVsdGEpO1xuICAgICAgICAvLyBibGVuZCB3aXRoIHRoZSByZXN0IHF1YXRlcm5pb24gdXNpbmcgd2VpZ2h0XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ucXVhdGVybmlvbi5jb3B5KHRoaXMuX2RzdFJlc3RRdWF0KS5zbGVycCh0YXJnZXRRdWF0LCB0aGlzLndlaWdodCk7XG4gICAgfVxufVxuXG4vKipcbiAqIFBvc3NpYmxlIHNwZWMgdmVyc2lvbnMgaXQgcmVjb2duaXplcy5cbiAqL1xuY29uc3QgUE9TU0lCTEVfU1BFQ19WRVJTSU9OUyA9IG5ldyBTZXQoWycxLjAnLCAnMS4wLWJldGEnXSk7XG5jbGFzcyBWUk1Ob2RlQ29uc3RyYWludExvYWRlclBsdWdpbiB7XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBWUk1Ob2RlQ29uc3RyYWludExvYWRlclBsdWdpbi5FWFRFTlNJT05fTkFNRTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgICAgICB0aGlzLmhlbHBlclJvb3QgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVscGVyUm9vdDtcbiAgICB9XG4gICAgYWZ0ZXJSb290KGdsdGYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGdsdGYudXNlckRhdGEudnJtTm9kZUNvbnN0cmFpbnRNYW5hZ2VyID0geWllbGQgdGhpcy5faW1wb3J0KGdsdGYpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW1wb3J0IGNvbnN0cmFpbnRzIGZyb20gYSBHTFRGIGFuZCByZXR1cm5zIGEge0BsaW5rIFZSTU5vZGVDb25zdHJhaW50TWFuYWdlcn0uXG4gICAgICogSXQgbWlnaHQgcmV0dXJuIGBudWxsYCBpbnN0ZWFkIHdoZW4gaXQgZG9lcyBub3QgbmVlZCB0byBiZSBjcmVhdGVkIG9yIHNvbWV0aGluZyBnbyB3cm9uZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBnbHRmIEEgcGFyc2VkIHJlc3VsdCBvZiBHTFRGIHRha2VuIGZyb20gR0xURkxvYWRlclxuICAgICAqL1xuICAgIF9pbXBvcnQoZ2x0Zikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBqc29uID0gdGhpcy5wYXJzZXIuanNvbjtcbiAgICAgICAgICAgIC8vIGVhcmx5IGFib3J0IGlmIGl0IGRvZXNuJ3QgdXNlIGNvbnN0cmFpbnRzXG4gICAgICAgICAgICBjb25zdCBpc0NvbnN0cmFpbnRzVXNlZCA9ICgoX2EgPSBqc29uLmV4dGVuc2lvbnNVc2VkKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5kZXhPZihWUk1Ob2RlQ29uc3RyYWludExvYWRlclBsdWdpbi5FWFRFTlNJT05fTkFNRSkpICE9PSAtMTtcbiAgICAgICAgICAgIGlmICghaXNDb25zdHJhaW50c1VzZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1hbmFnZXIgPSBuZXcgVlJNTm9kZUNvbnN0cmFpbnRNYW5hZ2VyKCk7XG4gICAgICAgICAgICBjb25zdCB0aHJlZU5vZGVzID0geWllbGQgdGhpcy5wYXJzZXIuZ2V0RGVwZW5kZW5jaWVzKCdub2RlJyk7XG4gICAgICAgICAgICAvLyBpbXBvcnQgY29uc3RyYWludHMgZm9yIGVhY2ggbm9kZXNcbiAgICAgICAgICAgIHRocmVlTm9kZXMuZm9yRWFjaCgobm9kZSwgbm9kZUluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjaGVtYU5vZGUgPSBqc29uLm5vZGVzW25vZGVJbmRleF07XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGV4dGVuc2lvbiB1c2VzIHRoZSBleHRlbnNpb25cbiAgICAgICAgICAgICAgICBjb25zdCBleHRlbnNpb24gPSAoX2EgPSBzY2hlbWFOb2RlID09PSBudWxsIHx8IHNjaGVtYU5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjaGVtYU5vZGUuZXh0ZW5zaW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW1ZSTU5vZGVDb25zdHJhaW50TG9hZGVyUGx1Z2luLkVYVEVOU0lPTl9OQU1FXTtcbiAgICAgICAgICAgICAgICBpZiAoZXh0ZW5zaW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBzcGVjVmVyc2lvbiA9IGV4dGVuc2lvbi5zcGVjVmVyc2lvbjtcbiAgICAgICAgICAgICAgICBpZiAoIVBPU1NJQkxFX1NQRUNfVkVSU0lPTlMuaGFzKHNwZWNWZXJzaW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFZSTU5vZGVDb25zdHJhaW50TG9hZGVyUGx1Z2luOiBVbmtub3duICR7VlJNTm9kZUNvbnN0cmFpbnRMb2FkZXJQbHVnaW4uRVhURU5TSU9OX05BTUV9IHNwZWNWZXJzaW9uIFwiJHtzcGVjVmVyc2lvbn1cImApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnN0cmFpbnREZWYgPSBleHRlbnNpb24uY29uc3RyYWludDtcbiAgICAgICAgICAgICAgICAvLyBpbXBvcnQgY29uc3RyYWludHNcbiAgICAgICAgICAgICAgICBpZiAoY29uc3RyYWludERlZi5yb2xsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29uc3RyYWludCA9IHRoaXMuX2ltcG9ydFJvbGxDb25zdHJhaW50KG5vZGUsIHRocmVlTm9kZXMsIGNvbnN0cmFpbnREZWYucm9sbCk7XG4gICAgICAgICAgICAgICAgICAgIG1hbmFnZXIuYWRkQ29uc3RyYWludChjb25zdHJhaW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29uc3RyYWludERlZi5haW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25zdHJhaW50ID0gdGhpcy5faW1wb3J0QWltQ29uc3RyYWludChub2RlLCB0aHJlZU5vZGVzLCBjb25zdHJhaW50RGVmLmFpbSk7XG4gICAgICAgICAgICAgICAgICAgIG1hbmFnZXIuYWRkQ29uc3RyYWludChjb25zdHJhaW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29uc3RyYWludERlZi5yb3RhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnN0cmFpbnQgPSB0aGlzLl9pbXBvcnRSb3RhdGlvbkNvbnN0cmFpbnQobm9kZSwgdGhyZWVOb2RlcywgY29uc3RyYWludERlZi5yb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIG1hbmFnZXIuYWRkQ29uc3RyYWludChjb25zdHJhaW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGluaXQgY29uc3RyYWludHNcbiAgICAgICAgICAgIGdsdGYuc2NlbmUudXBkYXRlTWF0cml4V29ybGQoKTtcbiAgICAgICAgICAgIG1hbmFnZXIuc2V0SW5pdFN0YXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gbWFuYWdlcjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9pbXBvcnRSb2xsQ29uc3RyYWludChkZXN0aW5hdGlvbiwgbm9kZXMsIHJvbGxDb25zdHJhaW50RGVmKSB7XG4gICAgICAgIGNvbnN0IHsgc291cmNlOiBzb3VyY2VJbmRleCwgcm9sbEF4aXMsIHdlaWdodCB9ID0gcm9sbENvbnN0cmFpbnREZWY7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IG5vZGVzW3NvdXJjZUluZGV4XTtcbiAgICAgICAgY29uc3QgY29uc3RyYWludCA9IG5ldyBWUk1Sb2xsQ29uc3RyYWludChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICAgICAgaWYgKHJvbGxBeGlzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbnQucm9sbEF4aXMgPSByb2xsQXhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAod2VpZ2h0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbnQud2VpZ2h0ID0gd2VpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhlbHBlclJvb3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGhlbHBlciA9IG5ldyBWUk1Ob2RlQ29uc3RyYWludEhlbHBlcihjb25zdHJhaW50KTtcbiAgICAgICAgICAgIHRoaXMuaGVscGVyUm9vdC5hZGQoaGVscGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uc3RyYWludDtcbiAgICB9XG4gICAgX2ltcG9ydEFpbUNvbnN0cmFpbnQoZGVzdGluYXRpb24sIG5vZGVzLCBhaW1Db25zdHJhaW50RGVmKSB7XG4gICAgICAgIGNvbnN0IHsgc291cmNlOiBzb3VyY2VJbmRleCwgYWltQXhpcywgd2VpZ2h0IH0gPSBhaW1Db25zdHJhaW50RGVmO1xuICAgICAgICBjb25zdCBzb3VyY2UgPSBub2Rlc1tzb3VyY2VJbmRleF07XG4gICAgICAgIGNvbnN0IGNvbnN0cmFpbnQgPSBuZXcgVlJNQWltQ29uc3RyYWludChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICAgICAgaWYgKGFpbUF4aXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3RyYWludC5haW1BeGlzID0gYWltQXhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAod2VpZ2h0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbnQud2VpZ2h0ID0gd2VpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhlbHBlclJvb3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGhlbHBlciA9IG5ldyBWUk1Ob2RlQ29uc3RyYWludEhlbHBlcihjb25zdHJhaW50KTtcbiAgICAgICAgICAgIHRoaXMuaGVscGVyUm9vdC5hZGQoaGVscGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uc3RyYWludDtcbiAgICB9XG4gICAgX2ltcG9ydFJvdGF0aW9uQ29uc3RyYWludChkZXN0aW5hdGlvbiwgbm9kZXMsIHJvdGF0aW9uQ29uc3RyYWludERlZikge1xuICAgICAgICBjb25zdCB7IHNvdXJjZTogc291cmNlSW5kZXgsIHdlaWdodCB9ID0gcm90YXRpb25Db25zdHJhaW50RGVmO1xuICAgICAgICBjb25zdCBzb3VyY2UgPSBub2Rlc1tzb3VyY2VJbmRleF07XG4gICAgICAgIGNvbnN0IGNvbnN0cmFpbnQgPSBuZXcgVlJNUm90YXRpb25Db25zdHJhaW50KGRlc3RpbmF0aW9uLCBzb3VyY2UpO1xuICAgICAgICBpZiAod2VpZ2h0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbnQud2VpZ2h0ID0gd2VpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhlbHBlclJvb3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGhlbHBlciA9IG5ldyBWUk1Ob2RlQ29uc3RyYWludEhlbHBlcihjb25zdHJhaW50KTtcbiAgICAgICAgICAgIHRoaXMuaGVscGVyUm9vdC5hZGQoaGVscGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uc3RyYWludDtcbiAgICB9XG59XG5WUk1Ob2RlQ29uc3RyYWludExvYWRlclBsdWdpbi5FWFRFTlNJT05fTkFNRSA9ICdWUk1DX25vZGVfY29uc3RyYWludCc7XG5cbmV4cG9ydCB7IFZSTUFpbUNvbnN0cmFpbnQsIFZSTU5vZGVDb25zdHJhaW50LCBWUk1Ob2RlQ29uc3RyYWludEhlbHBlciwgVlJNTm9kZUNvbnN0cmFpbnRMb2FkZXJQbHVnaW4sIFZSTU5vZGVDb25zdHJhaW50TWFuYWdlciwgVlJNUm9sbENvbnN0cmFpbnQsIFZSTVJvdGF0aW9uQ29uc3RyYWludCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkR2h5WldVdGRuSnRMVzV2WkdVdFkyOXVjM1J5WVdsdWRDNXRiMlIxYkdVdWFuTWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlvWld4d1pYSnpMMVpTVFU1dlpHVkRiMjV6ZEhKaGFXNTBTR1ZzY0dWeUxuUnpJaXdpTGk0dmMzSmpMM1YwYVd4ekwyUmxZMjl0Y0c5elpWQnZjMmwwYVc5dUxuUnpJaXdpTGk0dmMzSmpMM1YwYVd4ekwyUmxZMjl0Y0c5elpWSnZkR0YwYVc5dUxuUnpJaXdpTGk0dmMzSmpMM1YwYVd4ekwzRjFZWFJKYm5abGNuUkRiMjF3WVhRdWRITWlMQ0l1TGk5emNtTXZWbEpOVG05a1pVTnZibk4wY21GcGJuUXVkSE1pTENJdUxpOXpjbU12VmxKTlFXbHRRMjl1YzNSeVlXbHVkQzUwY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTkwYzJ4cFlpOTBjMnhwWWk1bGN6WXVhbk1pTENJdUxpOXpjbU12ZFhScGJITXZkSEpoZG1WeWMyVkJibU5sYzNSdmNuTkdjbTl0VW05dmRDNTBjeUlzSWk0dUwzTnlZeTlXVWsxT2IyUmxRMjl1YzNSeVlXbHVkRTFoYm1GblpYSXVkSE1pTENJdUxpOXpjbU12VmxKTlVtOTBZWFJwYjI1RGIyNXpkSEpoYVc1MExuUnpJaXdpTGk0dmMzSmpMMVpTVFZKdmJHeERiMjV6ZEhKaGFXNTBMblJ6SWl3aUxpNHZjM0pqTDFaU1RVNXZaR1ZEYjI1emRISmhhVzUwVEc5aFpHVnlVR3gxWjJsdUxuUnpJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0FxSUdGeklGUklVa1ZGSUdaeWIyMGdKM1JvY21WbEp6dGNibWx0Y0c5eWRDQjdJRlpTVFU1dlpHVkRiMjV6ZEhKaGFXNTBJSDBnWm5KdmJTQW5MaTR2VmxKTlRtOWtaVU52Ym5OMGNtRnBiblFuTzF4dVhHNWpiMjV6ZENCZmRqTkJJRDBnYm1WM0lGUklVa1ZGTGxabFkzUnZjak1vS1R0Y2JseHVaWGh3YjNKMElHTnNZWE56SUZaU1RVNXZaR1ZEYjI1emRISmhhVzUwU0dWc2NHVnlJR1Y0ZEdWdVpITWdWRWhTUlVVdVIzSnZkWEFnZTF4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ1kyOXVjM1J5WVdsdWREb2dWbEpOVG05a1pVTnZibk4wY21GcGJuUTdYRzRnSUhCeWFYWmhkR1VnWDJ4cGJtVTZJRlJJVWtWRkxreHBibVU3WEc0Z0lIQnlhWFpoZEdVZ1gyRjBkSEpRYjNOcGRHbHZiam9nVkVoU1JVVXVRblZtWm1WeVFYUjBjbWxpZFhSbE8xeHVYRzRnSUhCMVlteHBZeUJqYjI1emRISjFZM1J2Y2loamIyNXpkSEpoYVc1ME9pQldVazFPYjJSbFEyOXVjM1J5WVdsdWRDa2dlMXh1SUNBZ0lITjFjR1Z5S0NrN1hHNWNiaUFnSUNCMGFHbHpMbDloZEhSeVVHOXphWFJwYjI0Z1BTQnVaWGNnVkVoU1JVVXVRblZtWm1WeVFYUjBjbWxpZFhSbEtHNWxkeUJHYkc5aGRETXlRWEp5WVhrb1d6QXNJREFzSURBc0lEQXNJREFzSURCZEtTd2dNeWs3WEc0Z0lDQWdkR2hwY3k1ZllYUjBjbEJ2YzJsMGFXOXVMbk5sZEZWellXZGxLRlJJVWtWRkxrUjVibUZ0YVdORWNtRjNWWE5oWjJVcE8xeHVYRzRnSUNBZ1kyOXVjM1FnWjJWdmJXVjBjbmtnUFNCdVpYY2dWRWhTUlVVdVFuVm1abVZ5UjJWdmJXVjBjbmtvS1R0Y2JpQWdJQ0JuWlc5dFpYUnllUzV6WlhSQmRIUnlhV0oxZEdVb0ozQnZjMmwwYVc5dUp5d2dkR2hwY3k1ZllYUjBjbEJ2YzJsMGFXOXVLVHRjYmx4dUlDQWdJR052Ym5OMElHMWhkR1Z5YVdGc0lEMGdibVYzSUZSSVVrVkZMa3hwYm1WQ1lYTnBZMDFoZEdWeWFXRnNLSHRjYmlBZ0lDQWdJR052Ykc5eU9pQXdlR1ptTURCbVppeGNiaUFnSUNBZ0lHUmxjSFJvVkdWemREb2dabUZzYzJVc1hHNGdJQ0FnSUNCa1pYQjBhRmR5YVhSbE9pQm1ZV3h6WlN4Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUhSb2FYTXVYMnhwYm1VZ1BTQnVaWGNnVkVoU1JVVXVUR2x1WlNoblpXOXRaWFJ5ZVN3Z2JXRjBaWEpwWVd3cE8xeHVJQ0FnSUhSb2FYTXVZV1JrS0hSb2FYTXVYMnhwYm1VcE8xeHVYRzRnSUNBZ2RHaHBjeTVqYjI1emRISmhhVzUwSUQwZ1kyOXVjM1J5WVdsdWREdGNiaUFnZlZ4dVhHNGdJSEIxWW14cFl5QjFjR1JoZEdWTllYUnlhWGhYYjNKc1pDaG1iM0pqWlQ4NklHSnZiMnhsWVc0cE9pQjJiMmxrSUh0Y2JpQWdJQ0JmZGpOQkxuTmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWgwYUdsekxtTnZibk4wY21GcGJuUXVaR1Z6ZEdsdVlYUnBiMjR1YldGMGNtbDRWMjl5YkdRcE8xeHVJQ0FnSUhSb2FYTXVYMkYwZEhKUWIzTnBkR2x2Ymk1elpYUllXVm9vTUN3Z1gzWXpRUzU0TENCZmRqTkJMbmtzSUY5Mk0wRXVlaWs3WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVqYjI1emRISmhhVzUwTG5OdmRYSmpaU2tnZTF4dUlDQWdJQ0FnWDNZelFTNXpaWFJHY205dFRXRjBjbWw0VUc5emFYUnBiMjRvZEdocGN5NWpiMjV6ZEhKaGFXNTBMbk52ZFhKalpTNXRZWFJ5YVhoWGIzSnNaQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11WDJGMGRISlFiM05wZEdsdmJpNXpaWFJZV1Zvb01Td2dYM1l6UVM1NExDQmZkak5CTG5rc0lGOTJNMEV1ZWlrN1hHNWNiaUFnSUNCMGFHbHpMbDloZEhSeVVHOXphWFJwYjI0dWJtVmxaSE5WY0dSaGRHVWdQU0IwY25WbE8xeHVYRzRnSUNBZ2MzVndaWEl1ZFhCa1lYUmxUV0YwY21sNFYyOXliR1FvWm05eVkyVXBPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnS2lCaGN5QlVTRkpGUlNCbWNtOXRJQ2QwYUhKbFpTYzdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJrWldOdmJYQnZjMlZRYjNOcGRHbHZianhVSUdWNGRHVnVaSE1nVkVoU1JVVXVWbVZqZEc5eU16NG9iV0YwY21sNE9pQlVTRkpGUlM1TllYUnlhWGcwTENCMFlYSm5aWFE2SUZRcE9pQlVJSHRjYmlBZ2NtVjBkWEp1SUhSaGNtZGxkQzV6WlhRb2JXRjBjbWw0TG1Wc1pXMWxiblJ6V3pFeVhTd2diV0YwY21sNExtVnNaVzFsYm5Seld6RXpYU3dnYldGMGNtbDRMbVZzWlcxbGJuUnpXekUwWFNrN1hHNTlYRzRpTENKcGJYQnZjblFnS2lCaGN5QlVTRkpGUlNCbWNtOXRJQ2QwYUhKbFpTYzdYRzVjYm1OdmJuTjBJRjkyTTBFZ1BTQnVaWGNnVkVoU1JVVXVWbVZqZEc5eU15Z3BPMXh1WTI5dWMzUWdYM1l6UWlBOUlHNWxkeUJVU0ZKRlJTNVdaV04wYjNJektDazdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJrWldOdmJYQnZjMlZTYjNSaGRHbHZianhVSUdWNGRHVnVaSE1nVkVoU1JVVXVVWFZoZEdWeWJtbHZiajRvYldGMGNtbDRPaUJVU0ZKRlJTNU5ZWFJ5YVhnMExDQjBZWEpuWlhRNklGUXBPaUJVSUh0Y2JpQWdiV0YwY21sNExtUmxZMjl0Y0c5elpTaGZkak5CTENCMFlYSm5aWFFzSUY5Mk0wSXBPMXh1SUNCeVpYUjFjbTRnZEdGeVoyVjBPMXh1ZlZ4dUlpd2lhVzF3YjNKMElDb2dZWE1nVkVoU1JVVWdabkp2YlNBbmRHaHlaV1VuTzF4dVhHNHZLaXBjYmlBcUlFRWdZMjl0Y0dGMElHWjFibU4wYVc5dUlHWnZjaUJnVVhWaGRHVnlibWx2Ymk1cGJuWmxjblFvS1dBZ0x5QmdVWFZoZEdWeWJtbHZiaTVwYm5abGNuTmxLQ2xnTGx4dUlDb2dZRkYxWVhSbGNtNXBiMjR1YVc1MlpYSjBLQ2xnSUdseklHbHVkSEp2WkhWalpXUWdhVzRnY2pFeU15QmhibVFnWUZGMVlYUmxjbTVwYjI0dWFXNTJaWEp6WlNncFlDQmxiV2wwY3lCaElIZGhjbTVwYm1jdVhHNGdLaUJYWlNCaGNtVWdaMjlwYm1jZ2RHOGdkWE5sSUhSb2FYTWdZMjl0Y0dGMElHWnZjaUJoSUhkb2FXeGxMbHh1SUNvZ1FIQmhjbUZ0SUhSaGNtZGxkQ0JCSUhSaGNtZGxkQ0J4ZFdGMFpYSnVhVzl1WEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnhkV0YwU1c1MlpYSjBRMjl0Y0dGMFBGUWdaWGgwWlc1a2N5QlVTRkpGUlM1UmRXRjBaWEp1YVc5dVBpaDBZWEpuWlhRNklGUXBPaUJVSUh0Y2JpQWdhV1lnS0NoMFlYSm5aWFFnWVhNZ1lXNTVLUzVwYm5abGNuUXBJSHRjYmlBZ0lDQjBZWEpuWlhRdWFXNTJaWEowS0NrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ0tIUmhjbWRsZENCaGN5QmhibmtwTG1sdWRtVnljMlVvS1R0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCMFlYSm5aWFE3WEc1OVhHNGlMQ0pwYlhCdmNuUWdLaUJoY3lCVVNGSkZSU0JtY205dElDZDBhSEpsWlNjN1hHNWNiaThxS2x4dUlDb2dRU0JpWVhObElHTnNZWE56SUc5bUlGWlNUU0JqYjI1emRISmhhVzUwSUdOc1lYTnpaWE11WEc0Z0tpOWNibVY0Y0c5eWRDQmhZbk4wY21GamRDQmpiR0Z6Y3lCV1VrMU9iMlJsUTI5dWMzUnlZV2x1ZENCN1hHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ2IySnFaV04wSUdKbGFXNW5JR052Ym5OMGNtRnBibVZrSUdKNUlIUm9aU0I3UUd4cGJtc2djMjkxY21ObGZTNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QmtaWE4wYVc1aGRHbHZiam9nVkVoU1JVVXVUMkpxWldOME0wUTdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGUm9aU0J2WW1wbFkzUWdZMjl1YzNSeVlXbHVjeUIwYUdVZ2UwQnNhVzVySUdSbGMzUnBibUYwYVc5dWZTNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QnpiM1Z5WTJVNklGUklVa1ZGTGs5aWFtVmpkRE5FTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ2QyVnBaMmgwSUc5bUlIUm9aU0JqYjI1emRISmhhVzUwTGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUhkbGFXZG9kRG9nYm5WdFltVnlPMXh1WEc0Z0lIQjFZbXhwWXlCaFluTjBjbUZqZENCblpYUWdaR1Z3Wlc1a1pXNWphV1Z6S0NrNklGTmxkRHhVU0ZKRlJTNVBZbXBsWTNRelJENDdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFQndZWEpoYlNCa1pYTjBhVzVoZEdsdmJpQlVhR1VnWkdWemRHbHVZWFJwYjI0Z2IySnFaV04wWEc0Z0lDQXFJRUJ3WVhKaGJTQnpiM1Z5WTJVZ1ZHaGxJSE52ZFhKalpTQnZZbXBsWTNSY2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCamIyNXpkSEoxWTNSdmNpaGtaWE4wYVc1aGRHbHZiam9nVkVoU1JVVXVUMkpxWldOME0wUXNJSE52ZFhKalpUb2dWRWhTUlVVdVQySnFaV04wTTBRcElIdGNiaUFnSUNCMGFHbHpMbVJsYzNScGJtRjBhVzl1SUQwZ1pHVnpkR2x1WVhScGIyNDdYRzRnSUNBZ2RHaHBjeTV6YjNWeVkyVWdQU0J6YjNWeVkyVTdYRzVjYmlBZ0lDQjBhR2x6TG5kbGFXZG9kQ0E5SURFdU1EdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWlhRZ2FXNXBkR2xoYkNCemRHRjBaU0J2WmlCMGFHVWdZMjl1YzNSeVlXbHVkQzVjYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUJoWW5OMGNtRmpkQ0J6WlhSSmJtbDBVM1JoZEdVb0tUb2dkbTlwWkR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhCa1lYUmxJR0Z1WkNCaGNIQnNlU0IwYUdVZ1kyOXVjM1J5WVdsdWRDNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5QmhZbk4wY21GamRDQjFjR1JoZEdVb0tUb2dkbTlwWkR0Y2JuMWNiaUlzSW1sdGNHOXlkQ0FxSUdGeklGUklVa1ZGSUdaeWIyMGdKM1JvY21WbEp6dGNibWx0Y0c5eWRDQjdJR1JsWTI5dGNHOXpaVkJ2YzJsMGFXOXVJSDBnWm5KdmJTQW5MaTkxZEdsc2N5OWtaV052YlhCdmMyVlFiM05wZEdsdmJpYzdYRzVwYlhCdmNuUWdleUJrWldOdmJYQnZjMlZTYjNSaGRHbHZiaUI5SUdaeWIyMGdKeTR2ZFhScGJITXZaR1ZqYjIxd2IzTmxVbTkwWVhScGIyNG5PMXh1YVcxd2IzSjBJSHNnY1hWaGRFbHVkbVZ5ZEVOdmJYQmhkQ0I5SUdaeWIyMGdKeTR2ZFhScGJITXZjWFZoZEVsdWRtVnlkRU52YlhCaGRDYzdYRzVwYlhCdmNuUWdleUJXVWsxT2IyUmxRMjl1YzNSeVlXbHVkQ0I5SUdaeWIyMGdKeTR2VmxKTlRtOWtaVU52Ym5OMGNtRnBiblFuTzF4dVhHNWpiMjV6ZENCZmRqTkJJRDBnYm1WM0lGUklVa1ZGTGxabFkzUnZjak1vS1R0Y2JtTnZibk4wSUY5Mk0wSWdQU0J1WlhjZ1ZFaFNSVVV1Vm1WamRHOXlNeWdwTzF4dVkyOXVjM1FnWDNZelF5QTlJRzVsZHlCVVNGSkZSUzVXWldOMGIzSXpLQ2s3WEc1amIyNXpkQ0JmY1hWaGRFRWdQU0J1WlhjZ1ZFaFNSVVV1VVhWaGRHVnlibWx2YmlncE8xeHVZMjl1YzNRZ1gzRjFZWFJDSUQwZ2JtVjNJRlJJVWtWRkxsRjFZWFJsY201cGIyNG9LVHRjYm1OdmJuTjBJRjl4ZFdGMFF5QTlJRzVsZHlCVVNGSkZSUzVSZFdGMFpYSnVhVzl1S0NrN1hHNWNiaThxS2x4dUlDb2dRU0JqYjI1emRISmhhVzUwSUhSb1lYUWdiV0ZyWlhNZ2FYUWdiRzl2YXlCaGRDQmhJSE52ZFhKalpTQnZZbXBsWTNRdVhHNGdLbHh1SUNvZ1UyVmxPaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZG5KdExXTXZkbkp0TFhOd1pXTnBabWxqWVhScGIyNHZkSEpsWlM5dFlYTjBaWEl2YzNCbFkybG1hV05oZEdsdmJpOVdVazFEWDI1dlpHVmZZMjl1YzNSeVlXbHVkQzB4TGpCZlltVjBZU055YjJ4c0xXTnZibk4wY21GcGJuUmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRlpTVFVGcGJVTnZibk4wY21GcGJuUWdaWGgwWlc1a2N5QldVazFPYjJSbFEyOXVjM1J5WVdsdWRDQjdYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVWdZV2x0SUdGNGFYTWdiMllnZEdobElHTnZibk4wY21GcGJuUXVYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdaMlYwSUdGcGJVRjRhWE1vS1RvZ0oxQnZjMmwwYVhabFdDY2dmQ0FuVG1WbllYUnBkbVZZSnlCOElDZFFiM05wZEdsMlpWa25JSHdnSjA1bFoyRjBhWFpsV1NjZ2ZDQW5VRzl6YVhScGRtVmFKeUI4SUNkT1pXZGhkR2wyWlZvbklIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZZV2x0UVhocGN6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ1lXbHRJR0Y0YVhNZ2IyWWdkR2hsSUdOdmJuTjBjbUZwYm5RdVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ2MyVjBJR0ZwYlVGNGFYTW9ZV2x0UVhocGN6b2dKMUJ2YzJsMGFYWmxXQ2NnZkNBblRtVm5ZWFJwZG1WWUp5QjhJQ2RRYjNOcGRHbDJaVmtuSUh3Z0owNWxaMkYwYVhabFdTY2dmQ0FuVUc5emFYUnBkbVZhSnlCOElDZE9aV2RoZEdsMlpWb25LU0I3WEc0Z0lDQWdkR2hwY3k1ZllXbHRRWGhwY3lBOUlHRnBiVUY0YVhNN1hHNGdJQ0FnZEdocGN5NWZkak5CYVcxQmVHbHpMbk5sZENoY2JpQWdJQ0FnSUdGcGJVRjRhWE1nUFQwOUlDZFFiM05wZEdsMlpWZ25JRDhnTVM0d0lEb2dZV2x0UVhocGN5QTlQVDBnSjA1bFoyRjBhWFpsV0NjZ1B5QXRNUzR3SURvZ01DNHdMRnh1SUNBZ0lDQWdZV2x0UVhocGN5QTlQVDBnSjFCdmMybDBhWFpsV1NjZ1B5QXhMakFnT2lCaGFXMUJlR2x6SUQwOVBTQW5UbVZuWVhScGRtVlpKeUEvSUMweExqQWdPaUF3TGpBc1hHNGdJQ0FnSUNCaGFXMUJlR2x6SUQwOVBTQW5VRzl6YVhScGRtVmFKeUEvSURFdU1DQTZJR0ZwYlVGNGFYTWdQVDA5SUNkT1pXZGhkR2wyWlZvbklEOGdMVEV1TUNBNklEQXVNQ3hjYmlBZ0lDQXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pTQmhhVzBnWVhocGN5QnZaaUIwYUdVZ1kyOXVjM1J5WVdsdWRDNWNiaUFnSUNvdlhHNGdJSEJ5YVhaaGRHVWdYMkZwYlVGNGFYTTZJQ2RRYjNOcGRHbDJaVmduSUh3Z0owNWxaMkYwYVhabFdDY2dmQ0FuVUc5emFYUnBkbVZaSnlCOElDZE9aV2RoZEdsMlpWa25JSHdnSjFCdmMybDBhWFpsV2ljZ2ZDQW5UbVZuWVhScGRtVmFKenRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUh0QWJHbHVheUJmWVdsdFFYaHBjMzBnWW5WMElHbHVJR0Z1SUdGamRIVmhiQ0JXWldOMGIzSXpJR1p2Y20wdVhHNGdJQ0FxTDF4dUlDQndjbWwyWVhSbElGOTJNMEZwYlVGNGFYTTZJRlJJVWtWRkxsWmxZM1J2Y2pNN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pTQnlaWE4wSUhGMVlYUmxjbTVwYjI0Z2IyWWdkR2hsSUh0QWJHbHVheUJrWlhOMGFXNWhkR2x2Ym4wdVhHNGdJQ0FxTDF4dUlDQndjbWwyWVhSbElGOWtjM1JTWlhOMFVYVmhkRG9nVkVoU1JVVXVVWFZoZEdWeWJtbHZianRjYmx4dUlDQndkV0pzYVdNZ1oyVjBJR1JsY0dWdVpHVnVZMmxsY3lncE9pQlRaWFE4VkVoU1JVVXVUMkpxWldOME0wUThWRWhTUlVVdVJYWmxiblErUGlCN1hHNGdJQ0FnWTI5dWMzUWdjMlYwSUQwZ2JtVjNJRk5sZER4VVNGSkZSUzVQWW1wbFkzUXpSRDRvVzNSb2FYTXVjMjkxY21ObFhTazdYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NWtaWE4wYVc1aGRHbHZiaTV3WVhKbGJuUXBJSHRjYmlBZ0lDQWdJSE5sZEM1aFpHUW9kR2hwY3k1a1pYTjBhVzVoZEdsdmJpNXdZWEpsYm5RcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ6WlhRN1hHNGdJSDFjYmx4dUlDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9aR1Z6ZEdsdVlYUnBiMjQ2SUZSSVVrVkZMazlpYW1WamRETkVMQ0J6YjNWeVkyVTZJRlJJVWtWRkxrOWlhbVZqZERORUtTQjdYRzRnSUNBZ2MzVndaWElvWkdWemRHbHVZWFJwYjI0c0lITnZkWEpqWlNrN1hHNWNiaUFnSUNCMGFHbHpMbDloYVcxQmVHbHpJRDBnSjFCdmMybDBhWFpsV0NjN1hHNGdJQ0FnZEdocGN5NWZkak5CYVcxQmVHbHpJRDBnYm1WM0lGUklVa1ZGTGxabFkzUnZjak1vTVN3Z01Dd2dNQ2s3WEc1Y2JpQWdJQ0IwYUdsekxsOWtjM1JTWlhOMFVYVmhkQ0E5SUc1bGR5QlVTRkpGUlM1UmRXRjBaWEp1YVc5dUtDazdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdjMlYwU1c1cGRGTjBZWFJsS0NrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdVgyUnpkRkpsYzNSUmRXRjBMbU52Y0hrb2RHaHBjeTVrWlhOMGFXNWhkR2x2Ymk1eGRXRjBaWEp1YVc5dUtUdGNiaUFnZlZ4dVhHNGdJSEIxWW14cFl5QjFjR1JoZEdVb0tUb2dkbTlwWkNCN1hHNGdJQ0FnTHk4Z2RYQmtZWFJsSUhkdmNteGtJRzFoZEhKcGVDQnZaaUJrWlhOMGFXNWhkR2x2YmlCaGJtUWdjMjkxY21ObElHMWhiblZoYkd4NVhHNGdJQ0FnZEdocGN5NWtaWE4wYVc1aGRHbHZiaTUxY0dSaGRHVlhiM0pzWkUxaGRISnBlQ2gwY25WbExDQm1ZV3h6WlNrN1hHNGdJQ0FnZEdocGN5NXpiM1Z5WTJVdWRYQmtZWFJsVjI5eWJHUk5ZWFJ5YVhnb2RISjFaU3dnWm1Gc2MyVXBPMXh1WEc0Z0lDQWdMeThnWjJWMElIZHZjbXhrSUhGMVlYUmxjbTVwYjI0Z2IyWWdkR2hsSUhCaGNtVnVkQ0J2WmlCMGFHVWdaR1Z6ZEdsdVlYUnBiMjVjYmlBZ0lDQmpiMjV6ZENCa2MzUlFZWEpsYm5SWGIzSnNaRkYxWVhRZ1BTQmZjWFZoZEVFdWFXUmxiblJwZEhrb0tUdGNiaUFnSUNCamIyNXpkQ0JwYm5aRWMzUlFZWEpsYm5SWGIzSnNaRkYxWVhRZ1BTQmZjWFZoZEVJdWFXUmxiblJwZEhrb0tUdGNiaUFnSUNCcFppQW9kR2hwY3k1a1pYTjBhVzVoZEdsdmJpNXdZWEpsYm5RcElIdGNiaUFnSUNBZ0lHUmxZMjl0Y0c5elpWSnZkR0YwYVc5dUtIUm9hWE11WkdWemRHbHVZWFJwYjI0dWNHRnlaVzUwTG0xaGRISnBlRmR2Y214a0xDQmtjM1JRWVhKbGJuUlhiM0pzWkZGMVlYUXBPMXh1SUNBZ0lDQWdjWFZoZEVsdWRtVnlkRU52YlhCaGRDaHBiblpFYzNSUVlYSmxiblJYYjNKc1pGRjFZWFF1WTI5d2VTaGtjM1JRWVhKbGJuUlhiM0pzWkZGMVlYUXBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJqWVd4amRXeGhkR1VnWm5KdmJTMTBieUIyWldOMGIzSnpJR2x1SUhkdmNteGtJR052YjNKa1hHNGdJQ0FnWTI5dWMzUWdZVEFnUFNCZmRqTkJMbU52Y0hrb2RHaHBjeTVmZGpOQmFXMUJlR2x6S1M1aGNIQnNlVkYxWVhSbGNtNXBiMjRvZEdocGN5NWZaSE4wVW1WemRGRjFZWFFwTG1Gd2NHeDVVWFZoZEdWeWJtbHZiaWhrYzNSUVlYSmxiblJYYjNKc1pGRjFZWFFwTzF4dUlDQWdJR052Ym5OMElHRXhJRDBnWkdWamIyMXdiM05sVUc5emFYUnBiMjRvZEdocGN5NXpiM1Z5WTJVdWJXRjBjbWw0VjI5eWJHUXNJRjkyTTBJcFhHNGdJQ0FnSUNBdWMzVmlLR1JsWTI5dGNHOXpaVkJ2YzJsMGFXOXVLSFJvYVhNdVpHVnpkR2x1WVhScGIyNHViV0YwY21sNFYyOXliR1FzSUY5Mk0wTXBLVnh1SUNBZ0lDQWdMbTV2Y20xaGJHbDZaU2dwTzF4dVhHNGdJQ0FnTHk4Z1kzSmxZWFJsSUdFZ1puSnZiUzEwYnlCeGRXRjBaWEp1YVc5dUxDQmpiMjUyWlhKMElIUnZJR1JsYzNScGJtRjBhVzl1SUd4dlkyRnNJR052YjNKa0xDQjBhR1Z1SUcxMWJIUnBjR3g1SUhKbGMzUWdjWFZoZEdWeWJtbHZibHh1SUNBZ0lHTnZibk4wSUhSaGNtZGxkRkYxWVhRZ1BTQmZjWFZoZEVOY2JpQWdJQ0FnSUM1elpYUkdjbTl0Vlc1cGRGWmxZM1J2Y25Nb1lUQXNJR0V4S1Z4dUlDQWdJQ0FnTG5CeVpXMTFiSFJwY0d4NUtHbHVka1J6ZEZCaGNtVnVkRmR2Y214a1VYVmhkQ2xjYmlBZ0lDQWdJQzV0ZFd4MGFYQnNlU2hrYzNSUVlYSmxiblJYYjNKc1pGRjFZWFFwWEc0Z0lDQWdJQ0F1YlhWc2RHbHdiSGtvZEdocGN5NWZaSE4wVW1WemRGRjFZWFFwTzF4dVhHNGdJQ0FnTHk4Z1lteGxibVFnZDJsMGFDQjBhR1VnY21WemRDQnhkV0YwWlhKdWFXOXVJSFZ6YVc1bklIZGxhV2RvZEZ4dUlDQWdJSFJvYVhNdVpHVnpkR2x1WVhScGIyNHVjWFZoZEdWeWJtbHZiaTVqYjNCNUtIUm9hWE11WDJSemRGSmxjM1JSZFdGMEtTNXpiR1Z5Y0NoMFlYSm5aWFJSZFdGMExDQjBhR2x6TG5kbGFXZG9kQ2s3WEc0Z0lIMWNibjFjYmlJc0lpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2NseHVRMjl3ZVhKcFoyaDBJQ2hqS1NCTmFXTnliM052Wm5RZ1EyOXljRzl5WVhScGIyNHVYSEpjYmx4eVhHNVFaWEp0YVhOemFXOXVJSFJ2SUhWelpTd2dZMjl3ZVN3Z2JXOWthV1o1TENCaGJtUXZiM0lnWkdsemRISnBZblYwWlNCMGFHbHpJSE52Wm5SM1lYSmxJR1p2Y2lCaGJubGNjbHh1Y0hWeWNHOXpaU0IzYVhSb0lHOXlJSGRwZEdodmRYUWdabVZsSUdseklHaGxjbVZpZVNCbmNtRnVkR1ZrTGx4eVhHNWNjbHh1VkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaUJCVGtRZ1ZFaEZJRUZWVkVoUFVpQkVTVk5EVEVGSlRWTWdRVXhNSUZkQlVsSkJUbFJKUlZNZ1YwbFVTRnh5WEc1U1JVZEJVa1FnVkU4Z1ZFaEpVeUJUVDBaVVYwRlNSU0JKVGtOTVZVUkpUa2NnUVV4TUlFbE5VRXhKUlVRZ1YwRlNVa0ZPVkVsRlV5QlBSaUJOUlZKRFNFRk9WRUZDU1V4SlZGbGNjbHh1UVU1RUlFWkpWRTVGVTFNdUlFbE9JRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSU0JCVlZSSVQxSWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dVMUJGUTBsQlRDd2dSRWxTUlVOVUxGeHlYRzVKVGtSSlVrVkRWQ3dnVDFJZ1EwOU9VMFZSVlVWT1ZFbEJUQ0JFUVUxQlIwVlRJRTlTSUVGT1dTQkVRVTFCUjBWVElGZElRVlJUVDBWV1JWSWdVa1ZUVlV4VVNVNUhJRVpTVDAxY2NseHVURTlUVXlCUFJpQlZVMFVzSUVSQlZFRWdUMUlnVUZKUFJrbFVVeXdnVjBoRlZFaEZVaUJKVGlCQlRpQkJRMVJKVDA0Z1QwWWdRMDlPVkZKQlExUXNJRTVGUjB4SlIwVk9RMFVnVDFKY2NseHVUMVJJUlZJZ1ZFOVNWRWxQVlZNZ1FVTlVTVTlPTENCQlVrbFRTVTVISUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRlZUUlNCUFVseHlYRzVRUlZKR1QxSk5RVTVEUlNCUFJpQlVTRWxUSUZOUFJsUlhRVkpGTGx4eVhHNHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lBcUwxeHlYRzR2S2lCbmJHOWlZV3dnVW1WbWJHVmpkQ3dnVUhKdmJXbHpaU0FxTDF4eVhHNWNjbHh1ZG1GeUlHVjRkR1Z1WkZOMFlYUnBZM01nUFNCbWRXNWpkR2x2Ymloa0xDQmlLU0I3WEhKY2JpQWdJQ0JsZUhSbGJtUlRkR0YwYVdOeklEMGdUMkpxWldOMExuTmxkRkJ5YjNSdmRIbHdaVTltSUh4OFhISmNiaUFnSUNBZ0lDQWdLSHNnWDE5d2NtOTBiMTlmT2lCYlhTQjlJR2x1YzNSaGJtTmxiMllnUVhKeVlYa2dKaVlnWm5WdVkzUnBiMjRnS0dRc0lHSXBJSHNnWkM1ZlgzQnliM1J2WDE4Z1BTQmlPeUI5S1NCOGZGeHlYRzRnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJQ2hrTENCaUtTQjdJR1p2Y2lBb2RtRnlJSEFnYVc0Z1lpa2dhV1lnS0U5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNoaUxDQndLU2tnWkZ0d1hTQTlJR0piY0YwN0lIMDdYSEpjYmlBZ0lDQnlaWFIxY200Z1pYaDBaVzVrVTNSaGRHbGpjeWhrTENCaUtUdGNjbHh1ZlR0Y2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJWNGRHVnVaSE1vWkN3Z1lpa2dlMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJpSUNFOVBTQmNJbVoxYm1OMGFXOXVYQ0lnSmlZZ1lpQWhQVDBnYm5Wc2JDbGNjbHh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVEyeGhjM01nWlhoMFpXNWtjeUIyWVd4MVpTQmNJaUFySUZOMGNtbHVaeWhpS1NBcklGd2lJR2x6SUc1dmRDQmhJR052Ym5OMGNuVmpkRzl5SUc5eUlHNTFiR3hjSWlrN1hISmNiaUFnSUNCbGVIUmxibVJUZEdGMGFXTnpLR1FzSUdJcE8xeHlYRzRnSUNBZ1puVnVZM1JwYjI0Z1gxOG9LU0I3SUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lnUFNCa095QjlYSEpjYmlBZ0lDQmtMbkJ5YjNSdmRIbHdaU0E5SUdJZ1BUMDlJRzUxYkd3Z1B5QlBZbXBsWTNRdVkzSmxZWFJsS0dJcElEb2dLRjlmTG5CeWIzUnZkSGx3WlNBOUlHSXVjSEp2ZEc5MGVYQmxMQ0J1WlhjZ1gxOG9LU2s3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCMllYSWdYMTloYzNOcFoyNGdQU0JtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUY5ZllYTnphV2R1SUQwZ1QySnFaV04wTG1GemMybG5iaUI4ZkNCbWRXNWpkR2x2YmlCZlgyRnpjMmxuYmloMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnY3l3Z2FTQTlJREVzSUc0Z1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb095QnBJRHdnYmpzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE1nUFNCaGNtZDFiV1Z1ZEhOYmFWMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlIQWdhVzRnY3lrZ2FXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h6TENCd0tTa2dkRnR3WFNBOUlITmJjRjA3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlGOWZZWE56YVdkdUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgzSmxjM1FvY3l3Z1pTa2dlMXh5WEc0Z0lDQWdkbUZ5SUhRZ1BTQjdmVHRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJSEFnYVc0Z2N5a2dhV1lnS0U5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNoekxDQndLU0FtSmlCbExtbHVaR1Y0VDJZb2NDa2dQQ0F3S1Z4eVhHNGdJQ0FnSUNBZ0lIUmJjRjBnUFNCelczQmRPMXh5WEc0Z0lDQWdhV1lnS0hNZ0lUMGdiblZzYkNBbUppQjBlWEJsYjJZZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N5QTlQVDBnWENKbWRXNWpkR2x2Ymx3aUtWeHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQndJRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVUzbHRZbTlzY3loektUc2dhU0E4SUhBdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dVdWFXNWtaWGhQWmlod1cybGRLU0E4SURBZ0ppWWdUMkpxWldOMExuQnliM1J2ZEhsd1pTNXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaUzVqWVd4c0tITXNJSEJiYVYwcEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRnR3VzJsZFhTQTlJSE5iY0Z0cFhWMDdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJSFE3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyUmxZMjl5WVhSbEtHUmxZMjl5WVhSdmNuTXNJSFJoY21kbGRDd2dhMlY1TENCa1pYTmpLU0I3WEhKY2JpQWdJQ0IyWVhJZ1l5QTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3NJSElnUFNCaklEd2dNeUEvSUhSaGNtZGxkQ0E2SUdSbGMyTWdQVDA5SUc1MWJHd2dQeUJrWlhOaklEMGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2loMFlYSm5aWFFzSUd0bGVTa2dPaUJrWlhOakxDQmtPMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJTWldac1pXTjBJRDA5UFNCY0ltOWlhbVZqZEZ3aUlDWW1JSFI1Y0dWdlppQlNaV1pzWldOMExtUmxZMjl5WVhSbElEMDlQU0JjSW1aMWJtTjBhVzl1WENJcElISWdQU0JTWldac1pXTjBMbVJsWTI5eVlYUmxLR1JsWTI5eVlYUnZjbk1zSUhSaGNtZGxkQ3dnYTJWNUxDQmtaWE5qS1R0Y2NseHVJQ0FnSUdWc2MyVWdabTl5SUNoMllYSWdhU0E5SUdSbFkyOXlZWFJ2Y25NdWJHVnVaM1JvSUMwZ01Uc2dhU0ErUFNBd095QnBMUzBwSUdsbUlDaGtJRDBnWkdWamIzSmhkRzl5YzF0cFhTa2djaUE5SUNoaklEd2dNeUEvSUdRb2Npa2dPaUJqSUQ0Z015QS9JR1FvZEdGeVoyVjBMQ0JyWlhrc0lISXBJRG9nWkNoMFlYSm5aWFFzSUd0bGVTa3BJSHg4SUhJN1hISmNiaUFnSUNCeVpYUjFjbTRnWXlBK0lETWdKaVlnY2lBbUppQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEdGeVoyVjBMQ0JyWlhrc0lISXBMQ0J5TzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXdZWEpoYlNod1lYSmhiVWx1WkdWNExDQmtaV052Y21GMGIzSXBJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9kR0Z5WjJWMExDQnJaWGtwSUhzZ1pHVmpiM0poZEc5eUtIUmhjbWRsZEN3Z2EyVjVMQ0J3WVhKaGJVbHVaR1Y0S1RzZ2ZWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTlsYzBSbFkyOXlZWFJsS0dOMGIzSXNJR1JsYzJOeWFYQjBiM0pKYml3Z1pHVmpiM0poZEc5eWN5d2dZMjl1ZEdWNGRFbHVMQ0JwYm1sMGFXRnNhWHBsY25Nc0lHVjRkSEpoU1c1cGRHbGhiR2w2WlhKektTQjdYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQmhZMk5sY0hRb1ppa2dleUJwWmlBb1ppQWhQVDBnZG05cFpDQXdJQ1ltSUhSNWNHVnZaaUJtSUNFOVBTQmNJbVoxYm1OMGFXOXVYQ0lwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkdkVzVqZEdsdmJpQmxlSEJsWTNSbFpGd2lLVHNnY21WMGRYSnVJR1k3SUgxY2NseHVJQ0FnSUhaaGNpQnJhVzVrSUQwZ1kyOXVkR1Y0ZEVsdUxtdHBibVFzSUd0bGVTQTlJR3RwYm1RZ1BUMDlJRndpWjJWMGRHVnlYQ0lnUHlCY0ltZGxkRndpSURvZ2EybHVaQ0E5UFQwZ1hDSnpaWFIwWlhKY0lpQS9JRndpYzJWMFhDSWdPaUJjSW5aaGJIVmxYQ0k3WEhKY2JpQWdJQ0IyWVhJZ2RHRnlaMlYwSUQwZ0lXUmxjMk55YVhCMGIzSkpiaUFtSmlCamRHOXlJRDhnWTI5dWRHVjRkRWx1VzF3aWMzUmhkR2xqWENKZElEOGdZM1J2Y2lBNklHTjBiM0l1Y0hKdmRHOTBlWEJsSURvZ2JuVnNiRHRjY2x4dUlDQWdJSFpoY2lCa1pYTmpjbWx3ZEc5eUlEMGdaR1Z6WTNKcGNIUnZja2x1SUh4OElDaDBZWEpuWlhRZ1B5QlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0hSaGNtZGxkQ3dnWTI5dWRHVjRkRWx1TG01aGJXVXBJRG9nZTMwcE8xeHlYRzRnSUNBZ2RtRnlJRjhzSUdSdmJtVWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0JrWldOdmNtRjBiM0p6TG14bGJtZDBhQ0F0SURFN0lHa2dQajBnTURzZ2FTMHRLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR052Ym5SbGVIUWdQU0I3ZlR0Y2NseHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQndJR2x1SUdOdmJuUmxlSFJKYmlrZ1kyOXVkR1Y0ZEZ0d1hTQTlJSEFnUFQwOUlGd2lZV05qWlhOelhDSWdQeUI3ZlNBNklHTnZiblJsZUhSSmJsdHdYVHRjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCd0lHbHVJR052Ym5SbGVIUkpiaTVoWTJObGMzTXBJR052Ym5SbGVIUXVZV05qWlhOelczQmRJRDBnWTI5dWRHVjRkRWx1TG1GalkyVnpjMXR3WFR0Y2NseHVJQ0FnSUNBZ0lDQmpiMjUwWlhoMExtRmtaRWx1YVhScFlXeHBlbVZ5SUQwZ1puVnVZM1JwYjI0Z0tHWXBJSHNnYVdZZ0tHUnZibVVwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkRZVzV1YjNRZ1lXUmtJR2x1YVhScFlXeHBlbVZ5Y3lCaFpuUmxjaUJrWldOdmNtRjBhVzl1SUdoaGN5QmpiMjF3YkdWMFpXUmNJaWs3SUdWNGRISmhTVzVwZEdsaGJHbDZaWEp6TG5CMWMyZ29ZV05qWlhCMEtHWWdmSHdnYm5Wc2JDa3BPeUI5TzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0FvTUN3Z1pHVmpiM0poZEc5eWMxdHBYU2tvYTJsdVpDQTlQVDBnWENKaFkyTmxjM052Y2x3aUlEOGdleUJuWlhRNklHUmxjMk55YVhCMGIzSXVaMlYwTENCelpYUTZJR1JsYzJOeWFYQjBiM0l1YzJWMElIMGdPaUJrWlhOamNtbHdkRzl5VzJ0bGVWMHNJR052Ym5SbGVIUXBPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHJhVzVrSUQwOVBTQmNJbUZqWTJWemMyOXlYQ0lwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM1ZzZENBOVBUMGdkbTlwWkNBd0tTQmpiMjUwYVc1MVpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDQTlQVDBnYm5Wc2JDQjhmQ0IwZVhCbGIyWWdjbVZ6ZFd4MElDRTlQU0JjSW05aWFtVmpkRndpS1NCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lUMkpxWldOMElHVjRjR1ZqZEdWa1hDSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWHlBOUlHRmpZMlZ3ZENoeVpYTjFiSFF1WjJWMEtTa2daR1Z6WTNKcGNIUnZjaTVuWlhRZ1BTQmZPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWHlBOUlHRmpZMlZ3ZENoeVpYTjFiSFF1YzJWMEtTa2daR1Z6WTNKcGNIUnZjaTV6WlhRZ1BTQmZPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWHlBOUlHRmpZMlZ3ZENoeVpYTjFiSFF1YVc1cGRDa3BJR2x1YVhScFlXeHBlbVZ5Y3k1d2RYTm9LRjhwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hmSUQwZ1lXTmpaWEIwS0hKbGMzVnNkQ2twSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHdHBibVFnUFQwOUlGd2labWxsYkdSY0lpa2dhVzVwZEdsaGJHbDZaWEp6TG5CMWMyZ29YeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ1pHVnpZM0pwY0hSdmNsdHJaWGxkSUQwZ1h6dGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0JwWmlBb2RHRnlaMlYwS1NCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kR0Z5WjJWMExDQmpiMjUwWlhoMFNXNHVibUZ0WlN3Z1pHVnpZM0pwY0hSdmNpazdYSEpjYmlBZ0lDQmtiMjVsSUQwZ2RISjFaVHRjY2x4dWZUdGNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgzSjFia2x1YVhScFlXeHBlbVZ5Y3loMGFHbHpRWEpuTENCcGJtbDBhV0ZzYVhwbGNuTXNJSFpoYkhWbEtTQjdYSEpjYmlBZ0lDQjJZWElnZFhObFZtRnNkV1VnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01qdGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dhVzVwZEdsaGJHbDZaWEp6TG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0IxYzJWV1lXeDFaU0EvSUdsdWFYUnBZV3hwZW1WeWMxdHBYUzVqWVd4c0tIUm9hWE5CY21jc0lIWmhiSFZsS1NBNklHbHVhWFJwWVd4cGVtVnljMXRwWFM1allXeHNLSFJvYVhOQmNtY3BPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlIVnpaVlpoYkhWbElEOGdkbUZzZFdVZ09pQjJiMmxrSURBN1hISmNibjA3WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTl3Y205d1MyVjVLSGdwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwZVhCbGIyWWdlQ0E5UFQwZ1hDSnplVzFpYjJ4Y0lpQS9JSGdnT2lCY0lsd2lMbU52Ym1OaGRDaDRLVHRjY2x4dWZUdGNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgzTmxkRVoxYm1OMGFXOXVUbUZ0WlNobUxDQnVZVzFsTENCd2NtVm1hWGdwSUh0Y2NseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2JtRnRaU0E5UFQwZ1hDSnplVzFpYjJ4Y0lpa2dibUZ0WlNBOUlHNWhiV1V1WkdWelkzSnBjSFJwYjI0Z1B5QmNJbHRjSWk1amIyNWpZWFFvYm1GdFpTNWtaWE5qY21sd2RHbHZiaXdnWENKZFhDSXBJRG9nWENKY0lqdGNjbHh1SUNBZ0lISmxkSFZ5YmlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aaXdnWENKdVlXMWxYQ0lzSUhzZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExDQjJZV3gxWlRvZ2NISmxabWw0SUQ4Z1hDSmNJaTVqYjI1allYUW9jSEpsWm1sNExDQmNJaUJjSWl3Z2JtRnRaU2tnT2lCdVlXMWxJSDBwTzF4eVhHNTlPMXh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZiV1YwWVdSaGRHRW9iV1YwWVdSaGRHRkxaWGtzSUcxbGRHRmtZWFJoVm1Gc2RXVXBJSHRjY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnVW1WbWJHVmpkQ0E5UFQwZ1hDSnZZbXBsWTNSY0lpQW1KaUIwZVhCbGIyWWdVbVZtYkdWamRDNXRaWFJoWkdGMFlTQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUtTQnlaWFIxY200Z1VtVm1iR1ZqZEM1dFpYUmhaR0YwWVNodFpYUmhaR0YwWVV0bGVTd2diV1YwWVdSaGRHRldZV3gxWlNrN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMkYzWVdsMFpYSW9kR2hwYzBGeVp5d2dYMkZ5WjNWdFpXNTBjeXdnVUN3Z1oyVnVaWEpoZEc5eUtTQjdYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQmhaRzl3ZENoMllXeDFaU2tnZXlCeVpYUjFjbTRnZG1Gc2RXVWdhVzV6ZEdGdVkyVnZaaUJRSUQ4Z2RtRnNkV1VnT2lCdVpYY2dVQ2htZFc1amRHbHZiaUFvY21WemIyeDJaU2tnZXlCeVpYTnZiSFpsS0haaGJIVmxLVHNnZlNrN0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dLRkFnZkh3Z0tGQWdQU0JRY205dGFYTmxLU2tvWm5WdVkzUnBiMjRnS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHWjFiR1pwYkd4bFpDaDJZV3gxWlNrZ2V5QjBjbmtnZXlCemRHVndLR2RsYm1WeVlYUnZjaTV1WlhoMEtIWmhiSFZsS1NrN0lIMGdZMkYwWTJnZ0tHVXBJSHNnY21WcVpXTjBLR1VwT3lCOUlIMWNjbHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ5WldwbFkzUmxaQ2gyWVd4MVpTa2dleUIwY25rZ2V5QnpkR1Z3S0dkbGJtVnlZWFJ2Y2x0Y0luUm9jbTkzWENKZEtIWmhiSFZsS1NrN0lIMGdZMkYwWTJnZ0tHVXBJSHNnY21WcVpXTjBLR1VwT3lCOUlIMWNjbHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ6ZEdWd0tISmxjM1ZzZENrZ2V5QnlaWE4xYkhRdVpHOXVaU0EvSUhKbGMyOXNkbVVvY21WemRXeDBMblpoYkhWbEtTQTZJR0ZrYjNCMEtISmxjM1ZzZEM1MllXeDFaU2t1ZEdobGJpaG1kV3htYVd4c1pXUXNJSEpsYW1WamRHVmtLVHNnZlZ4eVhHNGdJQ0FnSUNBZ0lITjBaWEFvS0dkbGJtVnlZWFJ2Y2lBOUlHZGxibVZ5WVhSdmNpNWhjSEJzZVNoMGFHbHpRWEpuTENCZllYSm5kVzFsYm5SeklIeDhJRnRkS1NrdWJtVjRkQ2dwS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTluWlc1bGNtRjBiM0lvZEdocGMwRnlaeXdnWW05a2VTa2dlMXh5WEc0Z0lDQWdkbUZ5SUY4Z1BTQjdJR3hoWW1Wc09pQXdMQ0J6Wlc1ME9pQm1kVzVqZEdsdmJpZ3BJSHNnYVdZZ0tIUmJNRjBnSmlBeEtTQjBhSEp2ZHlCMFd6RmRPeUJ5WlhSMWNtNGdkRnN4WFRzZ2ZTd2dkSEo1Y3pvZ1cxMHNJRzl3Y3pvZ1cxMGdmU3dnWml3Z2VTd2dkQ3dnWnp0Y2NseHVJQ0FnSUhKbGRIVnliaUJuSUQwZ2V5QnVaWGgwT2lCMlpYSmlLREFwTENCY0luUm9jbTkzWENJNklIWmxjbUlvTVNrc0lGd2ljbVYwZFhKdVhDSTZJSFpsY21Jb01pa2dmU3dnZEhsd1pXOW1JRk41YldKdmJDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JQ2huVzFONWJXSnZiQzVwZEdWeVlYUnZjbDBnUFNCbWRXNWpkR2x2YmlncElIc2djbVYwZFhKdUlIUm9hWE03SUgwcExDQm5PMXh5WEc0Z0lDQWdablZ1WTNScGIyNGdkbVZ5WWlodUtTQjdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9kaWtnZXlCeVpYUjFjbTRnYzNSbGNDaGJiaXdnZGwwcE95QjlPeUI5WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJ6ZEdWd0tHOXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR1lwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkhaVzVsY21GMGIzSWdhWE1nWVd4eVpXRmtlU0JsZUdWamRYUnBibWN1WENJcE8xeHlYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaG5JQ1ltSUNobklEMGdNQ3dnYjNCYk1GMGdKaVlnS0Y4Z1BTQXdLU2tzSUY4cElIUnllU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobUlEMGdNU3dnZVNBbUppQW9kQ0E5SUc5d1d6QmRJQ1lnTWlBL0lIbGJYQ0p5WlhSMWNtNWNJbDBnT2lCdmNGc3dYU0EvSUhsYlhDSjBhSEp2ZDF3aVhTQjhmQ0FvS0hRZ1BTQjVXMXdpY21WMGRYSnVYQ0pkS1NBbUppQjBMbU5oYkd3b2VTa3NJREFwSURvZ2VTNXVaWGgwS1NBbUppQWhLSFFnUFNCMExtTmhiR3dvZVN3Z2IzQmJNVjBwS1M1a2IyNWxLU0J5WlhSMWNtNGdkRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hrZ1BTQXdMQ0IwS1NCdmNDQTlJRnR2Y0Zzd1hTQW1JRElzSUhRdWRtRnNkV1ZkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLRzl3V3pCZEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElEQTZJR05oYzJVZ01Ub2dkQ0E5SUc5d095QmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTkRvZ1h5NXNZV0psYkNzck95QnlaWFIxY200Z2V5QjJZV3gxWlRvZ2IzQmJNVjBzSUdSdmJtVTZJR1poYkhObElIMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElEVTZJRjh1YkdGaVpXd3JLenNnZVNBOUlHOXdXekZkT3lCdmNDQTlJRnN3WFRzZ1kyOXVkR2x1ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURjNklHOXdJRDBnWHk1dmNITXVjRzl3S0NrN0lGOHVkSEo1Y3k1d2IzQW9LVHNnWTI5dWRHbHVkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaEtIUWdQU0JmTG5SeWVYTXNJSFFnUFNCMExteGxibWQwYUNBK0lEQWdKaVlnZEZ0MExteGxibWQwYUNBdElERmRLU0FtSmlBb2IzQmJNRjBnUFQwOUlEWWdmSHdnYjNCYk1GMGdQVDA5SURJcEtTQjdJRjhnUFNBd095QmpiMjUwYVc1MVpUc2dmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0Zzd1hTQTlQVDBnTXlBbUppQW9JWFFnZkh3Z0tHOXdXekZkSUQ0Z2RGc3dYU0FtSmlCdmNGc3hYU0E4SUhSYk0xMHBLU2tnZXlCZkxteGhZbVZzSUQwZ2IzQmJNVjA3SUdKeVpXRnJPeUI5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c5d1d6QmRJRDA5UFNBMklDWW1JRjh1YkdGaVpXd2dQQ0IwV3pGZEtTQjdJRjh1YkdGaVpXd2dQU0IwV3pGZE95QjBJRDBnYjNBN0lHSnlaV0ZyT3lCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUWdKaVlnWHk1c1lXSmxiQ0E4SUhSYk1sMHBJSHNnWHk1c1lXSmxiQ0E5SUhSYk1sMDdJRjh1YjNCekxuQjFjMmdvYjNBcE95QmljbVZoYXpzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBXekpkS1NCZkxtOXdjeTV3YjNBb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZkxuUnllWE11Y0c5d0tDazdJR052Ym5ScGJuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdJRDBnWW05a2VTNWpZV3hzS0hSb2FYTkJjbWNzSUY4cE8xeHlYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUhzZ2IzQWdQU0JiTml3Z1pWMDdJSGtnUFNBd095QjlJR1pwYm1Gc2JIa2dleUJtSUQwZ2RDQTlJREE3SUgxY2NseHVJQ0FnSUNBZ0lDQnBaaUFvYjNCYk1GMGdKaUExS1NCMGFISnZkeUJ2Y0ZzeFhUc2djbVYwZFhKdUlIc2dkbUZzZFdVNklHOXdXekJkSUQ4Z2IzQmJNVjBnT2lCMmIybGtJREFzSUdSdmJtVTZJSFJ5ZFdVZ2ZUdGNjbHh1SUNBZ0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJSFpoY2lCZlgyTnlaV0YwWlVKcGJtUnBibWNnUFNCUFltcGxZM1F1WTNKbFlYUmxJRDhnS0daMWJtTjBhVzl1S0c4c0lHMHNJR3NzSUdzeUtTQjdYSEpjYmlBZ0lDQnBaaUFvYXpJZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnYXpJZ1BTQnJPMXh5WEc0Z0lDQWdkbUZ5SUdSbGMyTWdQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtHMHNJR3NwTzF4eVhHNGdJQ0FnYVdZZ0tDRmtaWE5qSUh4OElDaGNJbWRsZEZ3aUlHbHVJR1JsYzJNZ1B5QWhiUzVmWDJWelRXOWtkV3hsSURvZ1pHVnpZeTUzY21sMFlXSnNaU0I4ZkNCa1pYTmpMbU52Ym1acFozVnlZV0pzWlNrcElIdGNjbHh1SUNBZ0lDQWdJQ0JrWlhOaklEMGdleUJsYm5WdFpYSmhZbXhsT2lCMGNuVmxMQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdiVnRyWFRzZ2ZTQjlPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0c4c0lHc3lMQ0JrWlhOaktUdGNjbHh1ZlNrZ09pQW9ablZ1WTNScGIyNG9ieXdnYlN3Z2F5d2dheklwSUh0Y2NseHVJQ0FnSUdsbUlDaHJNaUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQnJNaUE5SUdzN1hISmNiaUFnSUNCdlcyc3lYU0E5SUcxYmExMDdYSEpjYm4wcE8xeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZlpYaHdiM0owVTNSaGNpaHRMQ0J2S1NCN1hISmNiaUFnSUNCbWIzSWdLSFpoY2lCd0lHbHVJRzBwSUdsbUlDaHdJQ0U5UFNCY0ltUmxabUYxYkhSY0lpQW1KaUFoVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c4c0lIQXBLU0JmWDJOeVpXRjBaVUpwYm1ScGJtY29ieXdnYlN3Z2NDazdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDNaaGJIVmxjeWh2S1NCN1hISmNiaUFnSUNCMllYSWdjeUE5SUhSNWNHVnZaaUJUZVcxaWIyd2dQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJUZVcxaWIyd3VhWFJsY21GMGIzSXNJRzBnUFNCeklDWW1JRzliYzEwc0lHa2dQU0F3TzF4eVhHNGdJQ0FnYVdZZ0tHMHBJSEpsZEhWeWJpQnRMbU5oYkd3b2J5azdYSEpjYmlBZ0lDQnBaaUFvYnlBbUppQjBlWEJsYjJZZ2J5NXNaVzVuZEdnZ1BUMDlJRndpYm5WdFltVnlYQ0lwSUhKbGRIVnliaUI3WEhKY2JpQWdJQ0FnSUNBZ2JtVjRkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ieUFtSmlCcElENDlJRzh1YkdWdVozUm9LU0J2SUQwZ2RtOXBaQ0F3TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdleUIyWVd4MVpUb2dieUFtSmlCdlcya3JLMTBzSUdSdmJtVTZJQ0Z2SUgwN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVHRjY2x4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvY3lBL0lGd2lUMkpxWldOMElHbHpJRzV2ZENCcGRHVnlZV0pzWlM1Y0lpQTZJRndpVTNsdFltOXNMbWwwWlhKaGRHOXlJR2x6SUc1dmRDQmtaV1pwYm1Wa0xsd2lLVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmNtVmhaQ2h2TENCdUtTQjdYSEpjYmlBZ0lDQjJZWElnYlNBOUlIUjVjR1Z2WmlCVGVXMWliMndnUFQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCdlcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwN1hISmNiaUFnSUNCcFppQW9JVzBwSUhKbGRIVnliaUJ2TzF4eVhHNGdJQ0FnZG1GeUlHa2dQU0J0TG1OaGJHd29ieWtzSUhJc0lHRnlJRDBnVzEwc0lHVTdYSEpjYmlBZ0lDQjBjbmtnZTF4eVhHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNnb2JpQTlQVDBnZG05cFpDQXdJSHg4SUc0dExTQStJREFwSUNZbUlDRW9jaUE5SUdrdWJtVjRkQ2dwS1M1a2IyNWxLU0JoY2k1d2RYTm9LSEl1ZG1Gc2RXVXBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdZMkYwWTJnZ0tHVnljbTl5S1NCN0lHVWdQU0I3SUdWeWNtOXlPaUJsY25KdmNpQjlPeUI5WEhKY2JpQWdJQ0JtYVc1aGJHeDVJSHRjY2x4dUlDQWdJQ0FnSUNCMGNua2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBbUppQWhjaTVrYjI1bElDWW1JQ2h0SUQwZ2FWdGNJbkpsZEhWeWJsd2lYU2twSUcwdVkyRnNiQ2hwS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWm1sdVlXeHNlU0I3SUdsbUlDaGxLU0IwYUhKdmR5QmxMbVZ5Y205eU95QjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z1lYSTdYSEpjYm4xY2NseHVYSEpjYmk4cUtpQkFaR1Z3Y21WallYUmxaQ0FxTDF4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXpjSEpsWVdRb0tTQjdYSEpjYmlBZ0lDQm1iM0lnS0haaGNpQmhjaUE5SUZ0ZExDQnBJRDBnTURzZ2FTQThJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdJR2tyS3lsY2NseHVJQ0FnSUNBZ0lDQmhjaUE5SUdGeUxtTnZibU5oZENoZlgzSmxZV1FvWVhKbmRXMWxiblJ6VzJsZEtTazdYSEpjYmlBZ0lDQnlaWFIxY200Z1lYSTdYSEpjYm4xY2NseHVYSEpjYmk4cUtpQkFaR1Z3Y21WallYUmxaQ0FxTDF4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXpjSEpsWVdSQmNuSmhlWE1vS1NCN1hISmNiaUFnSUNCbWIzSWdLSFpoY2lCeklEMGdNQ3dnYVNBOUlEQXNJR2xzSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTQThJR2xzT3lCcEt5c3BJSE1nS3owZ1lYSm5kVzFsYm5SelcybGRMbXhsYm1kMGFEdGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlISWdQU0JCY25KaGVTaHpLU3dnYXlBOUlEQXNJR2tnUFNBd095QnBJRHdnYVd3N0lHa3JLeWxjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCaElEMGdZWEpuZFcxbGJuUnpXMmxkTENCcUlEMGdNQ3dnYW13Z1BTQmhMbXhsYm1kMGFEc2dhaUE4SUdwc095QnFLeXNzSUdzckt5bGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NsdHJYU0E5SUdGYmFsMDdYSEpjYmlBZ0lDQnlaWFIxY200Z2NqdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmYzNCeVpXRmtRWEp5WVhrb2RHOHNJR1p5YjIwc0lIQmhZMnNwSUh0Y2NseHVJQ0FnSUdsbUlDaHdZV05ySUh4OElHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BUMDlJRElwSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzSUQwZ1puSnZiUzVzWlc1bmRHZ3NJR0Z5T3lCcElEd2diRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHRnlJSHg4SUNFb2FTQnBiaUJtY205dEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdGeUtTQmhjaUE5SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTNWpZV3hzS0daeWIyMHNJREFzSUdrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNsdHBYU0E5SUdaeWIyMWJhVjA3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUhSdkxtTnZibU5oZENoaGNpQjhmQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2htY205dEtTazdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJGM1lXbDBLSFlwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdseklHbHVjM1JoYm1ObGIyWWdYMTloZDJGcGRDQS9JQ2gwYUdsekxuWWdQU0IyTENCMGFHbHpLU0E2SUc1bGR5QmZYMkYzWVdsMEtIWXBPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5aGMzbHVZMGRsYm1WeVlYUnZjaWgwYUdselFYSm5MQ0JmWVhKbmRXMWxiblJ6TENCblpXNWxjbUYwYjNJcElIdGNjbHh1SUNBZ0lHbG1JQ2doVTNsdFltOXNMbUZ6ZVc1alNYUmxjbUYwYjNJcElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pUZVcxaWIyd3VZWE41Ym1OSmRHVnlZWFJ2Y2lCcGN5QnViM1FnWkdWbWFXNWxaQzVjSWlrN1hISmNiaUFnSUNCMllYSWdaeUE5SUdkbGJtVnlZWFJ2Y2k1aGNIQnNlU2gwYUdselFYSm5MQ0JmWVhKbmRXMWxiblJ6SUh4OElGdGRLU3dnYVN3Z2NTQTlJRnRkTzF4eVhHNGdJQ0FnY21WMGRYSnVJR2tnUFNCN2ZTd2dkbVZ5WWloY0ltNWxlSFJjSWlrc0lIWmxjbUlvWENKMGFISnZkMXdpS1N3Z2RtVnlZaWhjSW5KbGRIVnlibHdpS1N3Z2FWdFRlVzFpYjJ3dVlYTjVibU5KZEdWeVlYUnZjbDBnUFNCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQjBhR2x6T3lCOUxDQnBPMXh5WEc0Z0lDQWdablZ1WTNScGIyNGdkbVZ5WWlodUtTQjdJR2xtSUNoblcyNWRLU0JwVzI1ZElEMGdablZ1WTNScGIyNGdLSFlwSUhzZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUlDaGhMQ0JpS1NCN0lIRXVjSFZ6YUNoYmJpd2dkaXdnWVN3Z1lsMHBJRDRnTVNCOGZDQnlaWE4xYldVb2Jpd2dkaWs3SUgwcE95QjlPeUI5WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJ5WlhOMWJXVW9iaXdnZGlrZ2V5QjBjbmtnZXlCemRHVndLR2RiYmwwb2Rpa3BPeUI5SUdOaGRHTm9JQ2hsS1NCN0lITmxkSFJzWlNoeFd6QmRXek5kTENCbEtUc2dmU0I5WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJ6ZEdWd0tISXBJSHNnY2k1MllXeDFaU0JwYm5OMFlXNWpaVzltSUY5ZllYZGhhWFFnUHlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvY2k1MllXeDFaUzUyS1M1MGFHVnVLR1oxYkdacGJHd3NJSEpsYW1WamRDa2dPaUJ6WlhSMGJHVW9jVnN3WFZzeVhTd2djaWs3SUgxY2NseHVJQ0FnSUdaMWJtTjBhVzl1SUdaMWJHWnBiR3dvZG1Gc2RXVXBJSHNnY21WemRXMWxLRndpYm1WNGRGd2lMQ0IyWVd4MVpTazdJSDFjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSEpsYW1WamRDaDJZV3gxWlNrZ2V5QnlaWE4xYldVb1hDSjBhSEp2ZDF3aUxDQjJZV3gxWlNrN0lIMWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlITmxkSFJzWlNobUxDQjJLU0I3SUdsbUlDaG1LSFlwTENCeExuTm9hV1owS0Nrc0lIRXViR1Z1WjNSb0tTQnlaWE4xYldVb2NWc3dYVnN3WFN3Z2NWc3dYVnN4WFNrN0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWVhONWJtTkVaV3hsWjJGMGIzSW9ieWtnZTF4eVhHNGdJQ0FnZG1GeUlHa3NJSEE3WEhKY2JpQWdJQ0J5WlhSMWNtNGdhU0E5SUh0OUxDQjJaWEppS0Z3aWJtVjRkRndpS1N3Z2RtVnlZaWhjSW5Sb2NtOTNYQ0lzSUdaMWJtTjBhVzl1SUNobEtTQjdJSFJvY205M0lHVTdJSDBwTENCMlpYSmlLRndpY21WMGRYSnVYQ0lwTENCcFcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwZ1BTQm1kVzVqZEdsdmJpQW9LU0I3SUhKbGRIVnliaUIwYUdsek95QjlMQ0JwTzF4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnZG1WeVlpaHVMQ0JtS1NCN0lHbGJibDBnUFNCdlcyNWRJRDhnWm5WdVkzUnBiMjRnS0hZcElIc2djbVYwZFhKdUlDaHdJRDBnSVhBcElEOGdleUIyWVd4MVpUb2dYMTloZDJGcGRDaHZXMjVkS0hZcEtTd2daRzl1WlRvZ1ptRnNjMlVnZlNBNklHWWdQeUJtS0hZcElEb2dkanNnZlNBNklHWTdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZllYTjVibU5XWVd4MVpYTW9ieWtnZTF4eVhHNGdJQ0FnYVdZZ0tDRlRlVzFpYjJ3dVlYTjVibU5KZEdWeVlYUnZjaWtnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lsTjViV0p2YkM1aGMzbHVZMGwwWlhKaGRHOXlJR2x6SUc1dmRDQmtaV1pwYm1Wa0xsd2lLVHRjY2x4dUlDQWdJSFpoY2lCdElEMGdiMXRUZVcxaWIyd3VZWE41Ym1OSmRHVnlZWFJ2Y2wwc0lHazdYSEpjYmlBZ0lDQnlaWFIxY200Z2JTQS9JRzB1WTJGc2JDaHZLU0E2SUNodklEMGdkSGx3Wlc5bUlGOWZkbUZzZFdWeklEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ1B5QmZYM1poYkhWbGN5aHZLU0E2SUc5YlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNncExDQnBJRDBnZTMwc0lIWmxjbUlvWENKdVpYaDBYQ0lwTENCMlpYSmlLRndpZEdoeWIzZGNJaWtzSUhabGNtSW9YQ0p5WlhSMWNtNWNJaWtzSUdsYlUzbHRZbTlzTG1GemVXNWpTWFJsY21GMGIzSmRJRDBnWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z2RHaHBjenNnZlN3Z2FTazdYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQjJaWEppS0c0cElIc2dhVnR1WFNBOUlHOWJibDBnSmlZZ1puVnVZM1JwYjI0Z0tIWXBJSHNnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1SUNoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUhzZ2RpQTlJRzliYmwwb2Rpa3NJSE5sZEhSc1pTaHlaWE52YkhabExDQnlaV3BsWTNRc0lIWXVaRzl1WlN3Z2RpNTJZV3gxWlNrN0lIMHBPeUI5T3lCOVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCelpYUjBiR1VvY21WemIyeDJaU3dnY21WcVpXTjBMQ0JrTENCMktTQjdJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTaDJLUzUwYUdWdUtHWjFibU4wYVc5dUtIWXBJSHNnY21WemIyeDJaU2g3SUhaaGJIVmxPaUIyTENCa2IyNWxPaUJrSUgwcE95QjlMQ0J5WldwbFkzUXBPeUI5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyMWhhMlZVWlcxd2JHRjBaVTlpYW1WamRDaGpiMjlyWldRc0lISmhkeWtnZTF4eVhHNGdJQ0FnYVdZZ0tFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2tnZXlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29ZMjl2YTJWa0xDQmNJbkpoZDF3aUxDQjdJSFpoYkhWbE9pQnlZWGNnZlNrN0lIMGdaV3h6WlNCN0lHTnZiMnRsWkM1eVlYY2dQU0J5WVhjN0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCamIyOXJaV1E3WEhKY2JuMDdYSEpjYmx4eVhHNTJZWElnWDE5elpYUk5iMlIxYkdWRVpXWmhkV3gwSUQwZ1QySnFaV04wTG1OeVpXRjBaU0EvSUNobWRXNWpkR2x2YmlodkxDQjJLU0I3WEhKY2JpQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2J5d2dYQ0prWldaaGRXeDBYQ0lzSUhzZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN3Z2RtRnNkV1U2SUhZZ2ZTazdYSEpjYm4wcElEb2dablZ1WTNScGIyNG9ieXdnZGlrZ2UxeHlYRzRnSUNBZ2IxdGNJbVJsWm1GMWJIUmNJbDBnUFNCMk8xeHlYRzU5TzF4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmYVcxd2IzSjBVM1JoY2lodGIyUXBJSHRjY2x4dUlDQWdJR2xtSUNodGIyUWdKaVlnYlc5a0xsOWZaWE5OYjJSMWJHVXBJSEpsZEhWeWJpQnRiMlE3WEhKY2JpQWdJQ0IyWVhJZ2NtVnpkV3gwSUQwZ2UzMDdYSEpjYmlBZ0lDQnBaaUFvYlc5a0lDRTlJRzUxYkd3cElHWnZjaUFvZG1GeUlHc2dhVzRnYlc5a0tTQnBaaUFvYXlBaFBUMGdYQ0prWldaaGRXeDBYQ0lnSmlZZ1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHMXZaQ3dnYXlrcElGOWZZM0psWVhSbFFtbHVaR2x1WnloeVpYTjFiSFFzSUcxdlpDd2dheWs3WEhKY2JpQWdJQ0JmWDNObGRFMXZaSFZzWlVSbFptRjFiSFFvY21WemRXeDBMQ0J0YjJRcE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmFXMXdiM0owUkdWbVlYVnNkQ2h0YjJRcElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlBb2JXOWtJQ1ltSUcxdlpDNWZYMlZ6VFc5a2RXeGxLU0EvSUcxdlpDQTZJSHNnWkdWbVlYVnNkRG9nYlc5a0lIMDdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJOc1lYTnpVSEpwZG1GMFpVWnBaV3hrUjJWMEtISmxZMlZwZG1WeUxDQnpkR0YwWlN3Z2EybHVaQ3dnWmlrZ2UxeHlYRzRnSUNBZ2FXWWdLR3RwYm1RZ1BUMDlJRndpWVZ3aUlDWW1JQ0ZtS1NCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lVSEpwZG1GMFpTQmhZMk5sYzNOdmNpQjNZWE1nWkdWbWFXNWxaQ0IzYVhSb2IzVjBJR0VnWjJWMGRHVnlYQ0lwTzF4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCemRHRjBaU0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJRDhnY21WalpXbDJaWElnSVQwOUlITjBZWFJsSUh4OElDRm1JRG9nSVhOMFlYUmxMbWhoY3loeVpXTmxhWFpsY2lrcElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pEWVc1dWIzUWdjbVZoWkNCd2NtbDJZWFJsSUcxbGJXSmxjaUJtY205dElHRnVJRzlpYW1WamRDQjNhRzl6WlNCamJHRnpjeUJrYVdRZ2JtOTBJR1JsWTJ4aGNtVWdhWFJjSWlrN1hISmNiaUFnSUNCeVpYUjFjbTRnYTJsdVpDQTlQVDBnWENKdFhDSWdQeUJtSURvZ2EybHVaQ0E5UFQwZ1hDSmhYQ0lnUHlCbUxtTmhiR3dvY21WalpXbDJaWElwSURvZ1ppQS9JR1l1ZG1Gc2RXVWdPaUJ6ZEdGMFpTNW5aWFFvY21WalpXbDJaWElwTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOWpiR0Z6YzFCeWFYWmhkR1ZHYVdWc1pGTmxkQ2h5WldObGFYWmxjaXdnYzNSaGRHVXNJSFpoYkhWbExDQnJhVzVrTENCbUtTQjdYSEpjYmlBZ0lDQnBaaUFvYTJsdVpDQTlQVDBnWENKdFhDSXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKUWNtbDJZWFJsSUcxbGRHaHZaQ0JwY3lCdWIzUWdkM0pwZEdGaWJHVmNJaWs3WEhKY2JpQWdJQ0JwWmlBb2EybHVaQ0E5UFQwZ1hDSmhYQ0lnSmlZZ0lXWXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKUWNtbDJZWFJsSUdGalkyVnpjMjl5SUhkaGN5QmtaV1pwYm1Wa0lIZHBkR2h2ZFhRZ1lTQnpaWFIwWlhKY0lpazdYSEpjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSE4wWVhSbElEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ1B5QnlaV05sYVhabGNpQWhQVDBnYzNSaGRHVWdmSHdnSVdZZ09pQWhjM1JoZEdVdWFHRnpLSEpsWTJWcGRtVnlLU2tnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrTmhibTV2ZENCM2NtbDBaU0J3Y21sMllYUmxJRzFsYldKbGNpQjBieUJoYmlCdlltcGxZM1FnZDJodmMyVWdZMnhoYzNNZ1pHbGtJRzV2ZENCa1pXTnNZWEpsSUdsMFhDSXBPMXh5WEc0Z0lDQWdjbVYwZFhKdUlDaHJhVzVrSUQwOVBTQmNJbUZjSWlBL0lHWXVZMkZzYkNoeVpXTmxhWFpsY2l3Z2RtRnNkV1VwSURvZ1ppQS9JR1l1ZG1Gc2RXVWdQU0IyWVd4MVpTQTZJSE4wWVhSbExuTmxkQ2h5WldObGFYWmxjaXdnZG1Gc2RXVXBLU3dnZG1Gc2RXVTdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJOc1lYTnpVSEpwZG1GMFpVWnBaV3hrU1c0b2MzUmhkR1VzSUhKbFkyVnBkbVZ5S1NCN1hISmNiaUFnSUNCcFppQW9jbVZqWldsMlpYSWdQVDA5SUc1MWJHd2dmSHdnS0hSNWNHVnZaaUJ5WldObGFYWmxjaUFoUFQwZ1hDSnZZbXBsWTNSY0lpQW1KaUIwZVhCbGIyWWdjbVZqWldsMlpYSWdJVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa3BJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKRFlXNXViM1FnZFhObElDZHBiaWNnYjNCbGNtRjBiM0lnYjI0Z2JtOXVMVzlpYW1WamRGd2lLVHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBlWEJsYjJZZ2MzUmhkR1VnUFQwOUlGd2lablZ1WTNScGIyNWNJaUEvSUhKbFkyVnBkbVZ5SUQwOVBTQnpkR0YwWlNBNklITjBZWFJsTG1oaGN5aHlaV05sYVhabGNpazdYSEpjYm4xY2NseHVJaXdpYVcxd2IzSjBJSFI1Y0dVZ0tpQmhjeUJVU0ZKRlJTQm1jbTl0SUNkMGFISmxaU2M3WEc1Y2JpOHFLbHh1SUNvZ1ZISmhkbVZ5YzJVZ1lXNWpaWE4wYjNKeklHOW1JR2RwZG1WdUlHOWlhbVZqZENCaGJtUWdZMkZzYkNCbmFYWmxiaUJqWVd4c1ltRmpheUJtY205dElISnZiM1FnYzJsa1pTNWNiaUFxSUVsMElIZHBiR3dnYVc1amJIVmtaU0IwYUdVZ1oybDJaVzRnYjJKcVpXTjBJR2wwYzJWc1ppNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2IySnFaV04wSUZSb1pTQnZZbXBsWTNRZ2VXOTFJSGRoYm5RZ2RHOGdkSEpoZG1WeWMyVmNiaUFxSUVCd1lYSmhiU0JqWVd4c1ltRmpheUJVYUdVZ1kyRnNiQ0JpWVdOcklHWjFibU4wYVc5dUlIUm9ZWFFnZDJsc2JDQmlaU0JqWVd4c1pXUWdabTl5SUdWaFkyZ2dZVzVqWlhOMGIzSnpYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCMGNtRjJaWEp6WlVGdVkyVnpkRzl5YzBaeWIyMVNiMjkwS0c5aWFtVmpkRG9nVkVoU1JVVXVUMkpxWldOME0wUXNJR05oYkd4aVlXTnJPaUFvYjJKcVpXTjBPaUJVU0ZKRlJTNVBZbXBsWTNRelJDa2dQVDRnZG05cFpDazZJSFp2YVdRZ2UxeHVJQ0JqYjI1emRDQmhibU5sYzNSdmNuTTZJRlJJVWtWRkxrOWlhbVZqZERORVcxMGdQU0JiYjJKcVpXTjBYVHRjYmx4dUlDQnNaWFFnYUdWaFpEb2dWRWhTUlVVdVQySnFaV04wTTBRZ2ZDQnVkV3hzSUQwZ2IySnFaV04wTG5CaGNtVnVkRHRjYmlBZ2QyaHBiR1VnS0dobFlXUWdJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQmhibU5sYzNSdmNuTXVkVzV6YUdsbWRDaG9aV0ZrS1R0Y2JpQWdJQ0JvWldGa0lEMGdhR1ZoWkM1d1lYSmxiblE3WEc0Z0lIMWNibHh1SUNCaGJtTmxjM1J2Y25NdVptOXlSV0ZqYUNnb1lXNWpaWE4wYjNJcElEMCtJSHRjYmlBZ0lDQmpZV3hzWW1GamF5aGhibU5sYzNSdmNpazdYRzRnSUgwcE8xeHVmVnh1SWl3aWFXMXdiM0owSUhSNWNHVWdLaUJoY3lCVVNGSkZSU0JtY205dElDZDBhSEpsWlNjN1hHNXBiWEJ2Y25RZ2RIbHdaU0I3SUZaU1RVNXZaR1ZEYjI1emRISmhhVzUwSUgwZ1puSnZiU0FuTGk5V1VrMU9iMlJsUTI5dWMzUnlZV2x1ZENjN1hHNXBiWEJ2Y25RZ2V5QjBjbUYyWlhKelpVRnVZMlZ6ZEc5eWMwWnliMjFTYjI5MElIMGdabkp2YlNBbkxpOTFkR2xzY3k5MGNtRjJaWEp6WlVGdVkyVnpkRzl5YzBaeWIyMVNiMjkwSnp0Y2JseHVaWGh3YjNKMElHTnNZWE56SUZaU1RVNXZaR1ZEYjI1emRISmhhVzUwVFdGdVlXZGxjaUI3WEc0Z0lIQnlhWFpoZEdVZ1gyTnZibk4wY21GcGJuUnpJRDBnYm1WM0lGTmxkRHhXVWsxT2IyUmxRMjl1YzNSeVlXbHVkRDRvS1R0Y2JpQWdjSFZpYkdsaklHZGxkQ0JqYjI1emRISmhhVzUwY3lncE9pQlRaWFE4VmxKTlRtOWtaVU52Ym5OMGNtRnBiblErSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlkyOXVjM1J5WVdsdWRITTdYRzRnSUgxY2JseHVJQ0J3Y21sMllYUmxJRjl2WW1wbFkzUkRiMjV6ZEhKaGFXNTBjMDFoY0NBOUlHNWxkeUJOWVhBOFZFaFNSVVV1VDJKcVpXTjBNMFFzSUZObGREeFdVazFPYjJSbFEyOXVjM1J5WVdsdWRENCtLQ2s3WEc1Y2JpQWdjSFZpYkdsaklHRmtaRU52Ym5OMGNtRnBiblFvWTI5dWMzUnlZV2x1ZERvZ1ZsSk5UbTlrWlVOdmJuTjBjbUZwYm5RcE9pQjJiMmxrSUh0Y2JpQWdJQ0IwYUdsekxsOWpiMjV6ZEhKaGFXNTBjeTVoWkdRb1kyOXVjM1J5WVdsdWRDazdYRzVjYmlBZ0lDQnNaWFFnYjJKcVpXTjBVMlYwSUQwZ2RHaHBjeTVmYjJKcVpXTjBRMjl1YzNSeVlXbHVkSE5OWVhBdVoyVjBLR052Ym5OMGNtRnBiblF1WkdWemRHbHVZWFJwYjI0cE8xeHVJQ0FnSUdsbUlDaHZZbXBsWTNSVFpYUWdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdiMkpxWldOMFUyVjBJRDBnYm1WM0lGTmxkRHhXVWsxT2IyUmxRMjl1YzNSeVlXbHVkRDRvS1R0Y2JpQWdJQ0FnSUhSb2FYTXVYMjlpYW1WamRFTnZibk4wY21GcGJuUnpUV0Z3TG5ObGRDaGpiMjV6ZEhKaGFXNTBMbVJsYzNScGJtRjBhVzl1TENCdlltcGxZM1JUWlhRcE8xeHVJQ0FnSUgxY2JpQWdJQ0J2WW1wbFkzUlRaWFF1WVdSa0tHTnZibk4wY21GcGJuUXBPMXh1SUNCOVhHNWNiaUFnY0hWaWJHbGpJR1JsYkdWMFpVTnZibk4wY21GcGJuUW9ZMjl1YzNSeVlXbHVkRG9nVmxKTlRtOWtaVU52Ym5OMGNtRnBiblFwT2lCMmIybGtJSHRjYmlBZ0lDQjBhR2x6TGw5amIyNXpkSEpoYVc1MGN5NWtaV3hsZEdVb1kyOXVjM1J5WVdsdWRDazdYRzVjYmlBZ0lDQmpiMjV6ZENCdlltcGxZM1JUWlhRZ1BTQjBhR2x6TGw5dlltcGxZM1JEYjI1emRISmhhVzUwYzAxaGNDNW5aWFFvWTI5dWMzUnlZV2x1ZEM1a1pYTjBhVzVoZEdsdmJpa2hPMXh1SUNBZ0lHOWlhbVZqZEZObGRDNWtaV3hsZEdVb1kyOXVjM1J5WVdsdWRDazdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdjMlYwU1c1cGRGTjBZWFJsS0NrNklIWnZhV1FnZTF4dUlDQWdJR052Ym5OMElHTnZibk4wY21GcGJuUnpWSEpwWldRZ1BTQnVaWGNnVTJWMFBGWlNUVTV2WkdWRGIyNXpkSEpoYVc1MFBpZ3BPMXh1SUNBZ0lHTnZibk4wSUdOdmJuTjBjbUZwYm5SelJHOXVaU0E5SUc1bGR5QlRaWFE4VmxKTlRtOWtaVU52Ym5OMGNtRnBiblErS0NrN1hHNWNiaUFnSUNCbWIzSWdLR052Ym5OMElHTnZibk4wY21GcGJuUWdiMllnZEdocGN5NWZZMjl1YzNSeVlXbHVkSE1wSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYM0J5YjJObGMzTkRiMjV6ZEhKaGFXNTBLR052Ym5OMGNtRnBiblFzSUdOdmJuTjBjbUZwYm5SelZISnBaV1FzSUdOdmJuTjBjbUZwYm5SelJHOXVaU3dnS0dOdmJuTjBjbUZwYm5RcElEMCtJR052Ym5OMGNtRnBiblF1YzJWMFNXNXBkRk4wWVhSbEtDa3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEIxWW14cFl5QjFjR1JoZEdVb0tUb2dkbTlwWkNCN1hHNGdJQ0FnWTI5dWMzUWdZMjl1YzNSeVlXbHVkSE5VY21sbFpDQTlJRzVsZHlCVFpYUThWbEpOVG05a1pVTnZibk4wY21GcGJuUStLQ2s3WEc0Z0lDQWdZMjl1YzNRZ1kyOXVjM1J5WVdsdWRITkViMjVsSUQwZ2JtVjNJRk5sZER4V1VrMU9iMlJsUTI5dWMzUnlZV2x1ZEQ0b0tUdGNibHh1SUNBZ0lHWnZjaUFvWTI5dWMzUWdZMjl1YzNSeVlXbHVkQ0J2WmlCMGFHbHpMbDlqYjI1emRISmhhVzUwY3lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmY0hKdlkyVnpjME52Ym5OMGNtRnBiblFvWTI5dWMzUnlZV2x1ZEN3Z1kyOXVjM1J5WVdsdWRITlVjbWxsWkN3Z1kyOXVjM1J5WVdsdWRITkViMjVsTENBb1kyOXVjM1J5WVdsdWRDa2dQVDRnWTI5dWMzUnlZV2x1ZEM1MWNHUmhkR1VvS1NrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGVndaR0YwWlNCaElHTnZibk4wY21GcGJuUXVYRzRnSUNBcUlFbG1JSFJvWlhKbElHRnlaU0J2ZEdobGNpQmpiMjV6ZEhKaGFXNTBjeUIwYUdGMElHRnlaU0JrWlhCbGJtUmhiblFzSUdsMElIZHBiR3dnZEhKNUlIUnZJSFZ3WkdGMFpTQjBhR1Z0SUhKbFkzVnljMmwyWld4NUxseHVJQ0FnS2lCSmRDQnRhV2RvZENCMGFISnZkeUJoYmlCbGNuSnZjaUJwWmlCMGFHVnlaU0JoY21VZ1kybHlZM1ZzWVhJZ1pHVndaVzVrWlc1amFXVnpMbHh1SUNBZ0tseHVJQ0FnS2lCSmJuUmxibVJsWkNCMGJ5QmlaU0IxYzJWa0lHbHVJSHRBYkdsdWF5QjFjR1JoZEdWOUlHRnVaQ0I3UUd4cGJtc2dYM0J5YjJObGMzTkRiMjV6ZEhKaGFXNTBmU0JwZEhObGJHWWdjbVZqZFhKemFYWmxiSGt1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCamIyNXpkSEpoYVc1MElFRWdZMjl1YzNSeVlXbHVkQ0I1YjNVZ2QyRnVkQ0IwYnlCMWNHUmhkR1ZjYmlBZ0lDb2dRSEJoY21GdElHTnZibk4wY21GcGJuUnpWSEpwWldRZ1UyVjBJRzltSUdOdmJuTjBjbUZwYm5SeklIUm9ZWFFnWVhKbElHRnNjbVZoWkhrZ2RISnBaV1FnZEc4Z1ltVWdkWEJrWVhSbFpGeHVJQ0FnS2lCQWNHRnlZVzBnWTI5dWMzUnlZV2x1ZEhORWIyNWxJRk5sZENCdlppQmpiMjV6ZEhKaGFXNTBjeUIwYUdGMElHRnlaU0JoYkhKbFlXUjVJSFZ3SUhSdklHUmhkR1ZjYmlBZ0lDb3ZYRzRnSUhCeWFYWmhkR1VnWDNCeWIyTmxjM05EYjI1emRISmhhVzUwS0Z4dUlDQWdJR052Ym5OMGNtRnBiblE2SUZaU1RVNXZaR1ZEYjI1emRISmhhVzUwTEZ4dUlDQWdJR052Ym5OMGNtRnBiblJ6VkhKcFpXUTZJRk5sZER4V1VrMU9iMlJsUTI5dWMzUnlZV2x1ZEQ0c1hHNGdJQ0FnWTI5dWMzUnlZV2x1ZEhORWIyNWxPaUJUWlhROFZsSk5UbTlrWlVOdmJuTjBjbUZwYm5RK0xGeHVJQ0FnSUdOaGJHeGlZV05yT2lBb1kyOXVjM1J5WVdsdWREb2dWbEpOVG05a1pVTnZibk4wY21GcGJuUXBJRDArSUhadmFXUXNYRzRnSUNrNklIWnZhV1FnZTF4dUlDQWdJR2xtSUNoamIyNXpkSEpoYVc1MGMwUnZibVV1YUdGektHTnZibk4wY21GcGJuUXBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR052Ym5OMGNtRnBiblJ6VkhKcFpXUXVhR0Z6S0dOdmJuTjBjbUZwYm5RcEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxWlNUVTV2WkdWRGIyNXpkSEpoYVc1MFRXRnVZV2RsY2pvZ1EybHlZM1ZzWVhJZ1pHVndaVzVrWlc1amVTQmtaWFJsWTNSbFpDQjNhR2xzWlNCMWNHUmhkR2x1WnlCamIyNXpkSEpoYVc1MGN5Y3BPMXh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkSEpoYVc1MGMxUnlhV1ZrTG1Ga1pDaGpiMjV6ZEhKaGFXNTBLVHRjYmx4dUlDQWdJR052Ym5OMElHUmxjRTlpYW1WamRITWdQU0JqYjI1emRISmhhVzUwTG1SbGNHVnVaR1Z1WTJsbGN6dGNiaUFnSUNCbWIzSWdLR052Ym5OMElHUmxjRTlpYW1WamRDQnZaaUJrWlhCUFltcGxZM1J6S1NCN1hHNGdJQ0FnSUNCMGNtRjJaWEp6WlVGdVkyVnpkRzl5YzBaeWIyMVNiMjkwS0dSbGNFOWlhbVZqZEN3Z0tHUmxjRTlpYW1WamRFRnVZMlZ6ZEc5eUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzlpYW1WamRGTmxkQ0E5SUhSb2FYTXVYMjlpYW1WamRFTnZibk4wY21GcGJuUnpUV0Z3TG1kbGRDaGtaWEJQWW1wbFkzUkJibU5sYzNSdmNpazdYRzRnSUNBZ0lDQWdJR2xtSUNodlltcGxZM1JUWlhRcElIdGNiaUFnSUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUdSbGNFTnZibk4wY21GcGJuUWdiMllnYjJKcVpXTjBVMlYwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXdjbTlqWlhOelEyOXVjM1J5WVdsdWRDaGtaWEJEYjI1emRISmhhVzUwTENCamIyNXpkSEpoYVc1MGMxUnlhV1ZrTENCamIyNXpkSEpoYVc1MGMwUnZibVVzSUdOaGJHeGlZV05yS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR05oYkd4aVlXTnJLR052Ym5OMGNtRnBiblFwTzF4dVhHNGdJQ0FnWTI5dWMzUnlZV2x1ZEhORWIyNWxMbUZrWkNoamIyNXpkSEpoYVc1MEtUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJQ29nWVhNZ1ZFaFNSVVVnWm5KdmJTQW5kR2h5WldVbk8xeHVhVzF3YjNKMElIc2djWFZoZEVsdWRtVnlkRU52YlhCaGRDQjlJR1p5YjIwZ0p5NHZkWFJwYkhNdmNYVmhkRWx1ZG1WeWRFTnZiWEJoZENjN1hHNXBiWEJ2Y25RZ2V5QldVazFPYjJSbFEyOXVjM1J5WVdsdWRDQjlJR1p5YjIwZ0p5NHZWbEpOVG05a1pVTnZibk4wY21GcGJuUW5PMXh1WEc1amIyNXpkQ0JmY1hWaGRFRWdQU0J1WlhjZ1ZFaFNSVVV1VVhWaGRHVnlibWx2YmlncE8xeHVZMjl1YzNRZ1gzRjFZWFJDSUQwZ2JtVjNJRlJJVWtWRkxsRjFZWFJsY201cGIyNG9LVHRjYmx4dUx5b3FYRzRnS2lCQklHTnZibk4wY21GcGJuUWdkR2hoZENCMGNtRnVjMlpsY25NZ1lTQnliM1JoZEdsdmJpQmhjbTkxYm1RZ2IyNWxJR0Y0YVhNZ2IyWWdZU0J6YjNWeVkyVXVYRzRnS2x4dUlDb2dVMlZsT2lCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmRuSnRMV012ZG5KdExYTndaV05wWm1sallYUnBiMjR2ZEhKbFpTOXRZWE4wWlhJdmMzQmxZMmxtYVdOaGRHbHZiaTlXVWsxRFgyNXZaR1ZmWTI5dWMzUnlZV2x1ZEMweExqQmZZbVYwWVNOeWIyeHNMV052Ym5OMGNtRnBiblJjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZaU1RWSnZkR0YwYVc5dVEyOXVjM1J5WVdsdWRDQmxlSFJsYm1SeklGWlNUVTV2WkdWRGIyNXpkSEpoYVc1MElIdGNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pTQnlaWE4wSUhGMVlYUmxjbTVwYjI0Z2IyWWdkR2hsSUh0QWJHbHVheUJrWlhOMGFXNWhkR2x2Ym4wdVhHNGdJQ0FxTDF4dUlDQndjbWwyWVhSbElGOWtjM1JTWlhOMFVYVmhkRG9nVkVoU1JVVXVVWFZoZEdWeWJtbHZianRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUdsdWRtVnljMlVnYjJZZ2RHaGxJSEpsYzNRZ2NYVmhkR1Z5Ym1sdmJpQnZaaUIwYUdVZ2UwQnNhVzVySUhOdmRYSmpaWDB1WEc0Z0lDQXFMMXh1SUNCd2NtbDJZWFJsSUY5cGJuWlRjbU5TWlhOMFVYVmhkRG9nVkVoU1JVVXVVWFZoZEdWeWJtbHZianRjYmx4dUlDQndkV0pzYVdNZ1oyVjBJR1JsY0dWdVpHVnVZMmxsY3lncE9pQlRaWFE4VkVoU1JVVXVUMkpxWldOME0wUThWRWhTUlVVdVJYWmxiblErUGlCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCVFpYUW9XM1JvYVhNdWMyOTFjbU5sWFNrN1hHNGdJSDFjYmx4dUlDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9aR1Z6ZEdsdVlYUnBiMjQ2SUZSSVVrVkZMazlpYW1WamRETkVMQ0J6YjNWeVkyVTZJRlJJVWtWRkxrOWlhbVZqZERORUtTQjdYRzRnSUNBZ2MzVndaWElvWkdWemRHbHVZWFJwYjI0c0lITnZkWEpqWlNrN1hHNWNiaUFnSUNCMGFHbHpMbDlrYzNSU1pYTjBVWFZoZENBOUlHNWxkeUJVU0ZKRlJTNVJkV0YwWlhKdWFXOXVLQ2s3WEc0Z0lDQWdkR2hwY3k1ZmFXNTJVM0pqVW1WemRGRjFZWFFnUFNCdVpYY2dWRWhTUlVVdVVYVmhkR1Z5Ym1sdmJpZ3BPMXh1SUNCOVhHNWNiaUFnY0hWaWJHbGpJSE5sZEVsdWFYUlRkR0YwWlNncE9pQjJiMmxrSUh0Y2JpQWdJQ0IwYUdsekxsOWtjM1JTWlhOMFVYVmhkQzVqYjNCNUtIUm9hWE11WkdWemRHbHVZWFJwYjI0dWNYVmhkR1Z5Ym1sdmJpazdYRzRnSUNBZ2NYVmhkRWx1ZG1WeWRFTnZiWEJoZENoMGFHbHpMbDlwYm5aVGNtTlNaWE4wVVhWaGRDNWpiM0I1S0hSb2FYTXVjMjkxY21ObExuRjFZWFJsY201cGIyNHBLVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUIxY0dSaGRHVW9LVG9nZG05cFpDQjdYRzRnSUNBZ0x5OGdZMkZzWTNWc1lYUmxJSFJvWlNCa1pXeDBZU0J5YjNSaGRHbHZiaUJtY205dElIUm9aU0J5WlhOMElHRmliM1YwSUhSb1pTQnpiM1Z5WTJWY2JpQWdJQ0JqYjI1emRDQnpjbU5FWld4MFlWRjFZWFFnUFNCZmNYVmhkRUV1WTI5d2VTaDBhR2x6TGw5cGJuWlRjbU5TWlhOMFVYVmhkQ2t1YlhWc2RHbHdiSGtvZEdocGN5NXpiM1Z5WTJVdWNYVmhkR1Z5Ym1sdmJpazdYRzVjYmlBZ0lDQXZMeUJ0ZFd4MGFYQnNlU0IwYUdVZ1pHVnNkR0VnZEc4Z2RHaGxJSEpsYzNRZ2IyWWdkR2hsSUdSbGMzUnBibUYwYVc5dVhHNGdJQ0FnWTI5dWMzUWdkR0Z5WjJWMFVYVmhkQ0E5SUY5eGRXRjBRaTVqYjNCNUtIUm9hWE11WDJSemRGSmxjM1JSZFdGMEtTNXRkV3gwYVhCc2VTaHpjbU5FWld4MFlWRjFZWFFwTzF4dVhHNGdJQ0FnTHk4Z1lteGxibVFnZDJsMGFDQjBhR1VnY21WemRDQnhkV0YwWlhKdWFXOXVJSFZ6YVc1bklIZGxhV2RvZEZ4dUlDQWdJSFJvYVhNdVpHVnpkR2x1WVhScGIyNHVjWFZoZEdWeWJtbHZiaTVqYjNCNUtIUm9hWE11WDJSemRGSmxjM1JSZFdGMEtTNXpiR1Z5Y0NoMFlYSm5aWFJSZFdGMExDQjBhR2x6TG5kbGFXZG9kQ2s3WEc0Z0lIMWNibjFjYmlJc0ltbHRjRzl5ZENBcUlHRnpJRlJJVWtWRklHWnliMjBnSjNSb2NtVmxKenRjYm1sdGNHOXlkQ0I3SUhGMVlYUkpiblpsY25SRGIyMXdZWFFnZlNCbWNtOXRJQ2N1TDNWMGFXeHpMM0YxWVhSSmJuWmxjblJEYjIxd1lYUW5PMXh1YVcxd2IzSjBJSHNnVmxKTlRtOWtaVU52Ym5OMGNtRnBiblFnZlNCbWNtOXRJQ2N1TDFaU1RVNXZaR1ZEYjI1emRISmhhVzUwSnp0Y2JseHVZMjl1YzNRZ1gzWXpRU0E5SUc1bGR5QlVTRkpGUlM1V1pXTjBiM0l6S0NrN1hHNWpiMjV6ZENCZmNYVmhkRUVnUFNCdVpYY2dWRWhTUlVVdVVYVmhkR1Z5Ym1sdmJpZ3BPMXh1WTI5dWMzUWdYM0YxWVhSQ0lEMGdibVYzSUZSSVVrVkZMbEYxWVhSbGNtNXBiMjRvS1R0Y2JseHVMeW9xWEc0Z0tpQkJJR052Ym5OMGNtRnBiblFnZEdoaGRDQjBjbUZ1YzJabGNuTWdZU0J5YjNSaGRHbHZiaUJoY205MWJtUWdiMjVsSUdGNGFYTWdiMllnWVNCemIzVnlZMlV1WEc0Z0tseHVJQ29nVTJWbE9pQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZkbkp0TFdNdmRuSnRMWE53WldOcFptbGpZWFJwYjI0dmRISmxaUzl0WVhOMFpYSXZjM0JsWTJsbWFXTmhkR2x2Ymk5V1VrMURYMjV2WkdWZlkyOXVjM1J5WVdsdWRDMHhMakJmWW1WMFlTTnliMnhzTFdOdmJuTjBjbUZwYm5SY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGWlNUVkp2Ykd4RGIyNXpkSEpoYVc1MElHVjRkR1Z1WkhNZ1ZsSk5UbTlrWlVOdmJuTjBjbUZwYm5RZ2UxeHVJQ0F2S2lwY2JpQWdJQ29nVkdobElISnZiR3dnWVhocGN5QnZaaUIwYUdVZ1kyOXVjM1J5WVdsdWRDNWNiaUFnSUNvdlhHNGdJSEIxWW14cFl5Qm5aWFFnY205c2JFRjRhWE1vS1RvZ0oxZ25JSHdnSjFrbklId2dKMW9uSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtOXNiRUY0YVhNN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUhKdmJHd2dZWGhwY3lCdlppQjBhR1VnWTI5dWMzUnlZV2x1ZEM1Y2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCelpYUWdjbTlzYkVGNGFYTW9jbTlzYkVGNGFYTTZJQ2RZSnlCOElDZFpKeUI4SUNkYUp5a2dlMXh1SUNBZ0lIUm9hWE11WDNKdmJHeEJlR2x6SUQwZ2NtOXNiRUY0YVhNN1hHNGdJQ0FnZEdocGN5NWZkak5TYjJ4c1FYaHBjeTV6WlhRb2NtOXNiRUY0YVhNZ1BUMDlJQ2RZSnlBL0lERXVNQ0E2SURBdU1Dd2djbTlzYkVGNGFYTWdQVDA5SUNkWkp5QS9JREV1TUNBNklEQXVNQ3dnY205c2JFRjRhWE1nUFQwOUlDZGFKeUEvSURFdU1DQTZJREF1TUNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUhKdmJHd2dZWGhwY3lCdlppQjBhR1VnWTI5dWMzUnlZV2x1ZEM1Y2JpQWdJQ292WEc0Z0lIQnlhWFpoZEdVZ1gzSnZiR3hCZUdsek9pQW5XQ2NnZkNBbldTY2dmQ0FuV2ljN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pTQjdRR3hwYm1zZ1gzSnZiR3hCZUdsemZTQmlkWFFnYVc0Z1lXNGdZV04wZFdGc0lGWmxZM1J2Y2pNZ1ptOXliUzVjYmlBZ0lDb3ZYRzRnSUhCeWFYWmhkR1VnWDNZelVtOXNiRUY0YVhNNklGUklVa1ZGTGxabFkzUnZjak03WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJvWlNCeVpYTjBJSEYxWVhSbGNtNXBiMjRnYjJZZ2RHaGxJSHRBYkdsdWF5QmtaWE4wYVc1aGRHbHZibjB1WEc0Z0lDQXFMMXh1SUNCd2NtbDJZWFJsSUY5a2MzUlNaWE4wVVhWaGREb2dWRWhTUlVVdVVYVmhkR1Z5Ym1sdmJqdGNibHh1SUNBdktpcGNiaUFnSUNvZ1ZHaGxJR2x1ZG1WeWMyVWdiMllnZEdobElISmxjM1FnY1hWaGRHVnlibWx2YmlCdlppQjBhR1VnZTBCc2FXNXJJR1JsYzNScGJtRjBhVzl1ZlM1Y2JpQWdJQ292WEc0Z0lIQnlhWFpoZEdVZ1gybHVka1J6ZEZKbGMzUlJkV0YwT2lCVVNGSkZSUzVSZFdGMFpYSnVhVzl1TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJnYzNKalVtVnpkRkYxWVhRdWFXNTJaWEowS0NrZ0tpQmtjM1JTWlhOMFVYVmhkR0F1WEc0Z0lDQXFMMXh1SUNCd2NtbDJZWFJsSUY5cGJuWlRjbU5TWlhOMFVYVmhkRTExYkVSemRGSmxjM1JSZFdGME9pQlVTRkpGUlM1UmRXRjBaWEp1YVc5dU8xeHVYRzRnSUhCMVlteHBZeUJuWlhRZ1pHVndaVzVrWlc1amFXVnpLQ2s2SUZObGREeFVTRkpGUlM1UFltcGxZM1F6UkR4VVNGSkZSUzVGZG1WdWRENCtJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRk5sZENoYmRHaHBjeTV6YjNWeVkyVmRLVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJqYjI1emRISjFZM1J2Y2loa1pYTjBhVzVoZEdsdmJqb2dWRWhTUlVVdVQySnFaV04wTTBRc0lITnZkWEpqWlRvZ1ZFaFNSVVV1VDJKcVpXTjBNMFFwSUh0Y2JpQWdJQ0J6ZFhCbGNpaGtaWE4wYVc1aGRHbHZiaXdnYzI5MWNtTmxLVHRjYmx4dUlDQWdJSFJvYVhNdVgzSnZiR3hCZUdseklEMGdKMWduTzF4dUlDQWdJSFJvYVhNdVgzWXpVbTlzYkVGNGFYTWdQU0J1WlhjZ1ZFaFNSVVV1Vm1WamRHOXlNeWd4TENBd0xDQXdLVHRjYmx4dUlDQWdJSFJvYVhNdVgyUnpkRkpsYzNSUmRXRjBJRDBnYm1WM0lGUklVa1ZGTGxGMVlYUmxjbTVwYjI0b0tUdGNiaUFnSUNCMGFHbHpMbDlwYm5aRWMzUlNaWE4wVVhWaGRDQTlJRzVsZHlCVVNGSkZSUzVSZFdGMFpYSnVhVzl1S0NrN1hHNGdJQ0FnZEdocGN5NWZhVzUyVTNKalVtVnpkRkYxWVhSTmRXeEVjM1JTWlhOMFVYVmhkQ0E5SUc1bGR5QlVTRkpGUlM1UmRXRjBaWEp1YVc5dUtDazdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdjMlYwU1c1cGRGTjBZWFJsS0NrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdVgyUnpkRkpsYzNSUmRXRjBMbU52Y0hrb2RHaHBjeTVrWlhOMGFXNWhkR2x2Ymk1eGRXRjBaWEp1YVc5dUtUdGNiaUFnSUNCeGRXRjBTVzUyWlhKMFEyOXRjR0YwS0hSb2FYTXVYMmx1ZGtSemRGSmxjM1JSZFdGMExtTnZjSGtvZEdocGN5NWZaSE4wVW1WemRGRjFZWFFwS1R0Y2JpQWdJQ0J4ZFdGMFNXNTJaWEowUTI5dGNHRjBLSFJvYVhNdVgybHVkbE55WTFKbGMzUlJkV0YwVFhWc1JITjBVbVZ6ZEZGMVlYUXVZMjl3ZVNoMGFHbHpMbk52ZFhKalpTNXhkV0YwWlhKdWFXOXVLU2t1YlhWc2RHbHdiSGtvZEdocGN5NWZaSE4wVW1WemRGRjFZWFFwTzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUhWd1pHRjBaU2dwT2lCMmIybGtJSHRjYmlBZ0lDQXZMeUJqWVd4amRXeGhkR1VnZEdobElHUmxiSFJoSUhKdmRHRjBhVzl1SUdaeWIyMGdkR2hsSUhKbGMzUWdZV0p2ZFhRZ2RHaGxJSE52ZFhKalpTd2dkR2hsYmlCamIyNTJaWEowSUhSdklIUm9aU0JrWlhOMGFXNWhkR2x2YmlCc2IyTmhiQ0JqYjI5eVpGeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGZG9ZWFFnZEdobElIRjFZWFJFWld4MFlTQnBjeUJwYm5SbGJtUmxaQ0IwYnlCaVpUcGNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlHQmdZSFJ6WEc0Z0lDQWdJQ29nWTI5dWMzUWdjWFZoZEZOeVkwUmxiSFJoSUQwZ1gzRjFZWFJCWEc0Z0lDQWdJQ29nSUNBdVkyOXdlU2dnZEdocGN5NWZhVzUyVTNKalVtVnpkRkYxWVhRZ0tWeHVJQ0FnSUNBcUlDQWdMbTExYkhScGNHeDVLQ0IwYUdsekxuTnZkWEpqWlM1eGRXRjBaWEp1YVc5dUlDazdYRzRnSUNBZ0lDb2dZMjl1YzNRZ2NYVmhkRk55WTBSbGJIUmhTVzVRWVhKbGJuUWdQU0JmY1hWaGRFSmNiaUFnSUNBZ0tpQWdJQzVqYjNCNUtDQjBhR2x6TGw5emNtTlNaWE4wVVhWaGRDQXBYRzRnSUNBZ0lDb2dJQ0F1YlhWc2RHbHdiSGtvSUhGMVlYUlRjbU5FWld4MFlTQXBYRzRnSUNBZ0lDb2dJQ0F1YlhWc2RHbHdiSGtvSUhSb2FYTXVYMmx1ZGxOeVkxSmxjM1JSZFdGMElDazdYRzRnSUNBZ0lDb2dZMjl1YzNRZ2NYVmhkRk55WTBSbGJIUmhTVzVFYzNRZ1BTQmZjWFZoZEVGY2JpQWdJQ0FnS2lBZ0lDNWpiM0I1S0NCMGFHbHpMbDlwYm5aRWMzUlNaWE4wVVhWaGRDQXBYRzRnSUNBZ0lDb2dJQ0F1YlhWc2RHbHdiSGtvSUhGMVlYUlRjbU5FWld4MFlVbHVVR0Z5Wlc1MElDbGNiaUFnSUNBZ0tpQWdJQzV0ZFd4MGFYQnNlU2dnZEdocGN5NWZaSE4wVW1WemRGRjFZWFFnS1R0Y2JpQWdJQ0FnS2lCZ1lHQmNiaUFnSUNBZ0tpOWNiaUFnSUNCamIyNXpkQ0J4ZFdGMFJHVnNkR0VnUFNCZmNYVmhkRUZjYmlBZ0lDQWdJQzVqYjNCNUtIUm9hWE11WDJsdWRrUnpkRkpsYzNSUmRXRjBLVnh1SUNBZ0lDQWdMbTExYkhScGNHeDVLSFJvYVhNdWMyOTFjbU5sTG5GMVlYUmxjbTVwYjI0cFhHNGdJQ0FnSUNBdWJYVnNkR2x3Ykhrb2RHaHBjeTVmYVc1MlUzSmpVbVZ6ZEZGMVlYUk5kV3hFYzNSU1pYTjBVWFZoZENrN1hHNWNiaUFnSUNBdkx5QmpjbVZoZEdVZ1lTQm1jbTl0TFhSdklIRjFZWFJsY201cGIyNWNiaUFnSUNCamIyNXpkQ0J1TVNBOUlGOTJNMEV1WTI5d2VTaDBhR2x6TGw5Mk0xSnZiR3hCZUdsektTNWhjSEJzZVZGMVlYUmxjbTVwYjI0b2NYVmhkRVJsYkhSaEtUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRmRvWVhRZ2RHaGxJSEYxWVhSR2NtOXRWRzhnYVhNZ2FXNTBaVzVrWldRZ2RHOGdZbVU2WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJnWUdCMGMxeHVJQ0FnSUNBcUlHTnZibk4wSUhGMVlYUkdjbTl0Vkc4Z1BTQmZjWFZoZEVJdWMyVjBSbkp2YlZWdWFYUldaV04wYjNKektDQjBhR2x6TGw5Mk0xSnZiR3hCZUdsekxDQnVNU0FwTG1sdWRtVnljMlVvS1R0Y2JpQWdJQ0FnS2lCZ1lHQmNiaUFnSUNBZ0tpOWNiaUFnSUNCamIyNXpkQ0J4ZFdGMFJuSnZiVlJ2SUQwZ1gzRjFZWFJDTG5ObGRFWnliMjFWYm1sMFZtVmpkRzl5Y3lodU1Td2dkR2hwY3k1ZmRqTlNiMnhzUVhocGN5azdYRzVjYmlBZ0lDQXZMeUJ4ZFdGMFJuSnZiVlJ2SUNvZ2NYVmhkRVJsYkhSaElEMDlJSEp2Ykd3Z1pYaDBjbUZqZEdWa0lHWnliMjBnY1hWaGRFUmxiSFJoWEc0Z0lDQWdZMjl1YzNRZ2RHRnlaMlYwVVhWaGRDQTlJSEYxWVhSR2NtOXRWRzh1Y0hKbGJYVnNkR2x3Ykhrb2RHaHBjeTVmWkhOMFVtVnpkRkYxWVhRcExtMTFiSFJwY0d4NUtIRjFZWFJFWld4MFlTazdYRzVjYmlBZ0lDQXZMeUJpYkdWdVpDQjNhWFJvSUhSb1pTQnlaWE4wSUhGMVlYUmxjbTVwYjI0Z2RYTnBibWNnZDJWcFoyaDBYRzRnSUNBZ2RHaHBjeTVrWlhOMGFXNWhkR2x2Ymk1eGRXRjBaWEp1YVc5dUxtTnZjSGtvZEdocGN5NWZaSE4wVW1WemRGRjFZWFFwTG5Oc1pYSndLSFJoY21kbGRGRjFZWFFzSUhSb2FYTXVkMlZwWjJoMEtUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSFI1Y0dVZ0tpQmhjeUJEYjI1emRISmhhVzUwVTJOb1pXMWhJR1p5YjIwZ0owQndhWGhwZGk5MGVYQmxjeTEyY20xakxXNXZaR1V0WTI5dWMzUnlZV2x1ZEMweExqQW5PMXh1YVcxd2IzSjBJSFI1Y0dVZ0tpQmhjeUJVU0ZKRlJTQm1jbTl0SUNkMGFISmxaU2M3WEc1cGJYQnZjblFnZEhsd1pTQjdJRWRNVkVZc0lFZE1WRVpNYjJGa1pYSlFiSFZuYVc0c0lFZE1WRVpRWVhKelpYSWdmU0JtY205dElDZDBhSEpsWlM5bGVHRnRjR3hsY3k5cWMyMHZiRzloWkdWeWN5OUhURlJHVEc5aFpHVnlMbXB6Snp0Y2JtbHRjRzl5ZENCN0lGWlNUVTV2WkdWRGIyNXpkSEpoYVc1MFNHVnNjR1Z5SUgwZ1puSnZiU0FuTGk5b1pXeHdaWEp6Snp0Y2JtbHRjRzl5ZENCMGVYQmxJSHNnVmxKTlRtOWtaVU52Ym5OMGNtRnBiblJNYjJGa1pYSlFiSFZuYVc1UGNIUnBiMjV6SUgwZ1puSnZiU0FuTGk5V1VrMU9iMlJsUTI5dWMzUnlZV2x1ZEV4dllXUmxjbEJzZFdkcGJrOXdkR2x2Ym5Nbk8xeHVhVzF3YjNKMElIc2dWbEpOVG05a1pVTnZibk4wY21GcGJuUk5ZVzVoWjJWeUlIMGdabkp2YlNBbkxpOVdVazFPYjJSbFEyOXVjM1J5WVdsdWRFMWhibUZuWlhJbk8xeHVhVzF3YjNKMElIc2dWbEpOVW05MFlYUnBiMjVEYjI1emRISmhhVzUwSUgwZ1puSnZiU0FuTGk5V1VrMVNiM1JoZEdsdmJrTnZibk4wY21GcGJuUW5PMXh1YVcxd2IzSjBJSHNnUjB4VVJpQmhjeUJIVEZSR1UyTm9aVzFoSUgwZ1puSnZiU0FuUUdkc2RHWXRkSEpoYm5ObWIzSnRMMk52Y21Vbk8xeHVhVzF3YjNKMElIc2dWbEpOUVdsdFEyOXVjM1J5WVdsdWRDQjlJR1p5YjIwZ0p5NHZWbEpOUVdsdFEyOXVjM1J5WVdsdWRDYzdYRzVwYlhCdmNuUWdleUJXVWsxU2IyeHNRMjl1YzNSeVlXbHVkQ0I5SUdaeWIyMGdKeTR2VmxKTlVtOXNiRU52Ym5OMGNtRnBiblFuTzF4dVhHNHZLaXBjYmlBcUlGQnZjM05wWW14bElITndaV01nZG1WeWMybHZibk1nYVhRZ2NtVmpiMmR1YVhwbGN5NWNiaUFxTDF4dVkyOXVjM1FnVUU5VFUwbENURVZmVTFCRlExOVdSVkpUU1U5T1V5QTlJRzVsZHlCVFpYUW9XeWN4TGpBbkxDQW5NUzR3TFdKbGRHRW5YU2s3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJXVWsxT2IyUmxRMjl1YzNSeVlXbHVkRXh2WVdSbGNsQnNkV2RwYmlCcGJYQnNaVzFsYm5SeklFZE1WRVpNYjJGa1pYSlFiSFZuYVc0Z2UxeHVJQ0J3ZFdKc2FXTWdjM1JoZEdsaklISmxZV1J2Ym14NUlFVllWRVZPVTBsUFRsOU9RVTFGSUQwZ0oxWlNUVU5mYm05a1pWOWpiMjV6ZEhKaGFXNTBKenRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVM0JsWTJsbWVTQmhiaUJQWW1wbFkzUXpSQ0IwYnlCaFpHUWdlMEJzYVc1cklGWlNUVTV2WkdWRGIyNXpkSEpoYVc1MFNHVnNjR1Z5ZlNCekxseHVJQ0FnS2lCSlppQnViM1FnYzNCbFkybG1hV1ZrTENCb1pXeHdaWElnZDJsc2JDQnViM1FnWW1VZ1kzSmxZWFJsWkM1Y2JpQWdJQ29nU1dZZ1lISmxibVJsY2s5eVpHVnlZQ0JwY3lCelpYUWdkRzhnZEdobElISnZiM1FzSUdobGJIQmxjbk1nZDJsc2JDQmpiM0I1SUhSb1pTQnpZVzFsSUdCeVpXNWtaWEpQY21SbGNtQWdMbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJR2hsYkhCbGNsSnZiM1EvT2lCVVNGSkZSUzVQWW1wbFkzUXpSRHRjYmx4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2NHRnljMlZ5T2lCSFRGUkdVR0Z5YzJWeU8xeHVYRzRnSUhCMVlteHBZeUJuWlhRZ2JtRnRaU2dwT2lCemRISnBibWNnZTF4dUlDQWdJSEpsZEhWeWJpQldVazFPYjJSbFEyOXVjM1J5WVdsdWRFeHZZV1JsY2xCc2RXZHBiaTVGV0ZSRlRsTkpUMDVmVGtGTlJUdGNiaUFnZlZ4dVhHNGdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWh3WVhKelpYSTZJRWRNVkVaUVlYSnpaWElzSUc5d2RHbHZibk0vT2lCV1VrMU9iMlJsUTI5dWMzUnlZV2x1ZEV4dllXUmxjbEJzZFdkcGJrOXdkR2x2Ym5NcElIdGNiaUFnSUNCMGFHbHpMbkJoY25ObGNpQTlJSEJoY25ObGNqdGNibHh1SUNBZ0lIUm9hWE11YUdWc2NHVnlVbTl2ZENBOUlHOXdkR2x2Ym5NL0xtaGxiSEJsY2xKdmIzUTdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdZWE41Ym1NZ1lXWjBaWEpTYjI5MEtHZHNkR1k2SUVkTVZFWXBPaUJRY205dGFYTmxQSFp2YVdRK0lIdGNiaUFnSUNCbmJIUm1MblZ6WlhKRVlYUmhMblp5YlU1dlpHVkRiMjV6ZEhKaGFXNTBUV0Z1WVdkbGNpQTlJR0YzWVdsMElIUm9hWE11WDJsdGNHOXlkQ2huYkhSbUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJKYlhCdmNuUWdZMjl1YzNSeVlXbHVkSE1nWm5KdmJTQmhJRWRNVkVZZ1lXNWtJSEpsZEhWeWJuTWdZU0I3UUd4cGJtc2dWbEpOVG05a1pVTnZibk4wY21GcGJuUk5ZVzVoWjJWeWZTNWNiaUFnSUNvZ1NYUWdiV2xuYUhRZ2NtVjBkWEp1SUdCdWRXeHNZQ0JwYm5OMFpXRmtJSGRvWlc0Z2FYUWdaRzlsY3lCdWIzUWdibVZsWkNCMGJ5QmlaU0JqY21WaGRHVmtJRzl5SUhOdmJXVjBhR2x1WnlCbmJ5QjNjbTl1Wnk1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElHZHNkR1lnUVNCd1lYSnpaV1FnY21WemRXeDBJRzltSUVkTVZFWWdkR0ZyWlc0Z1puSnZiU0JIVEZSR1RHOWhaR1Z5WEc0Z0lDQXFMMXh1SUNCd2NtOTBaV04wWldRZ1lYTjVibU1nWDJsdGNHOXlkQ2huYkhSbU9pQkhURlJHS1RvZ1VISnZiV2x6WlR4V1VrMU9iMlJsUTI5dWMzUnlZV2x1ZEUxaGJtRm5aWElnZkNCdWRXeHNQaUI3WEc0Z0lDQWdZMjl1YzNRZ2FuTnZiaUE5SUhSb2FYTXVjR0Z5YzJWeUxtcHpiMjRnWVhNZ1IweFVSbE5qYUdWdFlTNUpSMHhVUmp0Y2JseHVJQ0FnSUM4dklHVmhjbXg1SUdGaWIzSjBJR2xtSUdsMElHUnZaWE51SjNRZ2RYTmxJR052Ym5OMGNtRnBiblJ6WEc0Z0lDQWdZMjl1YzNRZ2FYTkRiMjV6ZEhKaGFXNTBjMVZ6WldRZ1BTQnFjMjl1TG1WNGRHVnVjMmx2Ym5OVmMyVmtQeTVwYm1SbGVFOW1LRlpTVFU1dlpHVkRiMjV6ZEhKaGFXNTBURzloWkdWeVVHeDFaMmx1TGtWWVZFVk9VMGxQVGw5T1FVMUZLU0FoUFQwZ0xURTdYRzRnSUNBZ2FXWWdLQ0ZwYzBOdmJuTjBjbUZwYm5SelZYTmxaQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdiV0Z1WVdkbGNpQTlJRzVsZHlCV1VrMU9iMlJsUTI5dWMzUnlZV2x1ZEUxaGJtRm5aWElvS1R0Y2JpQWdJQ0JqYjI1emRDQjBhSEpsWlU1dlpHVnpPaUJVU0ZKRlJTNVBZbXBsWTNRelJGdGRJRDBnWVhkaGFYUWdkR2hwY3k1d1lYSnpaWEl1WjJWMFJHVndaVzVrWlc1amFXVnpLQ2R1YjJSbEp5azdYRzVjYmlBZ0lDQXZMeUJwYlhCdmNuUWdZMjl1YzNSeVlXbHVkSE1nWm05eUlHVmhZMmdnYm05a1pYTmNiaUFnSUNCMGFISmxaVTV2WkdWekxtWnZja1ZoWTJnb0tHNXZaR1VzSUc1dlpHVkpibVJsZUNrZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzNRZ2MyTm9aVzFoVG05a1pTQTlJR3B6YjI0dWJtOWtaWE1oVzI1dlpHVkpibVJsZUYwN1hHNWNiaUFnSUNBZ0lDOHZJR05vWldOcklHbG1JSFJvWlNCbGVIUmxibk5wYjI0Z2RYTmxjeUIwYUdVZ1pYaDBaVzV6YVc5dVhHNGdJQ0FnSUNCamIyNXpkQ0JsZUhSbGJuTnBiMjRnUFNCelkyaGxiV0ZPYjJSbFB5NWxlSFJsYm5OcGIyNXpQeTViVmxKTlRtOWtaVU52Ym5OMGNtRnBiblJNYjJGa1pYSlFiSFZuYVc0dVJWaFVSVTVUU1U5T1gwNUJUVVZkSUdGelhHNGdJQ0FnSUNBZ0lId2dRMjl1YzNSeVlXbHVkRk5qYUdWdFlTNVdVazFEVG05a1pVTnZibk4wY21GcGJuUmNiaUFnSUNBZ0lDQWdmQ0IxYm1SbFptbHVaV1E3WEc1Y2JpQWdJQ0FnSUdsbUlDaGxlSFJsYm5OcGIyNGdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR052Ym5OMElITndaV05XWlhKemFXOXVJRDBnWlhoMFpXNXphVzl1TG5Od1pXTldaWEp6YVc5dU8xeHVJQ0FnSUNBZ2FXWWdLQ0ZRVDFOVFNVSk1SVjlUVUVWRFgxWkZVbE5KVDA1VExtaGhjeWh6Y0dWalZtVnljMmx2YmlrcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0Z4dUlDQWdJQ0FnSUNBZ0lHQldVazFPYjJSbFEyOXVjM1J5WVdsdWRFeHZZV1JsY2xCc2RXZHBiam9nVlc1cmJtOTNiaUFrZTFaU1RVNXZaR1ZEYjI1emRISmhhVzUwVEc5aFpHVnlVR3gxWjJsdUxrVllWRVZPVTBsUFRsOU9RVTFGZlNCemNHVmpWbVZ5YzJsdmJpQmNJaVI3YzNCbFkxWmxjbk5wYjI1OVhDSmdMRnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdOdmJuTjBJR052Ym5OMGNtRnBiblJFWldZZ1BTQmxlSFJsYm5OcGIyNHVZMjl1YzNSeVlXbHVkRHRjYmx4dUlDQWdJQ0FnTHk4Z2FXMXdiM0owSUdOdmJuTjBjbUZwYm5SelhHNGdJQ0FnSUNCcFppQW9ZMjl1YzNSeVlXbHVkRVJsWmk1eWIyeHNJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZMjl1YzNSeVlXbHVkQ0E5SUhSb2FYTXVYMmx0Y0c5eWRGSnZiR3hEYjI1emRISmhhVzUwS0c1dlpHVXNJSFJvY21WbFRtOWtaWE1zSUdOdmJuTjBjbUZwYm5SRVpXWXVjbTlzYkNrN1hHNGdJQ0FnSUNBZ0lHMWhibUZuWlhJdVlXUmtRMjl1YzNSeVlXbHVkQ2hqYjI1emRISmhhVzUwS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1kyOXVjM1J5WVdsdWRFUmxaaTVoYVcwZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamIyNXpkSEpoYVc1MElEMGdkR2hwY3k1ZmFXMXdiM0owUVdsdFEyOXVjM1J5WVdsdWRDaHViMlJsTENCMGFISmxaVTV2WkdWekxDQmpiMjV6ZEhKaGFXNTBSR1ZtTG1GcGJTazdYRzRnSUNBZ0lDQWdJRzFoYm1GblpYSXVZV1JrUTI5dWMzUnlZV2x1ZENoamIyNXpkSEpoYVc1MEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9ZMjl1YzNSeVlXbHVkRVJsWmk1eWIzUmhkR2x2YmlBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdOdmJuTjBjbUZwYm5RZ1BTQjBhR2x6TGw5cGJYQnZjblJTYjNSaGRHbHZia052Ym5OMGNtRnBiblFvYm05a1pTd2dkR2h5WldWT2IyUmxjeXdnWTI5dWMzUnlZV2x1ZEVSbFppNXliM1JoZEdsdmJpazdYRzRnSUNBZ0lDQWdJRzFoYm1GblpYSXVZV1JrUTI5dWMzUnlZV2x1ZENoamIyNXpkSEpoYVc1MEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNibHh1SUNBZ0lDOHZJR2x1YVhRZ1kyOXVjM1J5WVdsdWRITmNiaUFnSUNCbmJIUm1Mbk5qWlc1bExuVndaR0YwWlUxaGRISnBlRmR2Y214a0tDazdYRzRnSUNBZ2JXRnVZV2RsY2k1elpYUkpibWwwVTNSaGRHVW9LVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnRZVzVoWjJWeU8xeHVJQ0I5WEc1Y2JpQWdjSEp2ZEdWamRHVmtJRjlwYlhCdmNuUlNiMnhzUTI5dWMzUnlZV2x1ZENoY2JpQWdJQ0JrWlhOMGFXNWhkR2x2YmpvZ1ZFaFNSVVV1VDJKcVpXTjBNMFFzWEc0Z0lDQWdibTlrWlhNNklGUklVa1ZGTGs5aWFtVmpkRE5FVzEwc1hHNGdJQ0FnY205c2JFTnZibk4wY21GcGJuUkVaV1k2SUVOdmJuTjBjbUZwYm5SVFkyaGxiV0V1VW05c2JFTnZibk4wY21GcGJuUXNYRzRnSUNrNklGWlNUVkp2Ykd4RGIyNXpkSEpoYVc1MElIdGNiaUFnSUNCamIyNXpkQ0I3SUhOdmRYSmpaVG9nYzI5MWNtTmxTVzVrWlhnc0lISnZiR3hCZUdsekxDQjNaV2xuYUhRZ2ZTQTlJSEp2Ykd4RGIyNXpkSEpoYVc1MFJHVm1PMXh1SUNBZ0lHTnZibk4wSUhOdmRYSmpaU0E5SUc1dlpHVnpXM052ZFhKalpVbHVaR1Y0WFR0Y2JpQWdJQ0JqYjI1emRDQmpiMjV6ZEhKaGFXNTBJRDBnYm1WM0lGWlNUVkp2Ykd4RGIyNXpkSEpoYVc1MEtHUmxjM1JwYm1GMGFXOXVMQ0J6YjNWeVkyVXBPMXh1WEc0Z0lDQWdhV1lnS0hKdmJHeEJlR2x6SUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBjbUZwYm5RdWNtOXNiRUY0YVhNZ1BTQnliMnhzUVhocGN6dGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIZGxhV2RvZENBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCamIyNXpkSEpoYVc1MExuZGxhV2RvZENBOUlIZGxhV2RvZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVvWld4d1pYSlNiMjkwS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0JvWld4d1pYSWdQU0J1WlhjZ1ZsSk5UbTlrWlVOdmJuTjBjbUZwYm5SSVpXeHdaWElvWTI5dWMzUnlZV2x1ZENrN1hHNGdJQ0FnSUNCMGFHbHpMbWhsYkhCbGNsSnZiM1F1WVdSa0tHaGxiSEJsY2lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJR052Ym5OMGNtRnBiblE3WEc0Z0lIMWNibHh1SUNCd2NtOTBaV04wWldRZ1gybHRjRzl5ZEVGcGJVTnZibk4wY21GcGJuUW9YRzRnSUNBZ1pHVnpkR2x1WVhScGIyNDZJRlJJVWtWRkxrOWlhbVZqZERORUxGeHVJQ0FnSUc1dlpHVnpPaUJVU0ZKRlJTNVBZbXBsWTNRelJGdGRMRnh1SUNBZ0lHRnBiVU52Ym5OMGNtRnBiblJFWldZNklFTnZibk4wY21GcGJuUlRZMmhsYldFdVFXbHRRMjl1YzNSeVlXbHVkQ3hjYmlBZ0tUb2dWbEpOUVdsdFEyOXVjM1J5WVdsdWRDQjdYRzRnSUNBZ1kyOXVjM1FnZXlCemIzVnlZMlU2SUhOdmRYSmpaVWx1WkdWNExDQmhhVzFCZUdsekxDQjNaV2xuYUhRZ2ZTQTlJR0ZwYlVOdmJuTjBjbUZwYm5SRVpXWTdYRzRnSUNBZ1kyOXVjM1FnYzI5MWNtTmxJRDBnYm05a1pYTmJjMjkxY21ObFNXNWtaWGhkTzF4dUlDQWdJR052Ym5OMElHTnZibk4wY21GcGJuUWdQU0J1WlhjZ1ZsSk5RV2x0UTI5dWMzUnlZV2x1ZENoa1pYTjBhVzVoZEdsdmJpd2djMjkxY21ObEtUdGNibHh1SUNBZ0lHbG1JQ2hoYVcxQmVHbHpJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR052Ym5OMGNtRnBiblF1WVdsdFFYaHBjeUE5SUdGcGJVRjRhWE03WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gzWldsbmFIUWdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdZMjl1YzNSeVlXbHVkQzUzWldsbmFIUWdQU0IzWldsbmFIUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdWFHVnNjR1Z5VW05dmRDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2FHVnNjR1Z5SUQwZ2JtVjNJRlpTVFU1dlpHVkRiMjV6ZEhKaGFXNTBTR1ZzY0dWeUtHTnZibk4wY21GcGJuUXBPMXh1SUNBZ0lDQWdkR2hwY3k1b1pXeHdaWEpTYjI5MExtRmtaQ2hvWld4d1pYSXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCamIyNXpkSEpoYVc1ME8xeHVJQ0I5WEc1Y2JpQWdjSEp2ZEdWamRHVmtJRjlwYlhCdmNuUlNiM1JoZEdsdmJrTnZibk4wY21GcGJuUW9YRzRnSUNBZ1pHVnpkR2x1WVhScGIyNDZJRlJJVWtWRkxrOWlhbVZqZERORUxGeHVJQ0FnSUc1dlpHVnpPaUJVU0ZKRlJTNVBZbXBsWTNRelJGdGRMRnh1SUNBZ0lISnZkR0YwYVc5dVEyOXVjM1J5WVdsdWRFUmxaam9nUTI5dWMzUnlZV2x1ZEZOamFHVnRZUzVTYjNSaGRHbHZia052Ym5OMGNtRnBiblFzWEc0Z0lDazZJRlpTVFZKdmRHRjBhVzl1UTI5dWMzUnlZV2x1ZENCN1hHNGdJQ0FnWTI5dWMzUWdleUJ6YjNWeVkyVTZJSE52ZFhKalpVbHVaR1Y0TENCM1pXbG5hSFFnZlNBOUlISnZkR0YwYVc5dVEyOXVjM1J5WVdsdWRFUmxaanRjYmlBZ0lDQmpiMjV6ZENCemIzVnlZMlVnUFNCdWIyUmxjMXR6YjNWeVkyVkpibVJsZUYwN1hHNGdJQ0FnWTI5dWMzUWdZMjl1YzNSeVlXbHVkQ0E5SUc1bGR5QldVazFTYjNSaGRHbHZia052Ym5OMGNtRnBiblFvWkdWemRHbHVZWFJwYjI0c0lITnZkWEpqWlNrN1hHNWNiaUFnSUNCcFppQW9kMlZwWjJoMElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lHTnZibk4wY21GcGJuUXVkMlZwWjJoMElEMGdkMlZwWjJoME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaDBhR2x6TG1obGJIQmxjbEp2YjNRcElIdGNiaUFnSUNBZ0lHTnZibk4wSUdobGJIQmxjaUE5SUc1bGR5QldVazFPYjJSbFEyOXVjM1J5WVdsdWRFaGxiSEJsY2loamIyNXpkSEpoYVc1MEtUdGNiaUFnSUNBZ0lIUm9hWE11YUdWc2NHVnlVbTl2ZEM1aFpHUW9hR1ZzY0dWeUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWTI5dWMzUnlZV2x1ZER0Y2JpQWdmVnh1ZlZ4dUlsMHNJbTVoYldWeklqcGJJbDkyTTBFaUxDSmZkak5DSWl3aVgzRjFZWFJCSWl3aVgzRjFZWFJDSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPMEZCUjBFc1RVRkJUVUVzVFVGQlNTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8wRkJSWEJDTEUxQlFVRXNkVUpCUVhkQ0xGTkJRVkVzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUVR0QlFVdDBSQ3hKUVVGQkxGZEJRVUVzUTBGQmJVSXNWVUZCTmtJc1JVRkJRVHRCUVVNNVF5eFJRVUZCTEV0QlFVc3NSVUZCUlN4RFFVRkRPMEZCUlZJc1VVRkJRU3hKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU40Uml4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dEJRVVZ3UkN4UlFVRkJMRTFCUVUwc1VVRkJVU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkRPMUZCUXpWRExGRkJRVkVzUTBGQlF5eFpRVUZaTEVOQlFVTXNWVUZCVlN4RlFVRkZMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6dEJRVVYwUkN4UlFVRkJMRTFCUVUwc1VVRkJVU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEdsQ1FVRnBRaXhEUVVGRE8wRkJRek5ETEZsQlFVRXNTMEZCU3l4RlFVRkZMRkZCUVZFN1FVRkRaaXhaUVVGQkxGTkJRVk1zUlVGQlJTeExRVUZMTzBGQlEyaENMRmxCUVVFc1ZVRkJWU3hGUVVGRkxFdEJRVXM3UVVGRGJFSXNVMEZCUVN4RFFVRkRMRU5CUVVNN1FVRkZTQ3hSUVVGQkxFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0QlFVTm9SQ3hSUVVGQkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJSWEpDTEZGQlFVRXNTVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhWUVVGVkxFTkJRVU03UzBGRE9VSTdRVUZGVFN4SlFVRkJMR2xDUVVGcFFpeERRVUZETEV0QlFXVXNSVUZCUVR0UlFVTjBRMEVzVFVGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNWMEZCVnl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8wRkJRM0JGTEZGQlFVRXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZGUVN4TlFVRkpMRU5CUVVNc1EwRkJReXhGUVVGRlFTeE5RVUZKTEVOQlFVTXNRMEZCUXl4RlFVRkZRU3hOUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZGY2tRc1VVRkJRU3hKUVVGSkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNUVUZCVFN4RlFVRkZPMWxCUXpGQ1FTeE5RVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03UVVGRGFFVXNVMEZCUVR0QlFVTkVMRkZCUVVFc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RlFVRkZRU3hOUVVGSkxFTkJRVU1zUTBGQlF5eEZRVUZGUVN4TlFVRkpMRU5CUVVNc1EwRkJReXhGUVVGRlFTeE5RVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkZja1FzVVVGQlFTeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRmRFTXNVVUZCUVN4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1MwRkRhRU03UVVGRFJqczdRVU14UTJVc1UwRkJRU3hwUWtGQmFVSXNRMEZCTUVJc1RVRkJjVUlzUlVGQlJTeE5RVUZUTEVWQlFVRTdTVUZEZWtZc1QwRkJUeXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRia1k3TzBGRFJrRXNUVUZCVFVFc1RVRkJTU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMEZCUTJwRExFMUJRVTFETEUxQlFVa3NSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dEJRVVZxUWl4VFFVRkJMR2xDUVVGcFFpeERRVUUyUWl4TlFVRnhRaXhGUVVGRkxFMUJRVk1zUlVGQlFUdEpRVU0xUml4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRFJDeE5RVUZKTEVWQlFVVXNUVUZCVFN4RlFVRkZReXhOUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU55UXl4SlFVRkJMRTlCUVU4c1RVRkJUU3hEUVVGRE8wRkJRMmhDT3p0QlEwNUJPenM3T3p0QlFVdEhPMEZCUTBjc1UwRkJWU3huUWtGQlowSXNRMEZCTmtJc1RVRkJVeXhGUVVGQk8wbEJRM0JGTEVsQlFVc3NUVUZCWXl4RFFVRkRMRTFCUVUwc1JVRkJSVHRSUVVNeFFpeE5RVUZOTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN1FVRkRha0lzUzBGQlFUdEJRVUZOTEZOQlFVRTdVVUZEU2l4TlFVRmpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRE0wSXNTMEZCUVR0QlFVVkVMRWxCUVVFc1QwRkJUeXhOUVVGTkxFTkJRVU03UVVGRGFFSTdPMEZEWkVFN08wRkJSVWM3VFVGRGJVSXNhVUpCUVdsQ0xFTkJRVUU3UVVGclFuSkRPenM3UVVGSFJ6dEpRVU5JTEZkQlFXMUNMRU5CUVVFc1YwRkJNa0lzUlVGQlJTeE5RVUZ6UWl4RlFVRkJPMEZCUTNCRkxGRkJRVUVzU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4WFFVRlhMRU5CUVVNN1FVRkRMMElzVVVGQlFTeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJRenRCUVVWeVFpeFJRVUZCTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1IwRkJSeXhEUVVGRE8wdEJRMjVDTzBGQlYwWTdPMEZEY2tORUxFMUJRVTFFTEUxQlFVa3NSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dEJRVU5xUXl4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0QlFVTnFReXhOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRCUVVOcVF5eE5RVUZOUlN4UlFVRk5MRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTTdRVUZEZEVNc1RVRkJUVU1zVVVGQlRTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8wRkJRM1JETEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETzBGQlJYUkRPenM3TzBGQlNVYzdRVUZEUnl4TlFVRlBMR2RDUVVGcFFpeFRRVUZSTEdsQ1FVRnBRaXhEUVVGQk8wRkJRM0pFT3p0QlFVVkhPMEZCUTBnc1NVRkJRU3hKUVVGWExFOUJRVThzUjBGQlFUdFJRVU5vUWl4UFFVRlBMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU03UzBGRGRFSTdRVUZGUkRzN1FVRkZSenRKUVVOSUxFbEJRVmNzVDBGQlR5eERRVUZETEU5QlFUQkdMRVZCUVVFN1FVRkRNMGNzVVVGQlFTeEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRTlCUVU4c1EwRkJRenRCUVVONFFpeFJRVUZCTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1IwRkJSeXhEUVVOcVFpeFBRVUZQTEV0QlFVc3NWMEZCVnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhQUVVGUExFdEJRVXNzVjBGQlZ5eEhRVUZITEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjc1JVRkRjRVVzVDBGQlR5eExRVUZMTEZkQlFWY3NSMEZCUnl4SFFVRkhMRWRCUVVjc1QwRkJUeXhMUVVGTExGZEJRVmNzUjBGQlJ5eERRVUZETEVkQlFVY3NSMEZCUnl4SFFVRkhMRVZCUTNCRkxFOUJRVThzUzBGQlN5eFhRVUZYTEVkQlFVY3NSMEZCUnl4SFFVRkhMRTlCUVU4c1MwRkJTeXhYUVVGWExFZEJRVWNzUTBGQlF5eEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVTnlSU3hEUVVGRE8wdEJRMGc3UVVGcFFrUXNTVUZCUVN4SlFVRlhMRmxCUVZrc1IwRkJRVHRSUVVOeVFpeE5RVUZOTEVkQlFVY3NSMEZCUnl4SlFVRkpMRWRCUVVjc1EwRkJhVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVWdVJDeFJRVUZCTEVsQlFVa3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhOUVVGTkxFVkJRVVU3V1VGRE0wSXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUTJ4RExGTkJRVUU3UVVGRlJDeFJRVUZCTEU5QlFVOHNSMEZCUnl4RFFVRkRPMHRCUTFvN1NVRkZSQ3hYUVVGdFFpeERRVUZCTEZkQlFUSkNMRVZCUVVVc1RVRkJjMElzUlVGQlFUdEJRVU53UlN4UlFVRkJMRXRCUVVzc1EwRkJReXhYUVVGWExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdRVUZGTTBJc1VVRkJRU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEZkQlFWY3NRMEZCUXp0QlFVTTFRaXhSUVVGQkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZOME1zU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF6dExRVU0xUXp0SlFVVk5MRmxCUVZrc1IwRkJRVHRSUVVOcVFpeEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMHRCUTNKRU8wbEJSVTBzVFVGQlRTeEhRVUZCT3p0UlFVVllMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzFGQlEyaEVMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZET3p0QlFVY3pReXhSUVVGQkxFMUJRVTBzYTBKQlFXdENMRWRCUVVkRUxGRkJRVTBzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0QlFVTTNReXhSUVVGQkxFMUJRVTBzY1VKQlFYRkNMRWRCUVVkRExGRkJRVTBzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0QlFVTm9SQ3hSUVVGQkxFbEJRVWtzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRk5MRVZCUVVVN1dVRkRNMElzYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RlFVRkZMR3RDUVVGclFpeERRVUZETEVOQlFVTTdXVUZETTBVc1owSkJRV2RDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5zUlN4VFFVRkJPenRSUVVkRUxFMUJRVTBzUlVGQlJTeEhRVUZIU0N4TlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEdWQlFXVXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETzFGQlF6ZEhMRTFCUVUwc1JVRkJSU3hIUVVGSExHbENRVUZwUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVsQlFVa3NRMEZCUXp0aFFVTjRSQ3hIUVVGSExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFhRVUZYTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRNVVFzWVVGQlFTeFRRVUZUTEVWQlFVVXNRMEZCUXpzN1VVRkhaaXhOUVVGTkxGVkJRVlVzUjBGQlJ5eE5RVUZOTzBGQlEzUkNMR0ZCUVVFc2EwSkJRV3RDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRVZCUVVVc1EwRkJRenRoUVVNeFFpeFhRVUZYTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU03WVVGRGJFTXNVVUZCVVN4RFFVRkRMR3RDUVVGclFpeERRVUZETzBGQlF6VkNMR0ZCUVVFc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXpzN1VVRkhMMElzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0TFFVTndSanRCUVVOR096dEJRM3BIUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJiMGRCTzBGQlEwOHNVMEZCVXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVlVzUlVGQlJTeERRVUZETEVWQlFVVXNVMEZCVXl4RlFVRkZPMEZCUXpkRUxFbEJRVWtzVTBGQlV5eExRVUZMTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1QwRkJUeXhMUVVGTExGbEJRVmtzUTBGQlF5eEhRVUZITEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhWUVVGVkxFOUJRVThzUlVGQlJTeEZRVUZGTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTzBGQlEyaElMRWxCUVVrc1QwRkJUeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NUMEZCVHl4RFFVRkRMRVZCUVVVc1ZVRkJWU3hQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTzBGQlF5OUVMRkZCUVZFc1UwRkJVeXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU51Unl4UlFVRlJMRk5CUVZNc1VVRkJVU3hEUVVGRExFdEJRVXNzUlVGQlJTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU4wUnl4UlFVRlJMRk5CUVZNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEUxQlFVMHNRMEZCUXl4SlFVRkpMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU1zUlVGQlJUdEJRVU4wU0N4UlFVRlJMRWxCUVVrc1EwRkJReXhEUVVGRExGTkJRVk1zUjBGQlJ5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSU3hWUVVGVkxFbEJRVWtzUlVGQlJTeERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVNNVJTeExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTlFPenRCUTNoSVFUczdPenM3TzBGQlRVYzdRVUZEWVN4VFFVRkJMSGxDUVVGNVFpeERRVUZETEUxQlFYTkNMRVZCUVVVc1VVRkJNRU1zUlVGQlFUdEJRVU14Unl4SlFVRkJMRTFCUVUwc1UwRkJVeXhIUVVGeFFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUlRkRExFbEJRVUVzU1VGQlNTeEpRVUZKTEVkQlFUQkNMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU03U1VGRGFFUXNUMEZCVHl4SlFVRkpMRXRCUVVzc1NVRkJTU3hGUVVGRk8wRkJRM0JDTEZGQlFVRXNVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU40UWl4UlFVRkJMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETzBGQlEzQkNMRXRCUVVFN1FVRkZSQ3hKUVVGQkxGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4UlFVRlJMRXRCUVVrN1VVRkROMElzVVVGQlVTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUTNKQ0xFdEJRVU1zUTBGQlF5eERRVUZETzBGQlEwdzdPMDFEYWtKaExIZENRVUYzUWl4RFFVRkJPMEZCUVhKRExFbEJRVUVzVjBGQlFTeEhRVUZCTzBGQlExVXNVVUZCUVN4SlFVRkJMRU5CUVVFc1dVRkJXU3hIUVVGSExFbEJRVWtzUjBGQlJ5eEZRVUZ4UWl4RFFVRkRPMEZCU3pWRExGRkJRVUVzU1VGQlFTeERRVUZCTEhGQ1FVRnhRaXhIUVVGSExFbEJRVWtzUjBGQlJ5eEZRVUV3UXl4RFFVRkRPMHRCWjBadVJqdEJRWEJHUXl4SlFVRkJMRWxCUVZjc1YwRkJWeXhIUVVGQk8xRkJRM0JDTEU5QlFVOHNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJRenRMUVVNeFFqdEJRVWxOTEVsQlFVRXNZVUZCWVN4RFFVRkRMRlZCUVRaQ0xFVkJRVUU3UVVGRGFFUXNVVUZCUVN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0QlFVVnNReXhSUVVGQkxFbEJRVWtzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVlN4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8xRkJRM1pGTEVsQlFVa3NVMEZCVXl4SlFVRkpMRWxCUVVrc1JVRkJSVHRCUVVOeVFpeFpRVUZCTEZOQlFWTXNSMEZCUnl4SlFVRkpMRWRCUVVjc1JVRkJjVUlzUTBGQlF6dFpRVU42UXl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVZVc1EwRkJReXhYUVVGWExFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdRVUZEYmtVc1UwRkJRVHRCUVVORUxGRkJRVUVzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRMUVVNelFqdEJRVVZOTEVsQlFVRXNaMEpCUVdkQ0xFTkJRVU1zVlVGQk5rSXNSVUZCUVR0QlFVTnVSQ3hSUVVGQkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wRkJSWEpETEZGQlFVRXNUVUZCVFN4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFTkJRVU1zVjBGQlZ5eERRVUZGTEVOQlFVTTdRVUZETVVVc1VVRkJRU3hUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMHRCUXpsQ08wbEJSVTBzV1VGQldTeEhRVUZCTzBGQlEycENMRkZCUVVFc1RVRkJUU3huUWtGQlowSXNSMEZCUnl4SlFVRkpMRWRCUVVjc1JVRkJjVUlzUTBGQlF6dEJRVU4wUkN4UlFVRkJMRTFCUVUwc1pVRkJaU3hIUVVGSExFbEJRVWtzUjBGQlJ5eEZRVUZ4UWl4RFFVRkRPMEZCUlhKRUxGRkJRVUVzUzBGQlN5eE5RVUZOTEZWQlFWVXNTVUZCU1N4SlFVRkpMRU5CUVVNc1dVRkJXU3hGUVVGRk8wRkJRekZETEZsQlFVRXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEZWQlFWVXNSVUZCUlN4blFrRkJaMElzUlVGQlJTeGxRVUZsTEVWQlFVVXNRMEZCUXl4VlFVRlZMRXRCUVVzc1ZVRkJWU3hEUVVGRExGbEJRVmtzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEYmtnc1UwRkJRVHRMUVVOR08wbEJSVTBzVFVGQlRTeEhRVUZCTzBGQlExZ3NVVUZCUVN4TlFVRk5MR2RDUVVGblFpeEhRVUZITEVsQlFVa3NSMEZCUnl4RlFVRnhRaXhEUVVGRE8wRkJRM1JFTEZGQlFVRXNUVUZCVFN4bFFVRmxMRWRCUVVjc1NVRkJTU3hIUVVGSExFVkJRWEZDTEVOQlFVTTdRVUZGY2tRc1VVRkJRU3hMUVVGTExFMUJRVTBzVlVGQlZTeEpRVUZKTEVsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVVN1FVRkRNVU1zV1VGQlFTeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zVlVGQlZTeEZRVUZGTEdkQ1FVRm5RaXhGUVVGRkxHVkJRV1VzUlVGQlJTeERRVUZETEZWQlFWVXNTMEZCU3l4VlFVRlZMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU0zUnl4VFFVRkJPMHRCUTBZN1FVRkZSRHM3T3pzN096czdPenRCUVZWSE8wRkJRMHNzU1VGQlFTeHJRa0ZCYTBJc1EwRkRlRUlzVlVGQk5rSXNSVUZETjBJc1owSkJRWGRETEVWQlEzaERMR1ZCUVhWRExFVkJRM1pETEZGQlFXbEVMRVZCUVVFN1FVRkZha1FzVVVGQlFTeEpRVUZKTEdWQlFXVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFVkJRVVU3V1VGRGJrTXNUMEZCVHp0QlFVTlNMRk5CUVVFN1FVRkZSQ3hSUVVGQkxFbEJRVWtzWjBKQlFXZENMRU5CUVVNc1IwRkJSeXhEUVVGRExGVkJRVlVzUTBGQlF5eEZRVUZGTzBGQlEzQkRMRmxCUVVFc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eHRSa0ZCYlVZc1EwRkJReXhEUVVGRE8wRkJRM1JITEZOQlFVRTdRVUZEUkN4UlFVRkJMR2RDUVVGblFpeERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVWcVF5eFJRVUZCTEUxQlFVMHNWVUZCVlN4SFFVRkhMRlZCUVZVc1EwRkJReXhaUVVGWkxFTkJRVU03UVVGRE0wTXNVVUZCUVN4TFFVRkxMRTFCUVUwc1UwRkJVeXhKUVVGSkxGVkJRVlVzUlVGQlJUdEJRVU5zUXl4WlFVRkJMSGxDUVVGNVFpeERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRMR2xDUVVGcFFpeExRVUZKTzJkQ1FVTjZSQ3hOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03UVVGRGNFVXNaMEpCUVVFc1NVRkJTU3hUUVVGVExFVkJRVVU3UVVGRFlpeHZRa0ZCUVN4TFFVRkxMRTFCUVUwc1lVRkJZU3hKUVVGSkxGTkJRVk1zUlVGQlJUdDNRa0ZEY2tNc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMR0ZCUVdFc1JVRkJSU3huUWtGQlowSXNSVUZCUlN4bFFVRmxMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRGNrWXNjVUpCUVVFN1FVRkRSaXhwUWtGQlFUdEJRVU5JTEdGQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTBvc1UwRkJRVHRSUVVWRUxGRkJRVkVzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0QlFVVnlRaXhSUVVGQkxHVkJRV1VzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1MwRkRha003UVVGRFJqczdRVU4wUmtRc1RVRkJUVVVzVVVGQlRTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8wRkJRM1JETEUxQlFVMURMRkZCUVUwc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXp0QlFVVjBRenM3T3p0QlFVbEhPMEZCUTBjc1RVRkJUeXh4UWtGQmMwSXNVMEZCVVN4cFFrRkJhVUlzUTBGQlFUdEJRVmN4UkN4SlFVRkJMRWxCUVZjc1dVRkJXU3hIUVVGQk8xRkJRM0pDTEU5QlFVOHNTVUZCU1N4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0TFFVTXZRanRKUVVWRUxGZEJRVzFDTEVOQlFVRXNWMEZCTWtJc1JVRkJSU3hOUVVGelFpeEZRVUZCTzBGQlEzQkZMRkZCUVVFc1MwRkJTeXhEUVVGRExGZEJRVmNzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVVXpRaXhKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8xRkJRek5ETEVsQlFVa3NRMEZCUXl4bFFVRmxMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTTdTMEZETDBNN1NVRkZUU3haUVVGWkxFZEJRVUU3VVVGRGFrSXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVOd1JDeFJRVUZCTEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXp0TFFVTnlSVHRKUVVWTkxFMUJRVTBzUjBGQlFUczdRVUZGV0N4UlFVRkJMRTFCUVUwc1dVRkJXU3hIUVVGSFJDeFJRVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6czdRVUZIZUVZc1VVRkJRU3hOUVVGTkxGVkJRVlVzUjBGQlIwTXNVVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE96dFJRVWQ2UlN4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wdEJRM0JHTzBGQlEwWTdPMEZETjBORUxFMUJRVTBzU1VGQlNTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8wRkJRMnBETEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETzBGQlEzUkRMRTFCUVUwc1RVRkJUU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRPMEZCUlhSRE96czdPMEZCU1VjN1FVRkRSeXhOUVVGUExHbENRVUZyUWl4VFFVRlJMR2xDUVVGcFFpeERRVUZCTzBGQlEzUkVPenRCUVVWSE8wRkJRMGdzU1VGQlFTeEpRVUZYTEZGQlFWRXNSMEZCUVR0UlFVTnFRaXhQUVVGUExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTTdTMEZEZGtJN1FVRkZSRHM3UVVGRlJ6dEpRVU5JTEVsQlFWY3NVVUZCVVN4RFFVRkRMRkZCUVhsQ0xFVkJRVUU3UVVGRE0wTXNVVUZCUVN4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExGRkJRVkVzUTBGQlF6dEJRVU14UWl4UlFVRkJMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNTMEZCU3l4SFFVRkhMRWRCUVVjc1IwRkJSeXhIUVVGSExFZEJRVWNzUlVGQlJTeFJRVUZSTEV0QlFVc3NSMEZCUnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhIUVVGSExFVkJRVVVzVVVGQlVTeExRVUZMTEVkQlFVY3NSMEZCUnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU03UzBGRGFFZzdRVUV5UWtRc1NVRkJRU3hKUVVGWExGbEJRVmtzUjBGQlFUdFJRVU55UWl4UFFVRlBMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRMMEk3U1VGRlJDeFhRVUZ0UWl4RFFVRkJMRmRCUVRKQ0xFVkJRVVVzVFVGQmMwSXNSVUZCUVR0QlFVTndSU3hSUVVGQkxFdEJRVXNzUTBGQlF5eFhRVUZYTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkZNMElzVVVGQlFTeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRWRCUVVjc1EwRkJRenRCUVVOeVFpeFJRVUZCTEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRk9VTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXp0UlFVTXpReXhKUVVGSkxFTkJRVU1zWlVGQlpTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8xRkJRemxETEVsQlFVa3NRMEZCUXl3MlFrRkJOa0lzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRMUVVNM1JEdEpRVVZOTEZsQlFWa3NSMEZCUVR0UlFVTnFRaXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlEzQkVMRkZCUVVFc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRMMFFzWjBKQlFXZENMRU5CUVVNc1NVRkJTU3hEUVVGRExEWkNRVUUyUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0TFFVTXZSenRKUVVWTkxFMUJRVTBzUjBGQlFUczdRVUZGV0RzN096czdPenM3T3pzN096czdPenRCUVdkQ1J6dFJRVU5JTEUxQlFVMHNVMEZCVXl4SFFVRkhMRTFCUVUwN1FVRkRja0lzWVVGQlFTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJRenRCUVVNeFFpeGhRVUZCTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF6dEJRVU5vUXl4aFFVRkJMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zTmtKQlFUWkNMRU5CUVVNc1EwRkJRenM3UVVGSGFFUXNVVUZCUVN4TlFVRk5MRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhsUVVGbExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdRVUZGYkVVN096czdPenRCUVUxSE8wRkJRMGdzVVVGQlFTeE5RVUZOTEZWQlFWVXNSMEZCUnl4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6czdRVUZIYmtVc1VVRkJRU3hOUVVGTkxGVkJRVlVzUjBGQlJ5eFZRVUZWTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN08xRkJSMnBHTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExGVkJRVlVzUlVGQlJTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1MwRkRjRVk3UVVGRFJqczdRVU14UjBRN08wRkJSVWM3UVVGRFNDeE5RVUZOTEhOQ1FVRnpRaXhIUVVGSExFbEJRVWtzUjBGQlJ5eERRVUZETEVOQlFVTXNTMEZCU3l4RlFVRkZMRlZCUVZVc1EwRkJReXhEUVVGRExFTkJRVU03VFVGRkwwTXNOa0pCUVRaQ0xFTkJRVUU3UVVGWmVFTXNTVUZCUVN4SlFVRlhMRWxCUVVrc1IwRkJRVHRSUVVOaUxFOUJRVThzTmtKQlFUWkNMRU5CUVVNc1kwRkJZeXhEUVVGRE8wdEJRM0pFTzBsQlJVUXNWMEZCYlVJc1EwRkJRU3hOUVVGclFpeEZRVUZGTEU5QlFUaERMRVZCUVVFN1FVRkRia1lzVVVGQlFTeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJRenRSUVVWeVFpeEpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRTlCUVU4c1MwRkJRU3hKUVVGQkxFbEJRVkFzVDBGQlR5eExRVUZRTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFOUJRVThzUTBGQlJTeFZRVUZWTEVOQlFVTTdTMEZEZGtNN1FVRkZXU3hKUVVGQkxGTkJRVk1zUTBGQlF5eEpRVUZWTEVWQlFVRTdPMEZCUXk5Q0xGbEJRVUVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4M1FrRkJkMElzUjBGQlJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VTBGRGJrVXNRMEZCUVN4RFFVRkJPMEZCUVVFc1MwRkJRVHRCUVVWRU96czdPenRCUVV0SE8wRkJRMkVzU1VGQlFTeFBRVUZQTEVOQlFVTXNTVUZCVlN4RlFVRkJPenM3UVVGRGFFTXNXVUZCUVN4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFYZENMRU5CUVVNN08wRkJSMnhFTEZsQlFVRXNUVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eERRVUZCTEVOQlFVRXNSVUZCUVN4SFFVRkJMRWxCUVVrc1EwRkJReXhqUVVGakxFMUJRVUVzU1VGQlFTeEpRVUZCTEVWQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVOQlFVVXNUMEZCVHl4RFFVRkRMRFpDUVVFMlFpeERRVUZETEdOQlFXTXNRMEZCUXl4TlFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRelZITEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUlVGQlJUdEJRVU4wUWl4blFrRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF6dEJRVU5pTEdGQlFVRTdRVUZGUkN4WlFVRkJMRTFCUVUwc1QwRkJUeXhIUVVGSExFbEJRVWtzZDBKQlFYZENMRVZCUVVVc1EwRkJRenRaUVVNdlF5eE5RVUZOTEZWQlFWVXNSMEZCY1VJc1RVRkJUU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenM3V1VGSEwwVXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeFRRVUZUTEV0QlFVazdPMmRDUVVOeVF5eE5RVUZOTEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZET3p0QlFVY3hReXhuUWtGQlFTeE5RVUZOTEZOQlFWTXNSMEZCUnl4RFFVRkJMRVZCUVVFc1IwRkJRU3hWUVVGVkxHRkJRVllzVlVGQlZTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGV0xGVkJRVlVzUTBGQlJTeFZRVUZWTEUxQlFVY3NTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRU5CUVVFc05rSkJRVFpDTEVOQlFVTXNZMEZCWXl4RFFVVXhSU3hEUVVGRE8yZENRVVZrTEVsQlFVa3NVMEZCVXl4SlFVRkpMRWxCUVVrc1JVRkJSVHR2UWtGRGNrSXNUMEZCVHp0QlFVTlNMR2xDUVVGQk8wRkJSVVFzWjBKQlFVRXNUVUZCVFN4WFFVRlhMRWRCUVVjc1UwRkJVeXhEUVVGRExGZEJRVmNzUTBGQlF6dEJRVU14UXl4blFrRkJRU3hKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1IwRkJSeXhEUVVGRExGZEJRVmNzUTBGQlF5eEZRVUZGTzI5Q1FVTTFReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVU5XTEVOQlFUQkRMSFZEUVVGQkxFVkJRVUVzTmtKQlFUWkNMRU5CUVVNc1kwRkJZeXhEUVVGcFFpeGpRVUZCTEVWQlFVRXNWMEZCVnl4RFFVRkhMRU5CUVVFc1EwRkJRU3hEUVVOMFNDeERRVUZETzI5Q1FVTkdMRTlCUVU4N1FVRkRVaXhwUWtGQlFUdEJRVVZFTEdkQ1FVRkJMRTFCUVUwc1lVRkJZU3hIUVVGSExGTkJRVk1zUTBGQlF5eFZRVUZWTEVOQlFVTTdPMEZCUnpORExHZENRVUZCTEVsQlFVa3NZVUZCWVN4RFFVRkRMRWxCUVVrc1NVRkJTU3hKUVVGSkxFVkJRVVU3UVVGRE9VSXNiMEpCUVVFc1RVRkJUU3hWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFbEJRVWtzUlVGQlJTeFZRVUZWTEVWQlFVVXNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRM0JHTEc5Q1FVRkJMRTlCUVU4c1EwRkJReXhoUVVGaExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdRVUZEYmtNc2FVSkJRVUU3UVVGQlRTeHhRa0ZCUVN4SlFVRkpMR0ZCUVdFc1EwRkJReXhIUVVGSExFbEJRVWtzU1VGQlNTeEZRVUZGTzBGQlEzQkRMRzlDUVVGQkxFMUJRVTBzVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eEpRVUZKTEVWQlFVVXNWVUZCVlN4RlFVRkZMR0ZCUVdFc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU5zUml4dlFrRkJRU3hQUVVGUExFTkJRVU1zWVVGQllTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMEZCUTI1RExHbENRVUZCTzBGQlFVMHNjVUpCUVVFc1NVRkJTU3hoUVVGaExFTkJRVU1zVVVGQlVTeEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTjZReXh2UWtGQlFTeE5RVUZOTEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRlZCUVZVc1JVRkJSU3hoUVVGaExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdRVUZETlVZc2IwSkJRVUVzVDBGQlR5eERRVUZETEdGQlFXRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVOdVF5eHBRa0ZCUVR0QlFVTklMR0ZCUVVNc1EwRkJReXhEUVVGRE96dEJRVWRJTEZsQlFVRXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhwUWtGQmFVSXNSVUZCUlN4RFFVRkRPMWxCUXk5Q0xFOUJRVThzUTBGQlF5eFpRVUZaTEVWQlFVVXNRMEZCUXp0QlFVVjJRaXhaUVVGQkxFOUJRVThzVDBGQlR5eERRVUZET3p0QlFVTm9RaXhMUVVGQk8wRkJSVk1zU1VGQlFTeHhRa0ZCY1VJc1EwRkROMElzVjBGQk1rSXNSVUZETTBJc1MwRkJkVUlzUlVGRGRrSXNhVUpCUVd0RUxFVkJRVUU3VVVGRmJFUXNUVUZCVFN4RlFVRkZMRTFCUVUwc1JVRkJSU3hYUVVGWExFVkJRVVVzVVVGQlVTeEZRVUZGTEUxQlFVMHNSVUZCUlN4SFFVRkhMR2xDUVVGcFFpeERRVUZETzBGQlEzQkZMRkZCUVVFc1RVRkJUU3hOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMUZCUTJ4RExFMUJRVTBzVlVGQlZTeEhRVUZITEVsQlFVa3NhVUpCUVdsQ0xFTkJRVU1zVjBGQlZ5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUlRsRUxFbEJRVWtzVVVGQlVTeEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTndRaXhaUVVGQkxGVkJRVlVzUTBGQlF5eFJRVUZSTEVkQlFVY3NVVUZCVVN4RFFVRkRPMEZCUTJoRExGTkJRVUU3VVVGRFJDeEpRVUZKTEUxQlFVMHNTVUZCU1N4SlFVRkpMRVZCUVVVN1FVRkRiRUlzV1VGQlFTeFZRVUZWTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJRenRCUVVNMVFpeFRRVUZCTzFGQlJVUXNTVUZCU1N4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRk8wRkJRMjVDTEZsQlFVRXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3gxUWtGQmRVSXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVOMlJDeFpRVUZCTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlF6ZENMRk5CUVVFN1FVRkZSQ3hSUVVGQkxFOUJRVThzVlVGQlZTeERRVUZETzB0QlEyNUNPMEZCUlZNc1NVRkJRU3h2UWtGQmIwSXNRMEZETlVJc1YwRkJNa0lzUlVGRE0wSXNTMEZCZFVJc1JVRkRka0lzWjBKQlFXZEVMRVZCUVVFN1VVRkZhRVFzVFVGQlRTeEZRVUZGTEUxQlFVMHNSVUZCUlN4WFFVRlhMRVZCUVVVc1QwRkJUeXhGUVVGRkxFMUJRVTBzUlVGQlJTeEhRVUZITEdkQ1FVRm5RaXhEUVVGRE8wRkJRMnhGTEZGQlFVRXNUVUZCVFN4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzFGQlEyeERMRTFCUVUwc1ZVRkJWU3hIUVVGSExFbEJRVWtzWjBKQlFXZENMRU5CUVVNc1YwRkJWeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzFGQlJUZEVMRWxCUVVrc1QwRkJUeXhKUVVGSkxFbEJRVWtzUlVGQlJUdEJRVU51UWl4WlFVRkJMRlZCUVZVc1EwRkJReXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETzBGQlF6bENMRk5CUVVFN1VVRkRSQ3hKUVVGSkxFMUJRVTBzU1VGQlNTeEpRVUZKTEVWQlFVVTdRVUZEYkVJc1dVRkJRU3hWUVVGVkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXp0QlFVTTFRaXhUUVVGQk8xRkJSVVFzU1VGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUTI1Q0xGbEJRVUVzVFVGQlRTeE5RVUZOTEVkQlFVY3NTVUZCU1N4MVFrRkJkVUlzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0QlFVTjJSQ3haUVVGQkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRemRDTEZOQlFVRTdRVUZGUkN4UlFVRkJMRTlCUVU4c1ZVRkJWU3hEUVVGRE8wdEJRMjVDTzBGQlJWTXNTVUZCUVN4NVFrRkJlVUlzUTBGRGFrTXNWMEZCTWtJc1JVRkRNMElzUzBGQmRVSXNSVUZEZGtJc2NVSkJRVEJFTEVWQlFVRTdVVUZGTVVRc1RVRkJUU3hGUVVGRkxFMUJRVTBzUlVGQlJTeFhRVUZYTEVWQlFVVXNUVUZCVFN4RlFVRkZMRWRCUVVjc2NVSkJRWEZDTEVOQlFVTTdRVUZET1VRc1VVRkJRU3hOUVVGTkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkRiRU1zVFVGQlRTeFZRVUZWTEVkQlFVY3NTVUZCU1N4eFFrRkJjVUlzUTBGQlF5eFhRVUZYTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkZiRVVzU1VGQlNTeE5RVUZOTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTJ4Q0xGbEJRVUVzVlVGQlZTeERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkROVUlzVTBGQlFUdFJRVVZFTEVsQlFVa3NTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSVHRCUVVOdVFpeFpRVUZCTEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc2RVSkJRWFZDTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1FVRkRka1FzV1VGQlFTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU0zUWl4VFFVRkJPMEZCUlVRc1VVRkJRU3hQUVVGUExGVkJRVlVzUTBGQlF6dExRVU51UWpzN1FVRjZTbk5DTERaQ1FVRmpMRU5CUVVFc1kwRkJRU3hIUVVGSExITkNRVUZ6UWpzN096c2lmUT09XG4iLCIvKiFcbiAqIEBwaXhpdi90aHJlZS12cm0tc3ByaW5nYm9uZSB2Mi4wLjBcbiAqIFNwcmluZyBib25lIG1vZHVsZSBmb3IgQHBpeGl2L3RocmVlLXZybVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAyMC0yMDIzIHBpeGl2IEluYy5cbiAqIEBwaXhpdi90aHJlZS12cm0tc3ByaW5nYm9uZSBpcyBkaXN0cmlidXRlZCB1bmRlciBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BpeGl2L3RocmVlLXZybS9ibG9iL3JlbGVhc2UvTElDRU5TRVxuICovXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHNoYXBlIG9mIGEgY29sbGlkZXIuXG4gKi9cbmNsYXNzIFZSTVNwcmluZ0JvbmVDb2xsaWRlclNoYXBlIHtcbn1cblxuY29uc3QgX3YzQSQ0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbmNvbnN0IF92M0IkMSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5jbGFzcyBWUk1TcHJpbmdCb25lQ29sbGlkZXJTaGFwZUNhcHN1bGUgZXh0ZW5kcyBWUk1TcHJpbmdCb25lQ29sbGlkZXJTaGFwZSB7XG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiAnY2Fwc3VsZSc7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAoX2EgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMub2Zmc2V0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBuZXcgVEhSRUUuVmVjdG9yMygwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgdGhpcy50YWlsID0gKF9iID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLnRhaWwpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG5ldyBUSFJFRS5WZWN0b3IzKDAuMCwgMC4wLCAwLjApO1xuICAgICAgICB0aGlzLnJhZGl1cyA9IChfYyA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5yYWRpdXMpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDAuMDtcbiAgICB9XG4gICAgY2FsY3VsYXRlQ29sbGlzaW9uKGNvbGxpZGVyTWF0cml4LCBvYmplY3RQb3NpdGlvbiwgb2JqZWN0UmFkaXVzLCB0YXJnZXQpIHtcbiAgICAgICAgX3YzQSQ0LmNvcHkodGhpcy5vZmZzZXQpLmFwcGx5TWF0cml4NChjb2xsaWRlck1hdHJpeCk7IC8vIHRyYW5zZm9ybWVkIGhlYWRcbiAgICAgICAgX3YzQiQxLmNvcHkodGhpcy50YWlsKS5hcHBseU1hdHJpeDQoY29sbGlkZXJNYXRyaXgpOyAvLyB0cmFuc2Zvcm1lZCB0YWlsXG4gICAgICAgIF92M0IkMS5zdWIoX3YzQSQ0KTsgLy8gZnJvbSBoZWFkIHRvIHRhaWxcbiAgICAgICAgY29uc3QgbGVuZ3RoU3FDYXBzdWxlID0gX3YzQiQxLmxlbmd0aFNxKCk7XG4gICAgICAgIHRhcmdldC5jb3B5KG9iamVjdFBvc2l0aW9uKS5zdWIoX3YzQSQ0KTsgLy8gZnJvbSBoZWFkIHRvIG9iamVjdFxuICAgICAgICBjb25zdCBkb3QgPSBfdjNCJDEuZG90KHRhcmdldCk7IC8vIGRvdCBwcm9kdWN0IG9mIG9mZnNldFRvVGFpbCBhbmQgb2Zmc2V0VG9PYmplY3RcbiAgICAgICAgaWYgKGRvdCA8PSAwLjApIDtcbiAgICAgICAgZWxzZSBpZiAobGVuZ3RoU3FDYXBzdWxlIDw9IGRvdCkge1xuICAgICAgICAgICAgLy8gaWYgb2JqZWN0IGlzIG5lYXIgZnJvbSB0aGUgdGFpbFxuICAgICAgICAgICAgdGFyZ2V0LnN1YihfdjNCJDEpOyAvLyBmcm9tIHRhaWwgdG8gb2JqZWN0XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBpZiBvYmplY3QgaXMgYmV0d2VlbiB0d28gZW5kc1xuICAgICAgICAgICAgX3YzQiQxLm11bHRpcGx5U2NhbGFyKGRvdCAvIGxlbmd0aFNxQ2Fwc3VsZSk7IC8vIGZyb20gaGVhZCB0byB0aGUgbmVhcmVzdCBwb2ludCBvZiB0aGUgc2hhZnRcbiAgICAgICAgICAgIHRhcmdldC5zdWIoX3YzQiQxKTsgLy8gZnJvbSB0aGUgc2hhZnQgcG9pbnQgdG8gb2JqZWN0XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmFkaXVzID0gb2JqZWN0UmFkaXVzICsgdGhpcy5yYWRpdXM7XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gdGFyZ2V0Lmxlbmd0aCgpIC0gcmFkaXVzO1xuICAgICAgICB0YXJnZXQubm9ybWFsaXplKCk7XG4gICAgICAgIHJldHVybiBkaXN0YW5jZTtcbiAgICB9XG59XG5cbmNsYXNzIFZSTVNwcmluZ0JvbmVDb2xsaWRlclNoYXBlU3BoZXJlIGV4dGVuZHMgVlJNU3ByaW5nQm9uZUNvbGxpZGVyU2hhcGUge1xuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gJ3NwaGVyZSc7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9mZnNldCA9IChfYSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5vZmZzZXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5ldyBUSFJFRS5WZWN0b3IzKDAuMCwgMC4wLCAwLjApO1xuICAgICAgICB0aGlzLnJhZGl1cyA9IChfYiA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5yYWRpdXMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDAuMDtcbiAgICB9XG4gICAgY2FsY3VsYXRlQ29sbGlzaW9uKGNvbGxpZGVyTWF0cml4LCBvYmplY3RQb3NpdGlvbiwgb2JqZWN0UmFkaXVzLCB0YXJnZXQpIHtcbiAgICAgICAgdGFyZ2V0LmNvcHkodGhpcy5vZmZzZXQpLmFwcGx5TWF0cml4NChjb2xsaWRlck1hdHJpeCk7IC8vIHRyYW5zZm9ybWVkIG9mZnNldFxuICAgICAgICB0YXJnZXQubmVnYXRlKCkuYWRkKG9iamVjdFBvc2l0aW9uKTsgLy8gYSB2ZWN0b3IgZnJvbSBjb2xsaWRlciBjZW50ZXIgdG8gb2JqZWN0IHBvc2l0aW9uXG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IG9iamVjdFJhZGl1cyArIHRoaXMucmFkaXVzO1xuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHRhcmdldC5sZW5ndGgoKSAtIHJhZGl1cztcbiAgICAgICAgdGFyZ2V0Lm5vcm1hbGl6ZSgpO1xuICAgICAgICByZXR1cm4gZGlzdGFuY2U7XG4gICAgfVxufVxuXG5jb25zdCBfdjNBJDMgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuY2xhc3MgQ29sbGlkZXJTaGFwZUNhcHN1bGVCdWZmZXJHZW9tZXRyeSBleHRlbmRzIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IHtcbiAgICBjb25zdHJ1Y3RvcihzaGFwZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLndvcmxkU2NhbGUgPSAxLjA7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRSYWRpdXMgPSAwO1xuICAgICAgICB0aGlzLl9jdXJyZW50T2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgICAgdGhpcy5fY3VycmVudFRhaWwgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICAgICAgICB0aGlzLl9zaGFwZSA9IHNoYXBlO1xuICAgICAgICB0aGlzLl9hdHRyUG9zID0gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KDM5NiksIDMpO1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCB0aGlzLl9hdHRyUG9zKTtcbiAgICAgICAgdGhpcy5fYXR0ckluZGV4ID0gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgVWludDE2QXJyYXkoMjY0KSwgMSk7XG4gICAgICAgIHRoaXMuc2V0SW5kZXgodGhpcy5fYXR0ckluZGV4KTtcbiAgICAgICAgdGhpcy5fYnVpbGRJbmRleCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGxldCBzaG91bGRVcGRhdGVHZW9tZXRyeSA9IGZhbHNlO1xuICAgICAgICBjb25zdCByYWRpdXMgPSB0aGlzLl9zaGFwZS5yYWRpdXMgLyB0aGlzLndvcmxkU2NhbGU7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50UmFkaXVzICE9PSByYWRpdXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRSYWRpdXMgPSByYWRpdXM7XG4gICAgICAgICAgICBzaG91bGRVcGRhdGVHZW9tZXRyeSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9jdXJyZW50T2Zmc2V0LmVxdWFscyh0aGlzLl9zaGFwZS5vZmZzZXQpKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50T2Zmc2V0LmNvcHkodGhpcy5fc2hhcGUub2Zmc2V0KTtcbiAgICAgICAgICAgIHNob3VsZFVwZGF0ZUdlb21ldHJ5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YWlsID0gX3YzQSQzLmNvcHkodGhpcy5fc2hhcGUudGFpbCkuZGl2aWRlU2NhbGFyKHRoaXMud29ybGRTY2FsZSk7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50VGFpbC5kaXN0YW5jZVRvU3F1YXJlZCh0YWlsKSA+IDFlLTEwKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50VGFpbC5jb3B5KHRhaWwpO1xuICAgICAgICAgICAgc2hvdWxkVXBkYXRlR2VvbWV0cnkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGRVcGRhdGVHZW9tZXRyeSkge1xuICAgICAgICAgICAgdGhpcy5fYnVpbGRQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9idWlsZFBvc2l0aW9uKCkge1xuICAgICAgICBfdjNBJDMuY29weSh0aGlzLl9jdXJyZW50VGFpbCkuc3ViKHRoaXMuX2N1cnJlbnRPZmZzZXQpO1xuICAgICAgICBjb25zdCBsID0gX3YzQSQzLmxlbmd0aCgpIC8gdGhpcy5fY3VycmVudFJhZGl1cztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gMTY7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdCA9IChpIC8gMTYuMCkgKiBNYXRoLlBJO1xuICAgICAgICAgICAgdGhpcy5fYXR0clBvcy5zZXRYWVooaSwgLU1hdGguc2luKHQpLCAtTWF0aC5jb3ModCksIDAuMCk7XG4gICAgICAgICAgICB0aGlzLl9hdHRyUG9zLnNldFhZWigxNyArIGksIGwgKyBNYXRoLnNpbih0KSwgTWF0aC5jb3ModCksIDAuMCk7XG4gICAgICAgICAgICB0aGlzLl9hdHRyUG9zLnNldFhZWigzNCArIGksIC1NYXRoLnNpbih0KSwgMC4wLCAtTWF0aC5jb3ModCkpO1xuICAgICAgICAgICAgdGhpcy5fYXR0clBvcy5zZXRYWVooNTEgKyBpLCBsICsgTWF0aC5zaW4odCksIDAuMCwgTWF0aC5jb3ModCkpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzI7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdCA9IChpIC8gMTYuMCkgKiBNYXRoLlBJO1xuICAgICAgICAgICAgdGhpcy5fYXR0clBvcy5zZXRYWVooNjggKyBpLCAwLjAsIE1hdGguc2luKHQpLCBNYXRoLmNvcyh0KSk7XG4gICAgICAgICAgICB0aGlzLl9hdHRyUG9zLnNldFhZWigxMDAgKyBpLCBsLCBNYXRoLnNpbih0KSwgTWF0aC5jb3ModCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRoZXRhID0gTWF0aC5hdGFuMihfdjNBJDMueSwgTWF0aC5zcXJ0KF92M0EkMy54ICogX3YzQSQzLnggKyBfdjNBJDMueiAqIF92M0EkMy56KSk7XG4gICAgICAgIGNvbnN0IHBoaSA9IC1NYXRoLmF0YW4yKF92M0EkMy56LCBfdjNBJDMueCk7XG4gICAgICAgIHRoaXMucm90YXRlWih0aGV0YSk7XG4gICAgICAgIHRoaXMucm90YXRlWShwaGkpO1xuICAgICAgICB0aGlzLnNjYWxlKHRoaXMuX2N1cnJlbnRSYWRpdXMsIHRoaXMuX2N1cnJlbnRSYWRpdXMsIHRoaXMuX2N1cnJlbnRSYWRpdXMpO1xuICAgICAgICB0aGlzLnRyYW5zbGF0ZSh0aGlzLl9jdXJyZW50T2Zmc2V0LngsIHRoaXMuX2N1cnJlbnRPZmZzZXQueSwgdGhpcy5fY3VycmVudE9mZnNldC56KTtcbiAgICAgICAgdGhpcy5fYXR0clBvcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgfVxuICAgIF9idWlsZEluZGV4KCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM0OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGkxID0gKGkgKyAxKSAlIDM0O1xuICAgICAgICAgICAgdGhpcy5fYXR0ckluZGV4LnNldFhZKGkgKiAyLCBpLCBpMSk7XG4gICAgICAgICAgICB0aGlzLl9hdHRySW5kZXguc2V0WFkoNjggKyBpICogMiwgMzQgKyBpLCAzNCArIGkxKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDMyOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGkxID0gKGkgKyAxKSAlIDMyO1xuICAgICAgICAgICAgdGhpcy5fYXR0ckluZGV4LnNldFhZKDEzNiArIGkgKiAyLCA2OCArIGksIDY4ICsgaTEpO1xuICAgICAgICAgICAgdGhpcy5fYXR0ckluZGV4LnNldFhZKDIwMCArIGkgKiAyLCAxMDAgKyBpLCAxMDAgKyBpMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXR0ckluZGV4Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG59XG5cbmNsYXNzIENvbGxpZGVyU2hhcGVTcGhlcmVCdWZmZXJHZW9tZXRyeSBleHRlbmRzIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IHtcbiAgICBjb25zdHJ1Y3RvcihzaGFwZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLndvcmxkU2NhbGUgPSAxLjA7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRSYWRpdXMgPSAwO1xuICAgICAgICB0aGlzLl9jdXJyZW50T2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgICAgdGhpcy5fc2hhcGUgPSBzaGFwZTtcbiAgICAgICAgdGhpcy5fYXR0clBvcyA9IG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheSgzMiAqIDMgKiAzKSwgMyk7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdwb3NpdGlvbicsIHRoaXMuX2F0dHJQb3MpO1xuICAgICAgICB0aGlzLl9hdHRySW5kZXggPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBVaW50MTZBcnJheSg2NCAqIDMpLCAxKTtcbiAgICAgICAgdGhpcy5zZXRJbmRleCh0aGlzLl9hdHRySW5kZXgpO1xuICAgICAgICB0aGlzLl9idWlsZEluZGV4KCk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgbGV0IHNob3VsZFVwZGF0ZUdlb21ldHJ5ID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IHRoaXMuX3NoYXBlLnJhZGl1cyAvIHRoaXMud29ybGRTY2FsZTtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRSYWRpdXMgIT09IHJhZGl1cykge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFJhZGl1cyA9IHJhZGl1cztcbiAgICAgICAgICAgIHNob3VsZFVwZGF0ZUdlb21ldHJ5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2N1cnJlbnRPZmZzZXQuZXF1YWxzKHRoaXMuX3NoYXBlLm9mZnNldCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRPZmZzZXQuY29weSh0aGlzLl9zaGFwZS5vZmZzZXQpO1xuICAgICAgICAgICAgc2hvdWxkVXBkYXRlR2VvbWV0cnkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGRVcGRhdGVHZW9tZXRyeSkge1xuICAgICAgICAgICAgdGhpcy5fYnVpbGRQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9idWlsZFBvc2l0aW9uKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDMyOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSAoaSAvIDE2LjApICogTWF0aC5QSTtcbiAgICAgICAgICAgIHRoaXMuX2F0dHJQb3Muc2V0WFlaKGksIE1hdGguY29zKHQpLCBNYXRoLnNpbih0KSwgMC4wKTtcbiAgICAgICAgICAgIHRoaXMuX2F0dHJQb3Muc2V0WFlaKDMyICsgaSwgMC4wLCBNYXRoLmNvcyh0KSwgTWF0aC5zaW4odCkpO1xuICAgICAgICAgICAgdGhpcy5fYXR0clBvcy5zZXRYWVooNjQgKyBpLCBNYXRoLnNpbih0KSwgMC4wLCBNYXRoLmNvcyh0KSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zY2FsZSh0aGlzLl9jdXJyZW50UmFkaXVzLCB0aGlzLl9jdXJyZW50UmFkaXVzLCB0aGlzLl9jdXJyZW50UmFkaXVzKTtcbiAgICAgICAgdGhpcy50cmFuc2xhdGUodGhpcy5fY3VycmVudE9mZnNldC54LCB0aGlzLl9jdXJyZW50T2Zmc2V0LnksIHRoaXMuX2N1cnJlbnRPZmZzZXQueik7XG4gICAgICAgIHRoaXMuX2F0dHJQb3MubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIH1cbiAgICBfYnVpbGRJbmRleCgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpMSA9IChpICsgMSkgJSAzMjtcbiAgICAgICAgICAgIHRoaXMuX2F0dHJJbmRleC5zZXRYWShpICogMiwgaSwgaTEpO1xuICAgICAgICAgICAgdGhpcy5fYXR0ckluZGV4LnNldFhZKDY0ICsgaSAqIDIsIDMyICsgaSwgMzIgKyBpMSk7XG4gICAgICAgICAgICB0aGlzLl9hdHRySW5kZXguc2V0WFkoMTI4ICsgaSAqIDIsIDY0ICsgaSwgNjQgKyBpMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXR0ckluZGV4Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG59XG5cbmNvbnN0IF92M0EkMiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5jbGFzcyBWUk1TcHJpbmdCb25lQ29sbGlkZXJIZWxwZXIgZXh0ZW5kcyBUSFJFRS5Hcm91cCB7XG4gICAgY29uc3RydWN0b3IoY29sbGlkZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29sbGlkZXIgPSBjb2xsaWRlcjtcbiAgICAgICAgaWYgKHRoaXMuY29sbGlkZXIuc2hhcGUgaW5zdGFuY2VvZiBWUk1TcHJpbmdCb25lQ29sbGlkZXJTaGFwZVNwaGVyZSkge1xuICAgICAgICAgICAgdGhpcy5fZ2VvbWV0cnkgPSBuZXcgQ29sbGlkZXJTaGFwZVNwaGVyZUJ1ZmZlckdlb21ldHJ5KHRoaXMuY29sbGlkZXIuc2hhcGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY29sbGlkZXIuc2hhcGUgaW5zdGFuY2VvZiBWUk1TcHJpbmdCb25lQ29sbGlkZXJTaGFwZUNhcHN1bGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2dlb21ldHJ5ID0gbmV3IENvbGxpZGVyU2hhcGVDYXBzdWxlQnVmZmVyR2VvbWV0cnkodGhpcy5jb2xsaWRlci5zaGFwZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZSTVNwcmluZ0JvbmVDb2xsaWRlckhlbHBlcjogVW5rbm93biBjb2xsaWRlciBzaGFwZSB0eXBlIGRldGVjdGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe1xuICAgICAgICAgICAgY29sb3I6IDB4ZmYwMGZmLFxuICAgICAgICAgICAgZGVwdGhUZXN0OiBmYWxzZSxcbiAgICAgICAgICAgIGRlcHRoV3JpdGU6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbGluZSA9IG5ldyBUSFJFRS5MaW5lU2VnbWVudHModGhpcy5fZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgICAgdGhpcy5hZGQodGhpcy5fbGluZSk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuX2dlb21ldHJ5LmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgdXBkYXRlTWF0cml4V29ybGQoZm9yY2UpIHtcbiAgICAgICAgdGhpcy5jb2xsaWRlci51cGRhdGVXb3JsZE1hdHJpeCh0cnVlLCBmYWxzZSk7XG4gICAgICAgIHRoaXMubWF0cml4LmNvcHkodGhpcy5jb2xsaWRlci5tYXRyaXhXb3JsZCk7XG4gICAgICAgIGNvbnN0IG1hdHJpeFdvcmxkRWxlbWVudHMgPSB0aGlzLm1hdHJpeC5lbGVtZW50cztcbiAgICAgICAgdGhpcy5fZ2VvbWV0cnkud29ybGRTY2FsZSA9IF92M0EkMlxuICAgICAgICAgICAgLnNldChtYXRyaXhXb3JsZEVsZW1lbnRzWzBdLCBtYXRyaXhXb3JsZEVsZW1lbnRzWzFdLCBtYXRyaXhXb3JsZEVsZW1lbnRzWzJdKVxuICAgICAgICAgICAgLmxlbmd0aCgpOyAvLyBjYWxjdWxhdGUgc2NhbGUgb2YgeCBjb21wb25lbnRcbiAgICAgICAgdGhpcy5fZ2VvbWV0cnkudXBkYXRlKCk7XG4gICAgICAgIHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKTtcbiAgICB9XG59XG5cbmNsYXNzIFNwcmluZ0JvbmVCdWZmZXJHZW9tZXRyeSBleHRlbmRzIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IHtcbiAgICBjb25zdHJ1Y3RvcihzcHJpbmdCb25lKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMud29ybGRTY2FsZSA9IDEuMDtcbiAgICAgICAgdGhpcy5fY3VycmVudFJhZGl1cyA9IDA7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRUYWlsID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgICAgdGhpcy5fc3ByaW5nQm9uZSA9IHNwcmluZ0JvbmU7XG4gICAgICAgIHRoaXMuX2F0dHJQb3MgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoMjk0KSwgMyk7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdwb3NpdGlvbicsIHRoaXMuX2F0dHJQb3MpO1xuICAgICAgICB0aGlzLl9hdHRySW5kZXggPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBVaW50MTZBcnJheSgxOTQpLCAxKTtcbiAgICAgICAgdGhpcy5zZXRJbmRleCh0aGlzLl9hdHRySW5kZXgpO1xuICAgICAgICB0aGlzLl9idWlsZEluZGV4KCk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgbGV0IHNob3VsZFVwZGF0ZUdlb21ldHJ5ID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IHRoaXMuX3NwcmluZ0JvbmUuc2V0dGluZ3MuaGl0UmFkaXVzIC8gdGhpcy53b3JsZFNjYWxlO1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudFJhZGl1cyAhPT0gcmFkaXVzKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50UmFkaXVzID0gcmFkaXVzO1xuICAgICAgICAgICAgc2hvdWxkVXBkYXRlR2VvbWV0cnkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fY3VycmVudFRhaWwuZXF1YWxzKHRoaXMuX3NwcmluZ0JvbmUuaW5pdGlhbExvY2FsQ2hpbGRQb3NpdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRUYWlsLmNvcHkodGhpcy5fc3ByaW5nQm9uZS5pbml0aWFsTG9jYWxDaGlsZFBvc2l0aW9uKTtcbiAgICAgICAgICAgIHNob3VsZFVwZGF0ZUdlb21ldHJ5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkVXBkYXRlR2VvbWV0cnkpIHtcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkUG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfYnVpbGRQb3NpdGlvbigpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gKGkgLyAxNi4wKSAqIE1hdGguUEk7XG4gICAgICAgICAgICB0aGlzLl9hdHRyUG9zLnNldFhZWihpLCBNYXRoLmNvcyh0KSwgTWF0aC5zaW4odCksIDAuMCk7XG4gICAgICAgICAgICB0aGlzLl9hdHRyUG9zLnNldFhZWigzMiArIGksIDAuMCwgTWF0aC5jb3ModCksIE1hdGguc2luKHQpKTtcbiAgICAgICAgICAgIHRoaXMuX2F0dHJQb3Muc2V0WFlaKDY0ICsgaSwgTWF0aC5zaW4odCksIDAuMCwgTWF0aC5jb3ModCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NhbGUodGhpcy5fY3VycmVudFJhZGl1cywgdGhpcy5fY3VycmVudFJhZGl1cywgdGhpcy5fY3VycmVudFJhZGl1cyk7XG4gICAgICAgIHRoaXMudHJhbnNsYXRlKHRoaXMuX2N1cnJlbnRUYWlsLngsIHRoaXMuX2N1cnJlbnRUYWlsLnksIHRoaXMuX2N1cnJlbnRUYWlsLnopO1xuICAgICAgICB0aGlzLl9hdHRyUG9zLnNldFhZWig5NiwgMCwgMCwgMCk7XG4gICAgICAgIHRoaXMuX2F0dHJQb3Muc2V0WFlaKDk3LCB0aGlzLl9jdXJyZW50VGFpbC54LCB0aGlzLl9jdXJyZW50VGFpbC55LCB0aGlzLl9jdXJyZW50VGFpbC56KTtcbiAgICAgICAgdGhpcy5fYXR0clBvcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgfVxuICAgIF9idWlsZEluZGV4KCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDMyOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGkxID0gKGkgKyAxKSAlIDMyO1xuICAgICAgICAgICAgdGhpcy5fYXR0ckluZGV4LnNldFhZKGkgKiAyLCBpLCBpMSk7XG4gICAgICAgICAgICB0aGlzLl9hdHRySW5kZXguc2V0WFkoNjQgKyBpICogMiwgMzIgKyBpLCAzMiArIGkxKTtcbiAgICAgICAgICAgIHRoaXMuX2F0dHJJbmRleC5zZXRYWSgxMjggKyBpICogMiwgNjQgKyBpLCA2NCArIGkxKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hdHRySW5kZXguc2V0WFkoMTkyLCA5NiwgOTcpO1xuICAgICAgICB0aGlzLl9hdHRySW5kZXgubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIH1cbn1cblxuY29uc3QgX3YzQSQxID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbmNsYXNzIFZSTVNwcmluZ0JvbmVKb2ludEhlbHBlciBleHRlbmRzIFRIUkVFLkdyb3VwIHtcbiAgICBjb25zdHJ1Y3RvcihzcHJpbmdCb25lKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNwcmluZ0JvbmUgPSBzcHJpbmdCb25lO1xuICAgICAgICB0aGlzLl9nZW9tZXRyeSA9IG5ldyBTcHJpbmdCb25lQnVmZmVyR2VvbWV0cnkodGhpcy5zcHJpbmdCb25lKTtcbiAgICAgICAgY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe1xuICAgICAgICAgICAgY29sb3I6IDB4ZmZmZjAwLFxuICAgICAgICAgICAgZGVwdGhUZXN0OiBmYWxzZSxcbiAgICAgICAgICAgIGRlcHRoV3JpdGU6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbGluZSA9IG5ldyBUSFJFRS5MaW5lU2VnbWVudHModGhpcy5fZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgICAgdGhpcy5hZGQodGhpcy5fbGluZSk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuX2dlb21ldHJ5LmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgdXBkYXRlTWF0cml4V29ybGQoZm9yY2UpIHtcbiAgICAgICAgdGhpcy5zcHJpbmdCb25lLmJvbmUudXBkYXRlV29ybGRNYXRyaXgodHJ1ZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLm1hdHJpeC5jb3B5KHRoaXMuc3ByaW5nQm9uZS5ib25lLm1hdHJpeFdvcmxkKTtcbiAgICAgICAgY29uc3QgbWF0cml4V29ybGRFbGVtZW50cyA9IHRoaXMubWF0cml4LmVsZW1lbnRzO1xuICAgICAgICB0aGlzLl9nZW9tZXRyeS53b3JsZFNjYWxlID0gX3YzQSQxXG4gICAgICAgICAgICAuc2V0KG1hdHJpeFdvcmxkRWxlbWVudHNbMF0sIG1hdHJpeFdvcmxkRWxlbWVudHNbMV0sIG1hdHJpeFdvcmxkRWxlbWVudHNbMl0pXG4gICAgICAgICAgICAubGVuZ3RoKCk7IC8vIGNhbGN1bGF0ZSBzY2FsZSBvZiB4IGNvbXBvbmVudFxuICAgICAgICB0aGlzLl9nZW9tZXRyeS51cGRhdGUoKTtcbiAgICAgICAgc3VwZXIudXBkYXRlTWF0cml4V29ybGQoZm9yY2UpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY29sbGlkZXIgb2YgYSBWUk0uXG4gKi9cbmNsYXNzIFZSTVNwcmluZ0JvbmVDb2xsaWRlciBleHRlbmRzIFRIUkVFLk9iamVjdDNEIHtcbiAgICBjb25zdHJ1Y3RvcihzaGFwZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNoYXBlID0gc2hhcGU7XG4gICAgfVxufVxuXG5jb25zdCBfbWF0QSQxID0gbmV3IFRIUkVFLk1hdHJpeDQoKTtcbi8qKlxuICogQSBjb21wYXQgZnVuY3Rpb24gZm9yIGBNYXRyaXg0LmludmVydCgpYCAvIGBNYXRyaXg0LmdldEludmVyc2UoKWAuXG4gKiBgTWF0cml4NC5pbnZlcnQoKWAgaXMgaW50cm9kdWNlZCBpbiByMTIzIGFuZCBgTWF0cml4NC5nZXRJbnZlcnNlKClgIGVtaXRzIGEgd2FybmluZy5cbiAqIFdlIGFyZSBnb2luZyB0byB1c2UgdGhpcyBjb21wYXQgZm9yIGEgd2hpbGUuXG4gKiBAcGFyYW0gdGFyZ2V0IEEgdGFyZ2V0IG1hdHJpeFxuICovXG5mdW5jdGlvbiBtYXQ0SW52ZXJ0Q29tcGF0KHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQuaW52ZXJ0KSB7XG4gICAgICAgIHRhcmdldC5pbnZlcnQoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRhcmdldC5nZXRJbnZlcnNlKF9tYXRBJDEuY29weSh0YXJnZXQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cblxuY2xhc3MgTWF0cml4NEludmVyc2VDYWNoZSB7XG4gICAgLyoqXG4gICAgICogSW52ZXJzZSBvZiBnaXZlbiBtYXRyaXguXG4gICAgICogTm90ZSB0aGF0IGl0IHdpbGwgcmV0dXJuIGl0cyBpbnRlcm5hbCBwcml2YXRlIGluc3RhbmNlLlxuICAgICAqIE1ha2Ugc3VyZSBjb3B5aW5nIHRoaXMgYmVmb3JlIG11dGF0ZSB0aGlzLlxuICAgICAqL1xuICAgIGdldCBpbnZlcnNlKCkge1xuICAgICAgICBpZiAodGhpcy5fc2hvdWxkVXBkYXRlSW52ZXJzZSkge1xuICAgICAgICAgICAgdGhpcy5faW52ZXJzZUNhY2hlLmNvcHkodGhpcy5tYXRyaXgpO1xuICAgICAgICAgICAgbWF0NEludmVydENvbXBhdCh0aGlzLl9pbnZlcnNlQ2FjaGUpO1xuICAgICAgICAgICAgdGhpcy5fc2hvdWxkVXBkYXRlSW52ZXJzZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZlcnNlQ2FjaGU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG1hdHJpeCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBjYWNoZSBvZiBpbnZlcnNlIG9mIGN1cnJlbnQgbWF0cml4LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faW52ZXJzZUNhY2hlID0gbmV3IFRIUkVFLk1hdHJpeDQoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgZmxhZyB0aGF0IG1ha2VzIGl0IHdhbnQgdG8gcmVjYWxjdWxhdGUgaXRzIHtAbGluayBfaW52ZXJzZUNhY2hlfS5cbiAgICAgICAgICogV2lsbCBiZSBzZXQgYHRydWVgIHdoZW4gYGVsZW1lbnRzYCBhcmUgbXV0YXRlZCBhbmQgYmUgdXNlZCBpbiBgZ2V0SW52ZXJzZWAuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9zaG91bGRVcGRhdGVJbnZlcnNlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5tYXRyaXggPSBtYXRyaXg7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSB7XG4gICAgICAgICAgICBzZXQ6IChvYmosIHByb3AsIG5ld1ZhbCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3VsZFVwZGF0ZUludmVyc2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG9ialtwcm9wXSA9IG5ld1ZhbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX29yaWdpbmFsRWxlbWVudHMgPSBtYXRyaXguZWxlbWVudHM7XG4gICAgICAgIG1hdHJpeC5lbGVtZW50cyA9IG5ldyBQcm94eShtYXRyaXguZWxlbWVudHMsIGhhbmRsZXIpO1xuICAgIH1cbiAgICByZXZlcnQoKSB7XG4gICAgICAgIHRoaXMubWF0cml4LmVsZW1lbnRzID0gdGhpcy5fb3JpZ2luYWxFbGVtZW50cztcbiAgICB9XG59XG5cbi8vIGJhc2VkIG9uXG4vLyBodHRwOi8vcm9ja2V0anVtcC5za3IuanAvdW5pdHkzZC8xMDkvXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZHdhbmdvL1VuaVZSTS9ibG9iL21hc3Rlci9TY3JpcHRzL1NwcmluZ0JvbmUvVlJNU3ByaW5nQm9uZS5jc1xuY29uc3QgSURFTlRJVFlfTUFUUklYNCA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG4vLyDoqIjnrpfkuK3jga7kuIDmmYLkv53lrZjnlKjlpInmlbDvvIjkuIDluqbjgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzjgaPjgZ/jgonjgYLjgajjga/kvb/jgYTlm57jgZnvvIlcbmNvbnN0IF92M0EgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuY29uc3QgX3YzQiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5jb25zdCBfdjNDID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbi8qKlxuICogQSB0ZW1wb3JhcnkgdmFyaWFibGUgd2hpY2ggaXMgdXNlZCBpbiBgdXBkYXRlYFxuICovXG5jb25zdCBfd29ybGRTcGFjZVBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbi8qKlxuICogQSB0ZW1wb3JhcnkgdmFyaWFibGUgd2hpY2ggaXMgdXNlZCBpbiBgdXBkYXRlYFxuICovXG5jb25zdCBfY2VudGVyU3BhY2VQb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4vKipcbiAqIEEgdGVtcG9yYXJ5IHZhcmlhYmxlIHdoaWNoIGlzIHVzZWQgaW4gYHVwZGF0ZWBcbiAqL1xuY29uc3QgX25leHRUYWlsID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbmNvbnN0IF9xdWF0QSA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG5jb25zdCBfbWF0QSA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG5jb25zdCBfbWF0QiA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50cyBhIHNpbmdsZSBqb2ludCBvZiBhIHNwcmluZyBib25lLlxuICogSXQgc2hvdWxkIGJlIG1hbmFnZWQgYnkgYSBbW1ZSTVNwcmluZ0JvbmVNYW5hZ2VyXV0uXG4gKi9cbmNsYXNzIFZSTVNwcmluZ0JvbmVKb2ludCB7XG4gICAgZ2V0IGNlbnRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NlbnRlcjtcbiAgICB9XG4gICAgc2V0IGNlbnRlcihjZW50ZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAvLyB1bmluc3RhbGwgaW52ZXJzZSBjYWNoZVxuICAgICAgICBpZiAoKF9hID0gdGhpcy5fY2VudGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudXNlckRhdGEuaW52ZXJzZUNhY2hlUHJveHkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NlbnRlci51c2VyRGF0YS5pbnZlcnNlQ2FjaGVQcm94eS5yZXZlcnQoKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jZW50ZXIudXNlckRhdGEuaW52ZXJzZUNhY2hlUHJveHk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hhbmdlIHRoZSBjZW50ZXJcbiAgICAgICAgdGhpcy5fY2VudGVyID0gY2VudGVyO1xuICAgICAgICAvLyBpbnN0YWxsIGludmVyc2UgY2FjaGVcbiAgICAgICAgaWYgKHRoaXMuX2NlbnRlcikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9jZW50ZXIudXNlckRhdGEuaW52ZXJzZUNhY2hlUHJveHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jZW50ZXIudXNlckRhdGEuaW52ZXJzZUNhY2hlUHJveHkgPSBuZXcgTWF0cml4NEludmVyc2VDYWNoZSh0aGlzLl9jZW50ZXIubWF0cml4V29ybGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBpbml0aWFsTG9jYWxDaGlsZFBvc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5pdGlhbExvY2FsQ2hpbGRQb3NpdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgd29ybGQgbWF0cml4IG9mIGl0cyBwYXJlbnQgb2JqZWN0LlxuICAgICAqIE5vdGUgdGhhdCBpdCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBtYXRyaXguIERvbid0IG11dGF0ZSB0aGlzIGRpcmVjdGx5IVxuICAgICAqL1xuICAgIGdldCBfcGFyZW50TWF0cml4V29ybGQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJvbmUucGFyZW50ID8gdGhpcy5ib25lLnBhcmVudC5tYXRyaXhXb3JsZCA6IElERU5USVRZX01BVFJJWDQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBWUk1TcHJpbmdCb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJvbmUgQW4gT2JqZWN0M0QgdGhhdCB3aWxsIGJlIGF0dGFjaGVkIHRvIHRoaXMgYm9uZVxuICAgICAqIEBwYXJhbSBjaGlsZCBBbiBPYmplY3QzRCB0aGF0IHdpbGwgYmUgdXNlZCBhcyBhIHRhaWwgb2YgdGhpcyBzcHJpbmcgYm9uZS4gSXQgY2FuIGJlIG51bGwgd2hlbiB0aGUgc3ByaW5nIGJvbmUgaXMgaW1wb3J0ZWQgZnJvbSBWUk0gMC4wXG4gICAgICogQHBhcmFtIHNldHRpbmdzIFNldmVyYWwgcGFyYW1ldGVycyByZWxhdGVkIHRvIGJlaGF2aW9yIG9mIHRoZSBzcHJpbmcgYm9uZVxuICAgICAqIEBwYXJhbSBjb2xsaWRlckdyb3VwcyBDb2xsaWRlciBncm91cHMgdGhhdCB3aWxsIGJlIGNvbGxpZGVkIHdpdGggdGhpcyBzcHJpbmcgYm9uZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGJvbmUsIGNoaWxkLCBzZXR0aW5ncyA9IHt9LCBjb2xsaWRlckdyb3VwcyA9IFtdKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3VycmVudCBwb3NpdGlvbiBvZiBjaGlsZCB0YWlsLCBpbiBjZW50ZXIgdW5pdC4gV2lsbCBiZSB1c2VkIGZvciB2ZXJsZXQgaW50ZWdyYXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9jdXJyZW50VGFpbCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcmV2aW91cyBwb3NpdGlvbiBvZiBjaGlsZCB0YWlsLCBpbiBjZW50ZXIgdW5pdC4gV2lsbCBiZSB1c2VkIGZvciB2ZXJsZXQgaW50ZWdyYXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9wcmV2VGFpbCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbml0aWFsIGF4aXMgb2YgdGhlIGJvbmUsIGluIGxvY2FsIHVuaXQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9ib25lQXhpcyA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMZW5ndGggb2YgdGhlIGJvbmUgaW4gd29ybGQgdW5pdC5cbiAgICAgICAgICogV2lsbCBiZSB1c2VkIGZvciBub3JtYWxpemF0aW9uIGluIHVwZGF0ZSBsb29wLCB3aWxsIGJlIHVwZGF0ZWQgYnkge0BsaW5rIF9jYWxjV29ybGRTcGFjZUJvbmVMZW5ndGh9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBJdCdzIHNhbWUgYXMgbG9jYWwgdW5pdCBsZW5ndGggdW5sZXNzIHRoZXJlIGFyZSBzY2FsZSB0cmFuc2Zvcm1hdGlvbnMgaW4gdGhlIHdvcmxkIHNwYWNlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fd29ybGRTcGFjZUJvbmVMZW5ndGggPSAwLjA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIHNwcmluZ2JvbmUgd2lsbCBiZSBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZSBzcGFjZSByZWxhdGl2ZSBmcm9tIHRoaXMgb2JqZWN0LlxuICAgICAgICAgKiBJZiB0aGlzIGlzIGBudWxsYCwgc3ByaW5nYm9uZSB3aWxsIGJlIGNhbGN1bGF0ZWQgaW4gd29ybGQgc3BhY2UuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9jZW50ZXIgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogSW5pdGlhbCBzdGF0ZSBvZiB0aGUgbG9jYWwgbWF0cml4IG9mIHRoZSBib25lLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faW5pdGlhbExvY2FsTWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluaXRpYWwgc3RhdGUgb2YgdGhlIHJvdGF0aW9uIG9mIHRoZSBib25lLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faW5pdGlhbExvY2FsUm90YXRpb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSW5pdGlhbCBzdGF0ZSBvZiB0aGUgcG9zaXRpb24gb2YgaXRzIGNoaWxkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faW5pdGlhbExvY2FsQ2hpbGRQb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgICAgIHRoaXMuYm9uZSA9IGJvbmU7IC8vIHVuaVZSTeOBp+OBriBwYXJlbnRcbiAgICAgICAgdGhpcy5ib25lLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTsgLy8gdXBkYXRl44Gr44KI44KK6KiI566X44GV44KM44KL44Gu44GndGhyZWUuanPlhoXjgafjga7oh6rli5Xlh6bnkIbjga/kuI3opoFcbiAgICAgICAgdGhpcy5jaGlsZCA9IGNoaWxkO1xuICAgICAgICB0aGlzLnNldHRpbmdzID0ge1xuICAgICAgICAgICAgaGl0UmFkaXVzOiAoX2EgPSBzZXR0aW5ncy5oaXRSYWRpdXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDAuMCxcbiAgICAgICAgICAgIHN0aWZmbmVzczogKF9iID0gc2V0dGluZ3Muc3RpZmZuZXNzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAxLjAsXG4gICAgICAgICAgICBncmF2aXR5UG93ZXI6IChfYyA9IHNldHRpbmdzLmdyYXZpdHlQb3dlcikgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMC4wLFxuICAgICAgICAgICAgZ3Jhdml0eURpcjogKF9lID0gKF9kID0gc2V0dGluZ3MuZ3Jhdml0eURpcikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNsb25lKCkpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IG5ldyBUSFJFRS5WZWN0b3IzKDAuMCwgLTEuMCwgMC4wKSxcbiAgICAgICAgICAgIGRyYWdGb3JjZTogKF9mID0gc2V0dGluZ3MuZHJhZ0ZvcmNlKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAwLjQsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29sbGlkZXJHcm91cHMgPSBjb2xsaWRlckdyb3VwcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBpbml0aWFsIHN0YXRlIG9mIHRoaXMgc3ByaW5nIGJvbmUuXG4gICAgICogWW91IG1pZ2h0IHdhbnQgdG8gY2FsbCB7QGxpbmsgVlJNU3ByaW5nQm9uZU1hbmFnZXIuc2V0SW5pdFN0YXRlfSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHNldEluaXRTdGF0ZSgpIHtcbiAgICAgICAgLy8gcmVtZW1iZXIgaW5pdGlhbCBwb3NpdGlvbiBvZiBpdHNlbGZcbiAgICAgICAgdGhpcy5faW5pdGlhbExvY2FsTWF0cml4LmNvcHkodGhpcy5ib25lLm1hdHJpeCk7XG4gICAgICAgIHRoaXMuX2luaXRpYWxMb2NhbFJvdGF0aW9uLmNvcHkodGhpcy5ib25lLnF1YXRlcm5pb24pO1xuICAgICAgICAvLyBzZWUgaW5pdGlhbCBwb3NpdGlvbiBvZiBpdHMgbG9jYWwgY2hpbGRcbiAgICAgICAgaWYgKHRoaXMuY2hpbGQpIHtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxMb2NhbENoaWxkUG9zaXRpb24uY29weSh0aGlzLmNoaWxkLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHZybTAgcmVxdWlyZXMgYSA3Y20gZml4ZWQgYm9uZSBsZW5ndGggZm9yIHRoZSBmaW5hbCBub2RlIGluIGEgY2hhaW5cbiAgICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3ZybS1jL3ZybS1zcGVjaWZpY2F0aW9uL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vVlJNQ19zcHJpbmdCb25lLTEuMCNhYm91dC1zcHJpbmctY29uZmlndXJhdGlvblxuICAgICAgICAgICAgdGhpcy5faW5pdGlhbExvY2FsQ2hpbGRQb3NpdGlvbi5jb3B5KHRoaXMuYm9uZS5wb3NpdGlvbikubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoMC4wNyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29weSB0aGUgY2hpbGQgcG9zaXRpb24gdG8gdGFpbHNcbiAgICAgICAgY29uc3QgbWF0cml4V29ybGRUb0NlbnRlciA9IHRoaXMuX2dldE1hdHJpeFdvcmxkVG9DZW50ZXIoX21hdEEpO1xuICAgICAgICB0aGlzLmJvbmUubG9jYWxUb1dvcmxkKHRoaXMuX2N1cnJlbnRUYWlsLmNvcHkodGhpcy5faW5pdGlhbExvY2FsQ2hpbGRQb3NpdGlvbikpLmFwcGx5TWF0cml4NChtYXRyaXhXb3JsZFRvQ2VudGVyKTtcbiAgICAgICAgdGhpcy5fcHJldlRhaWwuY29weSh0aGlzLl9jdXJyZW50VGFpbCk7XG4gICAgICAgIC8vIHNldCBpbml0aWFsIHN0YXRlcyB0aGF0IGFyZSByZWxhdGVkIHRvIGxvY2FsIGNoaWxkIHBvc2l0aW9uXG4gICAgICAgIHRoaXMuX2JvbmVBeGlzLmNvcHkodGhpcy5faW5pdGlhbExvY2FsQ2hpbGRQb3NpdGlvbikubm9ybWFsaXplKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBzdGF0ZSBvZiB0aGlzIGJvbmUuXG4gICAgICogWW91IG1pZ2h0IHdhbnQgdG8gY2FsbCBbW1ZSTVNwcmluZ0JvbmVNYW5hZ2VyLnJlc2V0XV0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5ib25lLnF1YXRlcm5pb24uY29weSh0aGlzLl9pbml0aWFsTG9jYWxSb3RhdGlvbik7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gdXBkYXRlIGl0cyBtYXRyaXhXb3JsZCBtYW51YWxseSwgc2luY2Ugd2UgdHdlYWtlZCB0aGUgYm9uZSBieSBvdXIgaGFuZFxuICAgICAgICB0aGlzLmJvbmUudXBkYXRlTWF0cml4KCk7XG4gICAgICAgIHRoaXMuYm9uZS5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKHRoaXMuX3BhcmVudE1hdHJpeFdvcmxkLCB0aGlzLmJvbmUubWF0cml4KTtcbiAgICAgICAgLy8gQXBwbHkgdXBkYXRlZCBwb3NpdGlvbiB0byB0YWlsIHN0YXRlc1xuICAgICAgICBjb25zdCBtYXRyaXhXb3JsZFRvQ2VudGVyID0gdGhpcy5fZ2V0TWF0cml4V29ybGRUb0NlbnRlcihfbWF0QSk7XG4gICAgICAgIHRoaXMuYm9uZS5sb2NhbFRvV29ybGQodGhpcy5fY3VycmVudFRhaWwuY29weSh0aGlzLl9pbml0aWFsTG9jYWxDaGlsZFBvc2l0aW9uKSkuYXBwbHlNYXRyaXg0KG1hdHJpeFdvcmxkVG9DZW50ZXIpO1xuICAgICAgICB0aGlzLl9wcmV2VGFpbC5jb3B5KHRoaXMuX2N1cnJlbnRUYWlsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBzdGF0ZSBvZiB0aGlzIGJvbmUuXG4gICAgICogWW91IG1pZ2h0IHdhbnQgdG8gY2FsbCBbW1ZSTVNwcmluZ0JvbmVNYW5hZ2VyLnVwZGF0ZV1dIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGVsdGEgZGVsdGFUaW1lXG4gICAgICovXG4gICAgdXBkYXRlKGRlbHRhKSB7XG4gICAgICAgIGlmIChkZWx0YSA8PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIF93b3JsZFNwYWNlQm9uZUxlbmd0aFxuICAgICAgICB0aGlzLl9jYWxjV29ybGRTcGFjZUJvbmVMZW5ndGgoKTtcbiAgICAgICAgLy8gR2V0IGJvbmUgcG9zaXRpb24gaW4gY2VudGVyIHNwYWNlXG4gICAgICAgIF93b3JsZFNwYWNlUG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMuYm9uZS5tYXRyaXhXb3JsZCk7XG4gICAgICAgIGxldCBtYXRyaXhXb3JsZFRvQ2VudGVyID0gdGhpcy5fZ2V0TWF0cml4V29ybGRUb0NlbnRlcihfbWF0QSk7XG4gICAgICAgIF9jZW50ZXJTcGFjZVBvc2l0aW9uLmNvcHkoX3dvcmxkU3BhY2VQb3NpdGlvbikuYXBwbHlNYXRyaXg0KG1hdHJpeFdvcmxkVG9DZW50ZXIpO1xuICAgICAgICBjb25zdCBxdWF0V29ybGRUb0NlbnRlciA9IF9xdWF0QS5zZXRGcm9tUm90YXRpb25NYXRyaXgobWF0cml4V29ybGRUb0NlbnRlcik7XG4gICAgICAgIC8vIEdldCBwYXJlbnQgbWF0cml4IGluIGNlbnRlciBzcGFjZVxuICAgICAgICBjb25zdCBjZW50ZXJTcGFjZVBhcmVudE1hdHJpeCA9IF9tYXRCLmNvcHkobWF0cml4V29ybGRUb0NlbnRlcikubXVsdGlwbHkodGhpcy5fcGFyZW50TWF0cml4V29ybGQpO1xuICAgICAgICAvLyBHZXQgYm9uZUF4aXMgaW4gY2VudGVyIHNwYWNlXG4gICAgICAgIGNvbnN0IGNlbnRlclNwYWNlQm9uZUF4aXMgPSBfdjNCXG4gICAgICAgICAgICAuY29weSh0aGlzLl9ib25lQXhpcylcbiAgICAgICAgICAgIC5hcHBseU1hdHJpeDQodGhpcy5faW5pdGlhbExvY2FsTWF0cml4KVxuICAgICAgICAgICAgLmFwcGx5TWF0cml4NChjZW50ZXJTcGFjZVBhcmVudE1hdHJpeClcbiAgICAgICAgICAgIC5zdWIoX2NlbnRlclNwYWNlUG9zaXRpb24pXG4gICAgICAgICAgICAubm9ybWFsaXplKCk7XG4gICAgICAgIC8vIGdyYXZpdHkgaW4gY2VudGVyIHNwYWNlXG4gICAgICAgIGNvbnN0IGNlbnRlclNwYWNlR3Jhdml0eSA9IF92M0MuY29weSh0aGlzLnNldHRpbmdzLmdyYXZpdHlEaXIpLmFwcGx5UXVhdGVybmlvbihxdWF0V29ybGRUb0NlbnRlcikubm9ybWFsaXplKCk7XG4gICAgICAgIGNvbnN0IG1hdHJpeENlbnRlclRvV29ybGQgPSB0aGlzLl9nZXRNYXRyaXhDZW50ZXJUb1dvcmxkKF9tYXRBKTtcbiAgICAgICAgLy8gdmVybGV056mN5YiG44Gn5qyh44Gu5L2N572u44KS6KiI566XXG4gICAgICAgIF9uZXh0VGFpbFxuICAgICAgICAgICAgLmNvcHkodGhpcy5fY3VycmVudFRhaWwpXG4gICAgICAgICAgICAuYWRkKF92M0FcbiAgICAgICAgICAgIC5jb3B5KHRoaXMuX2N1cnJlbnRUYWlsKVxuICAgICAgICAgICAgLnN1Yih0aGlzLl9wcmV2VGFpbClcbiAgICAgICAgICAgIC5tdWx0aXBseVNjYWxhcigxIC0gdGhpcy5zZXR0aW5ncy5kcmFnRm9yY2UpKSAvLyDliY3jg5Xjg6zjg7zjg6Djga7np7vli5XjgpLntpnntprjgZnjgoso5rib6KGw44KC44GC44KL44KIKVxuICAgICAgICAgICAgLmFkZChfdjNBLmNvcHkoY2VudGVyU3BhY2VCb25lQXhpcykubXVsdGlwbHlTY2FsYXIodGhpcy5zZXR0aW5ncy5zdGlmZm5lc3MgKiBkZWx0YSkpIC8vIOimquOBruWbnui7ouOBq+OCiOOCi+WtkOODnOODvOODs+OBruenu+WLleebruaomVxuICAgICAgICAgICAgLmFkZChfdjNBLmNvcHkoY2VudGVyU3BhY2VHcmF2aXR5KS5tdWx0aXBseVNjYWxhcih0aGlzLnNldHRpbmdzLmdyYXZpdHlQb3dlciAqIGRlbHRhKSkgLy8g5aSW5Yqb44Gr44KI44KL56e75YuV6YePXG4gICAgICAgICAgICAuYXBwbHlNYXRyaXg0KG1hdHJpeENlbnRlclRvV29ybGQpOyAvLyB0YWls44KSd29ybGQgc3BhY2XjgavmiLvjgZlcbiAgICAgICAgLy8gbm9ybWFsaXplIGJvbmUgbGVuZ3RoXG4gICAgICAgIF9uZXh0VGFpbC5zdWIoX3dvcmxkU3BhY2VQb3NpdGlvbikubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIodGhpcy5fd29ybGRTcGFjZUJvbmVMZW5ndGgpLmFkZChfd29ybGRTcGFjZVBvc2l0aW9uKTtcbiAgICAgICAgLy8gQ29sbGlzaW9u44Gn56e75YuVXG4gICAgICAgIHRoaXMuX2NvbGxpc2lvbihfbmV4dFRhaWwpO1xuICAgICAgICAvLyB1cGRhdGUgcHJldlRhaWwgYW5kIGN1cnJlbnRUYWlsXG4gICAgICAgIG1hdHJpeFdvcmxkVG9DZW50ZXIgPSB0aGlzLl9nZXRNYXRyaXhXb3JsZFRvQ2VudGVyKF9tYXRBKTtcbiAgICAgICAgdGhpcy5fcHJldlRhaWwuY29weSh0aGlzLl9jdXJyZW50VGFpbCk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRUYWlsLmNvcHkoX3YzQS5jb3B5KF9uZXh0VGFpbCkuYXBwbHlNYXRyaXg0KG1hdHJpeFdvcmxkVG9DZW50ZXIpKTtcbiAgICAgICAgLy8gQXBwbHkgcm90YXRpb24sIGNvbnZlcnQgdmVjdG9yMyB0aGluZyBpbnRvIGFjdHVhbCBxdWF0ZXJuaW9uXG4gICAgICAgIC8vIE9yaWdpbmFsIFVuaVZSTSBpcyBkb2luZyBjZW50ZXIgdW5pdCBjYWxjdWx1cyBhdCBoZXJlIGJ1dCB3ZSdyZSBnb25uYSBkbyB0aGlzIG9uIGxvY2FsIHVuaXRcbiAgICAgICAgY29uc3Qgd29ybGRTcGFjZUluaXRpYWxNYXRyaXhJbnYgPSBtYXQ0SW52ZXJ0Q29tcGF0KF9tYXRBLmNvcHkodGhpcy5fcGFyZW50TWF0cml4V29ybGQpLm11bHRpcGx5KHRoaXMuX2luaXRpYWxMb2NhbE1hdHJpeCkpO1xuICAgICAgICBjb25zdCBhcHBseVJvdGF0aW9uID0gX3F1YXRBLnNldEZyb21Vbml0VmVjdG9ycyh0aGlzLl9ib25lQXhpcywgX3YzQS5jb3B5KF9uZXh0VGFpbCkuYXBwbHlNYXRyaXg0KHdvcmxkU3BhY2VJbml0aWFsTWF0cml4SW52KS5ub3JtYWxpemUoKSk7XG4gICAgICAgIHRoaXMuYm9uZS5xdWF0ZXJuaW9uLmNvcHkodGhpcy5faW5pdGlhbExvY2FsUm90YXRpb24pLm11bHRpcGx5KGFwcGx5Um90YXRpb24pO1xuICAgICAgICAvLyBXZSBuZWVkIHRvIHVwZGF0ZSBpdHMgbWF0cml4V29ybGQgbWFudWFsbHksIHNpbmNlIHdlIHR3ZWFrZWQgdGhlIGJvbmUgYnkgb3VyIGhhbmRcbiAgICAgICAgdGhpcy5ib25lLnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgICB0aGlzLmJvbmUubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyh0aGlzLl9wYXJlbnRNYXRyaXhXb3JsZCwgdGhpcy5ib25lLm1hdHJpeCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERvIGNvbGxpc2lvbiBtYXRoIGFnYWluc3QgZXZlcnkgY29sbGlkZXJzIGF0dGFjaGVkIHRvIHRoaXMgYm9uZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YWlsIFRoZSB0YWlsIHlvdSB3YW50IHRvIHByb2Nlc3NcbiAgICAgKi9cbiAgICBfY29sbGlzaW9uKHRhaWwpIHtcbiAgICAgICAgdGhpcy5jb2xsaWRlckdyb3Vwcy5mb3JFYWNoKChjb2xsaWRlckdyb3VwKSA9PiB7XG4gICAgICAgICAgICBjb2xsaWRlckdyb3VwLmNvbGxpZGVycy5mb3JFYWNoKChjb2xsaWRlcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3QgPSBjb2xsaWRlci5zaGFwZS5jYWxjdWxhdGVDb2xsaXNpb24oY29sbGlkZXIubWF0cml4V29ybGQsIHRhaWwsIHRoaXMuc2V0dGluZ3MuaGl0UmFkaXVzLCBfdjNBKTtcbiAgICAgICAgICAgICAgICBpZiAoZGlzdCA8IDAuMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBoaXRcbiAgICAgICAgICAgICAgICAgICAgdGFpbC5hZGQoX3YzQS5tdWx0aXBseVNjYWxhcigtZGlzdCkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBub3JtYWxpemUgYm9uZSBsZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgdGFpbC5zdWIoX3dvcmxkU3BhY2VQb3NpdGlvbikubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIodGhpcy5fd29ybGRTcGFjZUJvbmVMZW5ndGgpLmFkZChfd29ybGRTcGFjZVBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUge0BsaW5rIF93b3JsZFNwYWNlQm9uZUxlbmd0aH0uXG4gICAgICogSW50ZW5kZWQgdG8gYmUgdXNlZCBpbiB7QGxpbmsgdXBkYXRlfS5cbiAgICAgKi9cbiAgICBfY2FsY1dvcmxkU3BhY2VCb25lTGVuZ3RoKCkge1xuICAgICAgICBfdjNBLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLmJvbmUubWF0cml4V29ybGQpOyAvLyBnZXQgd29ybGQgcG9zaXRpb24gb2YgdGhpcy5ib25lXG4gICAgICAgIGlmICh0aGlzLmNoaWxkKSB7XG4gICAgICAgICAgICBfdjNCLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLmNoaWxkLm1hdHJpeFdvcmxkKTsgLy8gZ2V0IHdvcmxkIHBvc2l0aW9uIG9mIHRoaXMuY2hpbGRcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF92M0IuY29weSh0aGlzLl9pbml0aWFsTG9jYWxDaGlsZFBvc2l0aW9uKTtcbiAgICAgICAgICAgIF92M0IuYXBwbHlNYXRyaXg0KHRoaXMuYm9uZS5tYXRyaXhXb3JsZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fd29ybGRTcGFjZUJvbmVMZW5ndGggPSBfdjNBLnN1YihfdjNCKS5sZW5ndGgoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbWF0cml4IHRoYXQgY29udmVydHMgY2VudGVyIHNwYWNlIGludG8gd29ybGQgc3BhY2UuXG4gICAgICogQHBhcmFtIHRhcmdldCBUYXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgX2dldE1hdHJpeENlbnRlclRvV29ybGQodGFyZ2V0KSB7XG4gICAgICAgIGlmICh0aGlzLl9jZW50ZXIpIHtcbiAgICAgICAgICAgIHRhcmdldC5jb3B5KHRoaXMuX2NlbnRlci5tYXRyaXhXb3JsZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXQuaWRlbnRpdHkoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBtYXRyaXggdGhhdCBjb252ZXJ0cyB3b3JsZCBzcGFjZSBpbnRvIGNlbnRlciBzcGFjZS5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0IFRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBfZ2V0TWF0cml4V29ybGRUb0NlbnRlcih0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NlbnRlcikge1xuICAgICAgICAgICAgdGFyZ2V0LmNvcHkodGhpcy5fY2VudGVyLnVzZXJEYXRhLmludmVyc2VDYWNoZVByb3h5LmludmVyc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LmlkZW50aXR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG59XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxuXG5mdW5jdGlvbiB0cmF2ZXJzZUFuY2VzdG9yc0Zyb21Sb290KG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBhbmNlc3RvcnMgPSBbXTtcbiAgICBsZXQgaGVhZCA9IG9iamVjdDtcbiAgICB3aGlsZSAoaGVhZCAhPT0gbnVsbCkge1xuICAgICAgICBhbmNlc3RvcnMudW5zaGlmdChoZWFkKTtcbiAgICAgICAgaGVhZCA9IGhlYWQucGFyZW50O1xuICAgIH1cbiAgICBhbmNlc3RvcnMuZm9yRWFjaCgoYW5jZXN0b3IpID0+IHtcbiAgICAgICAgY2FsbGJhY2soYW5jZXN0b3IpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIFRyYXZlcnNlIGNoaWxkcmVuIG9mIGdpdmVuIG9iamVjdCBhbmQgZXhlY3V0ZSBnaXZlbiBjYWxsYmFjay5cbiAqIFRoZSBnaXZlbiBvYmplY3QgaXRzZWxmIHdvbnQgYmUgZ2l2ZW4gdG8gdGhlIGNhbGxiYWNrLlxuICogSWYgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgY2FsbGJhY2sgaXMgYHRydWVgLCBpdCB3aWxsIGhhbHQgdGhlIHRyYXZlcnNhbCBvZiBpdHMgY2hpbGRyZW4uXG4gKiBAcGFyYW0gb2JqZWN0IEEgcm9vdCBvYmplY3RcbiAqIEBwYXJhbSBjYWxsYmFjayBBIGNhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCBmb3IgZWFjaCBjaGlsZHJlblxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUNoaWxkcmVuVW50aWxDb25kaXRpb25NZXQob2JqZWN0LCBjYWxsYmFjaykge1xuICAgIG9iamVjdC5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxsYmFjayhjaGlsZCk7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICB0cmF2ZXJzZUNoaWxkcmVuVW50aWxDb25kaXRpb25NZXQoY2hpbGQsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5jbGFzcyBWUk1TcHJpbmdCb25lTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2pvaW50cyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5fb2JqZWN0U3ByaW5nQm9uZXNNYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGdldCBqb2ludHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9qb2ludHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgam9pbnRzfSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGdldCBzcHJpbmdCb25lcygpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdWUk1TcHJpbmdCb25lTWFuYWdlcjogc3ByaW5nQm9uZXMgaXMgZGVwcmVjYXRlZC4gdXNlIGpvaW50cyBpbnN0ZWFkLicpO1xuICAgICAgICByZXR1cm4gdGhpcy5fam9pbnRzO1xuICAgIH1cbiAgICBnZXQgY29sbGlkZXJHcm91cHMoKSB7XG4gICAgICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5fam9pbnRzLmZvckVhY2goKHNwcmluZ0JvbmUpID0+IHtcbiAgICAgICAgICAgIHNwcmluZ0JvbmUuY29sbGlkZXJHcm91cHMuZm9yRWFjaCgoY29sbGlkZXJHcm91cCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldC5hZGQoY29sbGlkZXJHcm91cCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHNldCk7XG4gICAgfVxuICAgIGdldCBjb2xsaWRlcnMoKSB7XG4gICAgICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5jb2xsaWRlckdyb3Vwcy5mb3JFYWNoKChjb2xsaWRlckdyb3VwKSA9PiB7XG4gICAgICAgICAgICBjb2xsaWRlckdyb3VwLmNvbGxpZGVycy5mb3JFYWNoKChjb2xsaWRlcikgPT4ge1xuICAgICAgICAgICAgICAgIHNldC5hZGQoY29sbGlkZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShzZXQpO1xuICAgIH1cbiAgICBhZGRKb2ludChqb2ludCkge1xuICAgICAgICB0aGlzLl9qb2ludHMuYWRkKGpvaW50KTtcbiAgICAgICAgbGV0IG9iamVjdFNldCA9IHRoaXMuX29iamVjdFNwcmluZ0JvbmVzTWFwLmdldChqb2ludC5ib25lKTtcbiAgICAgICAgaWYgKG9iamVjdFNldCA9PSBudWxsKSB7XG4gICAgICAgICAgICBvYmplY3RTZXQgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICB0aGlzLl9vYmplY3RTcHJpbmdCb25lc01hcC5zZXQoam9pbnQuYm9uZSwgb2JqZWN0U2V0KTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3RTZXQuYWRkKGpvaW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBhZGRKb2ludH0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBhZGRTcHJpbmdCb25lKGpvaW50KSB7XG4gICAgICAgIGNvbnNvbGUud2FybignVlJNU3ByaW5nQm9uZU1hbmFnZXI6IGFkZFNwcmluZ0JvbmUoKSBpcyBkZXByZWNhdGVkLiB1c2UgYWRkSm9pbnQoKSBpbnN0ZWFkLicpO1xuICAgICAgICB0aGlzLmFkZEpvaW50KGpvaW50KTtcbiAgICB9XG4gICAgZGVsZXRlSm9pbnQoam9pbnQpIHtcbiAgICAgICAgdGhpcy5fam9pbnRzLmRlbGV0ZShqb2ludCk7XG4gICAgICAgIGNvbnN0IG9iamVjdFNldCA9IHRoaXMuX29iamVjdFNwcmluZ0JvbmVzTWFwLmdldChqb2ludC5ib25lKTtcbiAgICAgICAgb2JqZWN0U2V0LmRlbGV0ZShqb2ludCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgZGVsZXRlSm9pbnR9IGluc3RlYWQuXG4gICAgICovXG4gICAgZGVsZXRlU3ByaW5nQm9uZShqb2ludCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1ZSTVNwcmluZ0JvbmVNYW5hZ2VyOiBkZWxldGVTcHJpbmdCb25lKCkgaXMgZGVwcmVjYXRlZC4gdXNlIGRlbGV0ZUpvaW50KCkgaW5zdGVhZC4nKTtcbiAgICAgICAgdGhpcy5kZWxldGVKb2ludChqb2ludCk7XG4gICAgfVxuICAgIHNldEluaXRTdGF0ZSgpIHtcbiAgICAgICAgY29uc3Qgc3ByaW5nQm9uZXNUcmllZCA9IG5ldyBTZXQoKTtcbiAgICAgICAgY29uc3Qgc3ByaW5nQm9uZXNEb25lID0gbmV3IFNldCgpO1xuICAgICAgICBjb25zdCBvYmplY3RVcGRhdGVkID0gbmV3IFNldCgpO1xuICAgICAgICBmb3IgKGNvbnN0IHNwcmluZ0JvbmUgb2YgdGhpcy5fam9pbnRzKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzU3ByaW5nQm9uZShzcHJpbmdCb25lLCBzcHJpbmdCb25lc1RyaWVkLCBzcHJpbmdCb25lc0RvbmUsIG9iamVjdFVwZGF0ZWQsIChzcHJpbmdCb25lKSA9PiBzcHJpbmdCb25lLnNldEluaXRTdGF0ZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgY29uc3Qgc3ByaW5nQm9uZXNUcmllZCA9IG5ldyBTZXQoKTtcbiAgICAgICAgY29uc3Qgc3ByaW5nQm9uZXNEb25lID0gbmV3IFNldCgpO1xuICAgICAgICBjb25zdCBvYmplY3RVcGRhdGVkID0gbmV3IFNldCgpO1xuICAgICAgICBmb3IgKGNvbnN0IHNwcmluZ0JvbmUgb2YgdGhpcy5fam9pbnRzKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzU3ByaW5nQm9uZShzcHJpbmdCb25lLCBzcHJpbmdCb25lc1RyaWVkLCBzcHJpbmdCb25lc0RvbmUsIG9iamVjdFVwZGF0ZWQsIChzcHJpbmdCb25lKSA9PiBzcHJpbmdCb25lLnJlc2V0KCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZShkZWx0YSkge1xuICAgICAgICBjb25zdCBzcHJpbmdCb25lc1RyaWVkID0gbmV3IFNldCgpO1xuICAgICAgICBjb25zdCBzcHJpbmdCb25lc0RvbmUgPSBuZXcgU2V0KCk7XG4gICAgICAgIGNvbnN0IG9iamVjdFVwZGF0ZWQgPSBuZXcgU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3Qgc3ByaW5nQm9uZSBvZiB0aGlzLl9qb2ludHMpIHtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgc3ByaW5nYm9uZVxuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc1NwcmluZ0JvbmUoc3ByaW5nQm9uZSwgc3ByaW5nQm9uZXNUcmllZCwgc3ByaW5nQm9uZXNEb25lLCBvYmplY3RVcGRhdGVkLCAoc3ByaW5nQm9uZSkgPT4gc3ByaW5nQm9uZS51cGRhdGUoZGVsdGEpKTtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBjaGlsZHJlbiB3b3JsZCBtYXRyaWNlc1xuICAgICAgICAgICAgLy8gaXQgaXMgcmVxdWlyZWQgd2hlbiB0aGUgc3ByaW5nIGJvbmUgY2hhaW4gaXMgc3BhcnNlXG4gICAgICAgICAgICB0cmF2ZXJzZUNoaWxkcmVuVW50aWxDb25kaXRpb25NZXQoc3ByaW5nQm9uZS5ib25lLCAob2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgb2JqZWN0IGhhcyBhdHRhY2hlZCBzcHJpbmdib25lLCBoYWx0IHRoZSB0cmF2ZXJzYWxcbiAgICAgICAgICAgICAgICBpZiAoKChfYiA9IChfYSA9IHRoaXMuX29iamVjdFNwcmluZ0JvbmVzTWFwLmdldChvYmplY3QpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2l6ZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UgdXBkYXRlIGl0cyB3b3JsZCBtYXRyaXhcbiAgICAgICAgICAgICAgICBvYmplY3QudXBkYXRlV29ybGRNYXRyaXgoZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgYSBzcHJpbmcgYm9uZS5cbiAgICAgKiBJZiB0aGVyZSBhcmUgb3RoZXIgc3ByaW5nIGJvbmUgdGhhdCBhcmUgZGVwZW5kYW50LCBpdCB3aWxsIHRyeSB0byB1cGRhdGUgdGhlbSByZWN1cnNpdmVseS5cbiAgICAgKiBJdCB1cGRhdGVzIG1hdHJpeFdvcmxkIG9mIGFsbCBhbmNlc3RvcnMgYW5kIG15c2VsZi5cbiAgICAgKiBJdCBtaWdodCB0aHJvdyBhbiBlcnJvciBpZiB0aGVyZSBhcmUgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuICAgICAqXG4gICAgICogSW50ZW5kZWQgdG8gYmUgdXNlZCBpbiB7QGxpbmsgdXBkYXRlfSBhbmQge0BsaW5rIF9wcm9jZXNzU3ByaW5nQm9uZX0gaXRzZWxmIHJlY3Vyc2l2ZWx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHNwcmluZ0JvbmUgQSBzcHJpbmdCb25lIHlvdSB3YW50IHRvIHVwZGF0ZVxuICAgICAqIEBwYXJhbSBzcHJpbmdCb25lc1RyaWVkIFNldCBvZiBzcHJpbmdCb25lcyB0aGF0IGFyZSBhbHJlYWR5IHRyaWVkIHRvIGJlIHVwZGF0ZWRcbiAgICAgKiBAcGFyYW0gc3ByaW5nQm9uZXNEb25lIFNldCBvZiBzcHJpbmdCb25lcyB0aGF0IGFyZSBhbHJlYWR5IHVwIHRvIGRhdGVcbiAgICAgKiBAcGFyYW0gb2JqZWN0VXBkYXRlZCBTZXQgb2Ygb2JqZWN0M0Qgd2hvc2UgbWF0cml4V29ybGQgaXMgdXBkYXRlZFxuICAgICAqL1xuICAgIF9wcm9jZXNzU3ByaW5nQm9uZShzcHJpbmdCb25lLCBzcHJpbmdCb25lc1RyaWVkLCBzcHJpbmdCb25lc0RvbmUsIG9iamVjdFVwZGF0ZWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChzcHJpbmdCb25lc0RvbmUuaGFzKHNwcmluZ0JvbmUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNwcmluZ0JvbmVzVHJpZWQuaGFzKHNwcmluZ0JvbmUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZSTVNwcmluZ0JvbmVNYW5hZ2VyOiBDaXJjdWxhciBkZXBlbmRlbmN5IGRldGVjdGVkIHdoaWxlIHVwZGF0aW5nIHNwcmluZ2JvbmVzJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3ByaW5nQm9uZXNUcmllZC5hZGQoc3ByaW5nQm9uZSk7XG4gICAgICAgIGNvbnN0IGRlcE9iamVjdHMgPSB0aGlzLl9nZXREZXBlbmRlbmNpZXMoc3ByaW5nQm9uZSk7XG4gICAgICAgIGZvciAoY29uc3QgZGVwT2JqZWN0IG9mIGRlcE9iamVjdHMpIHtcbiAgICAgICAgICAgIHRyYXZlcnNlQW5jZXN0b3JzRnJvbVJvb3QoZGVwT2JqZWN0LCAoZGVwT2JqZWN0QW5jZXN0b3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBvYmplY3RTZXQgPSB0aGlzLl9vYmplY3RTcHJpbmdCb25lc01hcC5nZXQoZGVwT2JqZWN0QW5jZXN0b3IpO1xuICAgICAgICAgICAgICAgIGlmIChvYmplY3RTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkZXBTcHJpbmdCb25lIG9mIG9iamVjdFNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc1NwcmluZ0JvbmUoZGVwU3ByaW5nQm9uZSwgc3ByaW5nQm9uZXNUcmllZCwgc3ByaW5nQm9uZXNEb25lLCBvYmplY3RVcGRhdGVkLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIW9iamVjdFVwZGF0ZWQuaGFzKGRlcE9iamVjdEFuY2VzdG9yKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgbWF0cml4IG9mIG5vbi1zcHJpbmdib25lXG4gICAgICAgICAgICAgICAgICAgIGRlcE9iamVjdEFuY2VzdG9yLnVwZGF0ZVdvcmxkTWF0cml4KGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdFVwZGF0ZWQuYWRkKGRlcE9iamVjdEFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyB1cGRhdGUgbXkgbWF0cml4XG4gICAgICAgIHNwcmluZ0JvbmUuYm9uZS51cGRhdGVNYXRyaXgoKTtcbiAgICAgICAgc3ByaW5nQm9uZS5ib25lLnVwZGF0ZVdvcmxkTWF0cml4KGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIGNhbGxiYWNrKHNwcmluZ0JvbmUpO1xuICAgICAgICBvYmplY3RVcGRhdGVkLmFkZChzcHJpbmdCb25lLmJvbmUpO1xuICAgICAgICBzcHJpbmdCb25lc0RvbmUuYWRkKHNwcmluZ0JvbmUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBzZXQgb2Ygb2JqZWN0cyB0aGF0IGFyZSBkZXBlbmRhbnQgb2YgZ2l2ZW4gc3ByaW5nIGJvbmUuXG4gICAgICogQHBhcmFtIHNwcmluZ0JvbmUgQSBzcHJpbmcgYm9uZVxuICAgICAqIEByZXR1cm4gQSBzZXQgb2Ygb2JqZWN0cyB0aGF0IGFyZSBkZXBlbmRhbnQgb2YgZ2l2ZW4gc3ByaW5nIGJvbmVcbiAgICAgKi9cbiAgICBfZ2V0RGVwZW5kZW5jaWVzKHNwcmluZ0JvbmUpIHtcbiAgICAgICAgY29uc3Qgc2V0ID0gbmV3IFNldCgpO1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBzcHJpbmdCb25lLmJvbmUucGFyZW50O1xuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICBzZXQuYWRkKHBhcmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgc3ByaW5nQm9uZS5jb2xsaWRlckdyb3Vwcy5mb3JFYWNoKChjb2xsaWRlckdyb3VwKSA9PiB7XG4gICAgICAgICAgICBjb2xsaWRlckdyb3VwLmNvbGxpZGVycy5mb3JFYWNoKChjb2xsaWRlcikgPT4ge1xuICAgICAgICAgICAgICAgIHNldC5hZGQoY29sbGlkZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2V0O1xuICAgIH1cbn1cblxuLyoqXG4gKiBQb3NzaWJsZSBzcGVjIHZlcnNpb25zIGl0IHJlY29nbml6ZXMuXG4gKi9cbmNvbnN0IFBPU1NJQkxFX1NQRUNfVkVSU0lPTlMgPSBuZXcgU2V0KFsnMS4wJywgJzEuMC1iZXRhJ10pO1xuY2xhc3MgVlJNU3ByaW5nQm9uZUxvYWRlclBsdWdpbiB7XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBWUk1TcHJpbmdCb25lTG9hZGVyUGx1Z2luLkVYVEVOU0lPTl9OQU1FO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG4gICAgICAgIHRoaXMuam9pbnRIZWxwZXJSb290ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmpvaW50SGVscGVyUm9vdDtcbiAgICAgICAgdGhpcy5jb2xsaWRlckhlbHBlclJvb3QgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY29sbGlkZXJIZWxwZXJSb290O1xuICAgIH1cbiAgICBhZnRlclJvb3QoZ2x0Zikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgZ2x0Zi51c2VyRGF0YS52cm1TcHJpbmdCb25lTWFuYWdlciA9IHlpZWxkIHRoaXMuX2ltcG9ydChnbHRmKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEltcG9ydCBzcHJpbmcgYm9uZXMgZnJvbSBhIEdMVEYgYW5kIHJldHVybiBhIHtAbGluayBWUk1TcHJpbmdCb25lTWFuYWdlcn0uXG4gICAgICogSXQgbWlnaHQgcmV0dXJuIGBudWxsYCBpbnN0ZWFkIHdoZW4gaXQgZG9lcyBub3QgbmVlZCB0byBiZSBjcmVhdGVkIG9yIHNvbWV0aGluZyBnbyB3cm9uZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBnbHRmIEEgcGFyc2VkIHJlc3VsdCBvZiBHTFRGIHRha2VuIGZyb20gR0xURkxvYWRlclxuICAgICAqL1xuICAgIF9pbXBvcnQoZ2x0Zikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgdjFSZXN1bHQgPSB5aWVsZCB0aGlzLl92MUltcG9ydChnbHRmKTtcbiAgICAgICAgICAgIGlmICh2MVJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYxUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdjBSZXN1bHQgPSB5aWVsZCB0aGlzLl92MEltcG9ydChnbHRmKTtcbiAgICAgICAgICAgIGlmICh2MFJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYwUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfdjFJbXBvcnQoZ2x0Zikge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QganNvbiA9IGdsdGYucGFyc2VyLmpzb247XG4gICAgICAgICAgICAvLyBlYXJseSBhYm9ydCBpZiBpdCBkb2Vzbid0IHVzZSBzcHJpbmcgYm9uZXNcbiAgICAgICAgICAgIGNvbnN0IGlzU3ByaW5nQm9uZVVzZWQgPSAoKF9hID0ganNvbi5leHRlbnNpb25zVXNlZCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmluZGV4T2YoVlJNU3ByaW5nQm9uZUxvYWRlclBsdWdpbi5FWFRFTlNJT05fTkFNRSkpICE9PSAtMTtcbiAgICAgICAgICAgIGlmICghaXNTcHJpbmdCb25lVXNlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWFuYWdlciA9IG5ldyBWUk1TcHJpbmdCb25lTWFuYWdlcigpO1xuICAgICAgICAgICAgY29uc3QgdGhyZWVOb2RlcyA9IHlpZWxkIGdsdGYucGFyc2VyLmdldERlcGVuZGVuY2llcygnbm9kZScpO1xuICAgICAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gKF9iID0ganNvbi5leHRlbnNpb25zKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbVlJNU3ByaW5nQm9uZUxvYWRlclBsdWdpbi5FWFRFTlNJT05fTkFNRV07XG4gICAgICAgICAgICBpZiAoIWV4dGVuc2lvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3BlY1ZlcnNpb24gPSBleHRlbnNpb24uc3BlY1ZlcnNpb247XG4gICAgICAgICAgICBpZiAoIVBPU1NJQkxFX1NQRUNfVkVSU0lPTlMuaGFzKHNwZWNWZXJzaW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVlJNU3ByaW5nQm9uZUxvYWRlclBsdWdpbjogVW5rbm93biAke1ZSTVNwcmluZ0JvbmVMb2FkZXJQbHVnaW4uRVhURU5TSU9OX05BTUV9IHNwZWNWZXJzaW9uIFwiJHtzcGVjVmVyc2lvbn1cImApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY29sbGlkZXJzID0gKF9jID0gZXh0ZW5zaW9uLmNvbGxpZGVycykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLm1hcCgoc2NoZW1hQ29sbGlkZXIsIGlDb2xsaWRlcikgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRocmVlTm9kZXNbc2NoZW1hQ29sbGlkZXIubm9kZV07XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NoZW1hU2hhcGUgPSBzY2hlbWFDb2xsaWRlci5zaGFwZTtcbiAgICAgICAgICAgICAgICBpZiAoc2NoZW1hU2hhcGUuc3BoZXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbXBvcnRTcGhlcmVDb2xsaWRlcihub2RlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KChfYSA9IHNjaGVtYVNoYXBlLnNwaGVyZS5vZmZzZXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFswLjAsIDAuMCwgMC4wXSksXG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IChfYiA9IHNjaGVtYVNoYXBlLnNwaGVyZS5yYWRpdXMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDAuMCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNjaGVtYVNoYXBlLmNhcHN1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ltcG9ydENhcHN1bGVDb2xsaWRlcihub2RlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KChfYyA9IHNjaGVtYVNoYXBlLmNhcHN1bGUub2Zmc2V0KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBbMC4wLCAwLjAsIDAuMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAoX2QgPSBzY2hlbWFTaGFwZS5jYXBzdWxlLnJhZGl1cykgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFpbDogbmV3IFRIUkVFLlZlY3RvcjMoKS5mcm9tQXJyYXkoKF9lID0gc2NoZW1hU2hhcGUuY2Fwc3VsZS50YWlsKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBbMC4wLCAwLjAsIDAuMF0pLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBWUk1TcHJpbmdCb25lTG9hZGVyUGx1Z2luOiBUaGUgY29sbGlkZXIgIyR7aUNvbGxpZGVyfSBoYXMgbm8gdmFsaWQgc2hhcGVgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgY29sbGlkZXJHcm91cHMgPSAoX2QgPSBleHRlbnNpb24uY29sbGlkZXJHcm91cHMpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5tYXAoKHNjaGVtYUNvbGxpZGVyR3JvdXAsIGlDb2xsaWRlckdyb3VwKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbHMgPSAoKF9hID0gc2NoZW1hQ29sbGlkZXJHcm91cC5jb2xsaWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5tYXAoKGlDb2xsaWRlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSBjb2xsaWRlcnMgPT09IG51bGwgfHwgY29sbGlkZXJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb2xsaWRlcnNbaUNvbGxpZGVyXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFZSTVNwcmluZ0JvbmVMb2FkZXJQbHVnaW46IFRoZSBjb2xsaWRlckdyb3VwICMke2lDb2xsaWRlckdyb3VwfSBhdHRlbXB0ZWQgdG8gdXNlIGEgY29sbGlkZXIgIyR7aUNvbGxpZGVyfSBidXQgbm90IGZvdW5kYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjb2xsaWRlcnM6IGNvbHMsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHNjaGVtYUNvbGxpZGVyR3JvdXAubmFtZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAoX2UgPSBleHRlbnNpb24uc3ByaW5ncykgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmZvckVhY2goKHNjaGVtYVNwcmluZywgaVNwcmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBjb25zdCBzY2hlbWFKb2ludHMgPSBzY2hlbWFTcHJpbmcuam9pbnRzO1xuICAgICAgICAgICAgICAgIC8vIHByZXBhcmUgY29sbGlkZXJzXG4gICAgICAgICAgICAgICAgY29uc3QgY29sbGlkZXJHcm91cHNGb3JTcHJpbmcgPSAoX2EgPSBzY2hlbWFTcHJpbmcuY29sbGlkZXJHcm91cHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXAoKGlDb2xsaWRlckdyb3VwKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gY29sbGlkZXJHcm91cHMgPT09IG51bGwgfHwgY29sbGlkZXJHcm91cHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbGxpZGVyR3JvdXBzW2lDb2xsaWRlckdyb3VwXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdyb3VwID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVlJNU3ByaW5nQm9uZUxvYWRlclBsdWdpbjogVGhlIHNwcmluZyAjJHtpU3ByaW5nfSBhdHRlbXB0ZWQgdG8gdXNlIGEgY29sbGlkZXJHcm91cCAke2lDb2xsaWRlckdyb3VwfSBidXQgbm90IGZvdW5kYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdyb3VwO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IHNjaGVtYVNwcmluZy5jZW50ZXIgIT0gbnVsbCA/IHRocmVlTm9kZXNbc2NoZW1hU3ByaW5nLmNlbnRlcl0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgbGV0IHByZXZTY2hlbWFKb2ludDtcbiAgICAgICAgICAgICAgICBzY2hlbWFKb2ludHMuZm9yRWFjaCgoc2NoZW1hSm9pbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZTY2hlbWFKb2ludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJlcGFyZSBub2RlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlSW5kZXggPSBwcmV2U2NoZW1hSm9pbnQubm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aHJlZU5vZGVzW25vZGVJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZEluZGV4ID0gc2NoZW1hSm9pbnQubm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhyZWVOb2Rlc1tjaGlsZEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXBhcmUgc2V0dGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2V0dGluZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXRSYWRpdXM6IHByZXZTY2hlbWFKb2ludC5oaXRSYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ0ZvcmNlOiBwcmV2U2NoZW1hSm9pbnQuZHJhZ0ZvcmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYXZpdHlQb3dlcjogcHJldlNjaGVtYUpvaW50LmdyYXZpdHlQb3dlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGlmZm5lc3M6IHByZXZTY2hlbWFKb2ludC5zdGlmZm5lc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3Jhdml0eURpcjogcHJldlNjaGVtYUpvaW50LmdyYXZpdHlEaXIgIT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KHByZXZTY2hlbWFKb2ludC5ncmF2aXR5RGlyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgc3ByaW5nIGJvbmVzXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBqb2ludCA9IHRoaXMuX2ltcG9ydEpvaW50KG5vZGUsIGNoaWxkLCBzZXR0aW5nLCBjb2xsaWRlckdyb3Vwc0ZvclNwcmluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2VudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgam9pbnQuY2VudGVyID0gY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFuYWdlci5hZGRKb2ludChqb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJldlNjaGVtYUpvaW50ID0gc2NoZW1hSm9pbnQ7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGluaXQgc3ByaW5nIGJvbmVzXG4gICAgICAgICAgICBtYW5hZ2VyLnNldEluaXRTdGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIG1hbmFnZXI7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfdjBJbXBvcnQoZ2x0Zikge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSBnbHRmLnBhcnNlci5qc29uO1xuICAgICAgICAgICAgLy8gZWFybHkgYWJvcnQgaWYgaXQgZG9lc24ndCB1c2UgdnJtXG4gICAgICAgICAgICBjb25zdCBpc1ZSTVVzZWQgPSAoKF9hID0ganNvbi5leHRlbnNpb25zVXNlZCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmluZGV4T2YoJ1ZSTScpKSAhPT0gLTE7XG4gICAgICAgICAgICBpZiAoIWlzVlJNVXNlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZWFybHkgYWJvcnQgaWYgaXQgZG9lc24ndCBoYXZlIGJvbmUgZ3JvdXBzXG4gICAgICAgICAgICBjb25zdCBleHRlbnNpb24gPSAoX2IgPSBqc29uLmV4dGVuc2lvbnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYlsnVlJNJ107XG4gICAgICAgICAgICBjb25zdCBzY2hlbWFTZWNvbmRhcnlBbmltYXRpb24gPSBleHRlbnNpb24gPT09IG51bGwgfHwgZXh0ZW5zaW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBleHRlbnNpb24uc2Vjb25kYXJ5QW5pbWF0aW9uO1xuICAgICAgICAgICAgaWYgKCFzY2hlbWFTZWNvbmRhcnlBbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYUJvbmVHcm91cHMgPSBzY2hlbWFTZWNvbmRhcnlBbmltYXRpb24gPT09IG51bGwgfHwgc2NoZW1hU2Vjb25kYXJ5QW5pbWF0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzY2hlbWFTZWNvbmRhcnlBbmltYXRpb24uYm9uZUdyb3VwcztcbiAgICAgICAgICAgIGlmICghc2NoZW1hQm9uZUdyb3Vwcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWFuYWdlciA9IG5ldyBWUk1TcHJpbmdCb25lTWFuYWdlcigpO1xuICAgICAgICAgICAgY29uc3QgdGhyZWVOb2RlcyA9IHlpZWxkIGdsdGYucGFyc2VyLmdldERlcGVuZGVuY2llcygnbm9kZScpO1xuICAgICAgICAgICAgY29uc3QgY29sbGlkZXJHcm91cHMgPSAoX2MgPSBzY2hlbWFTZWNvbmRhcnlBbmltYXRpb24uY29sbGlkZXJHcm91cHMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5tYXAoKHNjaGVtYUNvbGxpZGVyR3JvdXApID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRocmVlTm9kZXNbc2NoZW1hQ29sbGlkZXJHcm91cC5ub2RlXTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xsaWRlcnMgPSAoKF9hID0gc2NoZW1hQ29sbGlkZXJHcm91cC5jb2xsaWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5tYXAoKHNjaGVtYUNvbGxpZGVyLCBpQ29sbGlkZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IG5ldyBUSFJFRS5WZWN0b3IzKDAuMCwgMC4wLCAwLjApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NoZW1hQ29sbGlkZXIub2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQuc2V0KChfYSA9IHNjaGVtYUNvbGxpZGVyLm9mZnNldC54KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwLjAsIChfYiA9IHNjaGVtYUNvbGxpZGVyLm9mZnNldC55KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwLjAsIHNjaGVtYUNvbGxpZGVyLm9mZnNldC56ID8gLXNjaGVtYUNvbGxpZGVyLm9mZnNldC56IDogMC4wKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faW1wb3J0U3BoZXJlQ29sbGlkZXIobm9kZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAoX2MgPSBzY2hlbWFDb2xsaWRlci5yYWRpdXMpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDAuMCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY29sbGlkZXJzIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGltcG9ydCBzcHJpbmcgYm9uZXMgZm9yIGVhY2ggc3ByaW5nIGJvbmUgZ3JvdXBzXG4gICAgICAgICAgICBzY2hlbWFCb25lR3JvdXBzID09PSBudWxsIHx8IHNjaGVtYUJvbmVHcm91cHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjaGVtYUJvbmVHcm91cHMuZm9yRWFjaCgoc2NoZW1hQm9uZUdyb3VwLCBpQm9uZUdyb3VwKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm9vdEluZGljZXMgPSBzY2hlbWFCb25lR3JvdXAuYm9uZXM7XG4gICAgICAgICAgICAgICAgaWYgKCFyb290SW5kaWNlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJvb3RJbmRpY2VzLmZvckVhY2goKHJvb3RJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvb3QgPSB0aHJlZU5vZGVzW3Jvb3RJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIC8vIHByZXBhcmUgc2V0dGluZ1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBncmF2aXR5RGlyID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjaGVtYUJvbmVHcm91cC5ncmF2aXR5RGlyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmF2aXR5RGlyLnNldCgoX2EgPSBzY2hlbWFCb25lR3JvdXAuZ3Jhdml0eURpci54KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwLjAsIChfYiA9IHNjaGVtYUJvbmVHcm91cC5ncmF2aXR5RGlyLnkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDAuMCwgKF9jID0gc2NoZW1hQm9uZUdyb3VwLmdyYXZpdHlEaXIueikgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMC4wKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXZpdHlEaXIuc2V0KDAuMCwgLTEuMCwgMC4wKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXIgPSBzY2hlbWFCb25lR3JvdXAuY2VudGVyICE9IG51bGwgPyB0aHJlZU5vZGVzW3NjaGVtYUJvbmVHcm91cC5jZW50ZXJdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXR0aW5nID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGl0UmFkaXVzOiBzY2hlbWFCb25lR3JvdXAuaGl0UmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ0ZvcmNlOiBzY2hlbWFCb25lR3JvdXAuZHJhZ0ZvcmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jhdml0eVBvd2VyOiBzY2hlbWFCb25lR3JvdXAuZ3Jhdml0eVBvd2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RpZmZuZXNzOiBzY2hlbWFCb25lR3JvdXAuc3RpZmZpbmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXZpdHlEaXIsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIC8vIHByZXBhcmUgY29sbGlkZXJzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxpZGVyR3JvdXBzRm9yU3ByaW5nID0gKF9kID0gc2NoZW1hQm9uZUdyb3VwLmNvbGxpZGVyR3JvdXBzKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QubWFwKChpQ29sbGlkZXJHcm91cCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSBjb2xsaWRlckdyb3VwcyA9PT0gbnVsbCB8fCBjb2xsaWRlckdyb3VwcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29sbGlkZXJHcm91cHNbaUNvbGxpZGVyR3JvdXBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdyb3VwID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFZSTVNwcmluZ0JvbmVMb2FkZXJQbHVnaW46IFRoZSBzcHJpbmcgIyR7aUJvbmVHcm91cH0gYXR0ZW1wdGVkIHRvIHVzZSBhIGNvbGxpZGVyR3JvdXAgJHtpQ29sbGlkZXJHcm91cH0gYnV0IG5vdCBmb3VuZGApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdyb3VwO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIHNwcmluZyBib25lc1xuICAgICAgICAgICAgICAgICAgICByb290LnRyYXZlcnNlKChub2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IChfYSA9IG5vZGUuY2hpbGRyZW5bMF0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBqb2ludCA9IHRoaXMuX2ltcG9ydEpvaW50KG5vZGUsIGNoaWxkLCBzZXR0aW5nLCBjb2xsaWRlckdyb3Vwc0ZvclNwcmluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2VudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgam9pbnQuY2VudGVyID0gY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFuYWdlci5hZGRKb2ludChqb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBpbml0IHNwcmluZyBib25lc1xuICAgICAgICAgICAgZ2x0Zi5zY2VuZS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuICAgICAgICAgICAgbWFuYWdlci5zZXRJbml0U3RhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiBtYW5hZ2VyO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2ltcG9ydEpvaW50KG5vZGUsIGNoaWxkLCBzZXR0aW5nLCBjb2xsaWRlckdyb3Vwc0ZvclNwcmluZykge1xuICAgICAgICBjb25zdCBzcHJpbmdCb25lID0gbmV3IFZSTVNwcmluZ0JvbmVKb2ludChub2RlLCBjaGlsZCwgc2V0dGluZywgY29sbGlkZXJHcm91cHNGb3JTcHJpbmcpO1xuICAgICAgICBpZiAodGhpcy5qb2ludEhlbHBlclJvb3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGhlbHBlciA9IG5ldyBWUk1TcHJpbmdCb25lSm9pbnRIZWxwZXIoc3ByaW5nQm9uZSk7XG4gICAgICAgICAgICB0aGlzLmpvaW50SGVscGVyUm9vdC5hZGQoaGVscGVyKTtcbiAgICAgICAgICAgIGhlbHBlci5yZW5kZXJPcmRlciA9IHRoaXMuam9pbnRIZWxwZXJSb290LnJlbmRlck9yZGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcHJpbmdCb25lO1xuICAgIH1cbiAgICBfaW1wb3J0U3BoZXJlQ29sbGlkZXIoZGVzdGluYXRpb24sIHBhcmFtcykge1xuICAgICAgICBjb25zdCB7IG9mZnNldCwgcmFkaXVzIH0gPSBwYXJhbXM7XG4gICAgICAgIGNvbnN0IHNoYXBlID0gbmV3IFZSTVNwcmluZ0JvbmVDb2xsaWRlclNoYXBlU3BoZXJlKHsgb2Zmc2V0LCByYWRpdXMgfSk7XG4gICAgICAgIGNvbnN0IGNvbGxpZGVyID0gbmV3IFZSTVNwcmluZ0JvbmVDb2xsaWRlcihzaGFwZSk7XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZChjb2xsaWRlcik7XG4gICAgICAgIGlmICh0aGlzLmNvbGxpZGVySGVscGVyUm9vdCkge1xuICAgICAgICAgICAgY29uc3QgaGVscGVyID0gbmV3IFZSTVNwcmluZ0JvbmVDb2xsaWRlckhlbHBlcihjb2xsaWRlcik7XG4gICAgICAgICAgICB0aGlzLmNvbGxpZGVySGVscGVyUm9vdC5hZGQoaGVscGVyKTtcbiAgICAgICAgICAgIGhlbHBlci5yZW5kZXJPcmRlciA9IHRoaXMuY29sbGlkZXJIZWxwZXJSb290LnJlbmRlck9yZGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsaWRlcjtcbiAgICB9XG4gICAgX2ltcG9ydENhcHN1bGVDb2xsaWRlcihkZXN0aW5hdGlvbiwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHsgb2Zmc2V0LCByYWRpdXMsIHRhaWwgfSA9IHBhcmFtcztcbiAgICAgICAgY29uc3Qgc2hhcGUgPSBuZXcgVlJNU3ByaW5nQm9uZUNvbGxpZGVyU2hhcGVDYXBzdWxlKHsgb2Zmc2V0LCByYWRpdXMsIHRhaWwgfSk7XG4gICAgICAgIGNvbnN0IGNvbGxpZGVyID0gbmV3IFZSTVNwcmluZ0JvbmVDb2xsaWRlcihzaGFwZSk7XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZChjb2xsaWRlcik7XG4gICAgICAgIGlmICh0aGlzLmNvbGxpZGVySGVscGVyUm9vdCkge1xuICAgICAgICAgICAgY29uc3QgaGVscGVyID0gbmV3IFZSTVNwcmluZ0JvbmVDb2xsaWRlckhlbHBlcihjb2xsaWRlcik7XG4gICAgICAgICAgICB0aGlzLmNvbGxpZGVySGVscGVyUm9vdC5hZGQoaGVscGVyKTtcbiAgICAgICAgICAgIGhlbHBlci5yZW5kZXJPcmRlciA9IHRoaXMuY29sbGlkZXJIZWxwZXJSb290LnJlbmRlck9yZGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsaWRlcjtcbiAgICB9XG59XG5WUk1TcHJpbmdCb25lTG9hZGVyUGx1Z2luLkVYVEVOU0lPTl9OQU1FID0gJ1ZSTUNfc3ByaW5nQm9uZSc7XG5cbmV4cG9ydCB7IFZSTVNwcmluZ0JvbmVDb2xsaWRlciwgVlJNU3ByaW5nQm9uZUNvbGxpZGVySGVscGVyLCBWUk1TcHJpbmdCb25lQ29sbGlkZXJTaGFwZSwgVlJNU3ByaW5nQm9uZUNvbGxpZGVyU2hhcGVDYXBzdWxlLCBWUk1TcHJpbmdCb25lQ29sbGlkZXJTaGFwZVNwaGVyZSwgVlJNU3ByaW5nQm9uZUpvaW50LCBWUk1TcHJpbmdCb25lSm9pbnRIZWxwZXIsIFZSTVNwcmluZ0JvbmVMb2FkZXJQbHVnaW4sIFZSTVNwcmluZ0JvbmVNYW5hZ2VyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHaHlaV1V0ZG5KdExYTndjbWx1WjJKdmJtVXViVzlrZFd4bExtcHpJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12VmxKTlUzQnlhVzVuUW05dVpVTnZiR3hwWkdWeVUyaGhjR1V1ZEhNaUxDSXVMaTl6Y21NdlZsSk5VM0J5YVc1blFtOXVaVU52Ykd4cFpHVnlVMmhoY0dWRFlYQnpkV3hsTG5Seklpd2lMaTR2YzNKakwxWlNUVk53Y21sdVowSnZibVZEYjJ4c2FXUmxjbE5vWVhCbFUzQm9aWEpsTG5Seklpd2lMaTR2YzNKakwyaGxiSEJsY25NdmRYUnBiSE12UTI5c2JHbGtaWEpUYUdGd1pVTmhjSE4xYkdWQ2RXWm1aWEpIWlc5dFpYUnllUzUwY3lJc0lpNHVMM055WXk5b1pXeHdaWEp6TDNWMGFXeHpMME52Ykd4cFpHVnlVMmhoY0dWVGNHaGxjbVZDZFdabVpYSkhaVzl0WlhSeWVTNTBjeUlzSWk0dUwzTnlZeTlvWld4d1pYSnpMMVpTVFZOd2NtbHVaMEp2Ym1WRGIyeHNhV1JsY2tobGJIQmxjaTUwY3lJc0lpNHVMM055WXk5b1pXeHdaWEp6TDNWMGFXeHpMMU53Y21sdVowSnZibVZDZFdabVpYSkhaVzl0WlhSeWVTNTBjeUlzSWk0dUwzTnlZeTlvWld4d1pYSnpMMVpTVFZOd2NtbHVaMEp2Ym1WS2IybHVkRWhsYkhCbGNpNTBjeUlzSWk0dUwzTnlZeTlXVWsxVGNISnBibWRDYjI1bFEyOXNiR2xrWlhJdWRITWlMQ0l1TGk5emNtTXZkWFJwYkhNdmJXRjBORWx1ZG1WeWRFTnZiWEJoZEM1MGN5SXNJaTR1TDNOeVl5OTFkR2xzY3k5TllYUnlhWGcwU1c1MlpYSnpaVU5oWTJobExuUnpJaXdpTGk0dmMzSmpMMVpTVFZOd2NtbHVaMEp2Ym1WS2IybHVkQzUwY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTkwYzJ4cFlpOTBjMnhwWWk1bGN6WXVhbk1pTENJdUxpOXpjbU12ZFhScGJITXZkSEpoZG1WeWMyVkJibU5sYzNSdmNuTkdjbTl0VW05dmRDNTBjeUlzSWk0dUwzTnlZeTkxZEdsc2N5OTBjbUYyWlhKelpVTm9hV3hrY21WdVZXNTBhV3hEYjI1a2FYUnBiMjVOWlhRdWRITWlMQ0l1TGk5emNtTXZWbEpOVTNCeWFXNW5RbTl1WlUxaGJtRm5aWEl1ZEhNaUxDSXVMaTl6Y21NdlZsSk5VM0J5YVc1blFtOXVaVXh2WVdSbGNsQnNkV2RwYmk1MGN5SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRkpsY0hKbGMyVnVkSE1nWVNCemFHRndaU0J2WmlCaElHTnZiR3hwWkdWeUxseHVJQ292WEc1bGVIQnZjblFnWVdKemRISmhZM1FnWTJ4aGMzTWdWbEpOVTNCeWFXNW5RbTl1WlVOdmJHeHBaR1Z5VTJoaGNHVWdlMXh1SUNBdktpcGNiaUFnSUNvZ1ZHaGxJSFI1Y0dVZ2IyWWdkR2hsSUhOb1lYQmxMbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJR0ZpYzNSeVlXTjBJR2RsZENCMGVYQmxLQ2s2SUhOMGNtbHVaenRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMkZzWTNWc1lYUmxJR0VnWkdsemRHRnVZMlVnWVc1a0lHRWdaR2x5WldOMGFXOXVJR1p5YjIwZ2RHaGxJR052Ykd4cFpHVnlJSFJ2SUdFZ2RHRnlaMlYwSUc5aWFtVmpkQzVjYmlBZ0lDb2dTWFFuY3lCb2FYUWdhV1lnZEdobElHUnBjM1JoYm1ObElHbHpJRzVsWjJGMGFYWmxMbHh1SUNBZ0tpQlVhR1VnWkdseVpXTjBhVzl1SUhkcGJHd2dZbVVnWTI5dWRHRnBibVZrSUdsdUlIUm9aU0JuYVhabGJpQjBZWEpuWlhRZ2RtVmpkRzl5TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ1kyOXNiR2xrWlhKTllYUnlhWGdnUVNCdFlYUnlhWGdnY21Wd2NtVnpaVzUwY3lCMGFHVWdkSEpoYm5ObWIzSnRJRzltSUhSb1pTQmpiMnhzYVdSbGNseHVJQ0FnS2lCQWNHRnlZVzBnYjJKcVpXTjBVRzl6YVhScGIyNGdRU0IyWldOMGIzSWdjbVZ3Y21WelpXNTBjeUIwYUdVZ2NHOXphWFJwYjI0Z2IyWWdkR2hsSUhSaGNtZGxkQ0J2WW1wbFkzUmNiaUFnSUNvZ1FIQmhjbUZ0SUc5aWFtVmpkRkpoWkdsMWN5QlVhR1VnY21Ga2FYVnpJRzltSUhSb1pTQnZZbXBsWTNSY2JpQWdJQ29nUUhCaGNtRnRJSFJoY21kbGRDQlVhR1VnY21WemRXeDBJR1JwY21WamRHbHZiaUIzYVd4c0lHSmxJR052Ym5SaGFXNWxaQ0JwYmlCMGFHbHpJSFpsWTNSdmNseHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklHRmljM1J5WVdOMElHTmhiR04xYkdGMFpVTnZiR3hwYzJsdmJpaGNiaUFnSUNCamIyeHNhV1JsY2sxaGRISnBlRG9nVkVoU1JVVXVUV0YwY21sNE5DeGNiaUFnSUNCdlltcGxZM1JRYjNOcGRHbHZiam9nVkVoU1JVVXVWbVZqZEc5eU15eGNiaUFnSUNCdlltcGxZM1JTWVdScGRYTTZJRzUxYldKbGNpeGNiaUFnSUNCMFlYSm5aWFE2SUZSSVVrVkZMbFpsWTNSdmNqTXNYRzRnSUNrNklHNTFiV0psY2p0Y2JuMWNiaUlzSW1sdGNHOXlkQ0FxSUdGeklGUklVa1ZGSUdaeWIyMGdKM1JvY21WbEp6dGNibWx0Y0c5eWRDQjdJRlpTVFZOd2NtbHVaMEp2Ym1WRGIyeHNhV1JsY2xOb1lYQmxJSDBnWm5KdmJTQW5MaTlXVWsxVGNISnBibWRDYjI1bFEyOXNiR2xrWlhKVGFHRndaU2M3WEc1Y2JtTnZibk4wSUY5Mk0wRWdQU0J1WlhjZ1ZFaFNSVVV1Vm1WamRHOXlNeWdwTzF4dVkyOXVjM1FnWDNZelFpQTlJRzVsZHlCVVNGSkZSUzVXWldOMGIzSXpLQ2s3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJXVWsxVGNISnBibWRDYjI1bFEyOXNiR2xrWlhKVGFHRndaVU5oY0hOMWJHVWdaWGgwWlc1a2N5QldVazFUY0hKcGJtZENiMjVsUTI5c2JHbGtaWEpUYUdGd1pTQjdYRzRnSUhCMVlteHBZeUJuWlhRZ2RIbHdaU2dwT2lBblkyRndjM1ZzWlNjZ2UxeHVJQ0FnSUhKbGRIVnliaUFuWTJGd2MzVnNaU2M3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1ZHaGxJRzltWm5ObGRDQnZaaUIwYUdVZ2FHVmhaQ0JtY205dElIUm9aU0J2Y21sbmFXNHVYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdiMlptYzJWME9pQlVTRkpGUlM1V1pXTjBiM0l6TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ2IyWm1jMlYwSUc5bUlIUm9aU0IwWVdsc0lHWnliMjBnZEdobElHOXlhV2RwYmk1Y2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCMFlXbHNPaUJVU0ZKRlJTNVdaV04wYjNJek8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVWdjbUZrYVhWekxseHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklISmhaR2wxY3pvZ2JuVnRZbVZ5TzF4dVhHNGdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWh3WVhKaGJYTS9PaUI3SUhKaFpHbDFjejg2SUc1MWJXSmxjanNnYjJabWMyVjBQem9nVkVoU1JVVXVWbVZqZEc5eU16c2dkR0ZwYkQ4NklGUklVa1ZGTGxabFkzUnZjak1nZlNrZ2UxeHVJQ0FnSUhOMWNHVnlLQ2s3WEc1Y2JpQWdJQ0IwYUdsekxtOW1abk5sZENBOUlIQmhjbUZ0Y3o4dWIyWm1jMlYwSUQ4L0lHNWxkeUJVU0ZKRlJTNVdaV04wYjNJektEQXVNQ3dnTUM0d0xDQXdMakFwTzF4dUlDQWdJSFJvYVhNdWRHRnBiQ0E5SUhCaGNtRnRjejh1ZEdGcGJDQS9QeUJ1WlhjZ1ZFaFNSVVV1Vm1WamRHOXlNeWd3TGpBc0lEQXVNQ3dnTUM0d0tUdGNiaUFnSUNCMGFHbHpMbkpoWkdsMWN5QTlJSEJoY21GdGN6OHVjbUZrYVhWeklEOC9JREF1TUR0Y2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCallXeGpkV3hoZEdWRGIyeHNhWE5wYjI0b1hHNGdJQ0FnWTI5c2JHbGtaWEpOWVhSeWFYZzZJRlJJVWtWRkxrMWhkSEpwZURRc1hHNGdJQ0FnYjJKcVpXTjBVRzl6YVhScGIyNDZJRlJJVWtWRkxsWmxZM1J2Y2pNc1hHNGdJQ0FnYjJKcVpXTjBVbUZrYVhWek9pQnVkVzFpWlhJc1hHNGdJQ0FnZEdGeVoyVjBPaUJVU0ZKRlJTNVdaV04wYjNJekxGeHVJQ0FwT2lCdWRXMWlaWElnZTF4dUlDQWdJRjkyTTBFdVkyOXdlU2gwYUdsekxtOW1abk5sZENrdVlYQndiSGxOWVhSeWFYZzBLR052Ykd4cFpHVnlUV0YwY21sNEtUc2dMeThnZEhKaGJuTm1iM0p0WldRZ2FHVmhaRnh1SUNBZ0lGOTJNMEl1WTI5d2VTaDBhR2x6TG5SaGFXd3BMbUZ3Y0d4NVRXRjBjbWw0TkNoamIyeHNhV1JsY2sxaGRISnBlQ2s3SUM4dklIUnlZVzV6Wm05eWJXVmtJSFJoYVd4Y2JpQWdJQ0JmZGpOQ0xuTjFZaWhmZGpOQktUc2dMeThnWm5KdmJTQm9aV0ZrSUhSdklIUmhhV3hjYmlBZ0lDQmpiMjV6ZENCc1pXNW5kR2hUY1VOaGNITjFiR1VnUFNCZmRqTkNMbXhsYm1kMGFGTnhLQ2s3WEc1Y2JpQWdJQ0IwWVhKblpYUXVZMjl3ZVNodlltcGxZM1JRYjNOcGRHbHZiaWt1YzNWaUtGOTJNMEVwT3lBdkx5Qm1jbTl0SUdobFlXUWdkRzhnYjJKcVpXTjBYRzRnSUNBZ1kyOXVjM1FnWkc5MElEMGdYM1l6UWk1a2IzUW9kR0Z5WjJWMEtUc2dMeThnWkc5MElIQnliMlIxWTNRZ2IyWWdiMlptYzJWMFZHOVVZV2xzSUdGdVpDQnZabVp6WlhSVWIwOWlhbVZqZEZ4dVhHNGdJQ0FnYVdZZ0tHUnZkQ0E4UFNBd0xqQXBJSHRjYmlBZ0lDQWdJQzh2SUdsbUlHOWlhbVZqZENCcGN5QnVaV0Z5SUdaeWIyMGdkR2hsSUdobFlXUmNiaUFnSUNBZ0lDOHZJR1J2SUc1dmRHaHBibWNzSUhWelpTQjBhR1VnWTNWeWNtVnVkQ0IyWVd4MVpTQmthWEpsWTNSc2VWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JHVnVaM1JvVTNGRFlYQnpkV3hsSUR3OUlHUnZkQ2tnZTF4dUlDQWdJQ0FnTHk4Z2FXWWdiMkpxWldOMElHbHpJRzVsWVhJZ1puSnZiU0IwYUdVZ2RHRnBiRnh1SUNBZ0lDQWdkR0Z5WjJWMExuTjFZaWhmZGpOQ0tUc2dMeThnWm5KdmJTQjBZV2xzSUhSdklHOWlhbVZqZEZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQXZMeUJwWmlCdlltcGxZM1FnYVhNZ1ltVjBkMlZsYmlCMGQyOGdaVzVrYzF4dUlDQWdJQ0FnWDNZelFpNXRkV3gwYVhCc2VWTmpZV3hoY2loa2IzUWdMeUJzWlc1bmRHaFRjVU5oY0hOMWJHVXBPeUF2THlCbWNtOXRJR2hsWVdRZ2RHOGdkR2hsSUc1bFlYSmxjM1FnY0c5cGJuUWdiMllnZEdobElITm9ZV1owWEc0Z0lDQWdJQ0IwWVhKblpYUXVjM1ZpS0Y5Mk0wSXBPeUF2THlCbWNtOXRJSFJvWlNCemFHRm1kQ0J3YjJsdWRDQjBieUJ2WW1wbFkzUmNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J5WVdScGRYTWdQU0J2WW1wbFkzUlNZV1JwZFhNZ0t5QjBhR2x6TG5KaFpHbDFjenRjYmlBZ0lDQmpiMjV6ZENCa2FYTjBZVzVqWlNBOUlIUmhjbWRsZEM1c1pXNW5kR2dvS1NBdElISmhaR2wxY3p0Y2JpQWdJQ0IwWVhKblpYUXVibTl5YldGc2FYcGxLQ2s3WEc0Z0lDQWdjbVYwZFhKdUlHUnBjM1JoYm1ObE8xeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdLaUJoY3lCVVNGSkZSU0JtY205dElDZDBhSEpsWlNjN1hHNXBiWEJ2Y25RZ2V5QldVazFUY0hKcGJtZENiMjVsUTI5c2JHbGtaWEpUYUdGd1pTQjlJR1p5YjIwZ0p5NHZWbEpOVTNCeWFXNW5RbTl1WlVOdmJHeHBaR1Z5VTJoaGNHVW5PMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdWbEpOVTNCeWFXNW5RbTl1WlVOdmJHeHBaR1Z5VTJoaGNHVlRjR2hsY21VZ1pYaDBaVzVrY3lCV1VrMVRjSEpwYm1kQ2IyNWxRMjlzYkdsa1pYSlRhR0Z3WlNCN1hHNGdJSEIxWW14cFl5Qm5aWFFnZEhsd1pTZ3BPaUFuYzNCb1pYSmxKeUI3WEc0Z0lDQWdjbVYwZFhKdUlDZHpjR2hsY21Vbk8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJvWlNCdlptWnpaWFFnWm5KdmJTQjBhR1VnYjNKcFoybHVMbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJRzltWm5ObGREb2dWRWhTUlVVdVZtVmpkRzl5TXp0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVkdobElISmhaR2wxY3k1Y2JpQWdJQ292WEc0Z0lIQjFZbXhwWXlCeVlXUnBkWE02SUc1MWJXSmxjanRjYmx4dUlDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9jR0Z5WVcxelB6b2dleUJ5WVdScGRYTS9PaUJ1ZFcxaVpYSTdJRzltWm5ObGREODZJRlJJVWtWRkxsWmxZM1J2Y2pNZ2ZTa2dlMXh1SUNBZ0lITjFjR1Z5S0NrN1hHNWNiaUFnSUNCMGFHbHpMbTltWm5ObGRDQTlJSEJoY21GdGN6OHViMlptYzJWMElEOC9JRzVsZHlCVVNGSkZSUzVXWldOMGIzSXpLREF1TUN3Z01DNHdMQ0F3TGpBcE8xeHVJQ0FnSUhSb2FYTXVjbUZrYVhWeklEMGdjR0Z5WVcxelB5NXlZV1JwZFhNZ1B6OGdNQzR3TzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUdOaGJHTjFiR0YwWlVOdmJHeHBjMmx2YmloY2JpQWdJQ0JqYjJ4c2FXUmxjazFoZEhKcGVEb2dWRWhTUlVVdVRXRjBjbWw0TkN4Y2JpQWdJQ0J2WW1wbFkzUlFiM05wZEdsdmJqb2dWRWhTUlVVdVZtVmpkRzl5TXl4Y2JpQWdJQ0J2WW1wbFkzUlNZV1JwZFhNNklHNTFiV0psY2l4Y2JpQWdJQ0IwWVhKblpYUTZJRlJJVWtWRkxsWmxZM1J2Y2pNc1hHNGdJQ2s2SUc1MWJXSmxjaUI3WEc0Z0lDQWdkR0Z5WjJWMExtTnZjSGtvZEdocGN5NXZabVp6WlhRcExtRndjR3g1VFdGMGNtbDROQ2hqYjJ4c2FXUmxjazFoZEhKcGVDazdJQzh2SUhSeVlXNXpabTl5YldWa0lHOW1abk5sZEZ4dUlDQWdJSFJoY21kbGRDNXVaV2RoZEdVb0tTNWhaR1FvYjJKcVpXTjBVRzl6YVhScGIyNHBPeUF2THlCaElIWmxZM1J2Y2lCbWNtOXRJR052Ykd4cFpHVnlJR05sYm5SbGNpQjBieUJ2WW1wbFkzUWdjRzl6YVhScGIyNWNiaUFnSUNCamIyNXpkQ0J5WVdScGRYTWdQU0J2WW1wbFkzUlNZV1JwZFhNZ0t5QjBhR2x6TG5KaFpHbDFjenRjYmlBZ0lDQmpiMjV6ZENCa2FYTjBZVzVqWlNBOUlIUmhjbWRsZEM1c1pXNW5kR2dvS1NBdElISmhaR2wxY3p0Y2JpQWdJQ0IwWVhKblpYUXVibTl5YldGc2FYcGxLQ2s3WEc0Z0lDQWdjbVYwZFhKdUlHUnBjM1JoYm1ObE8xeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdLaUJoY3lCVVNGSkZSU0JtY205dElDZDBhSEpsWlNjN1hHNXBiWEJ2Y25RZ2V5QldVazFUY0hKcGJtZENiMjVsUTI5c2JHbGtaWEpUYUdGd1pVTmhjSE4xYkdVZ2ZTQm1jbTl0SUNjdUxpOHVMaTlXVWsxVGNISnBibWRDYjI1bFEyOXNiR2xrWlhKVGFHRndaVU5oY0hOMWJHVW5PMXh1YVcxd2IzSjBJSHNnUTI5c2JHbGtaWEpUYUdGd1pVSjFabVpsY2tkbGIyMWxkSEo1SUgwZ1puSnZiU0FuTGk5RGIyeHNhV1JsY2xOb1lYQmxRblZtWm1WeVIyVnZiV1YwY25rbk8xeHVYRzVqYjI1emRDQmZkak5CSUQwZ2JtVjNJRlJJVWtWRkxsWmxZM1J2Y2pNb0tUdGNibHh1Wlhod2IzSjBJR05zWVhOeklFTnZiR3hwWkdWeVUyaGhjR1ZEWVhCemRXeGxRblZtWm1WeVIyVnZiV1YwY25rZ1pYaDBaVzVrY3lCVVNGSkZSUzVDZFdabVpYSkhaVzl0WlhSeWVTQnBiWEJzWlcxbGJuUnpJRU52Ykd4cFpHVnlVMmhoY0dWQ2RXWm1aWEpIWlc5dFpYUnllU0I3WEc0Z0lIQjFZbXhwWXlCM2IzSnNaRk5qWVd4bElEMGdNUzR3TzF4dVhHNGdJSEJ5YVhaaGRHVWdjbVZoWkc5dWJIa2dYMkYwZEhKUWIzTTZJRlJJVWtWRkxrSjFabVpsY2tGMGRISnBZblYwWlR0Y2JpQWdjSEpwZG1GMFpTQnlaV0ZrYjI1c2VTQmZZWFIwY2tsdVpHVjRPaUJVU0ZKRlJTNUNkV1ptWlhKQmRIUnlhV0oxZEdVN1hHNGdJSEJ5YVhaaGRHVWdjbVZoWkc5dWJIa2dYM05vWVhCbE9pQldVazFUY0hKcGJtZENiMjVsUTI5c2JHbGtaWEpUYUdGd1pVTmhjSE4xYkdVN1hHNGdJSEJ5YVhaaGRHVWdYMk4xY25KbGJuUlNZV1JwZFhNZ1BTQXdPMXh1SUNCd2NtbDJZWFJsSUhKbFlXUnZibXg1SUY5amRYSnlaVzUwVDJabWMyVjBJRDBnYm1WM0lGUklVa1ZGTGxabFkzUnZjak1vS1R0Y2JpQWdjSEpwZG1GMFpTQnlaV0ZrYjI1c2VTQmZZM1Z5Y21WdWRGUmhhV3dnUFNCdVpYY2dWRWhTUlVVdVZtVmpkRzl5TXlncE8xeHVYRzRnSUhCMVlteHBZeUJqYjI1emRISjFZM1J2Y2loemFHRndaVG9nVmxKTlUzQnlhVzVuUW05dVpVTnZiR3hwWkdWeVUyaGhjR1ZEWVhCemRXeGxLU0I3WEc0Z0lDQWdjM1Z3WlhJb0tUdGNibHh1SUNBZ0lIUm9hWE11WDNOb1lYQmxJRDBnYzJoaGNHVTdYRzVjYmlBZ0lDQjBhR2x6TGw5aGRIUnlVRzl6SUQwZ2JtVjNJRlJJVWtWRkxrSjFabVpsY2tGMGRISnBZblYwWlNodVpYY2dSbXh2WVhRek1rRnljbUY1S0RNNU5pa3NJRE1wTzF4dUlDQWdJSFJvYVhNdWMyVjBRWFIwY21saWRYUmxLQ2R3YjNOcGRHbHZiaWNzSUhSb2FYTXVYMkYwZEhKUWIzTXBPMXh1WEc0Z0lDQWdkR2hwY3k1ZllYUjBja2x1WkdWNElEMGdibVYzSUZSSVVrVkZMa0oxWm1abGNrRjBkSEpwWW5WMFpTaHVaWGNnVldsdWRERTJRWEp5WVhrb01qWTBLU3dnTVNrN1hHNGdJQ0FnZEdocGN5NXpaWFJKYm1SbGVDaDBhR2x6TGw5aGRIUnlTVzVrWlhncE8xeHVYRzRnSUNBZ2RHaHBjeTVmWW5WcGJHUkpibVJsZUNncE8xeHVJQ0FnSUhSb2FYTXVkWEJrWVhSbEtDazdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdkWEJrWVhSbEtDazZJSFp2YVdRZ2UxeHVJQ0FnSUd4bGRDQnphRzkxYkdSVmNHUmhkR1ZIWlc5dFpYUnllU0E5SUdaaGJITmxPMXh1WEc0Z0lDQWdZMjl1YzNRZ2NtRmthWFZ6SUQwZ2RHaHBjeTVmYzJoaGNHVXVjbUZrYVhWeklDOGdkR2hwY3k1M2IzSnNaRk5qWVd4bE8xeHVJQ0FnSUdsbUlDaDBhR2x6TGw5amRYSnlaVzUwVW1Ga2FYVnpJQ0U5UFNCeVlXUnBkWE1wSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMk4xY25KbGJuUlNZV1JwZFhNZ1BTQnlZV1JwZFhNN1hHNGdJQ0FnSUNCemFHOTFiR1JWY0dSaGRHVkhaVzl0WlhSeWVTQTlJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tDRjBhR2x6TGw5amRYSnlaVzUwVDJabWMyVjBMbVZ4ZFdGc2N5aDBhR2x6TGw5emFHRndaUzV2Wm1aelpYUXBLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWpkWEp5Wlc1MFQyWm1jMlYwTG1OdmNIa29kR2hwY3k1ZmMyaGhjR1V1YjJabWMyVjBLVHRjYmlBZ0lDQWdJSE5vYjNWc1pGVndaR0YwWlVkbGIyMWxkSEo1SUQwZ2RISjFaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCMFlXbHNJRDBnWDNZelFTNWpiM0I1S0hSb2FYTXVYM05vWVhCbExuUmhhV3dwTG1ScGRtbGtaVk5qWVd4aGNpaDBhR2x6TG5kdmNteGtVMk5oYkdVcE8xeHVJQ0FnSUdsbUlDaDBhR2x6TGw5amRYSnlaVzUwVkdGcGJDNWthWE4wWVc1alpWUnZVM0YxWVhKbFpDaDBZV2xzS1NBK0lERmxMVEV3S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDlqZFhKeVpXNTBWR0ZwYkM1amIzQjVLSFJoYVd3cE8xeHVJQ0FnSUNBZ2MyaHZkV3hrVlhCa1lYUmxSMlZ2YldWMGNua2dQU0IwY25WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHphRzkxYkdSVmNHUmhkR1ZIWlc5dFpYUnllU2tnZTF4dUlDQWdJQ0FnZEdocGN5NWZZblZwYkdSUWIzTnBkR2x2YmlncE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lIQnlhWFpoZEdVZ1gySjFhV3hrVUc5emFYUnBiMjRvS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdYM1l6UVM1amIzQjVLSFJvYVhNdVgyTjFjbkpsYm5SVVlXbHNLUzV6ZFdJb2RHaHBjeTVmWTNWeWNtVnVkRTltWm5ObGRDazdYRzRnSUNBZ1kyOXVjM1FnYkNBOUlGOTJNMEV1YkdWdVozUm9LQ2tnTHlCMGFHbHpMbDlqZFhKeVpXNTBVbUZrYVhWek8xeHVYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BEMGdNVFk3SUdrckt5a2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2RDQTlJQ2hwSUM4Z01UWXVNQ2tnS2lCTllYUm9MbEJKTzF4dVhHNGdJQ0FnSUNCMGFHbHpMbDloZEhSeVVHOXpMbk5sZEZoWldpaHBMQ0F0VFdGMGFDNXphVzRvZENrc0lDMU5ZWFJvTG1OdmN5aDBLU3dnTUM0d0tUdGNiaUFnSUNBZ0lIUm9hWE11WDJGMGRISlFiM011YzJWMFdGbGFLREUzSUNzZ2FTd2diQ0FySUUxaGRHZ3VjMmx1S0hRcExDQk5ZWFJvTG1OdmN5aDBLU3dnTUM0d0tUdGNiaUFnSUNBZ0lIUm9hWE11WDJGMGRISlFiM011YzJWMFdGbGFLRE0wSUNzZ2FTd2dMVTFoZEdndWMybHVLSFFwTENBd0xqQXNJQzFOWVhSb0xtTnZjeWgwS1NrN1hHNGdJQ0FnSUNCMGFHbHpMbDloZEhSeVVHOXpMbk5sZEZoWldpZzFNU0FySUdrc0lHd2dLeUJOWVhSb0xuTnBiaWgwS1N3Z01DNHdMQ0JOWVhSb0xtTnZjeWgwS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENBek1qc2dhU3NyS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0IwSUQwZ0tHa2dMeUF4Tmk0d0tTQXFJRTFoZEdndVVFazdYRzRnSUNBZ0lDQjBhR2x6TGw5aGRIUnlVRzl6TG5ObGRGaFpXaWcyT0NBcklHa3NJREF1TUN3Z1RXRjBhQzV6YVc0b2RDa3NJRTFoZEdndVkyOXpLSFFwS1R0Y2JpQWdJQ0FnSUhSb2FYTXVYMkYwZEhKUWIzTXVjMlYwV0ZsYUtERXdNQ0FySUdrc0lHd3NJRTFoZEdndWMybHVLSFFwTENCTllYUm9MbU52Y3loMEtTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnZEdobGRHRWdQU0JOWVhSb0xtRjBZVzR5S0Y5Mk0wRXVlU3dnVFdGMGFDNXpjWEowS0Y5Mk0wRXVlQ0FxSUY5Mk0wRXVlQ0FySUY5Mk0wRXVlaUFxSUY5Mk0wRXVlaWtwTzF4dUlDQWdJR052Ym5OMElIQm9hU0E5SUMxTllYUm9MbUYwWVc0eUtGOTJNMEV1ZWl3Z1gzWXpRUzU0S1R0Y2JseHVJQ0FnSUhSb2FYTXVjbTkwWVhSbFdpaDBhR1YwWVNrN1hHNGdJQ0FnZEdocGN5NXliM1JoZEdWWktIQm9hU2s3WEc0Z0lDQWdkR2hwY3k1elkyRnNaU2gwYUdsekxsOWpkWEp5Wlc1MFVtRmthWFZ6TENCMGFHbHpMbDlqZFhKeVpXNTBVbUZrYVhWekxDQjBhR2x6TGw5amRYSnlaVzUwVW1Ga2FYVnpLVHRjYmlBZ0lDQjBhR2x6TG5SeVlXNXpiR0YwWlNoMGFHbHpMbDlqZFhKeVpXNTBUMlptYzJWMExuZ3NJSFJvYVhNdVgyTjFjbkpsYm5SUFptWnpaWFF1ZVN3Z2RHaHBjeTVmWTNWeWNtVnVkRTltWm5ObGRDNTZLVHRjYmx4dUlDQWdJSFJvYVhNdVgyRjBkSEpRYjNNdWJtVmxaSE5WY0dSaGRHVWdQU0IwY25WbE8xeHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQmZZblZwYkdSSmJtUmxlQ2dwT2lCMmIybGtJSHRjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJRE0wT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR052Ym5OMElHa3hJRDBnS0drZ0t5QXhLU0FsSURNME8xeHVYRzRnSUNBZ0lDQjBhR2x6TGw5aGRIUnlTVzVrWlhndWMyVjBXRmtvYVNBcUlESXNJR2tzSUdreEtUdGNiaUFnSUNBZ0lIUm9hWE11WDJGMGRISkpibVJsZUM1elpYUllXU2cyT0NBcklHa2dLaUF5TENBek5DQXJJR2tzSURNMElDc2dhVEVwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnTXpJN0lHa3JLeWtnZTF4dUlDQWdJQ0FnWTI5dWMzUWdhVEVnUFNBb2FTQXJJREVwSUNVZ016STdYRzVjYmlBZ0lDQWdJSFJvYVhNdVgyRjBkSEpKYm1SbGVDNXpaWFJZV1NneE16WWdLeUJwSUNvZ01pd2dOamdnS3lCcExDQTJPQ0FySUdreEtUdGNiaUFnSUNBZ0lIUm9hWE11WDJGMGRISkpibVJsZUM1elpYUllXU2d5TURBZ0t5QnBJQ29nTWl3Z01UQXdJQ3NnYVN3Z01UQXdJQ3NnYVRFcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVYMkYwZEhKSmJtUmxlQzV1WldWa2MxVndaR0YwWlNBOUlIUnlkV1U3WEc0Z0lIMWNibjFjYmlJc0ltbHRjRzl5ZENBcUlHRnpJRlJJVWtWRklHWnliMjBnSjNSb2NtVmxKenRjYm1sdGNHOXlkQ0I3SUZaU1RWTndjbWx1WjBKdmJtVkRiMnhzYVdSbGNsTm9ZWEJsVTNCb1pYSmxJSDBnWm5KdmJTQW5MaTR2TGk0dlZsSk5VM0J5YVc1blFtOXVaVU52Ykd4cFpHVnlVMmhoY0dWVGNHaGxjbVVuTzF4dWFXMXdiM0owSUhzZ1EyOXNiR2xrWlhKVGFHRndaVUoxWm1abGNrZGxiMjFsZEhKNUlIMGdabkp2YlNBbkxpOURiMnhzYVdSbGNsTm9ZWEJsUW5WbVptVnlSMlZ2YldWMGNua25PMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdRMjlzYkdsa1pYSlRhR0Z3WlZOd2FHVnlaVUoxWm1abGNrZGxiMjFsZEhKNUlHVjRkR1Z1WkhNZ1ZFaFNSVVV1UW5WbVptVnlSMlZ2YldWMGNua2dhVzF3YkdWdFpXNTBjeUJEYjJ4c2FXUmxjbE5vWVhCbFFuVm1abVZ5UjJWdmJXVjBjbmtnZTF4dUlDQndkV0pzYVdNZ2QyOXliR1JUWTJGc1pTQTlJREV1TUR0Y2JseHVJQ0J3Y21sMllYUmxJSEpsWVdSdmJteDVJRjloZEhSeVVHOXpPaUJVU0ZKRlJTNUNkV1ptWlhKQmRIUnlhV0oxZEdVN1hHNGdJSEJ5YVhaaGRHVWdjbVZoWkc5dWJIa2dYMkYwZEhKSmJtUmxlRG9nVkVoU1JVVXVRblZtWm1WeVFYUjBjbWxpZFhSbE8xeHVJQ0J3Y21sMllYUmxJSEpsWVdSdmJteDVJRjl6YUdGd1pUb2dWbEpOVTNCeWFXNW5RbTl1WlVOdmJHeHBaR1Z5VTJoaGNHVlRjR2hsY21VN1hHNGdJSEJ5YVhaaGRHVWdYMk4xY25KbGJuUlNZV1JwZFhNZ1BTQXdPMXh1SUNCd2NtbDJZWFJsSUhKbFlXUnZibXg1SUY5amRYSnlaVzUwVDJabWMyVjBJRDBnYm1WM0lGUklVa1ZGTGxabFkzUnZjak1vS1R0Y2JseHVJQ0J3ZFdKc2FXTWdZMjl1YzNSeWRXTjBiM0lvYzJoaGNHVTZJRlpTVFZOd2NtbHVaMEp2Ym1WRGIyeHNhV1JsY2xOb1lYQmxVM0JvWlhKbEtTQjdYRzRnSUNBZ2MzVndaWElvS1R0Y2JseHVJQ0FnSUhSb2FYTXVYM05vWVhCbElEMGdjMmhoY0dVN1hHNWNiaUFnSUNCMGFHbHpMbDloZEhSeVVHOXpJRDBnYm1WM0lGUklVa1ZGTGtKMVptWmxja0YwZEhKcFluVjBaU2h1WlhjZ1JteHZZWFF6TWtGeWNtRjVLRE15SUNvZ015QXFJRE1wTENBektUdGNiaUFnSUNCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnbmNHOXphWFJwYjI0bkxDQjBhR2x6TGw5aGRIUnlVRzl6S1R0Y2JseHVJQ0FnSUhSb2FYTXVYMkYwZEhKSmJtUmxlQ0E5SUc1bGR5QlVTRkpGUlM1Q2RXWm1aWEpCZEhSeWFXSjFkR1VvYm1WM0lGVnBiblF4TmtGeWNtRjVLRFkwSUNvZ015a3NJREVwTzF4dUlDQWdJSFJvYVhNdWMyVjBTVzVrWlhnb2RHaHBjeTVmWVhSMGNrbHVaR1Y0S1R0Y2JseHVJQ0FnSUhSb2FYTXVYMkoxYVd4a1NXNWtaWGdvS1R0Y2JpQWdJQ0IwYUdsekxuVndaR0YwWlNncE8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklIVndaR0YwWlNncE9pQjJiMmxrSUh0Y2JpQWdJQ0JzWlhRZ2MyaHZkV3hrVlhCa1lYUmxSMlZ2YldWMGNua2dQU0JtWVd4elpUdGNibHh1SUNBZ0lHTnZibk4wSUhKaFpHbDFjeUE5SUhSb2FYTXVYM05vWVhCbExuSmhaR2wxY3lBdklIUm9hWE11ZDI5eWJHUlRZMkZzWlR0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmWTNWeWNtVnVkRkpoWkdsMWN5QWhQVDBnY21Ga2FYVnpLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWpkWEp5Wlc1MFVtRmthWFZ6SUQwZ2NtRmthWFZ6TzF4dUlDQWdJQ0FnYzJodmRXeGtWWEJrWVhSbFIyVnZiV1YwY25rZ1BTQjBjblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNnaGRHaHBjeTVmWTNWeWNtVnVkRTltWm5ObGRDNWxjWFZoYkhNb2RHaHBjeTVmYzJoaGNHVXViMlptYzJWMEtTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEU5bVpuTmxkQzVqYjNCNUtIUm9hWE11WDNOb1lYQmxMbTltWm5ObGRDazdYRzRnSUNBZ0lDQnphRzkxYkdSVmNHUmhkR1ZIWlc5dFpYUnllU0E5SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSE5vYjNWc1pGVndaR0YwWlVkbGIyMWxkSEo1S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDlpZFdsc1pGQnZjMmwwYVc5dUtDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQmZZblZwYkdSUWIzTnBkR2x2YmlncE9pQjJiMmxrSUh0Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SURNeU95QnBLeXNwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSFFnUFNBb2FTQXZJREUyTGpBcElDb2dUV0YwYUM1UVNUdGNibHh1SUNBZ0lDQWdkR2hwY3k1ZllYUjBjbEJ2Y3k1elpYUllXVm9vYVN3Z1RXRjBhQzVqYjNNb2RDa3NJRTFoZEdndWMybHVLSFFwTENBd0xqQXBPMXh1SUNBZ0lDQWdkR2hwY3k1ZllYUjBjbEJ2Y3k1elpYUllXVm9vTXpJZ0t5QnBMQ0F3TGpBc0lFMWhkR2d1WTI5ektIUXBMQ0JOWVhSb0xuTnBiaWgwS1NrN1hHNGdJQ0FnSUNCMGFHbHpMbDloZEhSeVVHOXpMbk5sZEZoWldpZzJOQ0FySUdrc0lFMWhkR2d1YzJsdUtIUXBMQ0F3TGpBc0lFMWhkR2d1WTI5ektIUXBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TG5OallXeGxLSFJvYVhNdVgyTjFjbkpsYm5SU1lXUnBkWE1zSUhSb2FYTXVYMk4xY25KbGJuUlNZV1JwZFhNc0lIUm9hWE11WDJOMWNuSmxiblJTWVdScGRYTXBPMXh1SUNBZ0lIUm9hWE11ZEhKaGJuTnNZWFJsS0hSb2FYTXVYMk4xY25KbGJuUlBabVp6WlhRdWVDd2dkR2hwY3k1ZlkzVnljbVZ1ZEU5bVpuTmxkQzU1TENCMGFHbHpMbDlqZFhKeVpXNTBUMlptYzJWMExub3BPMXh1WEc0Z0lDQWdkR2hwY3k1ZllYUjBjbEJ2Y3k1dVpXVmtjMVZ3WkdGMFpTQTlJSFJ5ZFdVN1hHNGdJSDFjYmx4dUlDQndjbWwyWVhSbElGOWlkV2xzWkVsdVpHVjRLQ2s2SUhadmFXUWdlMXh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dNekk3SUdrckt5a2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2FURWdQU0FvYVNBcklERXBJQ1VnTXpJN1hHNWNiaUFnSUNBZ0lIUm9hWE11WDJGMGRISkpibVJsZUM1elpYUllXU2hwSUNvZ01pd2dhU3dnYVRFcE8xeHVJQ0FnSUNBZ2RHaHBjeTVmWVhSMGNrbHVaR1Y0TG5ObGRGaFpLRFkwSUNzZ2FTQXFJRElzSURNeUlDc2dhU3dnTXpJZ0t5QnBNU2s3WEc0Z0lDQWdJQ0IwYUdsekxsOWhkSFJ5U1c1a1pYZ3VjMlYwV0Zrb01USTRJQ3NnYVNBcUlESXNJRFkwSUNzZ2FTd2dOalFnS3lCcE1TazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTVmWVhSMGNrbHVaR1Y0TG01bFpXUnpWWEJrWVhSbElEMGdkSEoxWlR0Y2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElDb2dZWE1nVkVoU1JVVWdabkp2YlNBbmRHaHlaV1VuTzF4dWFXMXdiM0owSUhzZ1ZsSk5VM0J5YVc1blFtOXVaVU52Ykd4cFpHVnlJSDBnWm5KdmJTQW5MaTR2VmxKTlUzQnlhVzVuUW05dVpVTnZiR3hwWkdWeUp6dGNibWx0Y0c5eWRDQjdJRlpTVFZOd2NtbHVaMEp2Ym1WRGIyeHNhV1JsY2xOb1lYQmxRMkZ3YzNWc1pTQjlJR1p5YjIwZ0p5NHVMMVpTVFZOd2NtbHVaMEp2Ym1WRGIyeHNhV1JsY2xOb1lYQmxRMkZ3YzNWc1pTYzdYRzVwYlhCdmNuUWdleUJXVWsxVGNISnBibWRDYjI1bFEyOXNiR2xrWlhKVGFHRndaVk53YUdWeVpTQjlJR1p5YjIwZ0p5NHVMMVpTVFZOd2NtbHVaMEp2Ym1WRGIyeHNhV1JsY2xOb1lYQmxVM0JvWlhKbEp6dGNibWx0Y0c5eWRDQjdJRU52Ykd4cFpHVnlVMmhoY0dWQ2RXWm1aWEpIWlc5dFpYUnllU0I5SUdaeWIyMGdKeTR2ZFhScGJITXZRMjlzYkdsa1pYSlRhR0Z3WlVKMVptWmxja2RsYjIxbGRISjVKenRjYm1sdGNHOXlkQ0I3SUVOdmJHeHBaR1Z5VTJoaGNHVkRZWEJ6ZFd4bFFuVm1abVZ5UjJWdmJXVjBjbmtnZlNCbWNtOXRJQ2N1TDNWMGFXeHpMME52Ykd4cFpHVnlVMmhoY0dWRFlYQnpkV3hsUW5WbVptVnlSMlZ2YldWMGNua25PMXh1YVcxd2IzSjBJSHNnUTI5c2JHbGtaWEpUYUdGd1pWTndhR1Z5WlVKMVptWmxja2RsYjIxbGRISjVJSDBnWm5KdmJTQW5MaTkxZEdsc2N5OURiMnhzYVdSbGNsTm9ZWEJsVTNCb1pYSmxRblZtWm1WeVIyVnZiV1YwY25rbk8xeHVYRzVqYjI1emRDQmZkak5CSUQwZ2JtVjNJRlJJVWtWRkxsWmxZM1J2Y2pNb0tUdGNibHh1Wlhod2IzSjBJR05zWVhOeklGWlNUVk53Y21sdVowSnZibVZEYjJ4c2FXUmxja2hsYkhCbGNpQmxlSFJsYm1SeklGUklVa1ZGTGtkeWIzVndJSHRjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUdOdmJHeHBaR1Z5T2lCV1VrMVRjSEpwYm1kQ2IyNWxRMjlzYkdsa1pYSTdYRzRnSUhCeWFYWmhkR1VnY21WaFpHOXViSGtnWDJkbGIyMWxkSEo1T2lCRGIyeHNhV1JsY2xOb1lYQmxRblZtWm1WeVIyVnZiV1YwY25rN1hHNGdJSEJ5YVhaaGRHVWdjbVZoWkc5dWJIa2dYMnhwYm1VNklGUklVa1ZGTGt4cGJtVlRaV2R0Wlc1MGN6dGNibHh1SUNCd2RXSnNhV01nWTI5dWMzUnlkV04wYjNJb1kyOXNiR2xrWlhJNklGWlNUVk53Y21sdVowSnZibVZEYjJ4c2FXUmxjaWtnZTF4dUlDQWdJSE4xY0dWeUtDazdYRzRnSUNBZ2RHaHBjeTV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQjBhR2x6TG1OdmJHeHBaR1Z5SUQwZ1kyOXNiR2xrWlhJN1hHNWNiaUFnSUNCcFppQW9kR2hwY3k1amIyeHNhV1JsY2k1emFHRndaU0JwYm5OMFlXNWpaVzltSUZaU1RWTndjbWx1WjBKdmJtVkRiMnhzYVdSbGNsTm9ZWEJsVTNCb1pYSmxLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOW5aVzl0WlhSeWVTQTlJRzVsZHlCRGIyeHNhV1JsY2xOb1lYQmxVM0JvWlhKbFFuVm1abVZ5UjJWdmJXVjBjbmtvZEdocGN5NWpiMnhzYVdSbGNpNXphR0Z3WlNrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGFHbHpMbU52Ykd4cFpHVnlMbk5vWVhCbElHbHVjM1JoYm1ObGIyWWdWbEpOVTNCeWFXNW5RbTl1WlVOdmJHeHBaR1Z5VTJoaGNHVkRZWEJ6ZFd4bEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5blpXOXRaWFJ5ZVNBOUlHNWxkeUJEYjJ4c2FXUmxjbE5vWVhCbFEyRndjM1ZzWlVKMVptWmxja2RsYjIxbGRISjVLSFJvYVhNdVkyOXNiR2xrWlhJdWMyaGhjR1VwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxWlNUVk53Y21sdVowSnZibVZEYjJ4c2FXUmxja2hsYkhCbGNqb2dWVzVyYm05M2JpQmpiMnhzYVdSbGNpQnphR0Z3WlNCMGVYQmxJR1JsZEdWamRHVmtKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2JXRjBaWEpwWVd3Z1BTQnVaWGNnVkVoU1JVVXVUR2x1WlVKaGMybGpUV0YwWlhKcFlXd29lMXh1SUNBZ0lDQWdZMjlzYjNJNklEQjRabVl3TUdabUxGeHVJQ0FnSUNBZ1pHVndkR2hVWlhOME9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUdSbGNIUm9WM0pwZEdVNklHWmhiSE5sTEZ4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnZEdocGN5NWZiR2x1WlNBOUlHNWxkeUJVU0ZKRlJTNU1hVzVsVTJWbmJXVnVkSE1vZEdocGN5NWZaMlZ2YldWMGNua3NJRzFoZEdWeWFXRnNLVHRjYmlBZ0lDQjBhR2x6TG1Ga1pDaDBhR2x6TGw5c2FXNWxLVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJrYVhOd2IzTmxLQ2s2SUhadmFXUWdlMXh1SUNBZ0lIUm9hWE11WDJkbGIyMWxkSEo1TG1ScGMzQnZjMlVvS1R0Y2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCMWNHUmhkR1ZOWVhSeWFYaFhiM0pzWkNobWIzSmpaVG9nWW05dmJHVmhiaWs2SUhadmFXUWdlMXh1SUNBZ0lIUm9hWE11WTI5c2JHbGtaWEl1ZFhCa1lYUmxWMjl5YkdSTllYUnlhWGdvZEhKMVpTd2dabUZzYzJVcE8xeHVYRzRnSUNBZ2RHaHBjeTV0WVhSeWFYZ3VZMjl3ZVNoMGFHbHpMbU52Ykd4cFpHVnlMbTFoZEhKcGVGZHZjbXhrS1R0Y2JseHVJQ0FnSUdOdmJuTjBJRzFoZEhKcGVGZHZjbXhrUld4bGJXVnVkSE1nUFNCMGFHbHpMbTFoZEhKcGVDNWxiR1Z0Wlc1MGN6dGNiaUFnSUNCMGFHbHpMbDluWlc5dFpYUnllUzUzYjNKc1pGTmpZV3hsSUQwZ1gzWXpRVnh1SUNBZ0lDQWdMbk5sZENodFlYUnlhWGhYYjNKc1pFVnNaVzFsYm5Seld6QmRMQ0J0WVhSeWFYaFhiM0pzWkVWc1pXMWxiblJ6V3pGZExDQnRZWFJ5YVhoWGIzSnNaRVZzWlcxbGJuUnpXekpkS1Z4dUlDQWdJQ0FnTG14bGJtZDBhQ2dwT3lBdkx5QmpZV3hqZFd4aGRHVWdjMk5oYkdVZ2IyWWdlQ0JqYjIxd2IyNWxiblJjYmx4dUlDQWdJSFJvYVhNdVgyZGxiMjFsZEhKNUxuVndaR0YwWlNncE8xeHVYRzRnSUNBZ2MzVndaWEl1ZFhCa1lYUmxUV0YwY21sNFYyOXliR1FvWm05eVkyVXBPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnS2lCaGN5QlVTRkpGUlNCbWNtOXRJQ2QwYUhKbFpTYzdYRzVwYlhCdmNuUWdleUJXVWsxVGNISnBibWRDYjI1bFNtOXBiblFnZlNCbWNtOXRJQ2N1TGk4dUxpOVdVazFUY0hKcGJtZENiMjVsU205cGJuUW5PMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdVM0J5YVc1blFtOXVaVUoxWm1abGNrZGxiMjFsZEhKNUlHVjRkR1Z1WkhNZ1ZFaFNSVVV1UW5WbVptVnlSMlZ2YldWMGNua2dlMXh1SUNCd2RXSnNhV01nZDI5eWJHUlRZMkZzWlNBOUlERXVNRHRjYmx4dUlDQndjbWwyWVhSbElISmxZV1J2Ym14NUlGOWhkSFJ5VUc5ek9pQlVTRkpGUlM1Q2RXWm1aWEpCZEhSeWFXSjFkR1U3WEc0Z0lIQnlhWFpoZEdVZ2NtVmhaRzl1YkhrZ1gyRjBkSEpKYm1SbGVEb2dWRWhTUlVVdVFuVm1abVZ5UVhSMGNtbGlkWFJsTzF4dUlDQndjbWwyWVhSbElISmxZV1J2Ym14NUlGOXpjSEpwYm1kQ2IyNWxPaUJXVWsxVGNISnBibWRDYjI1bFNtOXBiblE3WEc0Z0lIQnlhWFpoZEdVZ1gyTjFjbkpsYm5SU1lXUnBkWE1nUFNBd08xeHVJQ0J3Y21sMllYUmxJSEpsWVdSdmJteDVJRjlqZFhKeVpXNTBWR0ZwYkNBOUlHNWxkeUJVU0ZKRlJTNVdaV04wYjNJektDazdYRzVjYmlBZ2NIVmliR2xqSUdOdmJuTjBjblZqZEc5eUtITndjbWx1WjBKdmJtVTZJRlpTVFZOd2NtbHVaMEp2Ym1WS2IybHVkQ2tnZTF4dUlDQWdJSE4xY0dWeUtDazdYRzVjYmlBZ0lDQjBhR2x6TGw5emNISnBibWRDYjI1bElEMGdjM0J5YVc1blFtOXVaVHRjYmx4dUlDQWdJSFJvYVhNdVgyRjBkSEpRYjNNZ1BTQnVaWGNnVkVoU1JVVXVRblZtWm1WeVFYUjBjbWxpZFhSbEtHNWxkeUJHYkc5aGRETXlRWEp5WVhrb01qazBLU3dnTXlrN1hHNGdJQ0FnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSjNCdmMybDBhVzl1Snl3Z2RHaHBjeTVmWVhSMGNsQnZjeWs3WEc1Y2JpQWdJQ0IwYUdsekxsOWhkSFJ5U1c1a1pYZ2dQU0J1WlhjZ1ZFaFNSVVV1UW5WbVptVnlRWFIwY21saWRYUmxLRzVsZHlCVmFXNTBNVFpCY25KaGVTZ3hPVFFwTENBeEtUdGNiaUFnSUNCMGFHbHpMbk5sZEVsdVpHVjRLSFJvYVhNdVgyRjBkSEpKYm1SbGVDazdYRzVjYmlBZ0lDQjBhR2x6TGw5aWRXbHNaRWx1WkdWNEtDazdYRzRnSUNBZ2RHaHBjeTUxY0dSaGRHVW9LVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUIxY0dSaGRHVW9LVG9nZG05cFpDQjdYRzRnSUNBZ2JHVjBJSE5vYjNWc1pGVndaR0YwWlVkbGIyMWxkSEo1SUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0JqYjI1emRDQnlZV1JwZFhNZ1BTQjBhR2x6TGw5emNISnBibWRDYjI1bExuTmxkSFJwYm1kekxtaHBkRkpoWkdsMWN5QXZJSFJvYVhNdWQyOXliR1JUWTJGc1pUdGNiaUFnSUNCcFppQW9kR2hwY3k1ZlkzVnljbVZ1ZEZKaFpHbDFjeUFoUFQwZ2NtRmthWFZ6S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDlqZFhKeVpXNTBVbUZrYVhWeklEMGdjbUZrYVhWek8xeHVJQ0FnSUNBZ2MyaHZkV3hrVlhCa1lYUmxSMlZ2YldWMGNua2dQU0IwY25WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDZ2hkR2hwY3k1ZlkzVnljbVZ1ZEZSaGFXd3VaWEYxWVd4ektIUm9hWE11WDNOd2NtbHVaMEp2Ym1VdWFXNXBkR2xoYkV4dlkyRnNRMmhwYkdSUWIzTnBkR2x2YmlrcElIdGNiaUFnSUNBZ0lIUm9hWE11WDJOMWNuSmxiblJVWVdsc0xtTnZjSGtvZEdocGN5NWZjM0J5YVc1blFtOXVaUzVwYm1sMGFXRnNURzlqWVd4RGFHbHNaRkJ2YzJsMGFXOXVLVHRjYmlBZ0lDQWdJSE5vYjNWc1pGVndaR0YwWlVkbGIyMWxkSEo1SUQwZ2RISjFaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYzJodmRXeGtWWEJrWVhSbFIyVnZiV1YwY25rcElIdGNiaUFnSUNBZ0lIUm9hWE11WDJKMWFXeGtVRzl6YVhScGIyNG9LVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J3Y21sMllYUmxJRjlpZFdsc1pGQnZjMmwwYVc5dUtDazZJSFp2YVdRZ2UxeHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z016STdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnZENBOUlDaHBJQzhnTVRZdU1Da2dLaUJOWVhSb0xsQkpPMXh1WEc0Z0lDQWdJQ0IwYUdsekxsOWhkSFJ5VUc5ekxuTmxkRmhaV2locExDQk5ZWFJvTG1OdmN5aDBLU3dnVFdGMGFDNXphVzRvZENrc0lEQXVNQ2s3WEc0Z0lDQWdJQ0IwYUdsekxsOWhkSFJ5VUc5ekxuTmxkRmhaV2lnek1pQXJJR2tzSURBdU1Dd2dUV0YwYUM1amIzTW9kQ2tzSUUxaGRHZ3VjMmx1S0hRcEtUdGNiaUFnSUNBZ0lIUm9hWE11WDJGMGRISlFiM011YzJWMFdGbGFLRFkwSUNzZ2FTd2dUV0YwYUM1emFXNG9kQ2tzSURBdU1Dd2dUV0YwYUM1amIzTW9kQ2twTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdWMyTmhiR1VvZEdocGN5NWZZM1Z5Y21WdWRGSmhaR2wxY3l3Z2RHaHBjeTVmWTNWeWNtVnVkRkpoWkdsMWN5d2dkR2hwY3k1ZlkzVnljbVZ1ZEZKaFpHbDFjeWs3WEc0Z0lDQWdkR2hwY3k1MGNtRnVjMnhoZEdVb2RHaHBjeTVmWTNWeWNtVnVkRlJoYVd3dWVDd2dkR2hwY3k1ZlkzVnljbVZ1ZEZSaGFXd3VlU3dnZEdocGN5NWZZM1Z5Y21WdWRGUmhhV3d1ZWlrN1hHNWNiaUFnSUNCMGFHbHpMbDloZEhSeVVHOXpMbk5sZEZoWldpZzVOaXdnTUN3Z01Dd2dNQ2s3WEc0Z0lDQWdkR2hwY3k1ZllYUjBjbEJ2Y3k1elpYUllXVm9vT1Rjc0lIUm9hWE11WDJOMWNuSmxiblJVWVdsc0xuZ3NJSFJvYVhNdVgyTjFjbkpsYm5SVVlXbHNMbmtzSUhSb2FYTXVYMk4xY25KbGJuUlVZV2xzTG5vcE8xeHVYRzRnSUNBZ2RHaHBjeTVmWVhSMGNsQnZjeTV1WldWa2MxVndaR0YwWlNBOUlIUnlkV1U3WEc0Z0lIMWNibHh1SUNCd2NtbDJZWFJsSUY5aWRXbHNaRWx1WkdWNEtDazZJSFp2YVdRZ2UxeHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z016STdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYVRFZ1BTQW9hU0FySURFcElDVWdNekk3WEc1Y2JpQWdJQ0FnSUhSb2FYTXVYMkYwZEhKSmJtUmxlQzV6WlhSWVdTaHBJQ29nTWl3Z2FTd2dhVEVwTzF4dUlDQWdJQ0FnZEdocGN5NWZZWFIwY2tsdVpHVjRMbk5sZEZoWktEWTBJQ3NnYVNBcUlESXNJRE15SUNzZ2FTd2dNeklnS3lCcE1TazdYRzRnSUNBZ0lDQjBhR2x6TGw5aGRIUnlTVzVrWlhndWMyVjBXRmtvTVRJNElDc2dhU0FxSURJc0lEWTBJQ3NnYVN3Z05qUWdLeUJwTVNrN1hHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdVgyRjBkSEpKYm1SbGVDNXpaWFJZV1NneE9USXNJRGsyTENBNU55azdYRzVjYmlBZ0lDQjBhR2x6TGw5aGRIUnlTVzVrWlhndWJtVmxaSE5WY0dSaGRHVWdQU0IwY25WbE8xeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdLaUJoY3lCVVNGSkZSU0JtY205dElDZDBhSEpsWlNjN1hHNXBiWEJ2Y25RZ2V5QldVazFUY0hKcGJtZENiMjVsU205cGJuUWdmU0JtY205dElDY3VMaTlXVWsxVGNISnBibWRDYjI1bFNtOXBiblFuTzF4dWFXMXdiM0owSUhzZ1UzQnlhVzVuUW05dVpVSjFabVpsY2tkbGIyMWxkSEo1SUgwZ1puSnZiU0FuTGk5MWRHbHNjeTlUY0hKcGJtZENiMjVsUW5WbVptVnlSMlZ2YldWMGNua25PMXh1WEc1amIyNXpkQ0JmZGpOQklEMGdibVYzSUZSSVVrVkZMbFpsWTNSdmNqTW9LVHRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRlpTVFZOd2NtbHVaMEp2Ym1WS2IybHVkRWhsYkhCbGNpQmxlSFJsYm1SeklGUklVa1ZGTGtkeWIzVndJSHRjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhOd2NtbHVaMEp2Ym1VNklGWlNUVk53Y21sdVowSnZibVZLYjJsdWREdGNiaUFnY0hKcGRtRjBaU0J5WldGa2IyNXNlU0JmWjJWdmJXVjBjbms2SUZOd2NtbHVaMEp2Ym1WQ2RXWm1aWEpIWlc5dFpYUnllVHRjYmlBZ2NISnBkbUYwWlNCeVpXRmtiMjVzZVNCZmJHbHVaVG9nVkVoU1JVVXVUR2x1WlZObFoyMWxiblJ6TzF4dVhHNGdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWh6Y0hKcGJtZENiMjVsT2lCV1VrMVRjSEpwYm1kQ2IyNWxTbTlwYm5RcElIdGNiaUFnSUNCemRYQmxjaWdwTzF4dUlDQWdJSFJvYVhNdWJXRjBjbWw0UVhWMGIxVndaR0YwWlNBOUlHWmhiSE5sTzF4dVhHNGdJQ0FnZEdocGN5NXpjSEpwYm1kQ2IyNWxJRDBnYzNCeWFXNW5RbTl1WlR0Y2JseHVJQ0FnSUhSb2FYTXVYMmRsYjIxbGRISjVJRDBnYm1WM0lGTndjbWx1WjBKdmJtVkNkV1ptWlhKSFpXOXRaWFJ5ZVNoMGFHbHpMbk53Y21sdVowSnZibVVwTzF4dVhHNGdJQ0FnWTI5dWMzUWdiV0YwWlhKcFlXd2dQU0J1WlhjZ1ZFaFNSVVV1VEdsdVpVSmhjMmxqVFdGMFpYSnBZV3dvZTF4dUlDQWdJQ0FnWTI5c2IzSTZJREI0Wm1abVpqQXdMRnh1SUNBZ0lDQWdaR1Z3ZEdoVVpYTjBPaUJtWVd4elpTeGNiaUFnSUNBZ0lHUmxjSFJvVjNKcGRHVTZJR1poYkhObExGeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2RHaHBjeTVmYkdsdVpTQTlJRzVsZHlCVVNGSkZSUzVNYVc1bFUyVm5iV1Z1ZEhNb2RHaHBjeTVmWjJWdmJXVjBjbmtzSUcxaGRHVnlhV0ZzS1R0Y2JpQWdJQ0IwYUdsekxtRmtaQ2gwYUdsekxsOXNhVzVsS1R0Y2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCa2FYTndiM05sS0NrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdVgyZGxiMjFsZEhKNUxtUnBjM0J2YzJVb0tUdGNiaUFnZlZ4dVhHNGdJSEIxWW14cFl5QjFjR1JoZEdWTllYUnlhWGhYYjNKc1pDaG1iM0pqWlRvZ1ltOXZiR1ZoYmlrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdWMzQnlhVzVuUW05dVpTNWliMjVsTG5Wd1pHRjBaVmR2Y214a1RXRjBjbWw0S0hSeWRXVXNJR1poYkhObEtUdGNibHh1SUNBZ0lIUm9hWE11YldGMGNtbDRMbU52Y0hrb2RHaHBjeTV6Y0hKcGJtZENiMjVsTG1KdmJtVXViV0YwY21sNFYyOXliR1FwTzF4dVhHNGdJQ0FnWTI5dWMzUWdiV0YwY21sNFYyOXliR1JGYkdWdFpXNTBjeUE5SUhSb2FYTXViV0YwY21sNExtVnNaVzFsYm5Sek8xeHVJQ0FnSUhSb2FYTXVYMmRsYjIxbGRISjVMbmR2Y214a1UyTmhiR1VnUFNCZmRqTkJYRzRnSUNBZ0lDQXVjMlYwS0cxaGRISnBlRmR2Y214a1JXeGxiV1Z1ZEhOYk1GMHNJRzFoZEhKcGVGZHZjbXhrUld4bGJXVnVkSE5iTVYwc0lHMWhkSEpwZUZkdmNteGtSV3hsYldWdWRITmJNbDBwWEc0Z0lDQWdJQ0F1YkdWdVozUm9LQ2s3SUM4dklHTmhiR04xYkdGMFpTQnpZMkZzWlNCdlppQjRJR052YlhCdmJtVnVkRnh1WEc0Z0lDQWdkR2hwY3k1ZloyVnZiV1YwY25rdWRYQmtZWFJsS0NrN1hHNWNiaUFnSUNCemRYQmxjaTUxY0dSaGRHVk5ZWFJ5YVhoWGIzSnNaQ2htYjNKalpTazdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0FxSUdGeklGUklVa1ZGSUdaeWIyMGdKM1JvY21WbEp6dGNibWx0Y0c5eWRDQjBlWEJsSUhzZ1ZsSk5VM0J5YVc1blFtOXVaVU52Ykd4cFpHVnlVMmhoY0dVZ2ZTQm1jbTl0SUNjdUwxWlNUVk53Y21sdVowSnZibVZEYjJ4c2FXUmxjbE5vWVhCbEp6dGNibHh1THlvcVhHNGdLaUJTWlhCeVpYTmxiblJ6SUdFZ1kyOXNiR2xrWlhJZ2IyWWdZU0JXVWswdVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QldVazFUY0hKcGJtZENiMjVsUTI5c2JHbGtaWElnWlhoMFpXNWtjeUJVU0ZKRlJTNVBZbXBsWTNRelJDQjdYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVWdjMmhoY0dVZ2IyWWdkR2hsSUdOdmJHeHBaR1Z5TGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhOb1lYQmxPaUJXVWsxVGNISnBibWRDYjI1bFEyOXNiR2xrWlhKVGFHRndaVHRjYmx4dUlDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9jMmhoY0dVNklGWlNUVk53Y21sdVowSnZibVZEYjJ4c2FXUmxjbE5vWVhCbEtTQjdYRzRnSUNBZ2MzVndaWElvS1R0Y2JseHVJQ0FnSUhSb2FYTXVjMmhoY0dVZ1BTQnphR0Z3WlR0Y2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElDb2dZWE1nVkVoU1JVVWdabkp2YlNBbmRHaHlaV1VuTzF4dVhHNWpiMjV6ZENCZmJXRjBRU0E5SUc1bGR5QlVTRkpGUlM1TllYUnlhWGcwS0NrN1hHNWNiaThxS2x4dUlDb2dRU0JqYjIxd1lYUWdablZ1WTNScGIyNGdabTl5SUdCTllYUnlhWGcwTG1sdWRtVnlkQ2dwWUNBdklHQk5ZWFJ5YVhnMExtZGxkRWx1ZG1WeWMyVW9LV0F1WEc0Z0tpQmdUV0YwY21sNE5DNXBiblpsY25Rb0tXQWdhWE1nYVc1MGNtOWtkV05sWkNCcGJpQnlNVEl6SUdGdVpDQmdUV0YwY21sNE5DNW5aWFJKYm5abGNuTmxLQ2xnSUdWdGFYUnpJR0VnZDJGeWJtbHVaeTVjYmlBcUlGZGxJR0Z5WlNCbmIybHVaeUIwYnlCMWMyVWdkR2hwY3lCamIyMXdZWFFnWm05eUlHRWdkMmhwYkdVdVhHNGdLaUJBY0dGeVlXMGdkR0Z5WjJWMElFRWdkR0Z5WjJWMElHMWhkSEpwZUZ4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdiV0YwTkVsdWRtVnlkRU52YlhCaGREeFVJR1Y0ZEdWdVpITWdWRWhTUlVVdVRXRjBjbWw0TkQ0b2RHRnlaMlYwT2lCVUtUb2dWQ0I3WEc0Z0lHbG1JQ2dvZEdGeVoyVjBJR0Z6SUdGdWVTa3VhVzUyWlhKMEtTQjdYRzRnSUNBZ2RHRnlaMlYwTG1sdWRtVnlkQ2dwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNoMFlYSm5aWFFnWVhNZ1lXNTVLUzVuWlhSSmJuWmxjbk5sS0Y5dFlYUkJMbU52Y0hrb2RHRnlaMlYwS1NrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2RHRnlaMlYwTzF4dWZWeHVJaXdpYVcxd2IzSjBJQ29nWVhNZ1ZFaFNSVVVnWm5KdmJTQW5kR2h5WldVbk8xeHVhVzF3YjNKMElIc2diV0YwTkVsdWRtVnlkRU52YlhCaGRDQjlJR1p5YjIwZ0p5NHZiV0YwTkVsdWRtVnlkRU52YlhCaGRDYzdYRzVjYm1WNGNHOXlkQ0JqYkdGemN5Qk5ZWFJ5YVhnMFNXNTJaWEp6WlVOaFkyaGxJSHRjYmlBZ0x5b3FYRzRnSUNBcUlGUm9aU0IwWVhKblpYUWdiV0YwY21sNExseHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHMWhkSEpwZURvZ1ZFaFNSVVV1VFdGMGNtbDRORHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRU0JqWVdOb1pTQnZaaUJwYm5abGNuTmxJRzltSUdOMWNuSmxiblFnYldGMGNtbDRMbHh1SUNBZ0tpOWNiaUFnY0hKcGRtRjBaU0J5WldGa2IyNXNlU0JmYVc1MlpYSnpaVU5oWTJobElEMGdibVYzSUZSSVVrVkZMazFoZEhKcGVEUW9LVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRU0JtYkdGbklIUm9ZWFFnYldGclpYTWdhWFFnZDJGdWRDQjBieUJ5WldOaGJHTjFiR0YwWlNCcGRITWdlMEJzYVc1cklGOXBiblpsY25ObFEyRmphR1Y5TGx4dUlDQWdLaUJYYVd4c0lHSmxJSE5sZENCZ2RISjFaV0FnZDJobGJpQmdaV3hsYldWdWRITmdJR0Z5WlNCdGRYUmhkR1ZrSUdGdVpDQmlaU0IxYzJWa0lHbHVJR0JuWlhSSmJuWmxjbk5sWUM1Y2JpQWdJQ292WEc0Z0lIQnlhWFpoZEdVZ1gzTm9iM1ZzWkZWd1pHRjBaVWx1ZG1WeWMyVWdQU0IwY25WbE8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVWdiM0pwWjJsdVlXd2diMllnWUcxaGRISnBlQzVsYkdWdFpXNTBjMkJjYmlBZ0lDb3ZYRzRnSUhCeWFYWmhkR1VnY21WaFpHOXViSGtnWDI5eWFXZHBibUZzUld4bGJXVnVkSE02SUc1MWJXSmxjbHRkTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJKYm5abGNuTmxJRzltSUdkcGRtVnVJRzFoZEhKcGVDNWNiaUFnSUNvZ1RtOTBaU0IwYUdGMElHbDBJSGRwYkd3Z2NtVjBkWEp1SUdsMGN5QnBiblJsY201aGJDQndjbWwyWVhSbElHbHVjM1JoYm1ObExseHVJQ0FnS2lCTllXdGxJSE4xY21VZ1kyOXdlV2x1WnlCMGFHbHpJR0psWm05eVpTQnRkWFJoZEdVZ2RHaHBjeTVjYmlBZ0lDb3ZYRzRnSUhCMVlteHBZeUJuWlhRZ2FXNTJaWEp6WlNncE9pQlVTRkpGUlM1TllYUnlhWGcwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmYzJodmRXeGtWWEJrWVhSbFNXNTJaWEp6WlNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmYVc1MlpYSnpaVU5oWTJobExtTnZjSGtvZEdocGN5NXRZWFJ5YVhncE8xeHVJQ0FnSUNBZ2JXRjBORWx1ZG1WeWRFTnZiWEJoZENoMGFHbHpMbDlwYm5abGNuTmxRMkZqYUdVcE8xeHVJQ0FnSUNBZ2RHaHBjeTVmYzJodmRXeGtWWEJrWVhSbFNXNTJaWEp6WlNBOUlHWmhiSE5sTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5cGJuWmxjbk5sUTJGamFHVTdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdZMjl1YzNSeWRXTjBiM0lvYldGMGNtbDRPaUJVU0ZKRlJTNU5ZWFJ5YVhnMEtTQjdYRzRnSUNBZ2RHaHBjeTV0WVhSeWFYZ2dQU0J0WVhSeWFYZzdYRzVjYmlBZ0lDQmpiMjV6ZENCb1lXNWtiR1Z5T2lCUWNtOTRlVWhoYm1Sc1pYSThiblZ0WW1WeVcxMCtJRDBnZTF4dUlDQWdJQ0FnYzJWME9pQW9iMkpxTENCd2NtOXdPaUJoYm5rc0lHNWxkMVpoYkNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXphRzkxYkdSVmNHUmhkR1ZKYm5abGNuTmxJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdiMkpxVzNCeWIzQmRJRDBnYm1WM1ZtRnNPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2RHaHBjeTVmYjNKcFoybHVZV3hGYkdWdFpXNTBjeUE5SUcxaGRISnBlQzVsYkdWdFpXNTBjenRjYmlBZ0lDQnRZWFJ5YVhndVpXeGxiV1Z1ZEhNZ1BTQnVaWGNnVUhKdmVIa29iV0YwY21sNExtVnNaVzFsYm5SekxDQm9ZVzVrYkdWeUtUdGNiaUFnZlZ4dVhHNGdJSEIxWW14cFl5QnlaWFpsY25Rb0tUb2dkbTlwWkNCN1hHNGdJQ0FnZEdocGN5NXRZWFJ5YVhndVpXeGxiV1Z1ZEhNZ1BTQjBhR2x6TGw5dmNtbG5hVzVoYkVWc1pXMWxiblJ6TzF4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ0tpQmhjeUJVU0ZKRlJTQm1jbTl0SUNkMGFISmxaU2M3WEc1cGJYQnZjblFnZXlCdFlYUTBTVzUyWlhKMFEyOXRjR0YwSUgwZ1puSnZiU0FuTGk5MWRHbHNjeTl0WVhRMFNXNTJaWEowUTI5dGNHRjBKenRjYm1sdGNHOXlkQ0I3SUUxaGRISnBlRFJKYm5abGNuTmxRMkZqYUdVZ2ZTQm1jbTl0SUNjdUwzVjBhV3h6TDAxaGRISnBlRFJKYm5abGNuTmxRMkZqYUdVbk8xeHVhVzF3YjNKMElIUjVjR1VnZXlCV1VrMVRjSEpwYm1kQ2IyNWxRMjlzYkdsa1pYSkhjbTkxY0NCOUlHWnliMjBnSnk0dlZsSk5VM0J5YVc1blFtOXVaVU52Ykd4cFpHVnlSM0p2ZFhBbk8xeHVhVzF3YjNKMElIUjVjR1VnZXlCV1VrMVRjSEpwYm1kQ2IyNWxTbTlwYm5SVFpYUjBhVzVuY3lCOUlHWnliMjBnSnk0dlZsSk5VM0J5YVc1blFtOXVaVXB2YVc1MFUyVjBkR2x1WjNNbk8xeHVYRzR2THlCaVlYTmxaQ0J2Ymx4dUx5OGdhSFIwY0RvdkwzSnZZMnRsZEdwMWJYQXVjMnR5TG1wd0wzVnVhWFI1TTJRdk1UQTVMMXh1THk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyUjNZVzVuYnk5VmJtbFdVazB2WW14dllpOXRZWE4wWlhJdlUyTnlhWEIwY3k5VGNISnBibWRDYjI1bEwxWlNUVk53Y21sdVowSnZibVV1WTNOY2JseHVZMjl1YzNRZ1NVUkZUbFJKVkZsZlRVRlVVa2xZTkNBOUlHNWxkeUJVU0ZKRlJTNU5ZWFJ5YVhnMEtDazdYRzVjYmk4dklPaW9pT2V1bCtTNHJlT0JydVM0Z09hWmd1Uy9uZVd0bU9lVXFPV2tpZWFWc08rOGlPUzRnT1c2cHVPQ3BPT0RzK09DdWVPQ3YrT0RzK09DdWVPQ2t1UzluT09CbytPQm4rT0NpZU9CZ3VPQnFPT0JyK1M5ditPQmhPV2JudU9CbWUrOGlWeHVZMjl1YzNRZ1gzWXpRU0E5SUc1bGR5QlVTRkpGUlM1V1pXTjBiM0l6S0NrN1hHNWpiMjV6ZENCZmRqTkNJRDBnYm1WM0lGUklVa1ZGTGxabFkzUnZjak1vS1R0Y2JtTnZibk4wSUY5Mk0wTWdQU0J1WlhjZ1ZFaFNSVVV1Vm1WamRHOXlNeWdwTzF4dVhHNHZLaXBjYmlBcUlFRWdkR1Z0Y0c5eVlYSjVJSFpoY21saFlteGxJSGRvYVdOb0lHbHpJSFZ6WldRZ2FXNGdZSFZ3WkdGMFpXQmNiaUFxTDF4dVkyOXVjM1FnWDNkdmNteGtVM0JoWTJWUWIzTnBkR2x2YmlBOUlHNWxkeUJVU0ZKRlJTNVdaV04wYjNJektDazdYRzVjYmk4cUtseHVJQ29nUVNCMFpXMXdiM0poY25rZ2RtRnlhV0ZpYkdVZ2QyaHBZMmdnYVhNZ2RYTmxaQ0JwYmlCZ2RYQmtZWFJsWUZ4dUlDb3ZYRzVqYjI1emRDQmZZMlZ1ZEdWeVUzQmhZMlZRYjNOcGRHbHZiaUE5SUc1bGR5QlVTRkpGUlM1V1pXTjBiM0l6S0NrN1hHNWNiaThxS2x4dUlDb2dRU0IwWlcxd2IzSmhjbmtnZG1GeWFXRmliR1VnZDJocFkyZ2dhWE1nZFhObFpDQnBiaUJnZFhCa1lYUmxZRnh1SUNvdlhHNWpiMjV6ZENCZmJtVjRkRlJoYVd3Z1BTQnVaWGNnVkVoU1JVVXVWbVZqZEc5eU15Z3BPMXh1WEc1amIyNXpkQ0JmY1hWaGRFRWdQU0J1WlhjZ1ZFaFNSVVV1VVhWaGRHVnlibWx2YmlncE8xeHVZMjl1YzNRZ1gyMWhkRUVnUFNCdVpYY2dWRWhTUlVVdVRXRjBjbWw0TkNncE8xeHVZMjl1YzNRZ1gyMWhkRUlnUFNCdVpYY2dWRWhTUlVVdVRXRjBjbWw0TkNncE8xeHVYRzR2S2lwY2JpQXFJRUVnWTJ4aGMzTWdjbVZ3Y21WelpXNTBjeUJoSUhOcGJtZHNaU0JxYjJsdWRDQnZaaUJoSUhOd2NtbHVaeUJpYjI1bExseHVJQ29nU1hRZ2MyaHZkV3hrSUdKbElHMWhibUZuWldRZ1lua2dZU0JiVzFaU1RWTndjbWx1WjBKdmJtVk5ZVzVoWjJWeVhWMHVYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJXVWsxVGNISnBibWRDYjI1bFNtOXBiblFnZTF4dUlDQXZLaXBjYmlBZ0lDb2dVMlYwZEdsdVozTWdiMllnZEdobElHSnZibVV1WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nYzJWMGRHbHVaM002SUZaU1RWTndjbWx1WjBKdmJtVktiMmx1ZEZObGRIUnBibWR6TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJEYjJ4c2FXUmxjaUJuY205MWNITWdZWFIwWVdOb1pXUWdkRzhnZEdocGN5QmliMjVsTGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUdOdmJHeHBaR1Z5UjNKdmRYQnpPaUJXVWsxVGNISnBibWRDYjI1bFEyOXNiR2xrWlhKSGNtOTFjRnRkTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJCYmlCUFltcGxZM1F6UkNCaGRIUmhZMmhsWkNCMGJ5QjBhR2x6SUdKdmJtVXVYRzRnSUNBcUwxeHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dZbTl1WlRvZ1ZFaFNSVVV1VDJKcVpXTjBNMFE3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUZ1SUU5aWFtVmpkRE5FSUhSb1lYUWdkMmxzYkNCaVpTQjFjMlZrSUdGeklHRWdkR0ZwYkNCdlppQjBhR2x6SUhOd2NtbHVaeUJpYjI1bExseHVJQ0FnS2lCSmRDQmpZVzRnWW1VZ2JuVnNiQ0IzYUdWdUlIUm9aU0J6Y0hKcGJtY2dZbTl1WlNCcGN5QnBiWEJ2Y25SbFpDQm1jbTl0SUZaU1RTQXdMakF1WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnWTJocGJHUTZJRlJJVWtWRkxrOWlhbVZqZERORUlId2diblZzYkR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTNWeWNtVnVkQ0J3YjNOcGRHbHZiaUJ2WmlCamFHbHNaQ0IwWVdsc0xDQnBiaUJqWlc1MFpYSWdkVzVwZEM0Z1YybHNiQ0JpWlNCMWMyVmtJR1p2Y2lCMlpYSnNaWFFnYVc1MFpXZHlZWFJwYjI0dVhHNGdJQ0FxTDF4dUlDQndjbWwyWVhSbElGOWpkWEp5Wlc1MFZHRnBiQ0E5SUc1bGR5QlVTRkpGUlM1V1pXTjBiM0l6S0NrN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZCeVpYWnBiM1Z6SUhCdmMybDBhVzl1SUc5bUlHTm9hV3hrSUhSaGFXd3NJR2x1SUdObGJuUmxjaUIxYm1sMExpQlhhV3hzSUdKbElIVnpaV1FnWm05eUlIWmxjbXhsZENCcGJuUmxaM0poZEdsdmJpNWNiaUFnSUNvdlhHNGdJSEJ5YVhaaGRHVWdYM0J5WlhaVVlXbHNJRDBnYm1WM0lGUklVa1ZGTGxabFkzUnZjak1vS1R0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nU1c1cGRHbGhiQ0JoZUdseklHOW1JSFJvWlNCaWIyNWxMQ0JwYmlCc2IyTmhiQ0IxYm1sMExseHVJQ0FnS2k5Y2JpQWdjSEpwZG1GMFpTQmZZbTl1WlVGNGFYTWdQU0J1WlhjZ1ZFaFNSVVV1Vm1WamRHOXlNeWdwTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJNWlc1bmRHZ2diMllnZEdobElHSnZibVVnYVc0Z2QyOXliR1FnZFc1cGRDNWNiaUFnSUNvZ1YybHNiQ0JpWlNCMWMyVmtJR1p2Y2lCdWIzSnRZV3hwZW1GMGFXOXVJR2x1SUhWd1pHRjBaU0JzYjI5d0xDQjNhV3hzSUdKbElIVndaR0YwWldRZ1lua2dlMEJzYVc1cklGOWpZV3hqVjI5eWJHUlRjR0ZqWlVKdmJtVk1aVzVuZEdoOUxseHVJQ0FnS2x4dUlDQWdLaUJKZENkeklITmhiV1VnWVhNZ2JHOWpZV3dnZFc1cGRDQnNaVzVuZEdnZ2RXNXNaWE56SUhSb1pYSmxJR0Z5WlNCelkyRnNaU0IwY21GdWMyWnZjbTFoZEdsdmJuTWdhVzRnZEdobElIZHZjbXhrSUhOd1lXTmxMbHh1SUNBZ0tpOWNiaUFnY0hKcGRtRjBaU0JmZDI5eWJHUlRjR0ZqWlVKdmJtVk1aVzVuZEdnZ1BTQXdMakE3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJvYVhNZ2MzQnlhVzVuWW05dVpTQjNhV3hzSUdKbElHTmhiR04xYkdGMFpXUWdZbUZ6WldRZ2IyNGdkR2hsSUhOd1lXTmxJSEpsYkdGMGFYWmxJR1p5YjIwZ2RHaHBjeUJ2WW1wbFkzUXVYRzRnSUNBcUlFbG1JSFJvYVhNZ2FYTWdZRzUxYkd4Z0xDQnpjSEpwYm1kaWIyNWxJSGRwYkd3Z1ltVWdZMkZzWTNWc1lYUmxaQ0JwYmlCM2IzSnNaQ0J6Y0dGalpTNWNiaUFnSUNvdlhHNGdJSEJ5YVhaaGRHVWdYMk5sYm5SbGNqb2dWRWhTUlVVdVQySnFaV04wTTBRZ2ZDQnVkV3hzSUQwZ2JuVnNiRHRjYmlBZ2NIVmliR2xqSUdkbGRDQmpaVzUwWlhJb0tUb2dWRWhTUlVVdVQySnFaV04wTTBRZ2ZDQnVkV3hzSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlkyVnVkR1Z5TzF4dUlDQjlYRzRnSUhCMVlteHBZeUJ6WlhRZ1kyVnVkR1Z5S0dObGJuUmxjam9nVkVoU1JVVXVUMkpxWldOME0wUWdmQ0J1ZFd4c0tTQjdYRzRnSUNBZ0x5OGdkVzVwYm5OMFlXeHNJR2x1ZG1WeWMyVWdZMkZqYUdWY2JpQWdJQ0JwWmlBb2RHaHBjeTVmWTJWdWRHVnlQeTUxYzJWeVJHRjBZUzVwYm5abGNuTmxRMkZqYUdWUWNtOTRlU2tnZTF4dUlDQWdJQ0FnS0hSb2FYTXVYMk5sYm5SbGNpNTFjMlZ5UkdGMFlTNXBiblpsY25ObFEyRmphR1ZRY205NGVTQmhjeUJOWVhSeWFYZzBTVzUyWlhKelpVTmhZMmhsS1M1eVpYWmxjblFvS1R0Y2JpQWdJQ0FnSUdSbGJHVjBaU0IwYUdsekxsOWpaVzUwWlhJdWRYTmxja1JoZEdFdWFXNTJaWEp6WlVOaFkyaGxVSEp2ZUhrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1kyaGhibWRsSUhSb1pTQmpaVzUwWlhKY2JpQWdJQ0IwYUdsekxsOWpaVzUwWlhJZ1BTQmpaVzUwWlhJN1hHNWNiaUFnSUNBdkx5QnBibk4wWVd4c0lHbHVkbVZ5YzJVZ1kyRmphR1ZjYmlBZ0lDQnBaaUFvZEdocGN5NWZZMlZ1ZEdWeUtTQjdYRzRnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYMk5sYm5SbGNpNTFjMlZ5UkdGMFlTNXBiblpsY25ObFEyRmphR1ZRY205NGVTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpaVzUwWlhJdWRYTmxja1JoZEdFdWFXNTJaWEp6WlVOaFkyaGxVSEp2ZUhrZ1BTQnVaWGNnVFdGMGNtbDRORWx1ZG1WeWMyVkRZV05vWlNoMGFHbHpMbDlqWlc1MFpYSXViV0YwY21sNFYyOXliR1FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCSmJtbDBhV0ZzSUhOMFlYUmxJRzltSUhSb1pTQnNiMk5oYkNCdFlYUnlhWGdnYjJZZ2RHaGxJR0p2Ym1VdVhHNGdJQ0FxTDF4dUlDQndjbWwyWVhSbElGOXBibWwwYVdGc1RHOWpZV3hOWVhSeWFYZ2dQU0J1WlhjZ1ZFaFNSVVV1VFdGMGNtbDROQ2dwTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJKYm1sMGFXRnNJSE4wWVhSbElHOW1JSFJvWlNCeWIzUmhkR2x2YmlCdlppQjBhR1VnWW05dVpTNWNiaUFnSUNvdlhHNGdJSEJ5YVhaaGRHVWdYMmx1YVhScFlXeE1iMk5oYkZKdmRHRjBhVzl1SUQwZ2JtVjNJRlJJVWtWRkxsRjFZWFJsY201cGIyNG9LVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTVzVwZEdsaGJDQnpkR0YwWlNCdlppQjBhR1VnY0c5emFYUnBiMjRnYjJZZ2FYUnpJR05vYVd4a0xseHVJQ0FnS2k5Y2JpQWdjSEpwZG1GMFpTQmZhVzVwZEdsaGJFeHZZMkZzUTJocGJHUlFiM05wZEdsdmJpQTlJRzVsZHlCVVNGSkZSUzVXWldOMGIzSXpLQ2s3WEc0Z0lIQjFZbXhwWXlCblpYUWdhVzVwZEdsaGJFeHZZMkZzUTJocGJHUlFiM05wZEdsdmJpZ3BPaUJVU0ZKRlJTNVdaV04wYjNJeklIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZhVzVwZEdsaGJFeHZZMkZzUTJocGJHUlFiM05wZEdsdmJqdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJSFJvWlNCM2IzSnNaQ0J0WVhSeWFYZ2diMllnYVhSeklIQmhjbVZ1ZENCdlltcGxZM1F1WEc0Z0lDQXFJRTV2ZEdVZ2RHaGhkQ0JwZENCeVpYUjFjbTV6SUdFZ2NtVm1aWEpsYm1ObElIUnZJSFJvWlNCdFlYUnlhWGd1SUVSdmJpZDBJRzExZEdGMFpTQjBhR2x6SUdScGNtVmpkR3g1SVZ4dUlDQWdLaTljYmlBZ2NISnBkbUYwWlNCblpYUWdYM0JoY21WdWRFMWhkSEpwZUZkdmNteGtLQ2s2SUZSSVVrVkZMazFoZEhKcGVEUWdlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUp2Ym1VdWNHRnlaVzUwSUQ4Z2RHaHBjeTVpYjI1bExuQmhjbVZ1ZEM1dFlYUnlhWGhYYjNKc1pDQTZJRWxFUlU1VVNWUlpYMDFCVkZKSldEUTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxJR0VnYm1WM0lGWlNUVk53Y21sdVowSnZibVV1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCaWIyNWxJRUZ1SUU5aWFtVmpkRE5FSUhSb1lYUWdkMmxzYkNCaVpTQmhkSFJoWTJobFpDQjBieUIwYUdseklHSnZibVZjYmlBZ0lDb2dRSEJoY21GdElHTm9hV3hrSUVGdUlFOWlhbVZqZERORUlIUm9ZWFFnZDJsc2JDQmlaU0IxYzJWa0lHRnpJR0VnZEdGcGJDQnZaaUIwYUdseklITndjbWx1WnlCaWIyNWxMaUJKZENCallXNGdZbVVnYm5Wc2JDQjNhR1Z1SUhSb1pTQnpjSEpwYm1jZ1ltOXVaU0JwY3lCcGJYQnZjblJsWkNCbWNtOXRJRlpTVFNBd0xqQmNiaUFnSUNvZ1FIQmhjbUZ0SUhObGRIUnBibWR6SUZObGRtVnlZV3dnY0dGeVlXMWxkR1Z5Y3lCeVpXeGhkR1ZrSUhSdklHSmxhR0YyYVc5eUlHOW1JSFJvWlNCemNISnBibWNnWW05dVpWeHVJQ0FnS2lCQWNHRnlZVzBnWTI5c2JHbGtaWEpIY205MWNITWdRMjlzYkdsa1pYSWdaM0p2ZFhCeklIUm9ZWFFnZDJsc2JDQmlaU0JqYjJ4c2FXUmxaQ0IzYVhSb0lIUm9hWE1nYzNCeWFXNW5JR0p2Ym1WY2JpQWdJQ292WEc0Z0lHTnZibk4wY25WamRHOXlLRnh1SUNBZ0lHSnZibVU2SUZSSVVrVkZMazlpYW1WamRETkVMRnh1SUNBZ0lHTm9hV3hrT2lCVVNGSkZSUzVQWW1wbFkzUXpSQ0I4SUc1MWJHd3NYRzRnSUNBZ2MyVjBkR2x1WjNNNklGQmhjblJwWVd3OFZsSk5VM0J5YVc1blFtOXVaVXB2YVc1MFUyVjBkR2x1WjNNK0lEMGdlMzBzWEc0Z0lDQWdZMjlzYkdsa1pYSkhjbTkxY0hNNklGWlNUVk53Y21sdVowSnZibVZEYjJ4c2FXUmxja2R5YjNWd1cxMGdQU0JiWFN4Y2JpQWdLU0I3WEc0Z0lDQWdkR2hwY3k1aWIyNWxJRDBnWW05dVpUc2dMeThnZFc1cFZsSk40NEduNDRHdUlIQmhjbVZ1ZEZ4dUlDQWdJSFJvYVhNdVltOXVaUzV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJRDBnWm1Gc2MyVTdJQzh2SUhWd1pHRjBaZU9CcStPQ2lPT0NpdWlvaU9ldWwrT0JsZU9Dak9PQ2krT0JydU9CcDNSb2NtVmxMbXB6NVlhRjQ0R240NEd1NkllcTVZdVY1WWVtNTVDRzQ0R3Y1TGlONkthQlhHNWNiaUFnSUNCMGFHbHpMbU5vYVd4a0lEMGdZMmhwYkdRN1hHNWNiaUFnSUNCMGFHbHpMbk5sZEhScGJtZHpJRDBnZTF4dUlDQWdJQ0FnYUdsMFVtRmthWFZ6T2lCelpYUjBhVzVuY3k1b2FYUlNZV1JwZFhNZ1B6OGdNQzR3TEZ4dUlDQWdJQ0FnYzNScFptWnVaWE56T2lCelpYUjBhVzVuY3k1emRHbG1abTVsYzNNZ1B6OGdNUzR3TEZ4dUlDQWdJQ0FnWjNKaGRtbDBlVkJ2ZDJWeU9pQnpaWFIwYVc1bmN5NW5jbUYyYVhSNVVHOTNaWElnUHo4Z01DNHdMRnh1SUNBZ0lDQWdaM0poZG1sMGVVUnBjam9nYzJWMGRHbHVaM011WjNKaGRtbDBlVVJwY2o4dVkyeHZibVVvS1NBL1B5QnVaWGNnVkVoU1JVVXVWbVZqZEc5eU15Z3dMakFzSUMweExqQXNJREF1TUNrc1hHNGdJQ0FnSUNCa2NtRm5SbTl5WTJVNklITmxkSFJwYm1kekxtUnlZV2RHYjNKalpTQS9QeUF3TGpRc1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUhSb2FYTXVZMjlzYkdsa1pYSkhjbTkxY0hNZ1BTQmpiMnhzYVdSbGNrZHliM1Z3Y3p0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaWFFnZEdobElHbHVhWFJwWVd3Z2MzUmhkR1VnYjJZZ2RHaHBjeUJ6Y0hKcGJtY2dZbTl1WlM1Y2JpQWdJQ29nV1c5MUlHMXBaMmgwSUhkaGJuUWdkRzhnWTJGc2JDQjdRR3hwYm1zZ1ZsSk5VM0J5YVc1blFtOXVaVTFoYm1GblpYSXVjMlYwU1c1cGRGTjBZWFJsZlNCcGJuTjBaV0ZrTGx4dUlDQWdLaTljYmlBZ2NIVmliR2xqSUhObGRFbHVhWFJUZEdGMFpTZ3BPaUIyYjJsa0lIdGNiaUFnSUNBdkx5QnlaVzFsYldKbGNpQnBibWwwYVdGc0lIQnZjMmwwYVc5dUlHOW1JR2wwYzJWc1pseHVJQ0FnSUhSb2FYTXVYMmx1YVhScFlXeE1iMk5oYkUxaGRISnBlQzVqYjNCNUtIUm9hWE11WW05dVpTNXRZWFJ5YVhncE8xeHVJQ0FnSUhSb2FYTXVYMmx1YVhScFlXeE1iMk5oYkZKdmRHRjBhVzl1TG1OdmNIa29kR2hwY3k1aWIyNWxMbkYxWVhSbGNtNXBiMjRwTzF4dVhHNGdJQ0FnTHk4Z2MyVmxJR2x1YVhScFlXd2djRzl6YVhScGIyNGdiMllnYVhSeklHeHZZMkZzSUdOb2FXeGtYRzRnSUNBZ2FXWWdLSFJvYVhNdVkyaHBiR1FwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMmx1YVhScFlXeE1iMk5oYkVOb2FXeGtVRzl6YVhScGIyNHVZMjl3ZVNoMGFHbHpMbU5vYVd4a0xuQnZjMmwwYVc5dUtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnTHk4Z2RuSnRNQ0J5WlhGMWFYSmxjeUJoSURkamJTQm1hWGhsWkNCaWIyNWxJR3hsYm1kMGFDQm1iM0lnZEdobElHWnBibUZzSUc1dlpHVWdhVzRnWVNCamFHRnBibHh1SUNBZ0lDQWdMeThnVTJWbE9pQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZkbkp0TFdNdmRuSnRMWE53WldOcFptbGpZWFJwYjI0dmRISmxaUzl0WVhOMFpYSXZjM0JsWTJsbWFXTmhkR2x2Ymk5V1VrMURYM053Y21sdVowSnZibVV0TVM0d0kyRmliM1YwTFhOd2NtbHVaeTFqYjI1bWFXZDFjbUYwYVc5dVhHNGdJQ0FnSUNCMGFHbHpMbDlwYm1sMGFXRnNURzlqWVd4RGFHbHNaRkJ2YzJsMGFXOXVMbU52Y0hrb2RHaHBjeTVpYjI1bExuQnZjMmwwYVc5dUtTNXViM0p0WVd4cGVtVW9LUzV0ZFd4MGFYQnNlVk5qWVd4aGNpZ3dMakEzS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCamIzQjVJSFJvWlNCamFHbHNaQ0J3YjNOcGRHbHZiaUIwYnlCMFlXbHNjMXh1SUNBZ0lHTnZibk4wSUcxaGRISnBlRmR2Y214a1ZHOURaVzUwWlhJZ1BTQjBhR2x6TGw5blpYUk5ZWFJ5YVhoWGIzSnNaRlJ2UTJWdWRHVnlLRjl0WVhSQktUdGNiaUFnSUNCMGFHbHpMbUp2Ym1VdWJHOWpZV3hVYjFkdmNteGtLSFJvYVhNdVgyTjFjbkpsYm5SVVlXbHNMbU52Y0hrb2RHaHBjeTVmYVc1cGRHbGhiRXh2WTJGc1EyaHBiR1JRYjNOcGRHbHZiaWtwTG1Gd2NHeDVUV0YwY21sNE5DaHRZWFJ5YVhoWGIzSnNaRlJ2UTJWdWRHVnlLVHRjYmlBZ0lDQjBhR2x6TGw5d2NtVjJWR0ZwYkM1amIzQjVLSFJvYVhNdVgyTjFjbkpsYm5SVVlXbHNLVHRjYmx4dUlDQWdJQzh2SUhObGRDQnBibWwwYVdGc0lITjBZWFJsY3lCMGFHRjBJR0Z5WlNCeVpXeGhkR1ZrSUhSdklHeHZZMkZzSUdOb2FXeGtJSEJ2YzJsMGFXOXVYRzRnSUNBZ2RHaHBjeTVmWW05dVpVRjRhWE11WTI5d2VTaDBhR2x6TGw5cGJtbDBhV0ZzVEc5allXeERhR2xzWkZCdmMybDBhVzl1S1M1dWIzSnRZV3hwZW1Vb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhObGRDQjBhR1VnYzNSaGRHVWdiMllnZEdocGN5QmliMjVsTGx4dUlDQWdLaUJaYjNVZ2JXbG5hSFFnZDJGdWRDQjBieUJqWVd4c0lGdGJWbEpOVTNCeWFXNW5RbTl1WlUxaGJtRm5aWEl1Y21WelpYUmRYU0JwYm5OMFpXRmtMbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJSEpsYzJWMEtDazZJSFp2YVdRZ2UxeHVJQ0FnSUhSb2FYTXVZbTl1WlM1eGRXRjBaWEp1YVc5dUxtTnZjSGtvZEdocGN5NWZhVzVwZEdsaGJFeHZZMkZzVW05MFlYUnBiMjRwTzF4dVhHNGdJQ0FnTHk4Z1YyVWdibVZsWkNCMGJ5QjFjR1JoZEdVZ2FYUnpJRzFoZEhKcGVGZHZjbXhrSUcxaGJuVmhiR3g1TENCemFXNWpaU0IzWlNCMGQyVmhhMlZrSUhSb1pTQmliMjVsSUdKNUlHOTFjaUJvWVc1a1hHNGdJQ0FnZEdocGN5NWliMjVsTG5Wd1pHRjBaVTFoZEhKcGVDZ3BPMXh1SUNBZ0lIUm9hWE11WW05dVpTNXRZWFJ5YVhoWGIzSnNaQzV0ZFd4MGFYQnNlVTFoZEhKcFkyVnpLSFJvYVhNdVgzQmhjbVZ1ZEUxaGRISnBlRmR2Y214a0xDQjBhR2x6TG1KdmJtVXViV0YwY21sNEtUdGNibHh1SUNBZ0lDOHZJRUZ3Y0d4NUlIVndaR0YwWldRZ2NHOXphWFJwYjI0Z2RHOGdkR0ZwYkNCemRHRjBaWE5jYmlBZ0lDQmpiMjV6ZENCdFlYUnlhWGhYYjNKc1pGUnZRMlZ1ZEdWeUlEMGdkR2hwY3k1ZloyVjBUV0YwY21sNFYyOXliR1JVYjBObGJuUmxjaWhmYldGMFFTazdYRzRnSUNBZ2RHaHBjeTVpYjI1bExteHZZMkZzVkc5WGIzSnNaQ2gwYUdsekxsOWpkWEp5Wlc1MFZHRnBiQzVqYjNCNUtIUm9hWE11WDJsdWFYUnBZV3hNYjJOaGJFTm9hV3hrVUc5emFYUnBiMjRwS1M1aGNIQnNlVTFoZEhKcGVEUW9iV0YwY21sNFYyOXliR1JVYjBObGJuUmxjaWs3WEc0Z0lDQWdkR2hwY3k1ZmNISmxkbFJoYVd3dVkyOXdlU2gwYUdsekxsOWpkWEp5Wlc1MFZHRnBiQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1ZYQmtZWFJsSUhSb1pTQnpkR0YwWlNCdlppQjBhR2x6SUdKdmJtVXVYRzRnSUNBcUlGbHZkU0J0YVdkb2RDQjNZVzUwSUhSdklHTmhiR3dnVzF0V1VrMVRjSEpwYm1kQ2IyNWxUV0Z1WVdkbGNpNTFjR1JoZEdWZFhTQnBibk4wWldGa0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdaR1ZzZEdFZ1pHVnNkR0ZVYVcxbFhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ2RYQmtZWFJsS0dSbGJIUmhPaUJ1ZFcxaVpYSXBPaUIyYjJsa0lIdGNiaUFnSUNCcFppQW9aR1ZzZEdFZ1BEMGdNQ2tnY21WMGRYSnVPMXh1WEc0Z0lDQWdMeThnVlhCa1lYUmxJSFJvWlNCZmQyOXliR1JUY0dGalpVSnZibVZNWlc1bmRHaGNiaUFnSUNCMGFHbHpMbDlqWVd4alYyOXliR1JUY0dGalpVSnZibVZNWlc1bmRHZ29LVHRjYmx4dUlDQWdJQzh2SUVkbGRDQmliMjVsSUhCdmMybDBhVzl1SUdsdUlHTmxiblJsY2lCemNHRmpaVnh1SUNBZ0lGOTNiM0pzWkZOd1lXTmxVRzl6YVhScGIyNHVjMlYwUm5KdmJVMWhkSEpwZUZCdmMybDBhVzl1S0hSb2FYTXVZbTl1WlM1dFlYUnlhWGhYYjNKc1pDazdYRzRnSUNBZ2JHVjBJRzFoZEhKcGVGZHZjbXhrVkc5RFpXNTBaWElnUFNCMGFHbHpMbDluWlhSTllYUnlhWGhYYjNKc1pGUnZRMlZ1ZEdWeUtGOXRZWFJCS1R0Y2JpQWdJQ0JmWTJWdWRHVnlVM0JoWTJWUWIzTnBkR2x2Ymk1amIzQjVLRjkzYjNKc1pGTndZV05sVUc5emFYUnBiMjRwTG1Gd2NHeDVUV0YwY21sNE5DaHRZWFJ5YVhoWGIzSnNaRlJ2UTJWdWRHVnlLVHRjYmlBZ0lDQmpiMjV6ZENCeGRXRjBWMjl5YkdSVWIwTmxiblJsY2lBOUlGOXhkV0YwUVM1elpYUkdjbTl0VW05MFlYUnBiMjVOWVhSeWFYZ29iV0YwY21sNFYyOXliR1JVYjBObGJuUmxjaWs3WEc1Y2JpQWdJQ0F2THlCSFpYUWdjR0Z5Wlc1MElHMWhkSEpwZUNCcGJpQmpaVzUwWlhJZ2MzQmhZMlZjYmlBZ0lDQmpiMjV6ZENCalpXNTBaWEpUY0dGalpWQmhjbVZ1ZEUxaGRISnBlQ0E5SUY5dFlYUkNMbU52Y0hrb2JXRjBjbWw0VjI5eWJHUlViME5sYm5SbGNpa3ViWFZzZEdsd2JIa29kR2hwY3k1ZmNHRnlaVzUwVFdGMGNtbDRWMjl5YkdRcE8xeHVYRzRnSUNBZ0x5OGdSMlYwSUdKdmJtVkJlR2x6SUdsdUlHTmxiblJsY2lCemNHRmpaVnh1SUNBZ0lHTnZibk4wSUdObGJuUmxjbE53WVdObFFtOXVaVUY0YVhNZ1BTQmZkak5DWEc0Z0lDQWdJQ0F1WTI5d2VTaDBhR2x6TGw5aWIyNWxRWGhwY3lsY2JpQWdJQ0FnSUM1aGNIQnNlVTFoZEhKcGVEUW9kR2hwY3k1ZmFXNXBkR2xoYkV4dlkyRnNUV0YwY21sNEtWeHVJQ0FnSUNBZ0xtRndjR3g1VFdGMGNtbDROQ2hqWlc1MFpYSlRjR0ZqWlZCaGNtVnVkRTFoZEhKcGVDbGNiaUFnSUNBZ0lDNXpkV0lvWDJObGJuUmxjbE53WVdObFVHOXphWFJwYjI0cFhHNGdJQ0FnSUNBdWJtOXliV0ZzYVhwbEtDazdYRzVjYmlBZ0lDQXZMeUJuY21GMmFYUjVJR2x1SUdObGJuUmxjaUJ6Y0dGalpWeHVJQ0FnSUdOdmJuTjBJR05sYm5SbGNsTndZV05sUjNKaGRtbDBlU0E5SUY5Mk0wTXVZMjl3ZVNoMGFHbHpMbk5sZEhScGJtZHpMbWR5WVhacGRIbEVhWElwTG1Gd2NHeDVVWFZoZEdWeWJtbHZiaWh4ZFdGMFYyOXliR1JVYjBObGJuUmxjaWt1Ym05eWJXRnNhWHBsS0NrN1hHNWNiaUFnSUNCamIyNXpkQ0J0WVhSeWFYaERaVzUwWlhKVWIxZHZjbXhrSUQwZ2RHaHBjeTVmWjJWMFRXRjBjbWw0UTJWdWRHVnlWRzlYYjNKc1pDaGZiV0YwUVNrN1hHNWNiaUFnSUNBdkx5QjJaWEpzWlhUbnFZM2xpSWJqZ2FmbXJLSGpnYTdrdlkzbnZhN2pncExvcUlqbnJwZGNiaUFnSUNCZmJtVjRkRlJoYVd4Y2JpQWdJQ0FnSUM1amIzQjVLSFJvYVhNdVgyTjFjbkpsYm5SVVlXbHNLVnh1SUNBZ0lDQWdMbUZrWkNoY2JpQWdJQ0FnSUNBZ1gzWXpRVnh1SUNBZ0lDQWdJQ0FnSUM1amIzQjVLSFJvYVhNdVgyTjFjbkpsYm5SVVlXbHNLVnh1SUNBZ0lDQWdJQ0FnSUM1emRXSW9kR2hwY3k1ZmNISmxkbFJoYVd3cFhHNGdJQ0FnSUNBZ0lDQWdMbTExYkhScGNHeDVVMk5oYkdGeUtERWdMU0IwYUdsekxuTmxkSFJwYm1kekxtUnlZV2RHYjNKalpTa3NYRzRnSUNBZ0lDQXBJQzh2SU9XSmplT0RsZU9Eck9PRHZPT0RvT09CcnVlbnUrV0xsZU9Da3VlMm1lZTJtdU9CbWVPQ2l5am11SnZvb2JEamdvTGpnWUxqZ292amdvZ3BYRzRnSUNBZ0lDQXVZV1JrS0Y5Mk0wRXVZMjl3ZVNoalpXNTBaWEpUY0dGalpVSnZibVZCZUdsektTNXRkV3gwYVhCc2VWTmpZV3hoY2loMGFHbHpMbk5sZEhScGJtZHpMbk4wYVdabWJtVnpjeUFxSUdSbGJIUmhLU2tnTHk4ZzZLYXE0NEd1NVp1ZTZMdWk0NEdyNDRLSTQ0S0w1YTJRNDRPYzQ0Tzg0NE96NDRHdTU2ZTc1WXVWNTV1dTVxaVpYRzRnSUNBZ0lDQXVZV1JrS0Y5Mk0wRXVZMjl3ZVNoalpXNTBaWEpUY0dGalpVZHlZWFpwZEhrcExtMTFiSFJwY0d4NVUyTmhiR0Z5S0hSb2FYTXVjMlYwZEdsdVozTXVaM0poZG1sMGVWQnZkMlZ5SUNvZ1pHVnNkR0VwS1NBdkx5RGxwSmJsaXB2amdhdmpnb2pqZ292bnA3dmxpNVhwaDQ5Y2JpQWdJQ0FnSUM1aGNIQnNlVTFoZEhKcGVEUW9iV0YwY21sNFEyVnVkR1Z5Vkc5WGIzSnNaQ2s3SUM4dklIUmhhV3pqZ3BKM2IzSnNaQ0J6Y0dGalplT0JxK2FJdStPQm1WeHVYRzRnSUNBZ0x5OGdibTl5YldGc2FYcGxJR0p2Ym1VZ2JHVnVaM1JvWEc0Z0lDQWdYMjVsZUhSVVlXbHNMbk4xWWloZmQyOXliR1JUY0dGalpWQnZjMmwwYVc5dUtTNXViM0p0WVd4cGVtVW9LUzV0ZFd4MGFYQnNlVk5qWVd4aGNpaDBhR2x6TGw5M2IzSnNaRk53WVdObFFtOXVaVXhsYm1kMGFDa3VZV1JrS0Y5M2IzSnNaRk53WVdObFVHOXphWFJwYjI0cE8xeHVYRzRnSUNBZ0x5OGdRMjlzYkdsemFXOXU0NEduNTZlNzVZdVZYRzRnSUNBZ2RHaHBjeTVmWTI5c2JHbHphVzl1S0Y5dVpYaDBWR0ZwYkNrN1hHNWNiaUFnSUNBdkx5QjFjR1JoZEdVZ2NISmxkbFJoYVd3Z1lXNWtJR04xY25KbGJuUlVZV2xzWEc0Z0lDQWdiV0YwY21sNFYyOXliR1JVYjBObGJuUmxjaUE5SUhSb2FYTXVYMmRsZEUxaGRISnBlRmR2Y214a1ZHOURaVzUwWlhJb1gyMWhkRUVwTzF4dVhHNGdJQ0FnZEdocGN5NWZjSEpsZGxSaGFXd3VZMjl3ZVNoMGFHbHpMbDlqZFhKeVpXNTBWR0ZwYkNrN1hHNGdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRGUmhhV3d1WTI5d2VTaGZkak5CTG1OdmNIa29YMjVsZUhSVVlXbHNLUzVoY0hCc2VVMWhkSEpwZURRb2JXRjBjbWw0VjI5eWJHUlViME5sYm5SbGNpa3BPMXh1WEc0Z0lDQWdMeThnUVhCd2JIa2djbTkwWVhScGIyNHNJR052Ym5abGNuUWdkbVZqZEc5eU15QjBhR2x1WnlCcGJuUnZJR0ZqZEhWaGJDQnhkV0YwWlhKdWFXOXVYRzRnSUNBZ0x5OGdUM0pwWjJsdVlXd2dWVzVwVmxKTklHbHpJR1J2YVc1bklHTmxiblJsY2lCMWJtbDBJR05oYkdOMWJIVnpJR0YwSUdobGNtVWdZblYwSUhkbEozSmxJR2R2Ym01aElHUnZJSFJvYVhNZ2IyNGdiRzlqWVd3Z2RXNXBkRnh1SUNBZ0lHTnZibk4wSUhkdmNteGtVM0JoWTJWSmJtbDBhV0ZzVFdGMGNtbDRTVzUySUQwZ2JXRjBORWx1ZG1WeWRFTnZiWEJoZENoY2JpQWdJQ0FnSUY5dFlYUkJMbU52Y0hrb2RHaHBjeTVmY0dGeVpXNTBUV0YwY21sNFYyOXliR1FwTG0xMWJIUnBjR3g1S0hSb2FYTXVYMmx1YVhScFlXeE1iMk5oYkUxaGRISnBlQ2tzWEc0Z0lDQWdLVHRjYmlBZ0lDQmpiMjV6ZENCaGNIQnNlVkp2ZEdGMGFXOXVJRDBnWDNGMVlYUkJMbk5sZEVaeWIyMVZibWwwVm1WamRHOXljeWhjYmlBZ0lDQWdJSFJvYVhNdVgySnZibVZCZUdsekxGeHVJQ0FnSUNBZ1gzWXpRUzVqYjNCNUtGOXVaWGgwVkdGcGJDa3VZWEJ3YkhsTllYUnlhWGcwS0hkdmNteGtVM0JoWTJWSmJtbDBhV0ZzVFdGMGNtbDRTVzUyS1M1dWIzSnRZV3hwZW1Vb0tTeGNiaUFnSUNBcE8xeHVYRzRnSUNBZ2RHaHBjeTVpYjI1bExuRjFZWFJsY201cGIyNHVZMjl3ZVNoMGFHbHpMbDlwYm1sMGFXRnNURzlqWVd4U2IzUmhkR2x2YmlrdWJYVnNkR2x3Ykhrb1lYQndiSGxTYjNSaGRHbHZiaWs3WEc1Y2JpQWdJQ0F2THlCWFpTQnVaV1ZrSUhSdklIVndaR0YwWlNCcGRITWdiV0YwY21sNFYyOXliR1FnYldGdWRXRnNiSGtzSUhOcGJtTmxJSGRsSUhSM1pXRnJaV1FnZEdobElHSnZibVVnWW5rZ2IzVnlJR2hoYm1SY2JpQWdJQ0IwYUdsekxtSnZibVV1ZFhCa1lYUmxUV0YwY21sNEtDazdYRzRnSUNBZ2RHaHBjeTVpYjI1bExtMWhkSEpwZUZkdmNteGtMbTExYkhScGNHeDVUV0YwY21salpYTW9kR2hwY3k1ZmNHRnlaVzUwVFdGMGNtbDRWMjl5YkdRc0lIUm9hWE11WW05dVpTNXRZWFJ5YVhncE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVJ2SUdOdmJHeHBjMmx2YmlCdFlYUm9JR0ZuWVdsdWMzUWdaWFpsY25rZ1kyOXNiR2xrWlhKeklHRjBkR0ZqYUdWa0lIUnZJSFJvYVhNZ1ltOXVaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUhSaGFXd2dWR2hsSUhSaGFXd2dlVzkxSUhkaGJuUWdkRzhnY0hKdlkyVnpjMXh1SUNBZ0tpOWNiaUFnY0hKcGRtRjBaU0JmWTI5c2JHbHphVzl1S0hSaGFXdzZJRlJJVWtWRkxsWmxZM1J2Y2pNcE9pQjJiMmxrSUh0Y2JpQWdJQ0IwYUdsekxtTnZiR3hwWkdWeVIzSnZkWEJ6TG1admNrVmhZMmdvS0dOdmJHeHBaR1Z5UjNKdmRYQXBJRDArSUh0Y2JpQWdJQ0FnSUdOdmJHeHBaR1Z5UjNKdmRYQXVZMjlzYkdsa1pYSnpMbVp2Y2tWaFkyZ29LR052Ykd4cFpHVnlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdScGMzUWdQU0JqYjJ4c2FXUmxjaTV6YUdGd1pTNWpZV3hqZFd4aGRHVkRiMnhzYVhOcGIyNG9ZMjlzYkdsa1pYSXViV0YwY21sNFYyOXliR1FzSUhSaGFXd3NJSFJvYVhNdWMyVjBkR2x1WjNNdWFHbDBVbUZrYVhWekxDQmZkak5CS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvWkdsemRDQThJREF1TUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUdocGRGeHVJQ0FnSUNBZ0lDQWdJSFJoYVd3dVlXUmtLRjkyTTBFdWJYVnNkR2x3YkhsVFkyRnNZWElvTFdScGMzUXBLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRzV2Y20xaGJHbDZaU0JpYjI1bElHeGxibWQwYUZ4dUlDQWdJQ0FnSUNBZ0lIUmhhV3d1YzNWaUtGOTNiM0pzWkZOd1lXTmxVRzl6YVhScGIyNHBMbTV2Y20xaGJHbDZaU2dwTG0xMWJIUnBjR3g1VTJOaGJHRnlLSFJvYVhNdVgzZHZjbXhrVTNCaFkyVkNiMjVsVEdWdVozUm9LUzVoWkdRb1gzZHZjbXhrVTNCaFkyVlFiM05wZEdsdmJpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTmhiR04xYkdGMFpTQjBhR1VnZTBCc2FXNXJJRjkzYjNKc1pGTndZV05sUW05dVpVeGxibWQwYUgwdVhHNGdJQ0FxSUVsdWRHVnVaR1ZrSUhSdklHSmxJSFZ6WldRZ2FXNGdlMEJzYVc1cklIVndaR0YwWlgwdVhHNGdJQ0FxTDF4dUlDQndjbWwyWVhSbElGOWpZV3hqVjI5eWJHUlRjR0ZqWlVKdmJtVk1aVzVuZEdnb0tUb2dkbTlwWkNCN1hHNGdJQ0FnWDNZelFTNXpaWFJHY205dFRXRjBjbWw0VUc5emFYUnBiMjRvZEdocGN5NWliMjVsTG0xaGRISnBlRmR2Y214a0tUc2dMeThnWjJWMElIZHZjbXhrSUhCdmMybDBhVzl1SUc5bUlIUm9hWE11WW05dVpWeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdVkyaHBiR1FwSUh0Y2JpQWdJQ0FnSUY5Mk0wSXVjMlYwUm5KdmJVMWhkSEpwZUZCdmMybDBhVzl1S0hSb2FYTXVZMmhwYkdRdWJXRjBjbWw0VjI5eWJHUXBPeUF2THlCblpYUWdkMjl5YkdRZ2NHOXphWFJwYjI0Z2IyWWdkR2hwY3k1amFHbHNaRnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCZmRqTkNMbU52Y0hrb2RHaHBjeTVmYVc1cGRHbGhiRXh2WTJGc1EyaHBiR1JRYjNOcGRHbHZiaWs3WEc0Z0lDQWdJQ0JmZGpOQ0xtRndjR3g1VFdGMGNtbDROQ2gwYUdsekxtSnZibVV1YldGMGNtbDRWMjl5YkdRcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVYM2R2Y214a1UzQmhZMlZDYjI1bFRHVnVaM1JvSUQwZ1gzWXpRUzV6ZFdJb1gzWXpRaWt1YkdWdVozUm9LQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1EzSmxZWFJsSUdFZ2JXRjBjbWw0SUhSb1lYUWdZMjl1ZG1WeWRITWdZMlZ1ZEdWeUlITndZV05sSUdsdWRHOGdkMjl5YkdRZ2MzQmhZMlV1WEc0Z0lDQXFJRUJ3WVhKaGJTQjBZWEpuWlhRZ1ZHRnlaMlYwSUcxaGRISnBlRnh1SUNBZ0tpOWNiaUFnY0hKcGRtRjBaU0JmWjJWMFRXRjBjbWw0UTJWdWRHVnlWRzlYYjNKc1pDaDBZWEpuWlhRNklGUklVa1ZGTGsxaGRISnBlRFFwT2lCVVNGSkZSUzVOWVhSeWFYZzBJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NWZZMlZ1ZEdWeUtTQjdYRzRnSUNBZ0lDQjBZWEpuWlhRdVkyOXdlU2gwYUdsekxsOWpaVzUwWlhJdWJXRjBjbWw0VjI5eWJHUXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMFlYSm5aWFF1YVdSbGJuUnBkSGtvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR0Z5WjJWME8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU55WldGMFpTQmhJRzFoZEhKcGVDQjBhR0YwSUdOdmJuWmxjblJ6SUhkdmNteGtJSE53WVdObElHbHVkRzhnWTJWdWRHVnlJSE53WVdObExseHVJQ0FnS2lCQWNHRnlZVzBnZEdGeVoyVjBJRlJoY21kbGRDQnRZWFJ5YVhoY2JpQWdJQ292WEc0Z0lIQnlhWFpoZEdVZ1gyZGxkRTFoZEhKcGVGZHZjbXhrVkc5RFpXNTBaWElvZEdGeVoyVjBPaUJVU0ZKRlJTNU5ZWFJ5YVhnMEtUb2dWRWhTUlVVdVRXRjBjbWw0TkNCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WDJObGJuUmxjaWtnZTF4dUlDQWdJQ0FnZEdGeVoyVjBMbU52Y0hrb0tIUm9hWE11WDJObGJuUmxjaTUxYzJWeVJHRjBZUzVwYm5abGNuTmxRMkZqYUdWUWNtOTRlU0JoY3lCTllYUnlhWGcwU1c1MlpYSnpaVU5oWTJobEtTNXBiblpsY25ObEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdGeVoyVjBMbWxrWlc1MGFYUjVLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIUmhjbWRsZER0Y2JpQWdmVnh1ZlZ4dUlpd2lMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHlYRzVEYjNCNWNtbG5hSFFnS0dNcElFMXBZM0p2YzI5bWRDQkRiM0p3YjNKaGRHbHZiaTVjY2x4dVhISmNibEJsY20xcGMzTnBiMjRnZEc4Z2RYTmxMQ0JqYjNCNUxDQnRiMlJwWm5rc0lHRnVaQzl2Y2lCa2FYTjBjbWxpZFhSbElIUm9hWE1nYzI5bWRIZGhjbVVnWm05eUlHRnVlVnh5WEc1d2RYSndiM05sSUhkcGRHZ2diM0lnZDJsMGFHOTFkQ0JtWldVZ2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRdVhISmNibHh5WEc1VVNFVWdVMDlHVkZkQlVrVWdTVk1nVUZKUFZrbEVSVVFnWENKQlV5QkpVMXdpSUVGT1JDQlVTRVVnUVZWVVNFOVNJRVJKVTBOTVFVbE5VeUJCVEV3Z1YwRlNVa0ZPVkVsRlV5QlhTVlJJWEhKY2JsSkZSMEZTUkNCVVR5QlVTRWxUSUZOUFJsUlhRVkpGSUVsT1EweFZSRWxPUnlCQlRFd2dTVTFRVEVsRlJDQlhRVkpTUVU1VVNVVlRJRTlHSUUxRlVrTklRVTVVUVVKSlRFbFVXVnh5WEc1QlRrUWdSa2xVVGtWVFV5NGdTVTRnVGs4Z1JWWkZUbFFnVTBoQlRFd2dWRWhGSUVGVlZFaFBVaUJDUlNCTVNVRkNURVVnUms5U0lFRk9XU0JUVUVWRFNVRk1MQ0JFU1ZKRlExUXNYSEpjYmtsT1JFbFNSVU5VTENCUFVpQkRUMDVUUlZGVlJVNVVTVUZNSUVSQlRVRkhSVk1nVDFJZ1FVNVpJRVJCVFVGSFJWTWdWMGhCVkZOUFJWWkZVaUJTUlZOVlRGUkpUa2NnUmxKUFRWeHlYRzVNVDFOVElFOUdJRlZUUlN3Z1JFRlVRU0JQVWlCUVVrOUdTVlJUTENCWFNFVlVTRVZTSUVsT0lFRk9JRUZEVkVsUFRpQlBSaUJEVDA1VVVrRkRWQ3dnVGtWSFRFbEhSVTVEUlNCUFVseHlYRzVQVkVoRlVpQlVUMUpVU1U5VlV5QkJRMVJKVDA0c0lFRlNTVk5KVGtjZ1QxVlVJRTlHSUU5U0lFbE9JRU5QVGs1RlExUkpUMDRnVjBsVVNDQlVTRVVnVlZORklFOVNYSEpjYmxCRlVrWlBVazFCVGtORklFOUdJRlJJU1ZNZ1UwOUdWRmRCVWtVdVhISmNiaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUlDb3ZYSEpjYmk4cUlHZHNiMkpoYkNCU1pXWnNaV04wTENCUWNtOXRhWE5sSUNvdlhISmNibHh5WEc1MllYSWdaWGgwWlc1a1UzUmhkR2xqY3lBOUlHWjFibU4wYVc5dUtHUXNJR0lwSUh0Y2NseHVJQ0FnSUdWNGRHVnVaRk4wWVhScFkzTWdQU0JQWW1wbFkzUXVjMlYwVUhKdmRHOTBlWEJsVDJZZ2ZIeGNjbHh1SUNBZ0lDQWdJQ0FvZXlCZlgzQnliM1J2WDE4NklGdGRJSDBnYVc1emRHRnVZMlZ2WmlCQmNuSmhlU0FtSmlCbWRXNWpkR2x2YmlBb1pDd2dZaWtnZXlCa0xsOWZjSEp2ZEc5Zlh5QTlJR0k3SUgwcElIeDhYSEpjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnS0dRc0lHSXBJSHNnWm05eUlDaDJZWElnY0NCcGJpQmlLU0JwWmlBb1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHSXNJSEFwS1NCa1czQmRJRDBnWWx0d1hUc2dmVHRjY2x4dUlDQWdJSEpsZEhWeWJpQmxlSFJsYm1SVGRHRjBhV056S0dRc0lHSXBPMXh5WEc1OU8xeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZlpYaDBaVzVrY3loa0xDQmlLU0I3WEhKY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdJZ0lUMDlJRndpWm5WdVkzUnBiMjVjSWlBbUppQmlJQ0U5UFNCdWRXeHNLVnh5WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkRiR0Z6Y3lCbGVIUmxibVJ6SUhaaGJIVmxJRndpSUNzZ1UzUnlhVzVuS0dJcElDc2dYQ0lnYVhNZ2JtOTBJR0VnWTI5dWMzUnlkV04wYjNJZ2IzSWdiblZzYkZ3aUtUdGNjbHh1SUNBZ0lHVjRkR1Z1WkZOMFlYUnBZM01vWkN3Z1lpazdYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQmZYeWdwSUhzZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2lBOUlHUTdJSDFjY2x4dUlDQWdJR1F1Y0hKdmRHOTBlWEJsSUQwZ1lpQTlQVDBnYm5Wc2JDQS9JRTlpYW1WamRDNWpjbVZoZEdVb1lpa2dPaUFvWDE4dWNISnZkRzkwZVhCbElEMGdZaTV3Y205MGIzUjVjR1VzSUc1bGR5QmZYeWdwS1R0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElIWmhjaUJmWDJGemMybG5iaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHlYRzRnSUNBZ1gxOWhjM05wWjI0Z1BTQlBZbXBsWTNRdVlYTnphV2R1SUh4OElHWjFibU4wYVc5dUlGOWZZWE56YVdkdUtIUXBJSHRjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCekxDQnBJRDBnTVN3Z2JpQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdJR2tnUENCdU95QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY3lBOUlHRnlaM1Z0Wlc1MGMxdHBYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdjQ0JwYmlCektTQnBaaUFvVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0hNc0lIQXBLU0IwVzNCZElEMGdjMXR3WFR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFE3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdYMTloYzNOcFoyNHVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1R0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZjbVZ6ZENoekxDQmxLU0I3WEhKY2JpQWdJQ0IyWVhJZ2RDQTlJSHQ5TzF4eVhHNGdJQ0FnWm05eUlDaDJZWElnY0NCcGJpQnpLU0JwWmlBb1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tITXNJSEFwSUNZbUlHVXVhVzVrWlhoUFppaHdLU0E4SURBcFhISmNiaUFnSUNBZ0lDQWdkRnR3WFNBOUlITmJjRjA3WEhKY2JpQWdJQ0JwWmlBb2N5QWhQU0J1ZFd4c0lDWW1JSFI1Y0dWdlppQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpJRDA5UFNCY0ltWjFibU4wYVc5dVhDSXBYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJSEFnUFNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbFRlVzFpYjJ4ektITXBPeUJwSUR3Z2NDNXNaVzVuZEdnN0lHa3JLeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pTNXBibVJsZUU5bUtIQmJhVjBwSUR3Z01DQW1KaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbkJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsTG1OaGJHd29jeXdnY0Z0cFhTa3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwVzNCYmFWMWRJRDBnYzF0d1cybGRYVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnZER0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZaR1ZqYjNKaGRHVW9aR1ZqYjNKaGRHOXljeXdnZEdGeVoyVjBMQ0JyWlhrc0lHUmxjMk1wSUh0Y2NseHVJQ0FnSUhaaGNpQmpJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ3dnY2lBOUlHTWdQQ0F6SUQ4Z2RHRnlaMlYwSURvZ1pHVnpZeUE5UFQwZ2JuVnNiQ0EvSUdSbGMyTWdQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtIUmhjbWRsZEN3Z2EyVjVLU0E2SUdSbGMyTXNJR1E3WEhKY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUZKbFpteGxZM1FnUFQwOUlGd2liMkpxWldOMFhDSWdKaVlnZEhsd1pXOW1JRkpsWm14bFkzUXVaR1ZqYjNKaGRHVWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa2djaUE5SUZKbFpteGxZM1F1WkdWamIzSmhkR1VvWkdWamIzSmhkRzl5Y3l3Z2RHRnlaMlYwTENCclpYa3NJR1JsYzJNcE8xeHlYRzRnSUNBZ1pXeHpaU0JtYjNJZ0tIWmhjaUJwSUQwZ1pHVmpiM0poZEc5eWN5NXNaVzVuZEdnZ0xTQXhPeUJwSUQ0OUlEQTdJR2t0TFNrZ2FXWWdLR1FnUFNCa1pXTnZjbUYwYjNKelcybGRLU0J5SUQwZ0tHTWdQQ0F6SUQ4Z1pDaHlLU0E2SUdNZ1BpQXpJRDhnWkNoMFlYSm5aWFFzSUd0bGVTd2djaWtnT2lCa0tIUmhjbWRsZEN3Z2EyVjVLU2tnZkh3Z2NqdGNjbHh1SUNBZ0lISmxkSFZ5YmlCaklENGdNeUFtSmlCeUlDWW1JRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoMFlYSm5aWFFzSUd0bGVTd2djaWtzSUhJN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYM0JoY21GdEtIQmhjbUZ0U1c1a1pYZ3NJR1JsWTI5eVlYUnZjaWtnZTF4eVhHNGdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2gwWVhKblpYUXNJR3RsZVNrZ2V5QmtaV052Y21GMGIzSW9kR0Z5WjJWMExDQnJaWGtzSUhCaGNtRnRTVzVrWlhncE95QjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJWelJHVmpiM0poZEdVb1kzUnZjaXdnWkdWelkzSnBjSFJ2Y2tsdUxDQmtaV052Y21GMGIzSnpMQ0JqYjI1MFpYaDBTVzRzSUdsdWFYUnBZV3hwZW1WeWN5d2daWGgwY21GSmJtbDBhV0ZzYVhwbGNuTXBJSHRjY2x4dUlDQWdJR1oxYm1OMGFXOXVJR0ZqWTJWd2RDaG1LU0I3SUdsbUlDaG1JQ0U5UFNCMmIybGtJREFnSmlZZ2RIbHdaVzltSUdZZ0lUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJa1oxYm1OMGFXOXVJR1Y0Y0dWamRHVmtYQ0lwT3lCeVpYUjFjbTRnWmpzZ2ZWeHlYRzRnSUNBZ2RtRnlJR3RwYm1RZ1BTQmpiMjUwWlhoMFNXNHVhMmx1WkN3Z2EyVjVJRDBnYTJsdVpDQTlQVDBnWENKblpYUjBaWEpjSWlBL0lGd2laMlYwWENJZ09pQnJhVzVrSUQwOVBTQmNJbk5sZEhSbGNsd2lJRDhnWENKelpYUmNJaUE2SUZ3aWRtRnNkV1ZjSWp0Y2NseHVJQ0FnSUhaaGNpQjBZWEpuWlhRZ1BTQWhaR1Z6WTNKcGNIUnZja2x1SUNZbUlHTjBiM0lnUHlCamIyNTBaWGgwU1c1YlhDSnpkR0YwYVdOY0lsMGdQeUJqZEc5eUlEb2dZM1J2Y2k1d2NtOTBiM1I1Y0dVZ09pQnVkV3hzTzF4eVhHNGdJQ0FnZG1GeUlHUmxjMk55YVhCMGIzSWdQU0JrWlhOamNtbHdkRzl5U1c0Z2ZId2dLSFJoY21kbGRDQS9JRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJb2RHRnlaMlYwTENCamIyNTBaWGgwU1c0dWJtRnRaU2tnT2lCN2ZTazdYSEpjYmlBZ0lDQjJZWElnWHl3Z1pHOXVaU0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SUdSbFkyOXlZWFJ2Y25NdWJHVnVaM1JvSUMwZ01Uc2dhU0ErUFNBd095QnBMUzBwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWTI5dWRHVjRkQ0E5SUh0OU8xeHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSEFnYVc0Z1kyOXVkR1Y0ZEVsdUtTQmpiMjUwWlhoMFczQmRJRDBnY0NBOVBUMGdYQ0poWTJObGMzTmNJaUEvSUh0OUlEb2dZMjl1ZEdWNGRFbHVXM0JkTzF4eVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlIQWdhVzRnWTI5dWRHVjRkRWx1TG1GalkyVnpjeWtnWTI5dWRHVjRkQzVoWTJObGMzTmJjRjBnUFNCamIyNTBaWGgwU1c0dVlXTmpaWE56VzNCZE8xeHlYRzRnSUNBZ0lDQWdJR052Ym5SbGVIUXVZV1JrU1c1cGRHbGhiR2w2WlhJZ1BTQm1kVzVqZEdsdmJpQW9aaWtnZXlCcFppQW9aRzl1WlNrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJa05oYm01dmRDQmhaR1FnYVc1cGRHbGhiR2w2WlhKeklHRm1kR1Z5SUdSbFkyOXlZWFJwYjI0Z2FHRnpJR052YlhCc1pYUmxaRndpS1RzZ1pYaDBjbUZKYm1sMGFXRnNhWHBsY25NdWNIVnphQ2hoWTJObGNIUW9aaUI4ZkNCdWRXeHNLU2s3SUgwN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUNnd0xDQmtaV052Y21GMGIzSnpXMmxkS1NocmFXNWtJRDA5UFNCY0ltRmpZMlZ6YzI5eVhDSWdQeUI3SUdkbGREb2daR1Z6WTNKcGNIUnZjaTVuWlhRc0lITmxkRG9nWkdWelkzSnBjSFJ2Y2k1elpYUWdmU0E2SUdSbGMyTnlhWEIwYjNKYmEyVjVYU3dnWTI5dWRHVjRkQ2s3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR3RwYm1RZ1BUMDlJRndpWVdOalpYTnpiM0pjSWlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZ6ZFd4MElEMDlQU0IyYjJsa0lEQXBJR052Ym5ScGJuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21WemRXeDBJRDA5UFNCdWRXeHNJSHg4SUhSNWNHVnZaaUJ5WlhOMWJIUWdJVDA5SUZ3aWIySnFaV04wWENJcElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pQWW1wbFkzUWdaWGh3WldOMFpXUmNJaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZklEMGdZV05qWlhCMEtISmxjM1ZzZEM1blpYUXBLU0JrWlhOamNtbHdkRzl5TG1kbGRDQTlJRjg3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZklEMGdZV05qWlhCMEtISmxjM1ZzZEM1elpYUXBLU0JrWlhOamNtbHdkRzl5TG5ObGRDQTlJRjg3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZklEMGdZV05qWlhCMEtISmxjM1ZzZEM1cGJtbDBLU2tnYVc1cGRHbGhiR2w2WlhKekxuQjFjMmdvWHlrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0Y4Z1BTQmhZMk5sY0hRb2NtVnpkV3gwS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hMmx1WkNBOVBUMGdYQ0ptYVdWc1pGd2lLU0JwYm1sMGFXRnNhWHBsY25NdWNIVnphQ2hmS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQmtaWE5qY21sd2RHOXlXMnRsZVYwZ1BTQmZPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVJQ0FnSUdsbUlDaDBZWEpuWlhRcElFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwWVhKblpYUXNJR052Ym5SbGVIUkpiaTV1WVcxbExDQmtaWE5qY21sd2RHOXlLVHRjY2x4dUlDQWdJR1J2Ym1VZ1BTQjBjblZsTzF4eVhHNTlPMXh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZjblZ1U1c1cGRHbGhiR2w2WlhKektIUm9hWE5CY21jc0lHbHVhWFJwWVd4cGVtVnljeXdnZG1Gc2RXVXBJSHRjY2x4dUlDQWdJSFpoY2lCMWMyVldZV3gxWlNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXlPMXh5WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JwYm1sMGFXRnNhWHBsY25NdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNCMllXeDFaU0E5SUhWelpWWmhiSFZsSUQ4Z2FXNXBkR2xoYkdsNlpYSnpXMmxkTG1OaGJHd29kR2hwYzBGeVp5d2dkbUZzZFdVcElEb2dhVzVwZEdsaGJHbDZaWEp6VzJsZExtTmhiR3dvZEdocGMwRnlaeWs3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdkWE5sVm1Gc2RXVWdQeUIyWVd4MVpTQTZJSFp2YVdRZ01EdGNjbHh1ZlR0Y2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDNCeWIzQkxaWGtvZUNrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhSNWNHVnZaaUI0SUQwOVBTQmNJbk41YldKdmJGd2lJRDhnZUNBNklGd2lYQ0l1WTI5dVkyRjBLSGdwTzF4eVhHNTlPMXh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZjMlYwUm5WdVkzUnBiMjVPWVcxbEtHWXNJRzVoYldVc0lIQnlaV1pwZUNrZ2UxeHlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnVZVzFsSUQwOVBTQmNJbk41YldKdmJGd2lLU0J1WVcxbElEMGdibUZ0WlM1a1pYTmpjbWx3ZEdsdmJpQS9JRndpVzF3aUxtTnZibU5oZENodVlXMWxMbVJsYzJOeWFYQjBhVzl1TENCY0lsMWNJaWtnT2lCY0lsd2lPMXh5WEc0Z0lDQWdjbVYwZFhKdUlFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2htTENCY0ltNWhiV1ZjSWl3Z2V5QmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVXNJSFpoYkhWbE9pQndjbVZtYVhnZ1B5QmNJbHdpTG1OdmJtTmhkQ2h3Y21WbWFYZ3NJRndpSUZ3aUxDQnVZVzFsS1NBNklHNWhiV1VnZlNrN1hISmNibjA3WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTl0WlhSaFpHRjBZU2h0WlhSaFpHRjBZVXRsZVN3Z2JXVjBZV1JoZEdGV1lXeDFaU2tnZTF4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCU1pXWnNaV04wSUQwOVBTQmNJbTlpYW1WamRGd2lJQ1ltSUhSNWNHVnZaaUJTWldac1pXTjBMbTFsZEdGa1lYUmhJRDA5UFNCY0ltWjFibU4wYVc5dVhDSXBJSEpsZEhWeWJpQlNaV1pzWldOMExtMWxkR0ZrWVhSaEtHMWxkR0ZrWVhSaFMyVjVMQ0J0WlhSaFpHRjBZVlpoYkhWbEtUdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWVhkaGFYUmxjaWgwYUdselFYSm5MQ0JmWVhKbmRXMWxiblJ6TENCUUxDQm5aVzVsY21GMGIzSXBJSHRjY2x4dUlDQWdJR1oxYm1OMGFXOXVJR0ZrYjNCMEtIWmhiSFZsS1NCN0lISmxkSFZ5YmlCMllXeDFaU0JwYm5OMFlXNWpaVzltSUZBZ1B5QjJZV3gxWlNBNklHNWxkeUJRS0daMWJtTjBhVzl1SUNoeVpYTnZiSFpsS1NCN0lISmxjMjlzZG1Vb2RtRnNkV1VwT3lCOUtUc2dmVnh5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUFvVUNCOGZDQW9VQ0E5SUZCeWIyMXBjMlVwS1NobWRXNWpkR2x2YmlBb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hISmNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdablZzWm1sc2JHVmtLSFpoYkhWbEtTQjdJSFJ5ZVNCN0lITjBaWEFvWjJWdVpYSmhkRzl5TG01bGVIUW9kbUZzZFdVcEtUc2dmU0JqWVhSamFDQW9aU2tnZXlCeVpXcGxZM1FvWlNrN0lIMGdmVnh5WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUhKbGFtVmpkR1ZrS0haaGJIVmxLU0I3SUhSeWVTQjdJSE4wWlhBb1oyVnVaWEpoZEc5eVcxd2lkR2h5YjNkY0lsMG9kbUZzZFdVcEtUc2dmU0JqWVhSamFDQW9aU2tnZXlCeVpXcGxZM1FvWlNrN0lIMGdmVnh5WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUhOMFpYQW9jbVZ6ZFd4MEtTQjdJSEpsYzNWc2RDNWtiMjVsSUQ4Z2NtVnpiMngyWlNoeVpYTjFiSFF1ZG1Gc2RXVXBJRG9nWVdSdmNIUW9jbVZ6ZFd4MExuWmhiSFZsS1M1MGFHVnVLR1oxYkdacGJHeGxaQ3dnY21WcVpXTjBaV1FwT3lCOVhISmNiaUFnSUNBZ0lDQWdjM1JsY0Nnb1oyVnVaWEpoZEc5eUlEMGdaMlZ1WlhKaGRHOXlMbUZ3Y0d4NUtIUm9hWE5CY21jc0lGOWhjbWQxYldWdWRITWdmSHdnVzEwcEtTNXVaWGgwS0NrcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJkbGJtVnlZWFJ2Y2loMGFHbHpRWEpuTENCaWIyUjVLU0I3WEhKY2JpQWdJQ0IyWVhJZ1h5QTlJSHNnYkdGaVpXdzZJREFzSUhObGJuUTZJR1oxYm1OMGFXOXVLQ2tnZXlCcFppQW9kRnN3WFNBbUlERXBJSFJvY205M0lIUmJNVjA3SUhKbGRIVnliaUIwV3pGZE95QjlMQ0IwY25sek9pQmJYU3dnYjNCek9pQmJYU0I5TENCbUxDQjVMQ0IwTENCbk8xeHlYRzRnSUNBZ2NtVjBkWEp1SUdjZ1BTQjdJRzVsZUhRNklIWmxjbUlvTUNrc0lGd2lkR2h5YjNkY0lqb2dkbVZ5WWlneEtTd2dYQ0p5WlhSMWNtNWNJam9nZG1WeVlpZ3lLU0I5TENCMGVYQmxiMllnVTNsdFltOXNJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdKaVlnS0dkYlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNBOUlHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdkR2hwY3pzZ2ZTa3NJR2M3WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUIyWlhKaUtHNHBJSHNnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2gyS1NCN0lISmxkSFZ5YmlCemRHVndLRnR1TENCMlhTazdJSDA3SUgxY2NseHVJQ0FnSUdaMWJtTjBhVzl1SUhOMFpYQW9iM0FwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvWmlrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJa2RsYm1WeVlYUnZjaUJwY3lCaGJISmxZV1I1SUdWNFpXTjFkR2x1Wnk1Y0lpazdYSEpjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLR2NnSmlZZ0tHY2dQU0F3TENCdmNGc3dYU0FtSmlBb1h5QTlJREFwS1N3Z1h5a2dkSEo1SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWWdQU0F4TENCNUlDWW1JQ2gwSUQwZ2IzQmJNRjBnSmlBeUlEOGdlVnRjSW5KbGRIVnlibHdpWFNBNklHOXdXekJkSUQ4Z2VWdGNJblJvY205M1hDSmRJSHg4SUNnb2RDQTlJSGxiWENKeVpYUjFjbTVjSWwwcElDWW1JSFF1WTJGc2JDaDVLU3dnTUNrZ09pQjVMbTVsZUhRcElDWW1JQ0VvZENBOUlIUXVZMkZzYkNoNUxDQnZjRnN4WFNrcExtUnZibVVwSUhKbGRIVnliaUIwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2VTQTlJREFzSUhRcElHOXdJRDBnVzI5d1d6QmRJQ1lnTWl3Z2RDNTJZV3gxWlYwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOM2FYUmphQ0FvYjNCYk1GMHBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNRG9nWTJGelpTQXhPaUIwSUQwZ2IzQTdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBME9pQmZMbXhoWW1Wc0t5czdJSEpsZEhWeWJpQjdJSFpoYkhWbE9pQnZjRnN4WFN3Z1pHOXVaVG9nWm1Gc2MyVWdmVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdOVG9nWHk1c1lXSmxiQ3NyT3lCNUlEMGdiM0JiTVYwN0lHOXdJRDBnV3pCZE95QmpiMjUwYVc1MVpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ056b2diM0FnUFNCZkxtOXdjeTV3YjNBb0tUc2dYeTUwY25sekxuQnZjQ2dwT3lCamIyNTBhVzUxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRW9kQ0E5SUY4dWRISjVjeXdnZENBOUlIUXViR1Z1WjNSb0lENGdNQ0FtSmlCMFczUXViR1Z1WjNSb0lDMGdNVjBwSUNZbUlDaHZjRnN3WFNBOVBUMGdOaUI4ZkNCdmNGc3dYU0E5UFQwZ01pa3BJSHNnWHlBOUlEQTdJR052Ym5ScGJuVmxPeUI5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c5d1d6QmRJRDA5UFNBeklDWW1JQ2doZENCOGZDQW9iM0JiTVYwZ1BpQjBXekJkSUNZbUlHOXdXekZkSUR3Z2RGc3pYU2twS1NCN0lGOHViR0ZpWld3Z1BTQnZjRnN4WFRzZ1luSmxZV3M3SUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2IzQmJNRjBnUFQwOUlEWWdKaVlnWHk1c1lXSmxiQ0E4SUhSYk1WMHBJSHNnWHk1c1lXSmxiQ0E5SUhSYk1WMDdJSFFnUFNCdmNEc2dZbkpsWVdzN0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kQ0FtSmlCZkxteGhZbVZzSUR3Z2RGc3lYU2tnZXlCZkxteGhZbVZzSUQwZ2RGc3lYVHNnWHk1dmNITXVjSFZ6YUNodmNDazdJR0p5WldGck95QjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJiTWwwcElGOHViM0J6TG5CdmNDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOHVkSEo1Y3k1d2IzQW9LVHNnWTI5dWRHbHVkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiM0FnUFNCaWIyUjVMbU5oYkd3b2RHaHBjMEZ5Wnl3Z1h5azdYSEpjYmlBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2V5QnZjQ0E5SUZzMkxDQmxYVHNnZVNBOUlEQTdJSDBnWm1sdVlXeHNlU0I3SUdZZ1BTQjBJRDBnTURzZ2ZWeHlYRzRnSUNBZ0lDQWdJR2xtSUNodmNGc3dYU0FtSURVcElIUm9jbTkzSUc5d1d6RmRPeUJ5WlhSMWNtNGdleUIyWVd4MVpUb2diM0JiTUYwZ1B5QnZjRnN4WFNBNklIWnZhV1FnTUN3Z1pHOXVaVG9nZEhKMVpTQjlPMXh5WEc0Z0lDQWdmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnZG1GeUlGOWZZM0psWVhSbFFtbHVaR2x1WnlBOUlFOWlhbVZqZEM1amNtVmhkR1VnUHlBb1puVnVZM1JwYjI0b2J5d2diU3dnYXl3Z2F6SXBJSHRjY2x4dUlDQWdJR2xtSUNock1pQTlQVDBnZFc1a1pXWnBibVZrS1NCck1pQTlJR3M3WEhKY2JpQWdJQ0IyWVhJZ1pHVnpZeUE5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9iU3dnYXlrN1hISmNiaUFnSUNCcFppQW9JV1JsYzJNZ2ZId2dLRndpWjJWMFhDSWdhVzRnWkdWell5QS9JQ0Z0TGw5ZlpYTk5iMlIxYkdVZ09pQmtaWE5qTG5keWFYUmhZbXhsSUh4OElHUmxjMk11WTI5dVptbG5kWEpoWW14bEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdSbGMyTWdQU0I3SUdWdWRXMWxjbUZpYkdVNklIUnlkV1VzSUdkbGREb2dablZ1WTNScGIyNG9LU0I3SUhKbGRIVnliaUJ0VzJ0ZE95QjlJSDA3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2J5d2dheklzSUdSbGMyTXBPMXh5WEc1OUtTQTZJQ2htZFc1amRHbHZiaWh2TENCdExDQnJMQ0JyTWlrZ2UxeHlYRzRnSUNBZ2FXWWdLR3N5SUQwOVBTQjFibVJsWm1sdVpXUXBJR3N5SUQwZ2F6dGNjbHh1SUNBZ0lHOWJhekpkSUQwZ2JWdHJYVHRjY2x4dWZTazdYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOWxlSEJ2Y25SVGRHRnlLRzBzSUc4cElIdGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlIQWdhVzRnYlNrZ2FXWWdLSEFnSVQwOUlGd2laR1ZtWVhWc2RGd2lJQ1ltSUNGUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b2J5d2djQ2twSUY5ZlkzSmxZWFJsUW1sdVpHbHVaeWh2TENCdExDQndLVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmRtRnNkV1Z6S0c4cElIdGNjbHh1SUNBZ0lIWmhjaUJ6SUQwZ2RIbHdaVzltSUZONWJXSnZiQ0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJQ1ltSUZONWJXSnZiQzVwZEdWeVlYUnZjaXdnYlNBOUlITWdKaVlnYjF0elhTd2dhU0E5SURBN1hISmNiaUFnSUNCcFppQW9iU2tnY21WMGRYSnVJRzB1WTJGc2JDaHZLVHRjY2x4dUlDQWdJR2xtSUNodklDWW1JSFI1Y0dWdlppQnZMbXhsYm1kMGFDQTlQVDBnWENKdWRXMWlaWEpjSWlrZ2NtVjBkWEp1SUh0Y2NseHVJQ0FnSUNBZ0lDQnVaWGgwT2lCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2SUNZbUlHa2dQajBnYnk1c1pXNW5kR2dwSUc4Z1BTQjJiMmxrSURBN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3SUhaaGJIVmxPaUJ2SUNZbUlHOWJhU3NyWFN3Z1pHOXVaVG9nSVc4Z2ZUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loeklEOGdYQ0pQWW1wbFkzUWdhWE1nYm05MElHbDBaWEpoWW14bExsd2lJRG9nWENKVGVXMWliMnd1YVhSbGNtRjBiM0lnYVhNZ2JtOTBJR1JsWm1sdVpXUXVYQ0lwTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXlaV0ZrS0c4c0lHNHBJSHRjY2x4dUlDQWdJSFpoY2lCdElEMGdkSGx3Wlc5bUlGTjViV0p2YkNBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUNZbUlHOWJVM2x0WW05c0xtbDBaWEpoZEc5eVhUdGNjbHh1SUNBZ0lHbG1JQ2doYlNrZ2NtVjBkWEp1SUc4N1hISmNiaUFnSUNCMllYSWdhU0E5SUcwdVkyRnNiQ2h2S1N3Z2Npd2dZWElnUFNCYlhTd2daVHRjY2x4dUlDQWdJSFJ5ZVNCN1hISmNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tDaHVJRDA5UFNCMmIybGtJREFnZkh3Z2JpMHRJRDRnTUNrZ0ppWWdJU2h5SUQwZ2FTNXVaWGgwS0NrcExtUnZibVVwSUdGeUxuQjFjMmdvY2k1MllXeDFaU2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0JqWVhSamFDQW9aWEp5YjNJcElIc2daU0E5SUhzZ1pYSnliM0k2SUdWeWNtOXlJSDA3SUgxY2NseHVJQ0FnSUdacGJtRnNiSGtnZTF4eVhHNGdJQ0FnSUNBZ0lIUnllU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeUlDWW1JQ0Z5TG1SdmJtVWdKaVlnS0cwZ1BTQnBXMXdpY21WMGRYSnVYQ0pkS1NrZ2JTNWpZV3hzS0drcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCbWFXNWhiR3g1SUhzZ2FXWWdLR1VwSUhSb2NtOTNJR1V1WlhKeWIzSTdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQmhjanRjY2x4dWZWeHlYRzVjY2x4dUx5b3FJRUJrWlhCeVpXTmhkR1ZrSUNvdlhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYM053Y21WaFpDZ3BJSHRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJR0Z5SUQwZ1cxMHNJR2tnUFNBd095QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktWeHlYRzRnSUNBZ0lDQWdJR0Z5SUQwZ1lYSXVZMjl1WTJGMEtGOWZjbVZoWkNoaGNtZDFiV1Z1ZEhOYmFWMHBLVHRjY2x4dUlDQWdJSEpsZEhWeWJpQmhjanRjY2x4dWZWeHlYRzVjY2x4dUx5b3FJRUJrWlhCeVpXTmhkR1ZrSUNvdlhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYM053Y21WaFpFRnljbUY1Y3lncElIdGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlITWdQU0F3TENCcElEMGdNQ3dnYVd3Z1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb095QnBJRHdnYVd3N0lHa3JLeWtnY3lBclBTQmhjbWQxYldWdWRITmJhVjB1YkdWdVozUm9PMXh5WEc0Z0lDQWdabTl5SUNoMllYSWdjaUE5SUVGeWNtRjVLSE1wTENCcklEMGdNQ3dnYVNBOUlEQTdJR2tnUENCcGJEc2dhU3NyS1Z4eVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHRWdQU0JoY21kMWJXVnVkSE5iYVYwc0lHb2dQU0F3TENCcWJDQTlJR0V1YkdWdVozUm9PeUJxSUR3Z2FtdzdJR29yS3l3Z2F5c3JLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlXMnRkSUQwZ1lWdHFYVHRjY2x4dUlDQWdJSEpsZEhWeWJpQnlPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5emNISmxZV1JCY25KaGVTaDBieXdnWm5KdmJTd2djR0ZqYXlrZ2UxeHlYRzRnSUNBZ2FXWWdLSEJoWTJzZ2ZId2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQTlQVDBnTWlrZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd3Z1BTQm1jbTl0TG14bGJtZDBhQ3dnWVhJN0lHa2dQQ0JzT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9ZWElnZkh3Z0lTaHBJR2x1SUdaeWIyMHBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFlYSXBJR0Z5SUQwZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxMbU5oYkd3b1puSnZiU3dnTUN3Z2FTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnlXMmxkSUQwZ1puSnZiVnRwWFR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z2RHOHVZMjl1WTJGMEtHRnlJSHg4SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTNWpZV3hzS0daeWIyMHBLVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZllYZGhhWFFvZGlrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTWdhVzV6ZEdGdVkyVnZaaUJmWDJGM1lXbDBJRDhnS0hSb2FYTXVkaUE5SUhZc0lIUm9hWE1wSURvZ2JtVjNJRjlmWVhkaGFYUW9kaWs3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyRnplVzVqUjJWdVpYSmhkRzl5S0hSb2FYTkJjbWNzSUY5aGNtZDFiV1Z1ZEhNc0lHZGxibVZ5WVhSdmNpa2dlMXh5WEc0Z0lDQWdhV1lnS0NGVGVXMWliMnd1WVhONWJtTkpkR1Z5WVhSdmNpa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWxONWJXSnZiQzVoYzNsdVkwbDBaWEpoZEc5eUlHbHpJRzV2ZENCa1pXWnBibVZrTGx3aUtUdGNjbHh1SUNBZ0lIWmhjaUJuSUQwZ1oyVnVaWEpoZEc5eUxtRndjR3g1S0hSb2FYTkJjbWNzSUY5aGNtZDFiV1Z1ZEhNZ2ZId2dXMTBwTENCcExDQnhJRDBnVzEwN1hISmNiaUFnSUNCeVpYUjFjbTRnYVNBOUlIdDlMQ0IyWlhKaUtGd2libVY0ZEZ3aUtTd2dkbVZ5WWloY0luUm9jbTkzWENJcExDQjJaWEppS0Z3aWNtVjBkWEp1WENJcExDQnBXMU41YldKdmJDNWhjM2x1WTBsMFpYSmhkRzl5WFNBOUlHWjFibU4wYVc5dUlDZ3BJSHNnY21WMGRYSnVJSFJvYVhNN0lIMHNJR2s3WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUIyWlhKaUtHNHBJSHNnYVdZZ0tHZGJibDBwSUdsYmJsMGdQU0JtZFc1amRHbHZiaUFvZGlrZ2V5QnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNGdLR0VzSUdJcElIc2djUzV3ZFhOb0tGdHVMQ0IyTENCaExDQmlYU2tnUGlBeElIeDhJSEpsYzNWdFpTaHVMQ0IyS1RzZ2ZTazdJSDA3SUgxY2NseHVJQ0FnSUdaMWJtTjBhVzl1SUhKbGMzVnRaU2h1TENCMktTQjdJSFJ5ZVNCN0lITjBaWEFvWjF0dVhTaDJLU2s3SUgwZ1kyRjBZMmdnS0dVcElIc2djMlYwZEd4bEtIRmJNRjFiTTEwc0lHVXBPeUI5SUgxY2NseHVJQ0FnSUdaMWJtTjBhVzl1SUhOMFpYQW9jaWtnZXlCeUxuWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1gxOWhkMkZwZENBL0lGQnliMjFwYzJVdWNtVnpiMngyWlNoeUxuWmhiSFZsTG5ZcExuUm9aVzRvWm5Wc1ptbHNiQ3dnY21WcVpXTjBLU0E2SUhObGRIUnNaU2h4V3pCZFd6SmRMQ0J5S1RzZ2ZWeHlYRzRnSUNBZ1puVnVZM1JwYjI0Z1puVnNabWxzYkNoMllXeDFaU2tnZXlCeVpYTjFiV1VvWENKdVpYaDBYQ0lzSUhaaGJIVmxLVHNnZlZ4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnY21WcVpXTjBLSFpoYkhWbEtTQjdJSEpsYzNWdFpTaGNJblJvY205M1hDSXNJSFpoYkhWbEtUc2dmVnh5WEc0Z0lDQWdablZ1WTNScGIyNGdjMlYwZEd4bEtHWXNJSFlwSUhzZ2FXWWdLR1lvZGlrc0lIRXVjMmhwWm5Rb0tTd2djUzVzWlc1bmRHZ3BJSEpsYzNWdFpTaHhXekJkV3pCZExDQnhXekJkV3pGZEtUc2dmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5aGMzbHVZMFJsYkdWbllYUnZjaWh2S1NCN1hISmNiaUFnSUNCMllYSWdhU3dnY0R0Y2NseHVJQ0FnSUhKbGRIVnliaUJwSUQwZ2UzMHNJSFpsY21Jb1hDSnVaWGgwWENJcExDQjJaWEppS0Z3aWRHaHliM2RjSWl3Z1puVnVZM1JwYjI0Z0tHVXBJSHNnZEdoeWIzY2daVHNnZlNrc0lIWmxjbUlvWENKeVpYUjFjbTVjSWlrc0lHbGJVM2x0WW05c0xtbDBaWEpoZEc5eVhTQTlJR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SUhSb2FYTTdJSDBzSUdrN1hISmNiaUFnSUNCbWRXNWpkR2x2YmlCMlpYSmlLRzRzSUdZcElIc2dhVnR1WFNBOUlHOWJibDBnUHlCbWRXNWpkR2x2YmlBb2Rpa2dleUJ5WlhSMWNtNGdLSEFnUFNBaGNDa2dQeUI3SUhaaGJIVmxPaUJmWDJGM1lXbDBLRzliYmwwb2Rpa3BMQ0JrYjI1bE9pQm1ZV3h6WlNCOUlEb2daaUEvSUdZb2Rpa2dPaUIyT3lCOUlEb2daanNnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOWhjM2x1WTFaaGJIVmxjeWh2S1NCN1hISmNiaUFnSUNCcFppQW9JVk41YldKdmJDNWhjM2x1WTBsMFpYSmhkRzl5S1NCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lVM2x0WW05c0xtRnplVzVqU1hSbGNtRjBiM0lnYVhNZ2JtOTBJR1JsWm1sdVpXUXVYQ0lwTzF4eVhHNGdJQ0FnZG1GeUlHMGdQU0J2VzFONWJXSnZiQzVoYzNsdVkwbDBaWEpoZEc5eVhTd2dhVHRjY2x4dUlDQWdJSEpsZEhWeWJpQnRJRDhnYlM1allXeHNLRzhwSURvZ0tHOGdQU0IwZVhCbGIyWWdYMTkyWVd4MVpYTWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQS9JRjlmZG1Gc2RXVnpLRzhwSURvZ2IxdFRlVzFpYjJ3dWFYUmxjbUYwYjNKZEtDa3NJR2tnUFNCN2ZTd2dkbVZ5WWloY0ltNWxlSFJjSWlrc0lIWmxjbUlvWENKMGFISnZkMXdpS1N3Z2RtVnlZaWhjSW5KbGRIVnlibHdpS1N3Z2FWdFRlVzFpYjJ3dVlYTjVibU5KZEdWeVlYUnZjbDBnUFNCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQjBhR2x6T3lCOUxDQnBLVHRjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSFpsY21Jb2Jpa2dleUJwVzI1ZElEMGdiMXR1WFNBbUppQm1kVzVqZEdsdmJpQW9kaWtnZXlCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0Z0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2V5QjJJRDBnYjF0dVhTaDJLU3dnYzJWMGRHeGxLSEpsYzI5c2RtVXNJSEpsYW1WamRDd2dkaTVrYjI1bExDQjJMblpoYkhWbEtUc2dmU2s3SUgwN0lIMWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlITmxkSFJzWlNoeVpYTnZiSFpsTENCeVpXcGxZM1FzSUdRc0lIWXBJSHNnVUhKdmJXbHpaUzV5WlhOdmJIWmxLSFlwTG5Sb1pXNG9ablZ1WTNScGIyNG9kaWtnZXlCeVpYTnZiSFpsS0hzZ2RtRnNkV1U2SUhZc0lHUnZibVU2SUdRZ2ZTazdJSDBzSUhKbGFtVmpkQ2s3SUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZiV0ZyWlZSbGJYQnNZWFJsVDJKcVpXTjBLR052YjJ0bFpDd2djbUYzS1NCN1hISmNiaUFnSUNCcFppQW9UMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S1NCN0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hqYjI5clpXUXNJRndpY21GM1hDSXNJSHNnZG1Gc2RXVTZJSEpoZHlCOUtUc2dmU0JsYkhObElIc2dZMjl2YTJWa0xuSmhkeUE5SUhKaGR6c2dmVnh5WEc0Z0lDQWdjbVYwZFhKdUlHTnZiMnRsWkR0Y2NseHVmVHRjY2x4dVhISmNiblpoY2lCZlgzTmxkRTF2WkhWc1pVUmxabUYxYkhRZ1BTQlBZbXBsWTNRdVkzSmxZWFJsSUQ4Z0tHWjFibU4wYVc5dUtHOHNJSFlwSUh0Y2NseHVJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHZMQ0JjSW1SbFptRjFiSFJjSWl3Z2V5QmxiblZ0WlhKaFlteGxPaUIwY25WbExDQjJZV3gxWlRvZ2RpQjlLVHRjY2x4dWZTa2dPaUJtZFc1amRHbHZiaWh2TENCMktTQjdYSEpjYmlBZ0lDQnZXMXdpWkdWbVlYVnNkRndpWFNBOUlIWTdYSEpjYm4wN1hISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5cGJYQnZjblJUZEdGeUtHMXZaQ2tnZTF4eVhHNGdJQ0FnYVdZZ0tHMXZaQ0FtSmlCdGIyUXVYMTlsYzAxdlpIVnNaU2tnY21WMGRYSnVJRzF2WkR0Y2NseHVJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQjdmVHRjY2x4dUlDQWdJR2xtSUNodGIyUWdJVDBnYm5Wc2JDa2dabTl5SUNoMllYSWdheUJwYmlCdGIyUXBJR2xtSUNocklDRTlQU0JjSW1SbFptRjFiSFJjSWlBbUppQlBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29iVzlrTENCcktTa2dYMTlqY21WaGRHVkNhVzVrYVc1bktISmxjM1ZzZEN3Z2JXOWtMQ0JyS1R0Y2NseHVJQ0FnSUY5ZmMyVjBUVzlrZFd4bFJHVm1ZWFZzZENoeVpYTjFiSFFzSUcxdlpDazdYSEpjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXBiWEJ2Y25SRVpXWmhkV3gwS0cxdlpDa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlDaHRiMlFnSmlZZ2JXOWtMbDlmWlhOTmIyUjFiR1VwSUQ4Z2JXOWtJRG9nZXlCa1pXWmhkV3gwT2lCdGIyUWdmVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZlkyeGhjM05RY21sMllYUmxSbWxsYkdSSFpYUW9jbVZqWldsMlpYSXNJSE4wWVhSbExDQnJhVzVrTENCbUtTQjdYSEpjYmlBZ0lDQnBaaUFvYTJsdVpDQTlQVDBnWENKaFhDSWdKaVlnSVdZcElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pRY21sMllYUmxJR0ZqWTJWemMyOXlJSGRoY3lCa1pXWnBibVZrSUhkcGRHaHZkWFFnWVNCblpYUjBaWEpjSWlrN1hISmNiaUFnSUNCcFppQW9kSGx3Wlc5bUlITjBZWFJsSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnUHlCeVpXTmxhWFpsY2lBaFBUMGdjM1JoZEdVZ2ZId2dJV1lnT2lBaGMzUmhkR1V1YUdGektISmxZMlZwZG1WeUtTa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWtOaGJtNXZkQ0J5WldGa0lIQnlhWFpoZEdVZ2JXVnRZbVZ5SUdaeWIyMGdZVzRnYjJKcVpXTjBJSGRvYjNObElHTnNZWE56SUdScFpDQnViM1FnWkdWamJHRnlaU0JwZEZ3aUtUdGNjbHh1SUNBZ0lISmxkSFZ5YmlCcmFXNWtJRDA5UFNCY0ltMWNJaUEvSUdZZ09pQnJhVzVrSUQwOVBTQmNJbUZjSWlBL0lHWXVZMkZzYkNoeVpXTmxhWFpsY2lrZ09pQm1JRDhnWmk1MllXeDFaU0E2SUhOMFlYUmxMbWRsZENoeVpXTmxhWFpsY2lrN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMk5zWVhOelVISnBkbUYwWlVacFpXeGtVMlYwS0hKbFkyVnBkbVZ5TENCemRHRjBaU3dnZG1Gc2RXVXNJR3RwYm1Rc0lHWXBJSHRjY2x4dUlDQWdJR2xtSUNocmFXNWtJRDA5UFNCY0ltMWNJaWtnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lsQnlhWFpoZEdVZ2JXVjBhRzlrSUdseklHNXZkQ0IzY21sMFlXSnNaVndpS1R0Y2NseHVJQ0FnSUdsbUlDaHJhVzVrSUQwOVBTQmNJbUZjSWlBbUppQWhaaWtnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lsQnlhWFpoZEdVZ1lXTmpaWE56YjNJZ2QyRnpJR1JsWm1sdVpXUWdkMmwwYUc5MWRDQmhJSE5sZEhSbGNsd2lLVHRjY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnYzNSaGRHVWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQS9JSEpsWTJWcGRtVnlJQ0U5UFNCemRHRjBaU0I4ZkNBaFppQTZJQ0Z6ZEdGMFpTNW9ZWE1vY21WalpXbDJaWElwS1NCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lRMkZ1Ym05MElIZHlhWFJsSUhCeWFYWmhkR1VnYldWdFltVnlJSFJ2SUdGdUlHOWlhbVZqZENCM2FHOXpaU0JqYkdGemN5QmthV1FnYm05MElHUmxZMnhoY21VZ2FYUmNJaWs3WEhKY2JpQWdJQ0J5WlhSMWNtNGdLR3RwYm1RZ1BUMDlJRndpWVZ3aUlEOGdaaTVqWVd4c0tISmxZMlZwZG1WeUxDQjJZV3gxWlNrZ09pQm1JRDhnWmk1MllXeDFaU0E5SUhaaGJIVmxJRG9nYzNSaGRHVXVjMlYwS0hKbFkyVnBkbVZ5TENCMllXeDFaU2twTENCMllXeDFaVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZlkyeGhjM05RY21sMllYUmxSbWxsYkdSSmJpaHpkR0YwWlN3Z2NtVmpaV2wyWlhJcElIdGNjbHh1SUNBZ0lHbG1JQ2h5WldObGFYWmxjaUE5UFQwZ2JuVnNiQ0I4ZkNBb2RIbHdaVzltSUhKbFkyVnBkbVZ5SUNFOVBTQmNJbTlpYW1WamRGd2lJQ1ltSUhSNWNHVnZaaUJ5WldObGFYWmxjaUFoUFQwZ1hDSm1kVzVqZEdsdmJsd2lLU2tnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrTmhibTV2ZENCMWMyVWdKMmx1SnlCdmNHVnlZWFJ2Y2lCdmJpQnViMjR0YjJKcVpXTjBYQ0lwTzF4eVhHNGdJQ0FnY21WMGRYSnVJSFI1Y0dWdlppQnpkR0YwWlNBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUQ4Z2NtVmpaV2wyWlhJZ1BUMDlJSE4wWVhSbElEb2djM1JoZEdVdWFHRnpLSEpsWTJWcGRtVnlLVHRjY2x4dWZWeHlYRzRpTENKcGJYQnZjblFnZEhsd1pTQXFJR0Z6SUZSSVVrVkZJR1p5YjIwZ0ozUm9jbVZsSnp0Y2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlIUnlZWFpsY25ObFFXNWpaWE4wYjNKelJuSnZiVkp2YjNRb2IySnFaV04wT2lCVVNGSkZSUzVQWW1wbFkzUXpSQ3dnWTJGc2JHSmhZMnM2SUNodlltcGxZM1E2SUZSSVVrVkZMazlpYW1WamRETkVLU0E5UGlCMmIybGtLVG9nZG05cFpDQjdYRzRnSUdOdmJuTjBJR0Z1WTJWemRHOXljem9nVkVoU1JVVXVUMkpxWldOME0wUmJYU0E5SUZ0ZE8xeHVYRzRnSUd4bGRDQm9aV0ZrT2lCVVNGSkZSUzVQWW1wbFkzUXpSQ0I4SUc1MWJHd2dQU0J2WW1wbFkzUTdYRzRnSUhkb2FXeGxJQ2hvWldGa0lDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ1lXNWpaWE4wYjNKekxuVnVjMmhwWm5Rb2FHVmhaQ2s3WEc0Z0lDQWdhR1ZoWkNBOUlHaGxZV1F1Y0dGeVpXNTBPMXh1SUNCOVhHNWNiaUFnWVc1alpYTjBiM0p6TG1admNrVmhZMmdvS0dGdVkyVnpkRzl5S1NBOVBpQjdYRzRnSUNBZ1kyRnNiR0poWTJzb1lXNWpaWE4wYjNJcE8xeHVJQ0I5S1R0Y2JuMWNiaUlzSWk4cUtseHVJQ29nVkhKaGRtVnljMlVnWTJocGJHUnlaVzRnYjJZZ1oybDJaVzRnYjJKcVpXTjBJR0Z1WkNCbGVHVmpkWFJsSUdkcGRtVnVJR05oYkd4aVlXTnJMbHh1SUNvZ1ZHaGxJR2RwZG1WdUlHOWlhbVZqZENCcGRITmxiR1lnZDI5dWRDQmlaU0JuYVhabGJpQjBieUIwYUdVZ1kyRnNiR0poWTJzdVhHNGdLaUJKWmlCMGFHVWdjbVYwZFhKdUlIWmhiSFZsSUc5bUlIUm9aU0JqWVd4c1ltRmpheUJwY3lCZ2RISjFaV0FzSUdsMElIZHBiR3dnYUdGc2RDQjBhR1VnZEhKaGRtVnljMkZzSUc5bUlHbDBjeUJqYUdsc1pISmxiaTVjYmlBcUlFQndZWEpoYlNCdlltcGxZM1FnUVNCeWIyOTBJRzlpYW1WamRGeHVJQ29nUUhCaGNtRnRJR05oYkd4aVlXTnJJRUVnWTJGc2JHSmhZMnNnWm5WdVkzUnBiMjRnWTJGc2JHVmtJR1p2Y2lCbFlXTm9JR05vYVd4a2NtVnVYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCMGNtRjJaWEp6WlVOb2FXeGtjbVZ1Vlc1MGFXeERiMjVrYVhScGIyNU5aWFFvWEc0Z0lHOWlhbVZqZERvZ1ZFaFNSVVV1VDJKcVpXTjBNMFFzWEc0Z0lHTmhiR3hpWVdOck9pQW9iMkpxWldOME9pQlVTRkpGUlM1UFltcGxZM1F6UkNrZ1BUNGdZbTl2YkdWaGJpeGNiaWs2SUhadmFXUWdlMXh1SUNCdlltcGxZM1F1WTJocGJHUnlaVzR1Wm05eVJXRmphQ2dvWTJocGJHUXBJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnlaWE4xYkhRZ1BTQmpZV3hzWW1GamF5aGphR2xzWkNrN1hHNGdJQ0FnYVdZZ0tDRnlaWE4xYkhRcElIdGNiaUFnSUNBZ0lIUnlZWFpsY25ObFEyaHBiR1J5Wlc1VmJuUnBiRU52Ym1ScGRHbHZiazFsZENoamFHbHNaQ3dnWTJGc2JHSmhZMnNwTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzU5WEc0aUxDSnBiWEJ2Y25RZ2RIbHdaU0FxSUdGeklGUklVa1ZGSUdaeWIyMGdKM1JvY21WbEp6dGNibWx0Y0c5eWRDQjBlWEJsSUhzZ1ZsSk5VM0J5YVc1blFtOXVaVXB2YVc1MElIMGdabkp2YlNBbkxpOVdVazFUY0hKcGJtZENiMjVsU205cGJuUW5PMXh1YVcxd2IzSjBJSHNnZEhKaGRtVnljMlZCYm1ObGMzUnZjbk5HY205dFVtOXZkQ0I5SUdaeWIyMGdKeTR2ZFhScGJITXZkSEpoZG1WeWMyVkJibU5sYzNSdmNuTkdjbTl0VW05dmRDYzdYRzVwYlhCdmNuUWdkSGx3WlNCN0lGWlNUVk53Y21sdVowSnZibVZEYjJ4c2FXUmxjaUI5SUdaeWIyMGdKeTR2VmxKTlUzQnlhVzVuUW05dVpVTnZiR3hwWkdWeUp6dGNibWx0Y0c5eWRDQjBlWEJsSUhzZ1ZsSk5VM0J5YVc1blFtOXVaVU52Ykd4cFpHVnlSM0p2ZFhBZ2ZTQm1jbTl0SUNjdUwxWlNUVk53Y21sdVowSnZibVZEYjJ4c2FXUmxja2R5YjNWd0p6dGNibWx0Y0c5eWRDQjdJSFJ5WVhabGNuTmxRMmhwYkdSeVpXNVZiblJwYkVOdmJtUnBkR2x2YmsxbGRDQjlJR1p5YjIwZ0p5NHZkWFJwYkhNdmRISmhkbVZ5YzJWRGFHbHNaSEpsYmxWdWRHbHNRMjl1WkdsMGFXOXVUV1YwSnp0Y2JseHVaWGh3YjNKMElHTnNZWE56SUZaU1RWTndjbWx1WjBKdmJtVk5ZVzVoWjJWeUlIdGNiaUFnY0hKcGRtRjBaU0JmYW05cGJuUnpJRDBnYm1WM0lGTmxkRHhXVWsxVGNISnBibWRDYjI1bFNtOXBiblErS0NrN1hHNGdJSEIxWW14cFl5Qm5aWFFnYW05cGJuUnpLQ2s2SUZObGREeFdVazFUY0hKcGJtZENiMjVsU205cGJuUStJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYW05cGJuUnpPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCa1pYQnlaV05oZEdWa0lGVnpaU0I3UUd4cGJtc2dhbTlwYm5SemZTQnBibk4wWldGa0xseHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklHZGxkQ0J6Y0hKcGJtZENiMjVsY3lncE9pQlRaWFE4VmxKTlUzQnlhVzVuUW05dVpVcHZhVzUwUGlCN1hHNGdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDZFdVazFUY0hKcGJtZENiMjVsVFdGdVlXZGxjam9nYzNCeWFXNW5RbTl1WlhNZ2FYTWdaR1Z3Y21WallYUmxaQzRnZFhObElHcHZhVzUwY3lCcGJuTjBaV0ZrTGljcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMnB2YVc1MGN6dGNiaUFnZlZ4dVhHNGdJSEIxWW14cFl5Qm5aWFFnWTI5c2JHbGtaWEpIY205MWNITW9LVG9nVmxKTlUzQnlhVzVuUW05dVpVTnZiR3hwWkdWeVIzSnZkWEJiWFNCN1hHNGdJQ0FnWTI5dWMzUWdjMlYwSUQwZ2JtVjNJRk5sZER4V1VrMVRjSEpwYm1kQ2IyNWxRMjlzYkdsa1pYSkhjbTkxY0Q0b0tUdGNiaUFnSUNCMGFHbHpMbDlxYjJsdWRITXVabTl5UldGamFDZ29jM0J5YVc1blFtOXVaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ2MzQnlhVzVuUW05dVpTNWpiMnhzYVdSbGNrZHliM1Z3Y3k1bWIzSkZZV05vS0NoamIyeHNhV1JsY2tkeWIzVndLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lITmxkQzVoWkdRb1kyOXNiR2xrWlhKSGNtOTFjQ2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdRWEp5WVhrdVpuSnZiU2h6WlhRcE8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklHZGxkQ0JqYjJ4c2FXUmxjbk1vS1RvZ1ZsSk5VM0J5YVc1blFtOXVaVU52Ykd4cFpHVnlXMTBnZTF4dUlDQWdJR052Ym5OMElITmxkQ0E5SUc1bGR5QlRaWFE4VmxKTlUzQnlhVzVuUW05dVpVTnZiR3hwWkdWeVBpZ3BPMXh1SUNBZ0lIUm9hWE11WTI5c2JHbGtaWEpIY205MWNITXVabTl5UldGamFDZ29ZMjlzYkdsa1pYSkhjbTkxY0NrZ1BUNGdlMXh1SUNBZ0lDQWdZMjlzYkdsa1pYSkhjbTkxY0M1amIyeHNhV1JsY25NdVptOXlSV0ZqYUNnb1kyOXNiR2xrWlhJcElEMCtJSHRjYmlBZ0lDQWdJQ0FnYzJWMExtRmtaQ2hqYjJ4c2FXUmxjaWs3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdRWEp5WVhrdVpuSnZiU2h6WlhRcE8xeHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQmZiMkpxWldOMFUzQnlhVzVuUW05dVpYTk5ZWEFnUFNCdVpYY2dUV0Z3UEZSSVVrVkZMazlpYW1WamRETkVMQ0JUWlhROFZsSk5VM0J5YVc1blFtOXVaVXB2YVc1MFBqNG9LVHRjYmx4dUlDQndkV0pzYVdNZ1lXUmtTbTlwYm5Rb2FtOXBiblE2SUZaU1RWTndjbWx1WjBKdmJtVktiMmx1ZENrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdVgycHZhVzUwY3k1aFpHUW9hbTlwYm5RcE8xeHVYRzRnSUNBZ2JHVjBJRzlpYW1WamRGTmxkQ0E5SUhSb2FYTXVYMjlpYW1WamRGTndjbWx1WjBKdmJtVnpUV0Z3TG1kbGRDaHFiMmx1ZEM1aWIyNWxLVHRjYmlBZ0lDQnBaaUFvYjJKcVpXTjBVMlYwSUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUc5aWFtVmpkRk5sZENBOUlHNWxkeUJUWlhROFZsSk5VM0J5YVc1blFtOXVaVXB2YVc1MFBpZ3BPMXh1SUNBZ0lDQWdkR2hwY3k1ZmIySnFaV04wVTNCeWFXNW5RbTl1WlhOTllYQXVjMlYwS0dwdmFXNTBMbUp2Ym1Vc0lHOWlhbVZqZEZObGRDazdYRzRnSUNBZ2ZWeHVJQ0FnSUc5aWFtVmpkRk5sZEM1aFpHUW9hbTlwYm5RcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJrWlhCeVpXTmhkR1ZrSUZWelpTQjdRR3hwYm1zZ1lXUmtTbTlwYm5SOUlHbHVjM1JsWVdRdVhHNGdJQ0FxTDF4dUlDQndkV0pzYVdNZ1lXUmtVM0J5YVc1blFtOXVaU2hxYjJsdWREb2dWbEpOVTNCeWFXNW5RbTl1WlVwdmFXNTBLVG9nZG05cFpDQjdYRzRnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ2RXVWsxVGNISnBibWRDYjI1bFRXRnVZV2RsY2pvZ1lXUmtVM0J5YVc1blFtOXVaU2dwSUdseklHUmxjSEpsWTJGMFpXUXVJSFZ6WlNCaFpHUktiMmx1ZENncElHbHVjM1JsWVdRdUp5azdYRzVjYmlBZ0lDQjBhR2x6TG1Ga1pFcHZhVzUwS0dwdmFXNTBLVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJrWld4bGRHVktiMmx1ZENocWIybHVkRG9nVmxKTlUzQnlhVzVuUW05dVpVcHZhVzUwS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdkR2hwY3k1ZmFtOXBiblJ6TG1SbGJHVjBaU2hxYjJsdWRDazdYRzVjYmlBZ0lDQmpiMjV6ZENCdlltcGxZM1JUWlhRZ1BTQjBhR2x6TGw5dlltcGxZM1JUY0hKcGJtZENiMjVsYzAxaGNDNW5aWFFvYW05cGJuUXVZbTl1WlNraE8xeHVJQ0FnSUc5aWFtVmpkRk5sZEM1a1pXeGxkR1VvYW05cGJuUXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCa1pYQnlaV05oZEdWa0lGVnpaU0I3UUd4cGJtc2daR1ZzWlhSbFNtOXBiblI5SUdsdWMzUmxZV1F1WEc0Z0lDQXFMMXh1SUNCd2RXSnNhV01nWkdWc1pYUmxVM0J5YVc1blFtOXVaU2hxYjJsdWREb2dWbEpOVTNCeWFXNW5RbTl1WlVwdmFXNTBLVG9nZG05cFpDQjdYRzRnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ2RXVWsxVGNISnBibWRDYjI1bFRXRnVZV2RsY2pvZ1pHVnNaWFJsVTNCeWFXNW5RbTl1WlNncElHbHpJR1JsY0hKbFkyRjBaV1F1SUhWelpTQmtaV3hsZEdWS2IybHVkQ2dwSUdsdWMzUmxZV1F1SnlrN1hHNWNiaUFnSUNCMGFHbHpMbVJsYkdWMFpVcHZhVzUwS0dwdmFXNTBLVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJ6WlhSSmJtbDBVM1JoZEdVb0tUb2dkbTlwWkNCN1hHNGdJQ0FnWTI5dWMzUWdjM0J5YVc1blFtOXVaWE5VY21sbFpDQTlJRzVsZHlCVFpYUThWbEpOVTNCeWFXNW5RbTl1WlVwdmFXNTBQaWdwTzF4dUlDQWdJR052Ym5OMElITndjbWx1WjBKdmJtVnpSRzl1WlNBOUlHNWxkeUJUWlhROFZsSk5VM0J5YVc1blFtOXVaVXB2YVc1MFBpZ3BPMXh1SUNBZ0lHTnZibk4wSUc5aWFtVmpkRlZ3WkdGMFpXUWdQU0J1WlhjZ1UyVjBQRlJJVWtWRkxrOWlhbVZqZERORVBpZ3BPMXh1WEc0Z0lDQWdabTl5SUNoamIyNXpkQ0J6Y0hKcGJtZENiMjVsSUc5bUlIUm9hWE11WDJwdmFXNTBjeWtnZTF4dUlDQWdJQ0FnZEdocGN5NWZjSEp2WTJWemMxTndjbWx1WjBKdmJtVW9jM0J5YVc1blFtOXVaU3dnYzNCeWFXNW5RbTl1WlhOVWNtbGxaQ3dnYzNCeWFXNW5RbTl1WlhORWIyNWxMQ0J2WW1wbFkzUlZjR1JoZEdWa0xDQW9jM0J5YVc1blFtOXVaU2tnUFQ1Y2JpQWdJQ0FnSUNBZ2MzQnlhVzVuUW05dVpTNXpaWFJKYm1sMFUzUmhkR1VvS1N4Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUhKbGMyVjBLQ2s2SUhadmFXUWdlMXh1SUNBZ0lHTnZibk4wSUhOd2NtbHVaMEp2Ym1WelZISnBaV1FnUFNCdVpYY2dVMlYwUEZaU1RWTndjbWx1WjBKdmJtVktiMmx1ZEQ0b0tUdGNiaUFnSUNCamIyNXpkQ0J6Y0hKcGJtZENiMjVsYzBSdmJtVWdQU0J1WlhjZ1UyVjBQRlpTVFZOd2NtbHVaMEp2Ym1WS2IybHVkRDRvS1R0Y2JpQWdJQ0JqYjI1emRDQnZZbXBsWTNSVmNHUmhkR1ZrSUQwZ2JtVjNJRk5sZER4VVNGSkZSUzVQWW1wbFkzUXpSRDRvS1R0Y2JseHVJQ0FnSUdadmNpQW9ZMjl1YzNRZ2MzQnlhVzVuUW05dVpTQnZaaUIwYUdsekxsOXFiMmx1ZEhNcElIdGNiaUFnSUNBZ0lIUm9hWE11WDNCeWIyTmxjM05UY0hKcGJtZENiMjVsS0hOd2NtbHVaMEp2Ym1Vc0lITndjbWx1WjBKdmJtVnpWSEpwWldRc0lITndjbWx1WjBKdmJtVnpSRzl1WlN3Z2IySnFaV04wVlhCa1lYUmxaQ3dnS0hOd2NtbHVaMEp2Ym1VcElEMCtYRzRnSUNBZ0lDQWdJSE53Y21sdVowSnZibVV1Y21WelpYUW9LU3hjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY0hWaWJHbGpJSFZ3WkdGMFpTaGtaV3gwWVRvZ2JuVnRZbVZ5S1RvZ2RtOXBaQ0I3WEc0Z0lDQWdZMjl1YzNRZ2MzQnlhVzVuUW05dVpYTlVjbWxsWkNBOUlHNWxkeUJUWlhROFZsSk5VM0J5YVc1blFtOXVaVXB2YVc1MFBpZ3BPMXh1SUNBZ0lHTnZibk4wSUhOd2NtbHVaMEp2Ym1WelJHOXVaU0E5SUc1bGR5QlRaWFE4VmxKTlUzQnlhVzVuUW05dVpVcHZhVzUwUGlncE8xeHVJQ0FnSUdOdmJuTjBJRzlpYW1WamRGVndaR0YwWldRZ1BTQnVaWGNnVTJWMFBGUklVa1ZGTGs5aWFtVmpkRE5FUGlncE8xeHVYRzRnSUNBZ1ptOXlJQ2hqYjI1emRDQnpjSEpwYm1kQ2IyNWxJRzltSUhSb2FYTXVYMnB2YVc1MGN5a2dlMXh1SUNBZ0lDQWdMeThnZFhCa1lYUmxJSFJvWlNCemNISnBibWRpYjI1bFhHNGdJQ0FnSUNCMGFHbHpMbDl3Y205alpYTnpVM0J5YVc1blFtOXVaU2h6Y0hKcGJtZENiMjVsTENCemNISnBibWRDYjI1bGMxUnlhV1ZrTENCemNISnBibWRDYjI1bGMwUnZibVVzSUc5aWFtVmpkRlZ3WkdGMFpXUXNJQ2h6Y0hKcGJtZENiMjVsS1NBOVBseHVJQ0FnSUNBZ0lDQnpjSEpwYm1kQ2IyNWxMblZ3WkdGMFpTaGtaV3gwWVNrc1hHNGdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQXZMeUIxY0dSaGRHVWdZMmhwYkdSeVpXNGdkMjl5YkdRZ2JXRjBjbWxqWlhOY2JpQWdJQ0FnSUM4dklHbDBJR2x6SUhKbGNYVnBjbVZrSUhkb1pXNGdkR2hsSUhOd2NtbHVaeUJpYjI1bElHTm9ZV2x1SUdseklITndZWEp6WlZ4dUlDQWdJQ0FnZEhKaGRtVnljMlZEYUdsc1pISmxibFZ1ZEdsc1EyOXVaR2wwYVc5dVRXVjBLSE53Y21sdVowSnZibVV1WW05dVpTd2dLRzlpYW1WamRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBdkx5QnBaaUIwYUdVZ2IySnFaV04wSUdoaGN5QmhkSFJoWTJobFpDQnpjSEpwYm1kaWIyNWxMQ0JvWVd4MElIUm9aU0IwY21GMlpYSnpZV3hjYmlBZ0lDQWdJQ0FnYVdZZ0tDaDBhR2x6TGw5dlltcGxZM1JUY0hKcGJtZENiMjVsYzAxaGNDNW5aWFFvYjJKcVpXTjBLVDh1YzJsNlpTQS9QeUF3S1NBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklHOTBhR1Z5ZDJselpTQjFjR1JoZEdVZ2FYUnpJSGR2Y214a0lHMWhkSEpwZUZ4dUlDQWdJQ0FnSUNCdlltcGxZM1F1ZFhCa1lYUmxWMjl5YkdSTllYUnlhWGdvWm1Gc2MyVXNJR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGVndaR0YwWlNCaElITndjbWx1WnlCaWIyNWxMbHh1SUNBZ0tpQkpaaUIwYUdWeVpTQmhjbVVnYjNSb1pYSWdjM0J5YVc1bklHSnZibVVnZEdoaGRDQmhjbVVnWkdWd1pXNWtZVzUwTENCcGRDQjNhV3hzSUhSeWVTQjBieUIxY0dSaGRHVWdkR2hsYlNCeVpXTjFjbk5wZG1Wc2VTNWNiaUFnSUNvZ1NYUWdkWEJrWVhSbGN5QnRZWFJ5YVhoWGIzSnNaQ0J2WmlCaGJHd2dZVzVqWlhOMGIzSnpJR0Z1WkNCdGVYTmxiR1l1WEc0Z0lDQXFJRWwwSUcxcFoyaDBJSFJvY205M0lHRnVJR1Z5Y205eUlHbG1JSFJvWlhKbElHRnlaU0JqYVhKamRXeGhjaUJrWlhCbGJtUmxibU5wWlhNdVhHNGdJQ0FxWEc0Z0lDQXFJRWx1ZEdWdVpHVmtJSFJ2SUdKbElIVnpaV1FnYVc0Z2UwQnNhVzVySUhWd1pHRjBaWDBnWVc1a0lIdEFiR2x1YXlCZmNISnZZMlZ6YzFOd2NtbHVaMEp2Ym1WOUlHbDBjMlZzWmlCeVpXTjFjbk5wZG1Wc2VTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSE53Y21sdVowSnZibVVnUVNCemNISnBibWRDYjI1bElIbHZkU0IzWVc1MElIUnZJSFZ3WkdGMFpWeHVJQ0FnS2lCQWNHRnlZVzBnYzNCeWFXNW5RbTl1WlhOVWNtbGxaQ0JUWlhRZ2IyWWdjM0J5YVc1blFtOXVaWE1nZEdoaGRDQmhjbVVnWVd4eVpXRmtlU0IwY21sbFpDQjBieUJpWlNCMWNHUmhkR1ZrWEc0Z0lDQXFJRUJ3WVhKaGJTQnpjSEpwYm1kQ2IyNWxjMFJ2Ym1VZ1UyVjBJRzltSUhOd2NtbHVaMEp2Ym1WeklIUm9ZWFFnWVhKbElHRnNjbVZoWkhrZ2RYQWdkRzhnWkdGMFpWeHVJQ0FnS2lCQWNHRnlZVzBnYjJKcVpXTjBWWEJrWVhSbFpDQlRaWFFnYjJZZ2IySnFaV04wTTBRZ2QyaHZjMlVnYldGMGNtbDRWMjl5YkdRZ2FYTWdkWEJrWVhSbFpGeHVJQ0FnS2k5Y2JpQWdjSEpwZG1GMFpTQmZjSEp2WTJWemMxTndjbWx1WjBKdmJtVW9YRzRnSUNBZ2MzQnlhVzVuUW05dVpUb2dWbEpOVTNCeWFXNW5RbTl1WlVwdmFXNTBMRnh1SUNBZ0lITndjbWx1WjBKdmJtVnpWSEpwWldRNklGTmxkRHhXVWsxVGNISnBibWRDYjI1bFNtOXBiblErTEZ4dUlDQWdJSE53Y21sdVowSnZibVZ6Ukc5dVpUb2dVMlYwUEZaU1RWTndjbWx1WjBKdmJtVktiMmx1ZEQ0c1hHNGdJQ0FnYjJKcVpXTjBWWEJrWVhSbFpEb2dVMlYwUEZSSVVrVkZMazlpYW1WamRETkVQaXhjYmlBZ0lDQmpZV3hzWW1GamF6b2dLSE53Y21sdVowSnZibVU2SUZaU1RWTndjbWx1WjBKdmJtVktiMmx1ZENrZ1BUNGdkbTlwWkN4Y2JpQWdLVG9nZG05cFpDQjdYRzRnSUNBZ2FXWWdLSE53Y21sdVowSnZibVZ6Ukc5dVpTNW9ZWE1vYzNCeWFXNW5RbTl1WlNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2MzQnlhVzVuUW05dVpYTlVjbWxsWkM1b1lYTW9jM0J5YVc1blFtOXVaU2twSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVmxKTlUzQnlhVzVuUW05dVpVMWhibUZuWlhJNklFTnBjbU4xYkdGeUlHUmxjR1Z1WkdWdVkza2daR1YwWldOMFpXUWdkMmhwYkdVZ2RYQmtZWFJwYm1jZ2MzQnlhVzVuWW05dVpYTW5LVHRjYmlBZ0lDQjlYRzRnSUNBZ2MzQnlhVzVuUW05dVpYTlVjbWxsWkM1aFpHUW9jM0J5YVc1blFtOXVaU2s3WEc1Y2JpQWdJQ0JqYjI1emRDQmtaWEJQWW1wbFkzUnpJRDBnZEdocGN5NWZaMlYwUkdWd1pXNWtaVzVqYVdWektITndjbWx1WjBKdmJtVXBPMXh1SUNBZ0lHWnZjaUFvWTI5dWMzUWdaR1Z3VDJKcVpXTjBJRzltSUdSbGNFOWlhbVZqZEhNcElIdGNiaUFnSUNBZ0lIUnlZWFpsY25ObFFXNWpaWE4wYjNKelJuSnZiVkp2YjNRb1pHVndUMkpxWldOMExDQW9aR1Z3VDJKcVpXTjBRVzVqWlhOMGIzSXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYjJKcVpXTjBVMlYwSUQwZ2RHaHBjeTVmYjJKcVpXTjBVM0J5YVc1blFtOXVaWE5OWVhBdVoyVjBLR1JsY0U5aWFtVmpkRUZ1WTJWemRHOXlLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHOWlhbVZqZEZObGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdadmNpQW9ZMjl1YzNRZ1pHVndVM0J5YVc1blFtOXVaU0J2WmlCdlltcGxZM1JUWlhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0J5YjJObGMzTlRjSEpwYm1kQ2IyNWxLR1JsY0ZOd2NtbHVaMEp2Ym1Vc0lITndjbWx1WjBKdmJtVnpWSEpwWldRc0lITndjbWx1WjBKdmJtVnpSRzl1WlN3Z2IySnFaV04wVlhCa1lYUmxaQ3dnWTJGc2JHSmhZMnNwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2doYjJKcVpXTjBWWEJrWVhSbFpDNW9ZWE1vWkdWd1QySnFaV04wUVc1alpYTjBiM0lwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnZFhCa1lYUmxJRzFoZEhKcGVDQnZaaUJ1YjI0dGMzQnlhVzVuWW05dVpWeHVJQ0FnSUNBZ0lDQWdJR1JsY0U5aWFtVmpkRUZ1WTJWemRHOXlMblZ3WkdGMFpWZHZjbXhrVFdGMGNtbDRLR1poYkhObExDQm1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdiMkpxWldOMFZYQmtZWFJsWkM1aFpHUW9aR1Z3VDJKcVpXTjBRVzVqWlhOMGIzSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCMWNHUmhkR1VnYlhrZ2JXRjBjbWw0WEc0Z0lDQWdjM0J5YVc1blFtOXVaUzVpYjI1bExuVndaR0YwWlUxaGRISnBlQ2dwTzF4dUlDQWdJSE53Y21sdVowSnZibVV1WW05dVpTNTFjR1JoZEdWWGIzSnNaRTFoZEhKcGVDaG1ZV3h6WlN3Z1ptRnNjMlVwTzF4dVhHNGdJQ0FnWTJGc2JHSmhZMnNvYzNCeWFXNW5RbTl1WlNrN1hHNWNiaUFnSUNCdlltcGxZM1JWY0dSaGRHVmtMbUZrWkNoemNISnBibWRDYjI1bExtSnZibVVwTzF4dVhHNGdJQ0FnYzNCeWFXNW5RbTl1WlhORWIyNWxMbUZrWkNoemNISnBibWRDYjI1bEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNGdZU0J6WlhRZ2IyWWdiMkpxWldOMGN5QjBhR0YwSUdGeVpTQmtaWEJsYm1SaGJuUWdiMllnWjJsMlpXNGdjM0J5YVc1bklHSnZibVV1WEc0Z0lDQXFJRUJ3WVhKaGJTQnpjSEpwYm1kQ2IyNWxJRUVnYzNCeWFXNW5JR0p2Ym1WY2JpQWdJQ29nUUhKbGRIVnliaUJCSUhObGRDQnZaaUJ2WW1wbFkzUnpJSFJvWVhRZ1lYSmxJR1JsY0dWdVpHRnVkQ0J2WmlCbmFYWmxiaUJ6Y0hKcGJtY2dZbTl1WlZ4dUlDQWdLaTljYmlBZ2NISnBkbUYwWlNCZloyVjBSR1Z3Wlc1a1pXNWphV1Z6S0hOd2NtbHVaMEp2Ym1VNklGWlNUVk53Y21sdVowSnZibVZLYjJsdWRDazZJRk5sZER4VVNGSkZSUzVQWW1wbFkzUXpSRDRnZTF4dUlDQWdJR052Ym5OMElITmxkQ0E5SUc1bGR5QlRaWFE4VkVoU1JVVXVUMkpxWldOME0wUStLQ2s3WEc1Y2JpQWdJQ0JqYjI1emRDQndZWEpsYm5RZ1BTQnpjSEpwYm1kQ2IyNWxMbUp2Ym1VdWNHRnlaVzUwTzF4dUlDQWdJR2xtSUNod1lYSmxiblFwSUh0Y2JpQWdJQ0FnSUhObGRDNWhaR1FvY0dGeVpXNTBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpjSEpwYm1kQ2IyNWxMbU52Ykd4cFpHVnlSM0p2ZFhCekxtWnZja1ZoWTJnb0tHTnZiR3hwWkdWeVIzSnZkWEFwSUQwK0lIdGNiaUFnSUNBZ0lHTnZiR3hwWkdWeVIzSnZkWEF1WTI5c2JHbGtaWEp6TG1admNrVmhZMmdvS0dOdmJHeHBaR1Z5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJSE5sZEM1aFpHUW9ZMjlzYkdsa1pYSXBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjMlYwTzF4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ2RIbHdaU0FxSUdGeklGWXdWbEpOSUdaeWIyMGdKMEJ3YVhocGRpOTBlWEJsY3kxMmNtMHRNQzR3Snp0Y2JtbHRjRzl5ZENCMGVYQmxJQ29nWVhNZ1ZqRlRjSEpwYm1kQ2IyNWxVMk5vWlcxaElHWnliMjBnSjBCd2FYaHBkaTkwZVhCbGN5MTJjbTFqTFhOd2NtbHVaMkp2Ym1VdE1TNHdKenRjYm1sdGNHOXlkQ0FxSUdGeklGUklVa1ZGSUdaeWIyMGdKM1JvY21WbEp6dGNibWx0Y0c5eWRDQjBlWEJsSUhzZ1IweFVSaXdnUjB4VVJreHZZV1JsY2xCc2RXZHBiaXdnUjB4VVJsQmhjbk5sY2lCOUlHWnliMjBnSjNSb2NtVmxMMlY0WVcxd2JHVnpMMnB6YlM5c2IyRmtaWEp6TDBkTVZFWk1iMkZrWlhJdWFuTW5PMXh1YVcxd2IzSjBJSHNnVmxKTlUzQnlhVzVuUW05dVpVTnZiR3hwWkdWeVNHVnNjR1Z5TENCV1VrMVRjSEpwYm1kQ2IyNWxTbTlwYm5SSVpXeHdaWElnZlNCbWNtOXRJQ2N1TDJobGJIQmxjbk1uTzF4dWFXMXdiM0owSUhzZ1ZsSk5VM0J5YVc1blFtOXVaVU52Ykd4cFpHVnlJSDBnWm5KdmJTQW5MaTlXVWsxVGNISnBibWRDYjI1bFEyOXNiR2xrWlhJbk8xeHVhVzF3YjNKMElIUjVjR1VnZXlCV1VrMVRjSEpwYm1kQ2IyNWxRMjlzYkdsa1pYSkhjbTkxY0NCOUlHWnliMjBnSnk0dlZsSk5VM0J5YVc1blFtOXVaVU52Ykd4cFpHVnlSM0p2ZFhBbk8xeHVhVzF3YjNKMElIc2dWbEpOVTNCeWFXNW5RbTl1WlVOdmJHeHBaR1Z5VTJoaGNHVkRZWEJ6ZFd4bElIMGdabkp2YlNBbkxpOVdVazFUY0hKcGJtZENiMjVsUTI5c2JHbGtaWEpUYUdGd1pVTmhjSE4xYkdVbk8xeHVhVzF3YjNKMElIc2dWbEpOVTNCeWFXNW5RbTl1WlVOdmJHeHBaR1Z5VTJoaGNHVlRjR2hsY21VZ2ZTQm1jbTl0SUNjdUwxWlNUVk53Y21sdVowSnZibVZEYjJ4c2FXUmxjbE5vWVhCbFUzQm9aWEpsSnp0Y2JtbHRjRzl5ZENCN0lGWlNUVk53Y21sdVowSnZibVZLYjJsdWRDQjlJR1p5YjIwZ0p5NHZWbEpOVTNCeWFXNW5RbTl1WlVwdmFXNTBKenRjYm1sdGNHOXlkQ0IwZVhCbElIc2dWbEpOVTNCeWFXNW5RbTl1WlV4dllXUmxjbEJzZFdkcGJrOXdkR2x2Ym5NZ2ZTQm1jbTl0SUNjdUwxWlNUVk53Y21sdVowSnZibVZNYjJGa1pYSlFiSFZuYVc1UGNIUnBiMjV6Snp0Y2JtbHRjRzl5ZENCN0lGWlNUVk53Y21sdVowSnZibVZOWVc1aFoyVnlJSDBnWm5KdmJTQW5MaTlXVWsxVGNISnBibWRDYjI1bFRXRnVZV2RsY2ljN1hHNXBiWEJ2Y25RZ2RIbHdaU0I3SUZaU1RWTndjbWx1WjBKdmJtVktiMmx1ZEZObGRIUnBibWR6SUgwZ1puSnZiU0FuTGk5V1VrMVRjSEpwYm1kQ2IyNWxTbTlwYm5SVFpYUjBhVzVuY3ljN1hHNXBiWEJ2Y25RZ2V5QkhURlJHSUdGeklFZE1WRVpUWTJobGJXRWdmU0JtY205dElDZEFaMngwWmkxMGNtRnVjMlp2Y20wdlkyOXlaU2M3WEc1Y2JpOHFLbHh1SUNvZ1VHOXpjMmxpYkdVZ2MzQmxZeUIyWlhKemFXOXVjeUJwZENCeVpXTnZaMjVwZW1WekxseHVJQ292WEc1amIyNXpkQ0JRVDFOVFNVSk1SVjlUVUVWRFgxWkZVbE5KVDA1VElEMGdibVYzSUZObGRDaGJKekV1TUNjc0lDY3hMakF0WW1WMFlTZGRLVHRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRlpTVFZOd2NtbHVaMEp2Ym1WTWIyRmtaWEpRYkhWbmFXNGdhVzF3YkdWdFpXNTBjeUJIVEZSR1RHOWhaR1Z5VUd4MVoybHVJSHRjYmlBZ2NIVmliR2xqSUhOMFlYUnBZeUJ5WldGa2IyNXNlU0JGV0ZSRlRsTkpUMDVmVGtGTlJTQTlJQ2RXVWsxRFgzTndjbWx1WjBKdmJtVW5PMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRjR1ZqYVdaNUlHRnVJRTlpYW1WamRETkVJSFJ2SUdGa1pDQjdRR3hwYm1zZ1ZsSk5VM0J5YVc1blFtOXVaVXB2YVc1MFNHVnNjR1Z5ZlNCekxseHVJQ0FnS2lCSlppQnViM1FnYzNCbFkybG1hV1ZrTENCb1pXeHdaWElnZDJsc2JDQnViM1FnWW1VZ1kzSmxZWFJsWkM1Y2JpQWdJQ29nU1dZZ1lISmxibVJsY2s5eVpHVnlZQ0JwY3lCelpYUWdkRzhnZEdobElISnZiM1FzSUdobGJIQmxjbk1nZDJsc2JDQmpiM0I1SUhSb1pTQnpZVzFsSUdCeVpXNWtaWEpQY21SbGNtQWdMbHh1SUNBZ0tpOWNiaUFnY0hWaWJHbGpJR3B2YVc1MFNHVnNjR1Z5VW05dmREODZJRlJJVWtWRkxrOWlhbVZqZERORU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCVGNHVmphV1o1SUdGdUlFOWlhbVZqZERORUlIUnZJR0ZrWkNCN1FHeHBibXNnVmxKTlUzQnlhVzVuUW05dVpVcHZhVzUwU0dWc2NHVnlmU0J6TGx4dUlDQWdLaUJKWmlCdWIzUWdjM0JsWTJsbWFXVmtMQ0JvWld4d1pYSWdkMmxzYkNCdWIzUWdZbVVnWTNKbFlYUmxaQzVjYmlBZ0lDb2dTV1lnWUhKbGJtUmxjazl5WkdWeVlDQnBjeUJ6WlhRZ2RHOGdkR2hsSUhKdmIzUXNJR2hsYkhCbGNuTWdkMmxzYkNCamIzQjVJSFJvWlNCellXMWxJR0J5Wlc1a1pYSlBjbVJsY21BZ0xseHVJQ0FnS2k5Y2JpQWdjSFZpYkdsaklHTnZiR3hwWkdWeVNHVnNjR1Z5VW05dmREODZJRlJJVWtWRkxrOWlhbVZqZERORU8xeHVYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0J3WVhKelpYSTZJRWRNVkVaUVlYSnpaWEk3WEc1Y2JpQWdjSFZpYkdsaklHZGxkQ0J1WVcxbEtDazZJSE4wY21sdVp5QjdYRzRnSUNBZ2NtVjBkWEp1SUZaU1RWTndjbWx1WjBKdmJtVk1iMkZrWlhKUWJIVm5hVzR1UlZoVVJVNVRTVTlPWDA1QlRVVTdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdZMjl1YzNSeWRXTjBiM0lvY0dGeWMyVnlPaUJIVEZSR1VHRnljMlZ5TENCdmNIUnBiMjV6UHpvZ1ZsSk5VM0J5YVc1blFtOXVaVXh2WVdSbGNsQnNkV2RwYms5d2RHbHZibk1wSUh0Y2JpQWdJQ0IwYUdsekxuQmhjbk5sY2lBOUlIQmhjbk5sY2p0Y2JseHVJQ0FnSUhSb2FYTXVhbTlwYm5SSVpXeHdaWEpTYjI5MElEMGdiM0IwYVc5dWN6OHVhbTlwYm5SSVpXeHdaWEpTYjI5ME8xeHVJQ0FnSUhSb2FYTXVZMjlzYkdsa1pYSklaV3h3WlhKU2IyOTBJRDBnYjNCMGFXOXVjejh1WTI5c2JHbGtaWEpJWld4d1pYSlNiMjkwTzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUdGemVXNWpJR0ZtZEdWeVVtOXZkQ2huYkhSbU9pQkhURlJHS1RvZ1VISnZiV2x6WlR4MmIybGtQaUI3WEc0Z0lDQWdaMngwWmk1MWMyVnlSR0YwWVM1MmNtMVRjSEpwYm1kQ2IyNWxUV0Z1WVdkbGNpQTlJR0YzWVdsMElIUm9hWE11WDJsdGNHOXlkQ2huYkhSbUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJKYlhCdmNuUWdjM0J5YVc1bklHSnZibVZ6SUdaeWIyMGdZU0JIVEZSR0lHRnVaQ0J5WlhSMWNtNGdZU0I3UUd4cGJtc2dWbEpOVTNCeWFXNW5RbTl1WlUxaGJtRm5aWEo5TGx4dUlDQWdLaUJKZENCdGFXZG9kQ0J5WlhSMWNtNGdZRzUxYkd4Z0lHbHVjM1JsWVdRZ2QyaGxiaUJwZENCa2IyVnpJRzV2ZENCdVpXVmtJSFJ2SUdKbElHTnlaV0YwWldRZ2IzSWdjMjl0WlhSb2FXNW5JR2R2SUhkeWIyNW5MbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnWjJ4MFppQkJJSEJoY25ObFpDQnlaWE4xYkhRZ2IyWWdSMHhVUmlCMFlXdGxiaUJtY205dElFZE1WRVpNYjJGa1pYSmNiaUFnSUNvdlhHNGdJSEJ5YVhaaGRHVWdZWE41Ym1NZ1gybHRjRzl5ZENobmJIUm1PaUJIVEZSR0tUb2dVSEp2YldselpUeFdVazFUY0hKcGJtZENiMjVsVFdGdVlXZGxjaUI4SUc1MWJHdytJSHRjYmlBZ0lDQmpiMjV6ZENCMk1WSmxjM1ZzZENBOUlHRjNZV2wwSUhSb2FYTXVYM1l4U1cxd2IzSjBLR2RzZEdZcE8xeHVJQ0FnSUdsbUlDaDJNVkpsYzNWc2RDQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RqRlNaWE4xYkhRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdkakJTWlhOMWJIUWdQU0JoZDJGcGRDQjBhR2x6TGw5Mk1FbHRjRzl5ZENobmJIUm1LVHRjYmlBZ0lDQnBaaUFvZGpCU1pYTjFiSFFnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFl3VW1WemRXeDBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNCOVhHNWNiaUFnY0hKcGRtRjBaU0JoYzNsdVl5QmZkakZKYlhCdmNuUW9aMngwWmpvZ1IweFVSaWs2SUZCeWIyMXBjMlU4VmxKTlUzQnlhVzVuUW05dVpVMWhibUZuWlhJZ2ZDQnVkV3hzUGlCN1hHNGdJQ0FnWTI5dWMzUWdhbk52YmlBOUlHZHNkR1l1Y0dGeWMyVnlMbXB6YjI0Z1lYTWdSMHhVUmxOamFHVnRZUzVKUjB4VVJqdGNibHh1SUNBZ0lDOHZJR1ZoY214NUlHRmliM0owSUdsbUlHbDBJR1J2WlhOdUozUWdkWE5sSUhOd2NtbHVaeUJpYjI1bGMxeHVJQ0FnSUdOdmJuTjBJR2x6VTNCeWFXNW5RbTl1WlZWelpXUWdQU0JxYzI5dUxtVjRkR1Z1YzJsdmJuTlZjMlZrUHk1cGJtUmxlRTltS0ZaU1RWTndjbWx1WjBKdmJtVk1iMkZrWlhKUWJIVm5hVzR1UlZoVVJVNVRTVTlPWDA1QlRVVXBJQ0U5UFNBdE1UdGNiaUFnSUNCcFppQW9JV2x6VTNCeWFXNW5RbTl1WlZWelpXUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElHMWhibUZuWlhJZ1BTQnVaWGNnVmxKTlUzQnlhVzVuUW05dVpVMWhibUZuWlhJb0tUdGNibHh1SUNBZ0lHTnZibk4wSUhSb2NtVmxUbTlrWlhNNklGUklVa1ZGTGs5aWFtVmpkRE5FVzEwZ1BTQmhkMkZwZENCbmJIUm1MbkJoY25ObGNpNW5aWFJFWlhCbGJtUmxibU5wWlhNb0oyNXZaR1VuS1R0Y2JseHVJQ0FnSUdOdmJuTjBJR1Y0ZEdWdWMybHZiaUE5SUdwemIyNHVaWGgwWlc1emFXOXVjejh1VzFaU1RWTndjbWx1WjBKdmJtVk1iMkZrWlhKUWJIVm5hVzR1UlZoVVJVNVRTVTlPWDA1QlRVVmRJR0Z6WEc0Z0lDQWdJQ0I4SUZZeFUzQnlhVzVuUW05dVpWTmphR1Z0WVM1V1VrMURVM0J5YVc1blFtOXVaVnh1SUNBZ0lDQWdmQ0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdhV1lnS0NGbGVIUmxibk5wYjI0cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUhOd1pXTldaWEp6YVc5dUlEMGdaWGgwWlc1emFXOXVMbk53WldOV1pYSnphVzl1TzF4dUlDQWdJR2xtSUNnaFVFOVRVMGxDVEVWZlUxQkZRMTlXUlZKVFNVOU9VeTVvWVhNb2MzQmxZMVpsY25OcGIyNHBLU0I3WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b1hHNGdJQ0FnSUNBZ0lHQldVazFUY0hKcGJtZENiMjVsVEc5aFpHVnlVR3gxWjJsdU9pQlZibXR1YjNkdUlDUjdWbEpOVTNCeWFXNW5RbTl1WlV4dllXUmxjbEJzZFdkcGJpNUZXRlJGVGxOSlQwNWZUa0ZOUlgwZ2MzQmxZMVpsY25OcGIyNGdYQ0lrZTNOd1pXTldaWEp6YVc5dWZWd2lZQ3hjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQmpiMnhzYVdSbGNuTWdQU0JsZUhSbGJuTnBiMjR1WTI5c2JHbGtaWEp6UHk1dFlYQW9LSE5qYUdWdFlVTnZiR3hwWkdWeUxDQnBRMjlzYkdsa1pYSXBJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJRzV2WkdVZ1BTQjBhSEpsWlU1dlpHVnpXM05qYUdWdFlVTnZiR3hwWkdWeUxtNXZaR1VoWFR0Y2JpQWdJQ0FnSUdOdmJuTjBJSE5qYUdWdFlWTm9ZWEJsSUQwZ2MyTm9aVzFoUTI5c2JHbGtaWEl1YzJoaGNHVWhPMXh1WEc0Z0lDQWdJQ0JwWmlBb2MyTm9aVzFoVTJoaGNHVXVjM0JvWlhKbEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5cGJYQnZjblJUY0dobGNtVkRiMnhzYVdSbGNpaHViMlJsTENCN1hHNGdJQ0FnSUNBZ0lDQWdiMlptYzJWME9pQnVaWGNnVkVoU1JVVXVWbVZqZEc5eU15Z3BMbVp5YjIxQmNuSmhlU2h6WTJobGJXRlRhR0Z3WlM1emNHaGxjbVV1YjJabWMyVjBJRDgvSUZzd0xqQXNJREF1TUN3Z01DNHdYU2tzWEc0Z0lDQWdJQ0FnSUNBZ2NtRmthWFZ6T2lCelkyaGxiV0ZUYUdGd1pTNXpjR2hsY21VdWNtRmthWFZ6SUQ4L0lEQXVNQ3hjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tITmphR1Z0WVZOb1lYQmxMbU5oY0hOMWJHVXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgybHRjRzl5ZEVOaGNITjFiR1ZEYjJ4c2FXUmxjaWh1YjJSbExDQjdYRzRnSUNBZ0lDQWdJQ0FnYjJabWMyVjBPaUJ1WlhjZ1ZFaFNSVVV1Vm1WamRHOXlNeWdwTG1aeWIyMUJjbkpoZVNoelkyaGxiV0ZUYUdGd1pTNWpZWEJ6ZFd4bExtOW1abk5sZENBL1B5QmJNQzR3TENBd0xqQXNJREF1TUYwcExGeHVJQ0FnSUNBZ0lDQWdJSEpoWkdsMWN6b2djMk5vWlcxaFUyaGhjR1V1WTJGd2MzVnNaUzV5WVdScGRYTWdQejhnTUM0d0xGeHVJQ0FnSUNBZ0lDQWdJSFJoYVd3NklHNWxkeUJVU0ZKRlJTNVdaV04wYjNJektDa3Vabkp2YlVGeWNtRjVLSE5qYUdWdFlWTm9ZWEJsTG1OaGNITjFiR1V1ZEdGcGJDQS9QeUJiTUM0d0xDQXdMakFzSURBdU1GMHBMRnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCV1VrMVRjSEpwYm1kQ2IyNWxURzloWkdWeVVHeDFaMmx1T2lCVWFHVWdZMjlzYkdsa1pYSWdJeVI3YVVOdmJHeHBaR1Z5ZlNCb1lYTWdibThnZG1Gc2FXUWdjMmhoY0dWZ0tUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHTnZibk4wSUdOdmJHeHBaR1Z5UjNKdmRYQnpJRDBnWlhoMFpXNXphVzl1TG1OdmJHeHBaR1Z5UjNKdmRYQnpQeTV0WVhBb1hHNGdJQ0FnSUNBb2MyTm9aVzFoUTI5c2JHbGtaWEpIY205MWNDd2dhVU52Ykd4cFpHVnlSM0p2ZFhBcE9pQldVazFUY0hKcGJtZENiMjVsUTI5c2JHbGtaWEpIY205MWNDQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR052YkhNZ1BTQW9jMk5vWlcxaFEyOXNiR2xrWlhKSGNtOTFjQzVqYjJ4c2FXUmxjbk1nUHo4Z1cxMHBMbTFoY0Nnb2FVTnZiR3hwWkdWeUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5c0lEMGdZMjlzYkdsa1pYSnpQeTViYVVOdmJHeHBaR1Z5WFR0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoamIyd2dQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JnVmxKTlUzQnlhVzVuUW05dVpVeHZZV1JsY2xCc2RXZHBiam9nVkdobElHTnZiR3hwWkdWeVIzSnZkWEFnSXlSN2FVTnZiR3hwWkdWeVIzSnZkWEI5SUdGMGRHVnRjSFJsWkNCMGJ5QjFjMlVnWVNCamIyeHNhV1JsY2lBakpIdHBRMjlzYkdsa1pYSjlJR0oxZENCdWIzUWdabTkxYm1SZ0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTI5c08xeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZiR3hwWkdWeWN6b2dZMjlzY3l4Y2JpQWdJQ0FnSUNBZ0lDQnVZVzFsT2lCelkyaGxiV0ZEYjJ4c2FXUmxja2R5YjNWd0xtNWhiV1VzWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNrN1hHNWNiaUFnSUNCbGVIUmxibk5wYjI0dWMzQnlhVzVuY3o4dVptOXlSV0ZqYUNnb2MyTm9aVzFoVTNCeWFXNW5MQ0JwVTNCeWFXNW5LU0E5UGlCN1hHNGdJQ0FnSUNCamIyNXpkQ0J6WTJobGJXRktiMmx1ZEhNZ1BTQnpZMmhsYldGVGNISnBibWN1YW05cGJuUnpPMXh1WEc0Z0lDQWdJQ0F2THlCd2NtVndZWEpsSUdOdmJHeHBaR1Z5YzF4dUlDQWdJQ0FnWTI5dWMzUWdZMjlzYkdsa1pYSkhjbTkxY0hOR2IzSlRjSEpwYm1jZ1BTQnpZMmhsYldGVGNISnBibWN1WTI5c2JHbGtaWEpIY205MWNITS9MbTFoY0Nnb2FVTnZiR3hwWkdWeVIzSnZkWEFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1ozSnZkWEFnUFNCamIyeHNhV1JsY2tkeWIzVndjejh1VzJsRGIyeHNhV1JsY2tkeWIzVndYVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9aM0p2ZFhBZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUdCV1VrMVRjSEpwYm1kQ2IyNWxURzloWkdWeVVHeDFaMmx1T2lCVWFHVWdjM0J5YVc1bklDTWtlMmxUY0hKcGJtZDlJR0YwZEdWdGNIUmxaQ0IwYnlCMWMyVWdZU0JqYjJ4c2FXUmxja2R5YjNWd0lDUjdhVU52Ykd4cFpHVnlSM0p2ZFhCOUlHSjFkQ0J1YjNRZ1ptOTFibVJnTEZ4dUlDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWjNKdmRYQTdYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnWTI5dWMzUWdZMlZ1ZEdWeUlEMGdjMk5vWlcxaFUzQnlhVzVuTG1ObGJuUmxjaUFoUFNCdWRXeHNJRDhnZEdoeVpXVk9iMlJsYzF0elkyaGxiV0ZUY0hKcGJtY3VZMlZ1ZEdWeVhTQTZJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQWdJQ0FnYkdWMElIQnlaWFpUWTJobGJXRktiMmx1ZERvZ1ZqRlRjSEpwYm1kQ2IyNWxVMk5vWlcxaExsTndjbWx1WjBKdmJtVktiMmx1ZENCOElIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lITmphR1Z0WVVwdmFXNTBjeTVtYjNKRllXTm9LQ2h6WTJobGJXRktiMmx1ZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2NISmxkbE5qYUdWdFlVcHZhVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnY0hKbGNHRnlaU0J1YjJSbFhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JtOWtaVWx1WkdWNElEMGdjSEpsZGxOamFHVnRZVXB2YVc1MExtNXZaR1U3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYm05a1pTQTlJSFJvY21WbFRtOWtaWE5iYm05a1pVbHVaR1Y0WFR0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCamFHbHNaRWx1WkdWNElEMGdjMk5vWlcxaFNtOXBiblF1Ym05a1pUdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQmphR2xzWkNBOUlIUm9jbVZsVG05a1pYTmJZMmhwYkdSSmJtUmxlRjA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJ3Y21Wd1lYSmxJSE5sZEhScGJtZGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQnpaWFIwYVc1bk9pQlFZWEowYVdGc1BGWlNUVk53Y21sdVowSnZibVZLYjJsdWRGTmxkSFJwYm1kelBpQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHaHBkRkpoWkdsMWN6b2djSEpsZGxOamFHVnRZVXB2YVc1MExtaHBkRkpoWkdsMWN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdSeVlXZEdiM0pqWlRvZ2NISmxkbE5qYUdWdFlVcHZhVzUwTG1SeVlXZEdiM0pqWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2R5WVhacGRIbFFiM2RsY2pvZ2NISmxkbE5qYUdWdFlVcHZhVzUwTG1keVlYWnBkSGxRYjNkbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGFXWm1ibVZ6Y3pvZ2NISmxkbE5qYUdWdFlVcHZhVzUwTG5OMGFXWm1ibVZ6Y3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2R5WVhacGRIbEVhWEk2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5WlhaVFkyaGxiV0ZLYjJsdWRDNW5jbUYyYVhSNVJHbHlJQ0U5SUc1MWJHeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JRzVsZHlCVVNGSkZSUzVXWldOMGIzSXpLQ2t1Wm5KdmJVRnljbUY1S0hCeVpYWlRZMmhsYldGS2IybHVkQzVuY21GMmFYUjVSR2x5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJqY21WaGRHVWdjM0J5YVc1bklHSnZibVZ6WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYW05cGJuUWdQU0IwYUdsekxsOXBiWEJ2Y25SS2IybHVkQ2h1YjJSbExDQmphR2xzWkN3Z2MyVjBkR2x1Wnl3Z1kyOXNiR2xrWlhKSGNtOTFjSE5HYjNKVGNISnBibWNwTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hqWlc1MFpYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHcHZhVzUwTG1ObGJuUmxjaUE5SUdObGJuUmxjanRjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0J0WVc1aFoyVnlMbUZrWkVwdmFXNTBLR3B2YVc1MEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhCeVpYWlRZMmhsYldGS2IybHVkQ0E5SUhOamFHVnRZVXB2YVc1ME8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQXZMeUJwYm1sMElITndjbWx1WnlCaWIyNWxjMXh1SUNBZ0lHMWhibUZuWlhJdWMyVjBTVzVwZEZOMFlYUmxLQ2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdiV0Z1WVdkbGNqdGNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdZWE41Ym1NZ1gzWXdTVzF3YjNKMEtHZHNkR1k2SUVkTVZFWXBPaUJRY205dGFYTmxQRlpTVFZOd2NtbHVaMEp2Ym1WTllXNWhaMlZ5SUh3Z2JuVnNiRDRnZTF4dUlDQWdJR052Ym5OMElHcHpiMjRnUFNCbmJIUm1MbkJoY25ObGNpNXFjMjl1SUdGeklFZE1WRVpUWTJobGJXRXVTVWRNVkVZN1hHNWNiaUFnSUNBdkx5QmxZWEpzZVNCaFltOXlkQ0JwWmlCcGRDQmtiMlZ6YmlkMElIVnpaU0IyY20xY2JpQWdJQ0JqYjI1emRDQnBjMVpTVFZWelpXUWdQU0JxYzI5dUxtVjRkR1Z1YzJsdmJuTlZjMlZrUHk1cGJtUmxlRTltS0NkV1VrMG5LU0FoUFQwZ0xURTdYRzRnSUNBZ2FXWWdLQ0ZwYzFaU1RWVnpaV1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHVmhjbXg1SUdGaWIzSjBJR2xtSUdsMElHUnZaWE51SjNRZ2FHRjJaU0JpYjI1bElHZHliM1Z3YzF4dUlDQWdJR052Ym5OMElHVjRkR1Z1YzJsdmJpQTlJR3B6YjI0dVpYaDBaVzV6YVc5dWN6OHVXeWRXVWswblhTQmhjeUJXTUZaU1RTNVdVazBnZkNCMWJtUmxabWx1WldRN1hHNGdJQ0FnWTI5dWMzUWdjMk5vWlcxaFUyVmpiMjVrWVhKNVFXNXBiV0YwYVc5dUlEMGdaWGgwWlc1emFXOXVQeTV6WldOdmJtUmhjbmxCYm1sdFlYUnBiMjQ3WEc0Z0lDQWdhV1lnS0NGelkyaGxiV0ZUWldOdmJtUmhjbmxCYm1sdFlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJSE5qYUdWdFlVSnZibVZIY205MWNITWdQU0J6WTJobGJXRlRaV052Ym1SaGNubEJibWx0WVhScGIyNC9MbUp2Ym1WSGNtOTFjSE03WEc0Z0lDQWdhV1lnS0NGelkyaGxiV0ZDYjI1bFIzSnZkWEJ6S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J0WVc1aFoyVnlJRDBnYm1WM0lGWlNUVk53Y21sdVowSnZibVZOWVc1aFoyVnlLQ2s3WEc1Y2JpQWdJQ0JqYjI1emRDQjBhSEpsWlU1dlpHVnpPaUJVU0ZKRlJTNVBZbXBsWTNRelJGdGRJRDBnWVhkaGFYUWdaMngwWmk1d1lYSnpaWEl1WjJWMFJHVndaVzVrWlc1amFXVnpLQ2R1YjJSbEp5azdYRzVjYmlBZ0lDQmpiMjV6ZENCamIyeHNhV1JsY2tkeWIzVndjeUE5SUhOamFHVnRZVk5sWTI5dVpHRnllVUZ1YVcxaGRHbHZiaTVqYjJ4c2FXUmxja2R5YjNWd2N6OHViV0Z3S0Z4dUlDQWdJQ0FnS0hOamFHVnRZVU52Ykd4cFpHVnlSM0p2ZFhBcE9pQldVazFUY0hKcGJtZENiMjVsUTI5c2JHbGtaWEpIY205MWNDQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzV2WkdVZ1BTQjBhSEpsWlU1dlpHVnpXM05qYUdWdFlVTnZiR3hwWkdWeVIzSnZkWEF1Ym05a1pTRmRPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiMnhzYVdSbGNuTWdQU0FvYzJOb1pXMWhRMjlzYkdsa1pYSkhjbTkxY0M1amIyeHNhV1JsY25NZ1B6OGdXMTBwTG0xaGNDZ29jMk5vWlcxaFEyOXNiR2xrWlhJc0lHbERiMnhzYVdSbGNpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUc5bVpuTmxkQ0E5SUc1bGR5QlVTRkpGUlM1V1pXTjBiM0l6S0RBdU1Dd2dNQzR3TENBd0xqQXBPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHpZMmhsYldGRGIyeHNhV1JsY2k1dlptWnpaWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzltWm5ObGRDNXpaWFFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSE5qYUdWdFlVTnZiR3hwWkdWeUxtOW1abk5sZEM1NElEOC9JREF1TUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOb1pXMWhRMjlzYkdsa1pYSXViMlptYzJWMExua2dQejhnTUM0d0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkyaGxiV0ZEYjJ4c2FXUmxjaTV2Wm1aelpYUXVlaUEvSUMxelkyaGxiV0ZEYjJ4c2FXUmxjaTV2Wm1aelpYUXVlaUE2SURBdU1Dd2dMeThnZWlCcGN5QnZjSEJ2YzJsMFpTQnBiaUJXVWswd0xqQmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmx0Y0c5eWRGTndhR1Z5WlVOdmJHeHBaR1Z5S0c1dlpHVXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOW1abk5sZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpoWkdsMWN6b2djMk5vWlcxaFEyOXNiR2xrWlhJdWNtRmthWFZ6SUQ4L0lEQXVNQ3hjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhzZ1kyOXNiR2xrWlhKeklIMDdYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDazdYRzVjYmlBZ0lDQXZMeUJwYlhCdmNuUWdjM0J5YVc1bklHSnZibVZ6SUdadmNpQmxZV05vSUhOd2NtbHVaeUJpYjI1bElHZHliM1Z3YzF4dUlDQWdJSE5qYUdWdFlVSnZibVZIY205MWNITS9MbVp2Y2tWaFkyZ29LSE5qYUdWdFlVSnZibVZIY205MWNDd2dhVUp2Ym1WSGNtOTFjQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ1kyOXVjM1FnY205dmRFbHVaR2xqWlhNZ1BTQnpZMmhsYldGQ2IyNWxSM0p2ZFhBdVltOXVaWE03WEc0Z0lDQWdJQ0JwWmlBb0lYSnZiM1JKYm1ScFkyVnpLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY205dmRFbHVaR2xqWlhNdVptOXlSV0ZqYUNnb2NtOXZkRWx1WkdWNEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEp2YjNRZ1BTQjBhSEpsWlU1dlpHVnpXM0p2YjNSSmJtUmxlRjA3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdjSEpsY0dGeVpTQnpaWFIwYVc1blhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdkeVlYWnBkSGxFYVhJZ1BTQnVaWGNnVkVoU1JVVXVWbVZqZEc5eU15Z3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2MyTm9aVzFoUW05dVpVZHliM1Z3TG1keVlYWnBkSGxFYVhJcElIdGNiaUFnSUNBZ0lDQWdJQ0JuY21GMmFYUjVSR2x5TG5ObGRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUhOamFHVnRZVUp2Ym1WSGNtOTFjQzVuY21GMmFYUjVSR2x5TG5nZ1B6OGdNQzR3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMk5vWlcxaFFtOXVaVWR5YjNWd0xtZHlZWFpwZEhsRWFYSXVlU0EvUHlBd0xqQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCelkyaGxiV0ZDYjI1bFIzSnZkWEF1WjNKaGRtbDBlVVJwY2k1NklEOC9JREF1TUN4Y2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUdkeVlYWnBkSGxFYVhJdWMyVjBLREF1TUN3Z0xURXVNQ3dnTUM0d0tUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR05sYm5SbGNpQTlJSE5qYUdWdFlVSnZibVZIY205MWNDNWpaVzUwWlhJZ0lUMGdiblZzYkNBL0lIUm9jbVZsVG05a1pYTmJjMk5vWlcxaFFtOXVaVWR5YjNWd0xtTmxiblJsY2wwZ09pQjFibVJsWm1sdVpXUTdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjMlYwZEdsdVp6b2dVR0Z5ZEdsaGJEeFdVazFUY0hKcGJtZENiMjVsU205cGJuUlRaWFIwYVc1bmN6NGdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FHbDBVbUZrYVhWek9pQnpZMmhsYldGQ2IyNWxSM0p2ZFhBdWFHbDBVbUZrYVhWekxGeHVJQ0FnSUNBZ0lDQWdJR1J5WVdkR2IzSmpaVG9nYzJOb1pXMWhRbTl1WlVkeWIzVndMbVJ5WVdkR2IzSmpaU3hjYmlBZ0lDQWdJQ0FnSUNCbmNtRjJhWFI1VUc5M1pYSTZJSE5qYUdWdFlVSnZibVZIY205MWNDNW5jbUYyYVhSNVVHOTNaWElzWEc0Z0lDQWdJQ0FnSUNBZ2MzUnBabVp1WlhOek9pQnpZMmhsYldGQ2IyNWxSM0p2ZFhBdWMzUnBabVpwYm1WemN5eGNiaUFnSUNBZ0lDQWdJQ0JuY21GMmFYUjVSR2x5TEZ4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJQzh2SUhCeVpYQmhjbVVnWTI5c2JHbGtaWEp6WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR052Ykd4cFpHVnlSM0p2ZFhCelJtOXlVM0J5YVc1bklEMGdjMk5vWlcxaFFtOXVaVWR5YjNWd0xtTnZiR3hwWkdWeVIzSnZkWEJ6UHk1dFlYQW9LR2xEYjJ4c2FXUmxja2R5YjNWd0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWjNKdmRYQWdQU0JqYjJ4c2FXUmxja2R5YjNWd2N6OHVXMmxEYjJ4c2FXUmxja2R5YjNWd1hUdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaG5jbTkxY0NBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHQldVazFUY0hKcGJtZENiMjVsVEc5aFpHVnlVR3gxWjJsdU9pQlVhR1VnYzNCeWFXNW5JQ01rZTJsQ2IyNWxSM0p2ZFhCOUlHRjBkR1Z0Y0hSbFpDQjBieUIxYzJVZ1lTQmpiMnhzYVdSbGNrZHliM1Z3SUNSN2FVTnZiR3hwWkdWeVIzSnZkWEI5SUdKMWRDQnViM1FnWm05MWJtUmdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ozSnZkWEE3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUdOeVpXRjBaU0J6Y0hKcGJtY2dZbTl1WlhOY2JpQWdJQ0FnSUNBZ2NtOXZkQzUwY21GMlpYSnpaU2dvYm05a1pTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOb2FXeGtPaUJVU0ZKRlJTNVBZbXBsWTNRelJDQjhJRzUxYkd3Z1BTQnViMlJsTG1Ob2FXeGtjbVZ1V3pCZElEOC9JRzUxYkd3N1hHNWNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQnFiMmx1ZENBOUlIUm9hWE11WDJsdGNHOXlkRXB2YVc1MEtHNXZaR1VzSUdOb2FXeGtMQ0J6WlhSMGFXNW5MQ0JqYjJ4c2FXUmxja2R5YjNWd2MwWnZjbE53Y21sdVp5azdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHTmxiblJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYW05cGJuUXVZMlZ1ZEdWeUlEMGdZMlZ1ZEdWeU8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lHMWhibUZuWlhJdVlXUmtTbTlwYm5Rb2FtOXBiblFwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdMeThnYVc1cGRDQnpjSEpwYm1jZ1ltOXVaWE5jYmlBZ0lDQm5iSFJtTG5OalpXNWxMblZ3WkdGMFpVMWhkSEpwZUZkdmNteGtLQ2s3WEc0Z0lDQWdiV0Z1WVdkbGNpNXpaWFJKYm1sMFUzUmhkR1VvS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJ0WVc1aFoyVnlPMXh1SUNCOVhHNWNiaUFnY0hKcGRtRjBaU0JmYVcxd2IzSjBTbTlwYm5Rb1hHNGdJQ0FnYm05a1pUb2dWRWhTUlVVdVQySnFaV04wTTBRc1hHNGdJQ0FnWTJocGJHUTZJRlJJVWtWRkxrOWlhbVZqZERORUxGeHVJQ0FnSUhObGRIUnBibWMvT2lCUVlYSjBhV0ZzUEZaU1RWTndjbWx1WjBKdmJtVktiMmx1ZEZObGRIUnBibWR6UGl4Y2JpQWdJQ0JqYjJ4c2FXUmxja2R5YjNWd2MwWnZjbE53Y21sdVp6ODZJRlpTVFZOd2NtbHVaMEp2Ym1WRGIyeHNhV1JsY2tkeWIzVndXMTBzWEc0Z0lDazZJRlpTVFZOd2NtbHVaMEp2Ym1WS2IybHVkQ0I3WEc0Z0lDQWdZMjl1YzNRZ2MzQnlhVzVuUW05dVpTQTlJRzVsZHlCV1VrMVRjSEpwYm1kQ2IyNWxTbTlwYm5Rb2JtOWtaU3dnWTJocGJHUXNJSE5sZEhScGJtY3NJR052Ykd4cFpHVnlSM0p2ZFhCelJtOXlVM0J5YVc1bktUdGNibHh1SUNBZ0lHbG1JQ2gwYUdsekxtcHZhVzUwU0dWc2NHVnlVbTl2ZENrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYUdWc2NHVnlJRDBnYm1WM0lGWlNUVk53Y21sdVowSnZibVZLYjJsdWRFaGxiSEJsY2loemNISnBibWRDYjI1bEtUdGNiaUFnSUNBZ0lIUm9hWE11YW05cGJuUklaV3h3WlhKU2IyOTBMbUZrWkNob1pXeHdaWElwTzF4dUlDQWdJQ0FnYUdWc2NHVnlMbkpsYm1SbGNrOXlaR1Z5SUQwZ2RHaHBjeTVxYjJsdWRFaGxiSEJsY2xKdmIzUXVjbVZ1WkdWeVQzSmtaWEk3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlITndjbWx1WjBKdmJtVTdYRzRnSUgxY2JseHVJQ0J3Y21sMllYUmxJRjlwYlhCdmNuUlRjR2hsY21WRGIyeHNhV1JsY2loY2JpQWdJQ0JrWlhOMGFXNWhkR2x2YmpvZ1ZFaFNSVVV1VDJKcVpXTjBNMFFzWEc0Z0lDQWdjR0Z5WVcxek9pQjdYRzRnSUNBZ0lDQnZabVp6WlhRNklGUklVa1ZGTGxabFkzUnZjak03WEc0Z0lDQWdJQ0J5WVdScGRYTTZJRzUxYldKbGNqdGNiaUFnSUNCOUxGeHVJQ0FwT2lCV1VrMVRjSEpwYm1kQ2IyNWxRMjlzYkdsa1pYSWdlMXh1SUNBZ0lHTnZibk4wSUhzZ2IyWm1jMlYwTENCeVlXUnBkWE1nZlNBOUlIQmhjbUZ0Y3p0Y2JseHVJQ0FnSUdOdmJuTjBJSE5vWVhCbElEMGdibVYzSUZaU1RWTndjbWx1WjBKdmJtVkRiMnhzYVdSbGNsTm9ZWEJsVTNCb1pYSmxLSHNnYjJabWMyVjBMQ0J5WVdScGRYTWdmU2s3WEc1Y2JpQWdJQ0JqYjI1emRDQmpiMnhzYVdSbGNpQTlJRzVsZHlCV1VrMVRjSEpwYm1kQ2IyNWxRMjlzYkdsa1pYSW9jMmhoY0dVcE8xeHVYRzRnSUNBZ1pHVnpkR2x1WVhScGIyNHVZV1JrS0dOdmJHeHBaR1Z5S1R0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TG1OdmJHeHBaR1Z5U0dWc2NHVnlVbTl2ZENrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYUdWc2NHVnlJRDBnYm1WM0lGWlNUVk53Y21sdVowSnZibVZEYjJ4c2FXUmxja2hsYkhCbGNpaGpiMnhzYVdSbGNpazdYRzRnSUNBZ0lDQjBhR2x6TG1OdmJHeHBaR1Z5U0dWc2NHVnlVbTl2ZEM1aFpHUW9hR1ZzY0dWeUtUdGNiaUFnSUNBZ0lHaGxiSEJsY2k1eVpXNWtaWEpQY21SbGNpQTlJSFJvYVhNdVkyOXNiR2xrWlhKSVpXeHdaWEpTYjI5MExuSmxibVJsY2s5eVpHVnlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCamIyeHNhV1JsY2p0Y2JpQWdmVnh1WEc0Z0lIQnlhWFpoZEdVZ1gybHRjRzl5ZEVOaGNITjFiR1ZEYjJ4c2FXUmxjaWhjYmlBZ0lDQmtaWE4wYVc1aGRHbHZiam9nVkVoU1JVVXVUMkpxWldOME0wUXNYRzRnSUNBZ2NHRnlZVzF6T2lCN1hHNGdJQ0FnSUNCdlptWnpaWFE2SUZSSVVrVkZMbFpsWTNSdmNqTTdYRzRnSUNBZ0lDQnlZV1JwZFhNNklHNTFiV0psY2p0Y2JpQWdJQ0FnSUhSaGFXdzZJRlJJVWtWRkxsWmxZM1J2Y2pNN1hHNGdJQ0FnZlN4Y2JpQWdLVG9nVmxKTlUzQnlhVzVuUW05dVpVTnZiR3hwWkdWeUlIdGNiaUFnSUNCamIyNXpkQ0I3SUc5bVpuTmxkQ3dnY21Ga2FYVnpMQ0IwWVdsc0lIMGdQU0J3WVhKaGJYTTdYRzVjYmlBZ0lDQmpiMjV6ZENCemFHRndaU0E5SUc1bGR5QldVazFUY0hKcGJtZENiMjVsUTI5c2JHbGtaWEpUYUdGd1pVTmhjSE4xYkdVb2V5QnZabVp6WlhRc0lISmhaR2wxY3l3Z2RHRnBiQ0I5S1R0Y2JseHVJQ0FnSUdOdmJuTjBJR052Ykd4cFpHVnlJRDBnYm1WM0lGWlNUVk53Y21sdVowSnZibVZEYjJ4c2FXUmxjaWh6YUdGd1pTazdYRzVjYmlBZ0lDQmtaWE4wYVc1aGRHbHZiaTVoWkdRb1kyOXNiR2xrWlhJcE8xeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdVkyOXNiR2xrWlhKSVpXeHdaWEpTYjI5MEtTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCb1pXeHdaWElnUFNCdVpYY2dWbEpOVTNCeWFXNW5RbTl1WlVOdmJHeHBaR1Z5U0dWc2NHVnlLR052Ykd4cFpHVnlLVHRjYmlBZ0lDQWdJSFJvYVhNdVkyOXNiR2xrWlhKSVpXeHdaWEpTYjI5MExtRmtaQ2hvWld4d1pYSXBPMXh1SUNBZ0lDQWdhR1ZzY0dWeUxuSmxibVJsY2s5eVpHVnlJRDBnZEdocGN5NWpiMnhzYVdSbGNraGxiSEJsY2xKdmIzUXVjbVZ1WkdWeVQzSmtaWEk3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHTnZiR3hwWkdWeU8xeHVJQ0I5WEc1OVhHNGlYU3dpYm1GdFpYTWlPbHNpWDNZelFTSXNJbDkyTTBJaUxDSmZiV0YwUVNKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenRCUVVGQk96dEJRVVZITzAxQlEyMUNMREJDUVVFd1FpeERRVUZCTzBGQmMwSXZRenM3UVVOMFFrUXNUVUZCVFVFc1RVRkJTU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMEZCUTJwRExFMUJRVTFETEUxQlFVa3NSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dEJRVVV6UWl4TlFVRlBMR2xEUVVGclF5eFRRVUZSTERCQ1FVRXdRaXhEUVVGQk8wRkJReTlGTEVsQlFVRXNTVUZCVnl4SlFVRkpMRWRCUVVFN1FVRkRZaXhSUVVGQkxFOUJRVThzVTBGQlV5eERRVUZETzB0QlEyeENPMEZCYVVKRUxFbEJRVUVzVjBGQlFTeERRVUZ0UWl4TlFVRXdSU3hGUVVGQk96dEJRVU16Uml4UlFVRkJMRXRCUVVzc1JVRkJSU3hEUVVGRE8xRkJSVklzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkJMRVZCUVVFc1IwRkJRU3hOUVVGTkxFdEJRVTRzU1VGQlFTeEpRVUZCTEUxQlFVMHNTMEZCVGl4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeE5RVUZOTEVOQlFVVXNUVUZCVFN4dFEwRkJTU3hKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU5xUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEUxQlFVMHNTMEZCVGl4SlFVRkJMRWxCUVVFc1RVRkJUU3hMUVVGT0xFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRTFCUVUwc1EwRkJSU3hKUVVGSkxHMURRVUZKTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUXpkRUxGRkJRVUVzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkJMRVZCUVVFc1IwRkJRU3hOUVVGTkxFdEJRVUVzU1VGQlFTeEpRVUZPTEUxQlFVMHNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlRpeE5RVUZOTEVOQlFVVXNUVUZCVFN4TlFVRkJMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkpMRWRCUVVjc1EwRkJRenRMUVVOeVF6dEJRVVZOTEVsQlFVRXNhMEpCUVd0Q0xFTkJRM1pDTEdOQlFUWkNMRVZCUXpkQ0xHTkJRVFpDTEVWQlF6ZENMRmxCUVc5Q0xFVkJRM0JDTEUxQlFYRkNMRVZCUVVFN1FVRkZja0lzVVVGQlFVUXNUVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNXVUZCV1N4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8wRkJRM0JFTEZGQlFVRkRMRTFCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRmxCUVZrc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dEJRVU5zUkN4UlFVRkJRU3hOUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZEUkN4TlFVRkpMRU5CUVVNc1EwRkJRenRCUVVObUxGRkJRVUVzVFVGQlRTeGxRVUZsTEVkQlFVZERMRTFCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dEJRVVY0UXl4UlFVRkJMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRSQ3hOUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU4wUXl4TlFVRk5MRWRCUVVjc1IwRkJSME1zVFVGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRSUVVVM1FpeEpRVUZKTEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUVVVc1EwRkhaanRoUVVGTkxFbEJRVWtzWlVGQlpTeEpRVUZKTEVkQlFVY3NSVUZCUlRzN1FVRkZha01zV1VGQlFTeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRRU3hOUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU5zUWl4VFFVRkJPMEZCUVUwc1lVRkJRVHM3V1VGRlRFRXNUVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhIUVVGSExFZEJRVWNzWlVGQlpTeERRVUZETEVOQlFVTTdRVUZETTBNc1dVRkJRU3hOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZEUVN4TlFVRkpMRU5CUVVNc1EwRkJRenRCUVVOc1FpeFRRVUZCTzBGQlJVUXNVVUZCUVN4TlFVRk5MRTFCUVUwc1IwRkJSeXhaUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0UlFVTXhReXhOUVVGTkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1RVRkJUU3hEUVVGRE8xRkJRekZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJRenRCUVVOdVFpeFJRVUZCTEU5QlFVOHNVVUZCVVN4RFFVRkRPMHRCUTJwQ08wRkJRMFk3TzBGRE9VUkxMRTFCUVU4c1owTkJRV2xETEZOQlFWRXNNRUpCUVRCQ0xFTkJRVUU3UVVGRE9VVXNTVUZCUVN4SlFVRlhMRWxCUVVrc1IwRkJRVHRCUVVOaUxGRkJRVUVzVDBGQlR5eFJRVUZSTEVOQlFVTTdTMEZEYWtJN1FVRlpSQ3hKUVVGQkxGZEJRVUVzUTBGQmJVSXNUVUZCYjBRc1JVRkJRVHM3UVVGRGNrVXNVVUZCUVN4TFFVRkxMRVZCUVVVc1EwRkJRenRSUVVWU0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUVN4RlFVRkJMRWRCUVVFc1RVRkJUU3hMUVVGT0xFbEJRVUVzU1VGQlFTeE5RVUZOTEV0QlFVNHNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzVFVGQlRTeERRVUZGTEUxQlFVMHNiVU5CUVVrc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGFrVXNVVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEUxQlFVMHNTMEZCUVN4SlFVRkJMRWxCUVU0c1RVRkJUU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRk9MRTFCUVUwc1EwRkJSU3hOUVVGTkxFMUJRVUVzU1VGQlFTeEpRVUZCTEVWQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVWtzUjBGQlJ5eERRVUZETzB0QlEzSkRPMEZCUlUwc1NVRkJRU3hyUWtGQmEwSXNRMEZEZGtJc1kwRkJOa0lzUlVGRE4wSXNZMEZCTmtJc1JVRkROMElzV1VGQmIwSXNSVUZEY0VJc1RVRkJjVUlzUlVGQlFUdEJRVVZ5UWl4UlFVRkJMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRmxCUVZrc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dFJRVU4wUkN4TlFVRk5MRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPMEZCUTNCRExGRkJRVUVzVFVGQlRTeE5RVUZOTEVkQlFVY3NXVUZCV1N4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU03VVVGRE1VTXNUVUZCVFN4UlFVRlJMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEUxQlFVMHNRMEZCUXp0UlFVTXhReXhOUVVGTkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTTdRVUZEYmtJc1VVRkJRU3hQUVVGUExGRkJRVkVzUTBGQlF6dExRVU5xUWp0QlFVTkdPenRCUTJ4RFJDeE5RVUZOUkN4TlFVRkpMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdRVUZGY0VJc1RVRkJRU3hyUTBGQmJVTXNVMEZCVVN4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGQk8wRkJWVEZGTEVsQlFVRXNWMEZCUVN4RFFVRnRRaXhMUVVGM1F5eEZRVUZCTzBGQlEzcEVMRkZCUVVFc1MwRkJTeXhGUVVGRkxFTkJRVU03VVVGV1NDeEpRVUZWTEVOQlFVRXNWVUZCUVN4SFFVRkhMRWRCUVVjc1EwRkJRenRSUVV0b1FpeEpRVUZqTEVOQlFVRXNZMEZCUVN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOV0xGRkJRVUVzU1VGQlFTeERRVUZCTEdOQlFXTXNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dEJRVU55UXl4UlFVRkJMRWxCUVVFc1EwRkJRU3haUVVGWkxFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1FVRkxiRVFzVVVGQlFTeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJRenRCUVVWd1FpeFJRVUZCTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NXVUZCV1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzQkZMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRCUVVVM1F5eFJRVUZCTEVsQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzSkZMRkZCUVVFc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRkZMMElzU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXp0TFFVTm1PMGxCUlUwc1RVRkJUU3hIUVVGQk8xRkJRMWdzU1VGQlNTeHZRa0ZCYjBJc1IwRkJSeXhMUVVGTExFTkJRVU03VVVGRmFrTXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJRenRCUVVOd1JDeFJRVUZCTEVsQlFVa3NTVUZCU1N4RFFVRkRMR05CUVdNc1MwRkJTeXhOUVVGTkxFVkJRVVU3UVVGRGJFTXNXVUZCUVN4SlFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExFMUJRVTBzUTBGQlF6dFpRVU0zUWl4dlFrRkJiMElzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZETjBJc1UwRkJRVHRCUVVWRUxGRkJRVUVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVN1dVRkRia1FzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0WlFVTTNReXh2UWtGQmIwSXNSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkROMElzVTBGQlFUdEJRVVZFTEZGQlFVRXNUVUZCVFN4SlFVRkpMRWRCUVVkQkxFMUJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8xRkJRM1pGTEVsQlFVa3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhMUVVGTExFVkJRVVU3UVVGRGNrUXNXVUZCUVN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTTNRaXh2UWtGQmIwSXNSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkROMElzVTBGQlFUdEJRVVZFTEZGQlFVRXNTVUZCU1N4dlFrRkJiMElzUlVGQlJUdFpRVU40UWl4SlFVRkpMRU5CUVVNc1kwRkJZeXhGUVVGRkxFTkJRVU03UVVGRGRrSXNVMEZCUVR0TFFVTkdPMGxCUlU4c1kwRkJZeXhIUVVGQk8wRkJRM0JDTEZGQlFVRkJMRTFCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdVVUZEZEVRc1RVRkJUU3hEUVVGRExFZEJRVWRCTEUxQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETzFGQlJUbERMRXRCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3V1VGRE5VSXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeEpRVUZKTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNN1dVRkZMMElzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRGVrUXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUTJoRkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU01UkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRha1VzVTBGQlFUdFJRVVZFTEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1dVRkRNMElzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hKUVVGSkxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTTdXVUZETDBJc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1JVRkJSU3hIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkROVVFzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE5VUXNVMEZCUVR0QlFVVkVMRkZCUVVFc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUTBFc1RVRkJTU3hEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRRU3hOUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZIUVN4TlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSFFTeE5RVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhRU3hOUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTXZSU3hSUVVGQkxFMUJRVTBzUjBGQlJ5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRMEVzVFVGQlNTeERRVUZETEVOQlFVTXNSVUZCUlVFc1RVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlJYaERMRkZCUVVFc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTndRaXhSUVVGQkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRiRUlzVVVGQlFTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFVkJRVVVzU1VGQlNTeERRVUZETEdOQlFXTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03VVVGRE1VVXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJSWEJHTEZGQlFVRXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhYUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETzB0QlEyeERPMGxCUlU4c1YwRkJWeXhIUVVGQk8xRkJRMnBDTEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1dVRkRNMElzVFVGQlRTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dEJRVVY0UWl4WlFVRkJMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEzQkRMRmxCUVVFc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUlVGQlJTeEhRVUZITEVOQlFVTXNSVUZCUlN4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGNFUXNVMEZCUVR0UlFVVkVMRXRCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3V1VGRE0wSXNUVUZCVFN4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0QlFVVjRRaXhaUVVGQkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVWQlFVVXNSMEZCUnl4RFFVRkRMRVZCUVVVc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEzQkVMRmxCUVVFc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUjBGQlJ5eEhRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGRrUXNVMEZCUVR0QlFVVkVMRkZCUVVFc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRPMHRCUTNCRE8wRkJRMFk3TzBGRGJrZFpMRTFCUVVFc2FVTkJRV3RETEZOQlFWRXNTMEZCU3l4RFFVRkRMR05CUVdNc1EwRkJRVHRCUVZONlJTeEpRVUZCTEZkQlFVRXNRMEZCYlVJc1MwRkJkVU1zUlVGQlFUdEJRVU40UkN4UlFVRkJMRXRCUVVzc1JVRkJSU3hEUVVGRE8xRkJWRWdzU1VGQlZTeERRVUZCTEZWQlFVRXNSMEZCUnl4SFFVRkhMRU5CUVVNN1VVRkxhRUlzU1VGQll5eERRVUZCTEdOQlFVRXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRWaXhSUVVGQkxFbEJRVUVzUTBGQlFTeGpRVUZqTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGTGNFUXNVVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF6dFJRVVZ3UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEdWQlFXVXNRMEZCUXl4SlFVRkpMRmxCUVZrc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRek5GTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0QlFVVTNReXhSUVVGQkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1pVRkJaU3hEUVVGRExFbEJRVWtzVjBGQlZ5eERRVUZETEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU40UlN4UlFVRkJMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMUZCUlM5Q0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXp0UlFVTnVRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTTdTMEZEWmp0SlFVVk5MRTFCUVUwc1IwRkJRVHRSUVVOWUxFbEJRVWtzYjBKQlFXOUNMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJSV3BETEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNN1FVRkRjRVFzVVVGQlFTeEpRVUZKTEVsQlFVa3NRMEZCUXl4alFVRmpMRXRCUVVzc1RVRkJUU3hGUVVGRk8wRkJRMnhETEZsQlFVRXNTVUZCU1N4RFFVRkRMR05CUVdNc1IwRkJSeXhOUVVGTkxFTkJRVU03V1VGRE4wSXNiMEpCUVc5Q0xFZEJRVWNzU1VGQlNTeERRVUZETzBGQlF6ZENMRk5CUVVFN1FVRkZSQ3hSUVVGQkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZPMWxCUTI1RUxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdXVUZETjBNc2IwSkJRVzlDTEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCUXpkQ0xGTkJRVUU3UVVGRlJDeFJRVUZCTEVsQlFVa3NiMEpCUVc5Q0xFVkJRVVU3V1VGRGVFSXNTVUZCU1N4RFFVRkRMR05CUVdNc1JVRkJSU3hEUVVGRE8wRkJRM1pDTEZOQlFVRTdTMEZEUmp0SlFVVlBMR05CUVdNc1IwRkJRVHRSUVVOd1FpeExRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMWxCUXpOQ0xFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1NVRkJTU3hKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETzFsQlJTOUNMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdXVUZEZGtRc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1JVRkJSU3hIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkROVVFzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hIUVVGSExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE4wUXNVMEZCUVR0QlFVVkVMRkZCUVVFc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZMRWxCUVVrc1EwRkJReXhqUVVGakxFVkJRVVVzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPMUZCUXpGRkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVVndSaXhSUVVGQkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJRenRMUVVOc1F6dEpRVVZQTEZkQlFWY3NSMEZCUVR0UlFVTnFRaXhMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTzFsQlF6TkNMRTFCUVUwc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1FVRkZlRUlzV1VGQlFTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOd1F5eFpRVUZCTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRVZCUVVVc1IwRkJSeXhEUVVGRExFVkJRVVVzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTI1RUxGbEJRVUVzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNSVUZCUlN4SFFVRkhMRU5CUVVNc1JVRkJSU3hGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEY2tRc1UwRkJRVHRCUVVWRUxGRkJRVUVzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRE8wdEJRM0JETzBGQlEwWTdPMEZEYWtWRUxFMUJRVTFCTEUxQlFVa3NSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dEJRVVZ3UWl4TlFVRkJMREpDUVVFMFFpeFRRVUZSTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVFN1FVRkxNVVFzU1VGQlFTeFhRVUZCTEVOQlFXMUNMRkZCUVN0Q0xFVkJRVUU3UVVGRGFFUXNVVUZCUVN4TFFVRkxMRVZCUVVVc1EwRkJRenRCUVVOU0xGRkJRVUVzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhIUVVGSExFdEJRVXNzUTBGQlF6dEJRVVU1UWl4UlFVRkJMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZETzBGQlJYcENMRkZCUVVFc1NVRkJTU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NXVUZCV1N4blEwRkJaME1zUlVGQlJUdEJRVU51UlN4WlFVRkJMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeHBRMEZCYVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUXpkRkxGTkJRVUU3UVVGQlRTeGhRVUZCTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExGbEJRVmtzYVVOQlFXbERMRVZCUVVVN1FVRkRNMFVzV1VGQlFTeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRWxCUVVrc2EwTkJRV3RETEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU01UlN4VFFVRkJPMEZCUVUwc1lVRkJRVHRCUVVOTUxGbEJRVUVzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl4dFJVRkJiVVVzUTBGQlF5eERRVUZETzBGQlEzUkdMRk5CUVVFN1FVRkZSQ3hSUVVGQkxFMUJRVTBzVVVGQlVTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMR2xDUVVGcFFpeERRVUZETzBGQlF6TkRMRmxCUVVFc1MwRkJTeXhGUVVGRkxGRkJRVkU3UVVGRFppeFpRVUZCTEZOQlFWTXNSVUZCUlN4TFFVRkxPMEZCUTJoQ0xGbEJRVUVzVlVGQlZTeEZRVUZGTEV0QlFVczdRVUZEYkVJc1UwRkJRU3hEUVVGRExFTkJRVU03UVVGRlNDeFJRVUZCTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRE9VUXNVVUZCUVN4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0TFFVTjBRanRKUVVWTkxFOUJRVThzUjBGQlFUdEJRVU5hTEZGQlFVRXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dExRVU14UWp0QlFVVk5MRWxCUVVFc2FVSkJRV2xDTEVOQlFVTXNTMEZCWXl4RlFVRkJPMUZCUTNKRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUlRkRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdRVUZGTlVNc1VVRkJRU3hOUVVGTkxHMUNRVUZ0UWl4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETzBGQlEycEVMRkZCUVVFc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eFZRVUZWTEVkQlFVZEJMRTFCUVVrN1FVRkROMElzWVVGQlFTeEhRVUZITEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdZVUZETTBVc1RVRkJUU3hGUVVGRkxFTkJRVU03UVVGRldpeFJRVUZCTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU03UVVGRmVFSXNVVUZCUVN4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1MwRkRhRU03UVVGRFJqczdRVU4wUkZrc1RVRkJRU3gzUWtGQmVVSXNVMEZCVVN4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGQk8wRkJVMmhGTEVsQlFVRXNWMEZCUVN4RFFVRnRRaXhWUVVFNFFpeEZRVUZCTzBGQlF5OURMRkZCUVVFc1MwRkJTeXhGUVVGRkxFTkJRVU03VVVGVVNDeEpRVUZWTEVOQlFVRXNWVUZCUVN4SFFVRkhMRWRCUVVjc1EwRkJRenRSUVV0b1FpeEpRVUZqTEVOQlFVRXNZMEZCUVN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOV0xGRkJRVUVzU1VGQlFTeERRVUZCTEZsQlFWa3NSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dEJRVXRzUkN4UlFVRkJMRWxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzVlVGQlZTeERRVUZETzBGQlJUbENMRkZCUVVFc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3haUVVGWkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRjRVVzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlJUZERMRkZCUVVFc1NVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3hYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRja1VzVVVGQlFTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFJRVVV2UWl4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU03VVVGRGJrSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE8wdEJRMlk3U1VGRlRTeE5RVUZOTEVkQlFVRTdVVUZEV0N4SlFVRkpMRzlDUVVGdlFpeEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVVnFReXhSUVVGQkxFMUJRVTBzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRPMEZCUTNKRkxGRkJRVUVzU1VGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4TFFVRkxMRTFCUVUwc1JVRkJSVHRCUVVOc1F5eFpRVUZCTEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1RVRkJUU3hEUVVGRE8xbEJRemRDTEc5Q1FVRnZRaXhIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU0zUWl4VFFVRkJPMEZCUlVRc1VVRkJRU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXhGUVVGRk8xbEJRM3BGTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zUTBGQlF6dFpRVU51UlN4dlFrRkJiMElzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZETjBJc1UwRkJRVHRCUVVWRUxGRkJRVUVzU1VGQlNTeHZRa0ZCYjBJc1JVRkJSVHRaUVVONFFpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1FVRkRka0lzVTBGQlFUdExRVU5HTzBsQlJVOHNZMEZCWXl4SFFVRkJPMUZCUTNCQ0xFdEJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdXVUZETTBJc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NTVUZCU1N4SlFVRkpMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU03V1VGRkwwSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dFpRVU4yUkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTTFSQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNM1JDeFRRVUZCTzBGQlJVUXNVVUZCUVN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVWQlFVVXNTVUZCU1N4RFFVRkRMR05CUVdNc1JVRkJSU3hKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdVVUZETVVVc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlJUbEZMRkZCUVVFc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYkVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkZlRVlzVVVGQlFTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU03UzBGRGJFTTdTVUZGVHl4WFFVRlhMRWRCUVVFN1VVRkRha0lzUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0WlFVTXpRaXhOUVVGTkxFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8wRkJSWGhDTEZsQlFVRXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGNFTXNXVUZCUVN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hGUVVGRkxFZEJRVWNzUTBGQlF5eEZRVUZGTEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOdVJDeFpRVUZCTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRVZCUVVVc1IwRkJSeXhEUVVGRExFVkJRVVVzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTNKRUxGTkJRVUU3VVVGRFJDeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUlc1RExGRkJRVUVzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRE8wdEJRM0JETzBGQlEwWTdPMEZEZUVWRUxFMUJRVTFCTEUxQlFVa3NSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dEJRVVZ3UWl4TlFVRkJMSGRDUVVGNVFpeFRRVUZSTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVFN1FVRkxka1FzU1VGQlFTeFhRVUZCTEVOQlFXMUNMRlZCUVRoQ0xFVkJRVUU3UVVGREwwTXNVVUZCUVN4TFFVRkxMRVZCUVVVc1EwRkJRenRCUVVOU0xGRkJRVUVzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhIUVVGSExFdEJRVXNzUTBGQlF6dEJRVVU1UWl4UlFVRkJMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzVlVGQlZTeERRVUZETzFGQlJUZENMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeDNRa0ZCZDBJc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdRVUZGTDBRc1VVRkJRU3hOUVVGTkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF6dEJRVU16UXl4WlFVRkJMRXRCUVVzc1JVRkJSU3hSUVVGUk8wRkJRMllzV1VGQlFTeFRRVUZUTEVWQlFVVXNTMEZCU3p0QlFVTm9RaXhaUVVGQkxGVkJRVlVzUlVGQlJTeExRVUZMTzBGQlEyeENMRk5CUVVFc1EwRkJReXhEUVVGRE8wRkJSVWdzVVVGQlFTeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8wRkJRemxFTEZGQlFVRXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdTMEZEZEVJN1NVRkZUU3hQUVVGUExFZEJRVUU3UVVGRFdpeFJRVUZCTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UzBGRE1VSTdRVUZGVFN4SlFVRkJMR2xDUVVGcFFpeERRVUZETEV0QlFXTXNSVUZCUVR0UlFVTnlReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkZjRVFzVVVGQlFTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRCUVVWdVJDeFJRVUZCTEUxQlFVMHNiVUpCUVcxQ0xFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNN1FVRkRha1FzVVVGQlFTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRlZCUVZVc1IwRkJSMEVzVFVGQlNUdEJRVU0zUWl4aFFVRkJMRWRCUVVjc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3h0UWtGQmJVSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3h0UWtGQmJVSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRoUVVNelJTeE5RVUZOTEVWQlFVVXNRMEZCUXp0QlFVVmFMRkZCUVVFc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXp0QlFVVjRRaXhSUVVGQkxFdEJRVXNzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dExRVU5vUXp0QlFVTkdPenRCUXpWRFJEczdRVUZGUnp0QlFVTlZMRTFCUVVFc2NVSkJRWE5DTEZOQlFWRXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJRVHRCUVUxMlJDeEpRVUZCTEZkQlFVRXNRMEZCYlVJc1MwRkJhVU1zUlVGQlFUdEJRVU5zUkN4UlFVRkJMRXRCUVVzc1JVRkJSU3hEUVVGRE8wRkJSVklzVVVGQlFTeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJRenRMUVVOd1FqdEJRVU5HT3p0QlEyWkVMRTFCUVUxRkxFOUJRVXNzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRCUVVWc1F6czdPenM3UVVGTFJ6dEJRVU5ITEZOQlFWVXNaMEpCUVdkQ0xFTkJRVEJDTEUxQlFWTXNSVUZCUVR0SlFVTnFSU3hKUVVGTExFMUJRV01zUTBGQlF5eE5RVUZOTEVWQlFVVTdVVUZETVVJc1RVRkJUU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETzBGQlEycENMRXRCUVVFN1FVRkJUU3hUUVVGQk8xRkJRMG9zVFVGQll5eERRVUZETEZWQlFWVXNRMEZCUTBFc1QwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTJoRUxFdEJRVUU3UVVGRlJDeEpRVUZCTEU5QlFVOHNUVUZCVFN4RFFVRkRPMEZCUTJoQ096dE5RMlpoTEcxQ1FVRnRRaXhEUVVGQk8wRkJjMEk1UWpzN096dEJRVWxITzBGQlEwZ3NTVUZCUVN4SlFVRlhMRTlCUVU4c1IwRkJRVHRSUVVOb1FpeEpRVUZKTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUlVGQlJUdFpRVU0zUWl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRja01zV1VGQlFTeG5Ra0ZCWjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdRVUZEY2tNc1dVRkJRU3hKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRMjVETEZOQlFVRTdVVUZGUkN4UFFVRlBMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU03UzBGRE0wSTdRVUZGUkN4SlFVRkJMRmRCUVVFc1EwRkJiVUlzVFVGQmNVSXNSVUZCUVR0QlFTOUNlRU03TzBGQlJVYzdRVUZEWXl4UlFVRkJMRWxCUVVFc1EwRkJRU3hoUVVGaExFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1FVRkZja1E3T3p0QlFVZEhPMUZCUTBzc1NVRkJiMElzUTBGQlFTeHZRa0ZCUVN4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVhWQ2JFTXNVVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF6dEJRVVZ5UWl4UlFVRkJMRTFCUVUwc1QwRkJUeXhIUVVFeVFqdFpRVU4wUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlV5eEZRVUZGTEUxQlFVMHNTMEZCU1R0QlFVTTVRaXhuUWtGQlFTeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFZEJRVWNzU1VGQlNTeERRVUZETzBGQlEycERMR2RDUVVGQkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkZia0lzWjBKQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1lVRkRZanRUUVVOR0xFTkJRVU03UVVGRlJpeFJRVUZCTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRPMEZCUTNwRExGRkJRVUVzVFVGQlRTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMHRCUTNaRU8wbEJSVTBzVFVGQlRTeEhRVUZCTzFGQlExZ3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRE8wdEJReTlETzBGQlEwWTdPMEZEY2tSRU8wRkJRMEU3UVVGRFFUdEJRVVZCTEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1FVRkZOME03UVVGRFFTeE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dEJRVU5xUXl4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0QlFVTnFReXhOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRCUVVWcVF6czdRVUZGUnp0QlFVTklMRTFCUVUwc2JVSkJRVzFDTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRmFFUTdPMEZCUlVjN1FVRkRTQ3hOUVVGTkxHOUNRVUZ2UWl4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETzBGQlJXcEVPenRCUVVWSE8wRkJRMGdzVFVGQlRTeFRRVUZUTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRmRFTXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTTdRVUZEZEVNc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1FVRkRiRU1zVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRmJFTTdPenRCUVVkSE8wMUJRMVVzYTBKQlFXdENMRU5CUVVFN1FVRnJSRGRDTEVsQlFVRXNTVUZCVnl4TlFVRk5MRWRCUVVFN1VVRkRaaXhQUVVGUExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTTdTMEZEY2tJN1NVRkRSQ3hKUVVGWExFMUJRVTBzUTBGQlF5eE5RVUUyUWl4RlFVRkJPenM3VVVGRk4wTXNTVUZCU1N4RFFVRkJMRVZCUVVFc1IwRkJRU3hKUVVGSkxFTkJRVU1zVDBGQlR5d3dRMEZCUlN4UlFVRlJMRU5CUVVNc2FVSkJRV2xDTEVWQlFVVTdXVUZETTBNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNhVUpCUVhsRExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTTdRVUZETVVVc1dVRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMR2xDUVVGcFFpeERRVUZETzBGQlEyaEVMRk5CUVVFN08wRkJSMFFzVVVGQlFTeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTFCUVUwc1EwRkJRenM3VVVGSGRFSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRk8xbEJRMmhDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSVHRCUVVNMVF5eG5Ra0ZCUVN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhKUVVGSkxHMUNRVUZ0UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdRVUZETjBZc1lVRkJRVHRCUVVOR0xGTkJRVUU3UzBGRFJqdEJRV2RDUkN4SlFVRkJMRWxCUVZjc2VVSkJRWGxDTEVkQlFVRTdVVUZEYkVNc1QwRkJUeXhKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRU5CUVVNN1MwRkRlRU03UVVGRlJEczdPMEZCUjBjN1FVRkRTQ3hKUVVGQkxFbEJRVmtzYTBKQlFXdENMRWRCUVVFN1FVRkROVUlzVVVGQlFTeFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1IwRkJSeXhuUWtGQlowSXNRMEZCUXp0TFFVTXpSVHRCUVVWRU96czdPenM3TzBGQlQwYzdTVUZEU0N4WFFVTkZMRU5CUVVFc1NVRkJiMElzUlVGRGNFSXNTMEZCTkVJc1JVRkROVUlzVjBGQlowUXNSVUZCUlN4RlFVTnNSQ3hwUWtGQkswTXNSVUZCUlN4RlFVRkJPenRCUVhaR2JrUTdPMEZCUlVjN1FVRkRTeXhSUVVGQkxFbEJRVUVzUTBGQlFTeFpRVUZaTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRk0wTTdPMEZCUlVjN1FVRkRTeXhSUVVGQkxFbEJRVUVzUTBGQlFTeFRRVUZUTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRmVFTTdPMEZCUlVjN1FVRkRTeXhSUVVGQkxFbEJRVUVzUTBGQlFTeFRRVUZUTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRmVFTTdPenM3TzBGQlMwYzdVVUZEU3l4SlFVRnhRaXhEUVVGQkxIRkNRVUZCTEVkQlFVY3NSMEZCUnl4RFFVRkRPMEZCUlhCRE96czdRVUZIUnp0UlFVTkxMRWxCUVU4c1EwRkJRU3hQUVVGQkxFZEJRVEJDTEVsQlFVa3NRMEZCUXp0QlFYTkNPVU03TzBGQlJVYzdRVUZEU3l4UlFVRkJMRWxCUVVFc1EwRkJRU3h0UWtGQmJVSXNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dEJRVVZzUkRzN1FVRkZSenRCUVVOTExGRkJRVUVzU1VGQlFTeERRVUZCTEhGQ1FVRnhRaXhIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRPMEZCUlhaRU96dEJRVVZITzBGQlEwc3NVVUZCUVN4SlFVRkJMRU5CUVVFc01FSkJRVEJDTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVFeVFuWkVMRkZCUVVFc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZEYWtJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhMUVVGTExFTkJRVU03UVVGRmJrTXNVVUZCUVN4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6dFJRVVZ1UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSE8wRkJRMlFzV1VGQlFTeFRRVUZUTEVWQlFVVXNRMEZCUVN4RlFVRkJMRWRCUVVFc1VVRkJVU3hEUVVGRExGTkJRVk1zYlVOQlFVa3NSMEZCUnp0QlFVTndReXhaUVVGQkxGTkJRVk1zUlVGQlJTeERRVUZCTEVWQlFVRXNSMEZCUVN4UlFVRlJMRU5CUVVNc1UwRkJVeXh0UTBGQlNTeEhRVUZITzBGQlEzQkRMRmxCUVVFc1dVRkJXU3hGUVVGRkxFTkJRVUVzUlVGQlFTeEhRVUZCTEZGQlFWRXNRMEZCUXl4WlFVRlpMRzFEUVVGSkxFZEJRVWM3V1VGRE1VTXNWVUZCVlN4RlFVRkZMRTFCUVVFc1EwRkJRU3hGUVVGQkxFZEJRVUVzVVVGQlVTeERRVUZETEZWQlFWVXNUVUZCUVN4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1EwRkJSU3hMUVVGTExFVkJRVVVzVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlNTeEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NRMEZCUXp0QlFVTTNSU3haUVVGQkxGTkJRVk1zUlVGQlJTeERRVUZCTEVWQlFVRXNSMEZCUVN4UlFVRlJMRU5CUVVNc1UwRkJVeXh0UTBGQlNTeEhRVUZITzFOQlEzSkRMRU5CUVVNN1FVRkZSaXhSUVVGQkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NZMEZCWXl4RFFVRkRPMHRCUTNSRE8wRkJSVVE3T3p0QlFVZEhPMGxCUTBrc1dVRkJXU3hIUVVGQk96dFJRVVZxUWl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdVVUZEYUVRc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPenRSUVVkMFJDeEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1dVRkRaQ3hKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1FVRkRNMFFzVTBGQlFUdEJRVUZOTEdGQlFVRTdPenRCUVVkTUxGbEJRVUVzU1VGQlNTeERRVUZETERCQ1FVRXdRaXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExGTkJRVk1zUlVGQlJTeERRVUZETEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVNelJpeFRRVUZCT3p0UlFVZEVMRTFCUVUwc2JVSkJRVzFDTEVkQlFVY3NTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUTJoRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eERRVUZETEVOQlFVTXNXVUZCV1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTTdVVUZEYkVnc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE96dEJRVWQyUXl4UlFVRkJMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRPMHRCUTJ4Rk8wRkJSVVE3T3p0QlFVZEhPMGxCUTBrc1MwRkJTeXhIUVVGQk8xRkJRMVlzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGRE96dEJRVWQwUkN4UlFVRkJMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVTTdRVUZEZWtJc1VVRkJRU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenM3VVVGSGJFWXNUVUZCVFN4dFFrRkJiVUlzUjBGQlJ5eEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVVUZEYUVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETERCQ1FVRXdRaXhEUVVGRExFTkJRVU1zUTBGQlF5eFpRVUZaTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF6dFJRVU5zU0N4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1MwRkRlRU03UVVGRlJEczdPenM3UVVGTFJ6dEJRVU5KTEVsQlFVRXNUVUZCVFN4RFFVRkRMRXRCUVdFc1JVRkJRVHRSUVVONlFpeEpRVUZKTEV0QlFVc3NTVUZCU1N4RFFVRkRPMWxCUVVVc1QwRkJUenM3VVVGSGRrSXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeEZRVUZGTEVOQlFVTTdPMUZCUjJwRExHMUNRVUZ0UWl4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03VVVGRGFrVXNTVUZCU1N4dFFrRkJiVUlzUjBGQlJ5eEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVVUZET1VRc2IwSkJRVzlDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTXNXVUZCV1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTTdVVUZEYWtZc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4TlFVRk5MRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF6czdRVUZITlVVc1VVRkJRU3hOUVVGTkxIVkNRVUYxUWl4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03TzFGQlIyeEhMRTFCUVUwc2JVSkJRVzFDTEVkQlFVY3NTVUZCU1R0QlFVTTNRaXhoUVVGQkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRPMEZCUTNCQ0xHRkJRVUVzV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF6dGhRVU4wUXl4WlFVRlpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTTdZVUZEY2tNc1IwRkJSeXhEUVVGRExHOUNRVUZ2UWl4RFFVRkRPMEZCUTNwQ0xHRkJRVUVzVTBGQlV5eEZRVUZGTEVOQlFVTTdPMUZCUjJZc1RVRkJUU3hyUWtGQmEwSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1pVRkJaU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU03VVVGRk9VY3NUVUZCVFN4dFFrRkJiVUlzUjBGQlJ5eEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdPMUZCUjJoRkxGTkJRVk03UVVGRFRpeGhRVUZCTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRE8wRkJRM1pDTEdGQlFVRXNSMEZCUnl4RFFVTkdMRWxCUVVrN1FVRkRSQ3hoUVVGQkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRPMEZCUTNaQ0xHRkJRVUVzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNN1lVRkRia0lzWTBGQll5eERRVUZETEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVU12UXp0aFFVTkJMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1UwRkJVeXhIUVVGSExFdEJRVXNzUTBGQlF5eERRVUZETzJGQlEyNUdMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1dVRkJXU3hIUVVGSExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEzSkdMR0ZCUVVFc1dVRkJXU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRU5CUVVNN08xRkJSM0pETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEcxQ1FVRnRRaXhEUVVGRExFTkJRVU03TzBGQlIyNUlMRkZCUVVFc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXpzN1FVRkhNMElzVVVGQlFTeHRRa0ZCYlVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03VVVGRk1VUXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMEZCUTNaRExGRkJRVUVzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4WlFVRlpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXl4RFFVRkRPenM3VVVGSkwwVXNUVUZCVFN3d1FrRkJNRUlzUjBGQlJ5eG5Ra0ZCWjBJc1EwRkRha1FzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRU5CUTNaRkxFTkJRVU03VVVGRFJpeE5RVUZOTEdGQlFXRXNSMEZCUnl4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTEVOQlF6ZERMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRMlFzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhaUVVGWkxFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGRE1VVXNRMEZCUXp0QlFVVkdMRkZCUVVFc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6czdRVUZIT1VVc1VVRkJRU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NSVUZCUlN4RFFVRkRPMEZCUTNwQ0xGRkJRVUVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UzBGRGJrWTdRVUZGUkRzN096dEJRVWxITzBGQlEwc3NTVUZCUVN4VlFVRlZMRU5CUVVNc1NVRkJiVUlzUlVGQlFUdFJRVU53UXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEdGQlFXRXNTMEZCU1R0WlFVTTFReXhoUVVGaExFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRkZCUVZFc1MwRkJTVHRuUWtGRE0wTXNUVUZCVFN4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhSUVVGUkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGTkJRVk1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0blFrRkZNVWNzU1VGQlNTeEpRVUZKTEVkQlFVY3NSMEZCUnl4RlFVRkZPenR2UWtGRlpDeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPenR2UWtGSGNrTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkRMRk5CUVZNc1JVRkJSU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF6dEJRVU12Unl4cFFrRkJRVHRCUVVOSUxHRkJRVU1zUTBGQlF5eERRVUZETzBGQlEwd3NVMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRTanRCUVVWRU96czdRVUZIUnp0SlFVTkxMSGxDUVVGNVFpeEhRVUZCTzFGQlF5OUNMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzFGQlJXeEVMRWxCUVVrc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJUdFpRVU5rTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8wRkJRM0JFTEZOQlFVRTdRVUZCVFN4aFFVRkJPMEZCUTB3c1dVRkJRU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eERRVUZETzFsQlF6TkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRCUVVNeFF5eFRRVUZCTzBGQlJVUXNVVUZCUVN4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXp0TFFVTjBSRHRCUVVWRU96czdRVUZIUnp0QlFVTkxMRWxCUVVFc2RVSkJRWFZDTEVOQlFVTXNUVUZCY1VJc1JVRkJRVHRSUVVOdVJDeEpRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVVN1dVRkRhRUlzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzBGQlEzWkRMRk5CUVVFN1FVRkJUU3hoUVVGQk8xbEJRMHdzVFVGQlRTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMEZCUTI1Q0xGTkJRVUU3UVVGRlJDeFJRVUZCTEU5QlFVOHNUVUZCVFN4RFFVRkRPMHRCUTJZN1FVRkZSRHM3TzBGQlIwYzdRVUZEU3l4SlFVRkJMSFZDUVVGMVFpeERRVUZETEUxQlFYRkNMRVZCUVVFN1VVRkRia1FzU1VGQlNTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZPMEZCUTJoQ0xGbEJRVUVzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUlN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eHBRa0ZCZVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dEJRVU4yUml4VFFVRkJPMEZCUVUwc1lVRkJRVHRaUVVOTUxFMUJRVTBzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0QlFVTnVRaXhUUVVGQk8wRkJSVVFzVVVGQlFTeFBRVUZQTEUxQlFVMHNRMEZCUXp0TFFVTm1PMEZCUTBZN08wRkRhRmRFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRnZSMEU3UVVGRFR5eFRRVUZUTEZOQlFWTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUlVGQlJTeFRRVUZUTEVWQlFVVTdRVUZETjBRc1NVRkJTU3hUUVVGVExFdEJRVXNzUTBGQlF5eExRVUZMTEVWQlFVVXNSVUZCUlN4UFFVRlBMRXRCUVVzc1dVRkJXU3hEUVVGRExFZEJRVWNzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRlZCUVZVc1QwRkJUeXhGUVVGRkxFVkJRVVVzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVU3UVVGRGFFZ3NTVUZCU1N4UFFVRlBMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNSVUZCUlN4VlFVRlZMRTlCUVU4c1JVRkJSU3hOUVVGTkxFVkJRVVU3UVVGREwwUXNVVUZCVVN4VFFVRlRMRk5CUVZNc1EwRkJReXhMUVVGTExFVkJRVVVzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVVzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRk8wRkJRMjVITEZGQlFWRXNVMEZCVXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhGUVVGRkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVVzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRk8wRkJRM1JITEZGQlFWRXNVMEZCVXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFVkJRVVVzVFVGQlRTeERRVUZETEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJRM1JJTEZGQlFWRXNTVUZCU1N4RFFVRkRMRU5CUVVNc1UwRkJVeXhIUVVGSExGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVZVc1NVRkJTU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUXpsRkxFdEJRVXNzUTBGQlF5eERRVUZETzBGQlExQTdPMEZEZUVoblFpeFRRVUZCTEhsQ1FVRjVRaXhEUVVGRExFMUJRWE5DTEVWQlFVVXNVVUZCTUVNc1JVRkJRVHRKUVVNeFJ5eE5RVUZOTEZOQlFWTXNSMEZCY1VJc1JVRkJSU3hEUVVGRE8wbEJSWFpETEVsQlFVa3NTVUZCU1N4SFFVRXdRaXhOUVVGTkxFTkJRVU03U1VGRGVrTXNUMEZCVHl4SlFVRkpMRXRCUVVzc1NVRkJTU3hGUVVGRk8wRkJRM0JDTEZGQlFVRXNVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU40UWl4UlFVRkJMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETzBGQlEzQkNMRXRCUVVFN1FVRkZSQ3hKUVVGQkxGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4UlFVRlJMRXRCUVVrN1VVRkROMElzVVVGQlVTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUTNKQ0xFdEJRVU1zUTBGQlF5eERRVUZETzBGQlEwdzdPMEZEWkVFN096czdPenRCUVUxSE8wRkJRMkVzVTBGQlFTeHBRMEZCYVVNc1EwRkRMME1zVFVGQmMwSXNSVUZEZEVJc1VVRkJOa01zUlVGQlFUdEpRVVUzUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEV0QlFVc3NTMEZCU1R0QlFVTm9ReXhSUVVGQkxFMUJRVTBzVFVGQlRTeEhRVUZITEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVNdlFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTFnc1dVRkJRU3hwUTBGQmFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRGNFUXNVMEZCUVR0QlFVTklMRXRCUVVNc1EwRkJReXhEUVVGRE8wRkJRMHc3TzAxRFZtRXNiMEpCUVc5Q0xFTkJRVUU3UVVGQmFrTXNTVUZCUVN4WFFVRkJMRWRCUVVFN1FVRkRWU3hSUVVGQkxFbEJRVUVzUTBGQlFTeFBRVUZQTEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUVhOQ0xFTkJRVU03UVVGclEzaERMRkZCUVVFc1NVRkJRU3hEUVVGQkxIRkNRVUZ4UWl4SFFVRkhMRWxCUVVrc1IwRkJSeXhGUVVFeVF5eERRVUZETzB0QmNVdHdSanRCUVhSTlF5eEpRVUZCTEVsQlFWY3NUVUZCVFN4SFFVRkJPMUZCUTJZc1QwRkJUeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETzB0QlEzSkNPMEZCUlVRN08wRkJSVWM3UVVGRFNDeEpRVUZCTEVsQlFWY3NWMEZCVnl4SFFVRkJPMEZCUTNCQ0xGRkJRVUVzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4elJVRkJjMFVzUTBGQlF5eERRVUZETzFGQlJYSkdMRTlCUVU4c1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF6dExRVU55UWp0QlFVVkVMRWxCUVVFc1NVRkJWeXhqUVVGakxFZEJRVUU3UVVGRGRrSXNVVUZCUVN4TlFVRk5MRWRCUVVjc1IwRkJSeXhKUVVGSkxFZEJRVWNzUlVGQk9FSXNRMEZCUXp0UlFVTnNSQ3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRlZCUVZVc1MwRkJTVHRaUVVOc1F5eFZRVUZWTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExHRkJRV0VzUzBGQlNUdEJRVU5zUkN4blFrRkJRU3hIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPMEZCUTNwQ0xHRkJRVU1zUTBGQlF5eERRVUZETzBGQlEwd3NVMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRTQ3hSUVVGQkxFOUJRVThzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRMUVVONFFqdEJRVVZFTEVsQlFVRXNTVUZCVnl4VFFVRlRMRWRCUVVFN1FVRkRiRUlzVVVGQlFTeE5RVUZOTEVkQlFVY3NSMEZCUnl4SlFVRkpMRWRCUVVjc1JVRkJlVUlzUTBGQlF6dFJRVU0zUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEdGQlFXRXNTMEZCU1R0WlFVTTFReXhoUVVGaExFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRkZCUVZFc1MwRkJTVHRCUVVNelF5eG5Ra0ZCUVN4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEzQkNMR0ZCUVVNc1EwRkJReXhEUVVGRE8wRkJRMHdzVTBGQlF5eERRVUZETEVOQlFVTTdRVUZEU0N4UlFVRkJMRTlCUVU4c1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0TFFVTjRRanRCUVVsTkxFbEJRVUVzVVVGQlVTeERRVUZETEV0QlFYbENMRVZCUVVFN1FVRkRka01zVVVGQlFTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVVY0UWl4UlFVRkJMRWxCUVVrc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUXpORUxFbEJRVWtzVTBGQlV5eEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTnlRaXhaUVVGQkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVkQlFVY3NSVUZCYzBJc1EwRkJRenRaUVVNeFF5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03UVVGRGRrUXNVMEZCUVR0QlFVTkVMRkZCUVVFc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0TFFVTjBRanRCUVVWRU96dEJRVVZITzBGQlEwa3NTVUZCUVN4aFFVRmhMRU5CUVVNc1MwRkJlVUlzUlVGQlFUdEJRVU0xUXl4UlFVRkJMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zT0VWQlFUaEZMRU5CUVVNc1EwRkJRenRCUVVVM1JpeFJRVUZCTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UzBGRGRFSTdRVUZGVFN4SlFVRkJMRmRCUVZjc1EwRkJReXhMUVVGNVFpeEZRVUZCTzBGQlF6RkRMRkZCUVVFc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkZNMElzVVVGQlFTeE5RVUZOTEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVVVzUTBGQlF6dEJRVU01UkN4UlFVRkJMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdTMEZEZWtJN1FVRkZSRHM3UVVGRlJ6dEJRVU5KTEVsQlFVRXNaMEpCUVdkQ0xFTkJRVU1zUzBGQmVVSXNSVUZCUVR0QlFVTXZReXhSUVVGQkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNiMFpCUVc5R0xFTkJRVU1zUTBGQlF6dEJRVVZ1Unl4UlFVRkJMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdTMEZEZWtJN1NVRkZUU3haUVVGWkxFZEJRVUU3UVVGRGFrSXNVVUZCUVN4TlFVRk5MR2RDUVVGblFpeEhRVUZITEVsQlFVa3NSMEZCUnl4RlFVRnpRaXhEUVVGRE8wRkJRM1pFTEZGQlFVRXNUVUZCVFN4bFFVRmxMRWRCUVVjc1NVRkJTU3hIUVVGSExFVkJRWE5DTEVOQlFVTTdRVUZEZEVRc1VVRkJRU3hOUVVGTkxHRkJRV0VzUjBGQlJ5eEpRVUZKTEVkQlFVY3NSVUZCYTBJc1EwRkJRenRCUVVWb1JDeFJRVUZCTEV0QlFVc3NUVUZCVFN4VlFVRlZMRWxCUVVrc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJUdFpRVU55UXl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNWVUZCVlN4RlFVRkZMR2RDUVVGblFpeEZRVUZGTEdWQlFXVXNSVUZCUlN4aFFVRmhMRVZCUVVVc1EwRkJReXhWUVVGVkxFdEJReTlHTEZWQlFWVXNRMEZCUXl4WlFVRlpMRVZCUVVVc1EwRkRNVUlzUTBGQlF6dEJRVU5JTEZOQlFVRTdTMEZEUmp0SlFVVk5MRXRCUVVzc1IwRkJRVHRCUVVOV0xGRkJRVUVzVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxFZEJRVWNzUlVGQmMwSXNRMEZCUXp0QlFVTjJSQ3hSUVVGQkxFMUJRVTBzWlVGQlpTeEhRVUZITEVsQlFVa3NSMEZCUnl4RlFVRnpRaXhEUVVGRE8wRkJRM1JFTEZGQlFVRXNUVUZCVFN4aFFVRmhMRWRCUVVjc1NVRkJTU3hIUVVGSExFVkJRV3RDTEVOQlFVTTdRVUZGYUVRc1VVRkJRU3hMUVVGTExFMUJRVTBzVlVGQlZTeEpRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVVN1dVRkRja01zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExGVkJRVlVzUlVGQlJTeG5Ra0ZCWjBJc1JVRkJSU3hsUVVGbExFVkJRVVVzWVVGQllTeEZRVUZGTEVOQlFVTXNWVUZCVlN4TFFVTXZSaXhWUVVGVkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlEyNUNMRU5CUVVNN1FVRkRTQ3hUUVVGQk8wdEJRMFk3UVVGRlRTeEpRVUZCTEUxQlFVMHNRMEZCUXl4TFFVRmhMRVZCUVVFN1FVRkRla0lzVVVGQlFTeE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExFbEJRVWtzUjBGQlJ5eEZRVUZ6UWl4RFFVRkRPMEZCUTNaRUxGRkJRVUVzVFVGQlRTeGxRVUZsTEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUVhOQ0xFTkJRVU03UVVGRGRFUXNVVUZCUVN4TlFVRk5MR0ZCUVdFc1IwRkJSeXhKUVVGSkxFZEJRVWNzUlVGQmEwSXNRMEZCUXp0QlFVVm9SQ3hSUVVGQkxFdEJRVXNzVFVGQlRTeFZRVUZWTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJSVHM3V1VGRmNrTXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEZWQlFWVXNSVUZCUlN4blFrRkJaMElzUlVGQlJTeGxRVUZsTEVWQlFVVXNZVUZCWVN4RlFVRkZMRU5CUVVNc1ZVRkJWU3hMUVVNdlJpeFZRVUZWTEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVONlFpeERRVUZET3pzN1dVRkpSaXhwUTBGQmFVTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zVFVGQlRTeExRVUZKT3pzN1FVRkZOVVFzWjBKQlFVRXNTVUZCU1N4RFFVRkRMRU5CUVVFc1JVRkJRU3hIUVVGQkxFTkJRVUVzUlVGQlFTeEhRVUZCTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMREJEUVVGRkxFbEJRVWtzVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMEZCUXpORUxHOUNRVUZCTEU5QlFVOHNTVUZCU1N4RFFVRkRPMEZCUTJJc2FVSkJRVUU3TzBGQlIwUXNaMEpCUVVFc1RVRkJUU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU4yUXl4blFrRkJRU3hQUVVGUExFdEJRVXNzUTBGQlF6dEJRVU5tTEdGQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTBvc1UwRkJRVHRMUVVOR08wRkJSVVE3T3pzN096czdPenM3T3p0QlFWbEhPMGxCUTBzc2EwSkJRV3RDTEVOQlEzaENMRlZCUVRoQ0xFVkJRemxDTEdkQ1FVRjVReXhGUVVONlF5eGxRVUYzUXl4RlFVTjRReXhoUVVGclF5eEZRVU5zUXl4UlFVRnJSQ3hGUVVGQk8wRkJSV3hFTEZGQlFVRXNTVUZCU1N4bFFVRmxMRU5CUVVNc1IwRkJSeXhEUVVGRExGVkJRVlVzUTBGQlF5eEZRVUZGTzFsQlEyNURMRTlCUVU4N1FVRkRVaXhUUVVGQk8wRkJSVVFzVVVGQlFTeEpRVUZKTEdkQ1FVRm5RaXhEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZWTEVOQlFVTXNSVUZCUlR0QlFVTndReXhaUVVGQkxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNLMFZCUVN0RkxFTkJRVU1zUTBGQlF6dEJRVU5zUnl4VFFVRkJPMEZCUTBRc1VVRkJRU3huUWtGQlowSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03VVVGRmFrTXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wRkJRM0pFTEZGQlFVRXNTMEZCU3l4TlFVRk5MRk5CUVZNc1NVRkJTU3hWUVVGVkxFVkJRVVU3UVVGRGJFTXNXVUZCUVN4NVFrRkJlVUlzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXl4cFFrRkJhVUlzUzBGQlNUdG5Ra0ZEZWtRc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFZEJRVWNzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRE8wRkJRM0JGTEdkQ1FVRkJMRWxCUVVrc1UwRkJVeXhGUVVGRk8wRkJRMklzYjBKQlFVRXNTMEZCU3l4TlFVRk5MR0ZCUVdFc1NVRkJTU3hUUVVGVExFVkJRVVU3UVVGRGNrTXNkMEpCUVVFc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMR0ZCUVdFc1JVRkJSU3huUWtGQlowSXNSVUZCUlN4bFFVRmxMRVZCUVVVc1lVRkJZU3hGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEzQkhMSEZDUVVGQk8wRkJRMFlzYVVKQlFVRTdRVUZCVFN4eFFrRkJRU3hKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVkQlFVY3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEZRVUZGT3p0QlFVVm9SQ3h2UWtGQlFTeHBRa0ZCYVVJc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGJFUXNiMEpCUVVFc1lVRkJZU3hEUVVGRExFZEJRVWNzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRE8wRkJRM1JETEdsQ1FVRkJPMEZCUTBnc1lVRkJReXhEUVVGRExFTkJRVU03UVVGRFNpeFRRVUZCT3p0QlFVZEVMRkZCUVVFc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVWQlFVVXNRMEZCUXp0UlFVTXZRaXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0UlFVVm9SQ3hSUVVGUkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdRVUZGY2tJc1VVRkJRU3hoUVVGaExFTkJRVU1zUjBGQlJ5eERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVWdVF5eFJRVUZCTEdWQlFXVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03UzBGRGFrTTdRVUZGUkRzN096dEJRVWxITzBGQlEwc3NTVUZCUVN4blFrRkJaMElzUTBGQlF5eFZRVUU0UWl4RlFVRkJPMEZCUTNKRUxGRkJRVUVzVFVGQlRTeEhRVUZITEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUVd0Q0xFTkJRVU03UVVGRmRFTXNVVUZCUVN4TlFVRk5MRTFCUVUwc1IwRkJSeXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTjBReXhSUVVGQkxFbEJRVWtzVFVGQlRTeEZRVUZGTzBGQlExWXNXVUZCUVN4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEycENMRk5CUVVFN1VVRkZSQ3hWUVVGVkxFTkJRVU1zWTBGQll5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMR0ZCUVdFc1MwRkJTVHRaUVVOc1JDeGhRVUZoTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExGRkJRVkVzUzBGQlNUdEJRVU16UXl4blFrRkJRU3hIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUTNCQ0xHRkJRVU1zUTBGQlF5eERRVUZETzBGQlEwd3NVMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkZTQ3hSUVVGQkxFOUJRVThzUjBGQlJ5eERRVUZETzB0QlExbzdRVUZEUmpzN1FVTm9UVVE3TzBGQlJVYzdRVUZEU0N4TlFVRk5MSE5DUVVGelFpeEhRVUZITEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1MwRkJTeXhGUVVGRkxGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTTdUVUZGTDBNc2VVSkJRWGxDTEVOQlFVRTdRVUZ0UW5CRExFbEJRVUVzU1VGQlZ5eEpRVUZKTEVkQlFVRTdVVUZEWWl4UFFVRlBMSGxDUVVGNVFpeERRVUZETEdOQlFXTXNRMEZCUXp0TFFVTnFSRHRKUVVWRUxGZEJRVzFDTEVOQlFVRXNUVUZCYTBJc1JVRkJSU3hQUVVFd1F5eEZRVUZCTzBGQlF5OUZMRkZCUVVFc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTTdVVUZGY2tJc1NVRkJTU3hEUVVGRExHVkJRV1VzUjBGQlJ5eFBRVUZQTEV0QlFVRXNTVUZCUVN4SlFVRlFMRTlCUVU4c1MwRkJVQ3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4UFFVRlBMRU5CUVVVc1pVRkJaU3hEUVVGRE8xRkJRMmhFTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUjBGQlJ5eFBRVUZQTEV0QlFVRXNTVUZCUVN4SlFVRlFMRTlCUVU4c1MwRkJVQ3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4UFFVRlBMRU5CUVVVc2EwSkJRV3RDTEVOQlFVTTdTMEZEZGtRN1FVRkZXU3hKUVVGQkxGTkJRVk1zUTBGQlF5eEpRVUZWTEVWQlFVRTdPMEZCUXk5Q0xGbEJRVUVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4dlFrRkJiMElzUjBGQlJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VTBGREwwUXNRMEZCUVN4RFFVRkJPMEZCUVVFc1MwRkJRVHRCUVVWRU96czdPenRCUVV0SE8wRkJRMWNzU1VGQlFTeFBRVUZQTEVOQlFVTXNTVUZCVlN4RlFVRkJPenRaUVVNNVFpeE5RVUZOTEZGQlFWRXNSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdXVUZETlVNc1NVRkJTU3hSUVVGUkxFbEJRVWtzU1VGQlNTeEZRVUZGTzBGQlEzQkNMR2RDUVVGQkxFOUJRVThzVVVGQlVTeERRVUZETzBGQlEycENMR0ZCUVVFN1dVRkZSQ3hOUVVGTkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRE5VTXNTVUZCU1N4UlFVRlJMRWxCUVVrc1NVRkJTU3hGUVVGRk8wRkJRM0JDTEdkQ1FVRkJMRTlCUVU4c1VVRkJVU3hEUVVGRE8wRkJRMnBDTEdGQlFVRTdRVUZGUkN4WlFVRkJMRTlCUVU4c1NVRkJTU3hEUVVGRE8xTkJRMklzUTBGQlFTeERRVUZCTzBGQlFVRXNTMEZCUVR0QlFVVmhMRWxCUVVFc1UwRkJVeXhEUVVGRExFbEJRVlVzUlVGQlFUczdPMEZCUTJoRExGbEJRVUVzVFVGQlRTeEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGM1FpeERRVUZET3p0QlFVZHNSQ3haUVVGQkxFMUJRVTBzWjBKQlFXZENMRWRCUVVjc1EwRkJRU3hEUVVGQkxFVkJRVUVzUjBGQlFTeEpRVUZKTEVOQlFVTXNZMEZCWXl4TlFVRkJMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGRkxFOUJRVThzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXhqUVVGakxFTkJRVU1zVFVGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjJSeXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRVZCUVVVN1FVRkRja0lzWjBKQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1FVRkRZaXhoUVVGQk8wRkJSVVFzV1VGQlFTeE5RVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRzlDUVVGdlFpeEZRVUZGTEVOQlFVTTdXVUZGTTBNc1RVRkJUU3hWUVVGVkxFZEJRWEZDTEUxQlFVMHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdXVUZGTDBVc1RVRkJUU3hUUVVGVExFZEJRVWNzUTBGQlFTeEZRVUZCTEVkQlFVRXNTVUZCU1N4RFFVRkRMRlZCUVZVc1RVRkJRU3hKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlJ5eDVRa0ZCZVVJc1EwRkJReXhqUVVGakxFTkJSUzlFTEVOQlFVTTdXVUZEWkN4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRk8wRkJRMlFzWjBKQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1FVRkRZaXhoUVVGQk8wRkJSVVFzV1VGQlFTeE5RVUZOTEZkQlFWY3NSMEZCUnl4VFFVRlRMRU5CUVVNc1YwRkJWeXhEUVVGRE8wRkJRekZETEZsQlFVRXNTVUZCU1N4RFFVRkRMSE5DUVVGelFpeERRVUZETEVkQlFVY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1JVRkJSVHRuUWtGRE5VTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkRWaXhEUVVGelF5eHRRMEZCUVN4RlFVRkJMSGxDUVVGNVFpeERRVUZETEdOQlFXTXNRMEZCYVVJc1kwRkJRU3hGUVVGQkxGZEJRVmNzUTBGQlJ5eERRVUZCTEVOQlFVRXNRMEZET1Vjc1EwRkJRenRCUVVOR0xHZENRVUZCTEU5QlFVOHNTVUZCU1N4RFFVRkRPMEZCUTJJc1lVRkJRVHRCUVVWRUxGbEJRVUVzVFVGQlRTeFRRVUZUTEVkQlFVY3NRMEZCUVN4RlFVRkJMRWRCUVVFc1UwRkJVeXhEUVVGRExGTkJRVk1zVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNRMEZCUlN4SFFVRkhMRU5CUVVNc1EwRkJReXhqUVVGakxFVkJRVVVzVTBGQlV5eExRVUZKT3p0blFrRkRka1VzVFVGQlRTeEpRVUZKTEVkQlFVY3NWVUZCVlN4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGTExFTkJRVU1zUTBGQlF6dEJRVU01UXl4blFrRkJRU3hOUVVGTkxGZEJRVmNzUjBGQlJ5eGpRVUZqTEVOQlFVTXNTMEZCVFN4RFFVRkRPMmRDUVVVeFF5eEpRVUZKTEZkQlFWY3NRMEZCUXl4TlFVRk5MRVZCUVVVN1FVRkRkRUlzYjBKQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNTVUZCU1N4RlFVRkZPM2RDUVVOMFF5eE5RVUZOTEVWQlFVVXNTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRXNSVUZCUVN4SFFVRkJMRmRCUVZjc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeE5RVUZCTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dDNRa0ZEYmtZc1RVRkJUU3hGUVVGRkxFMUJRVUVzVjBGQlZ5eERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRzFEUVVGSkxFZEJRVWM3UVVGRGVrTXNjVUpCUVVFc1EwRkJReXhEUVVGRE8wRkJRMG9zYVVKQlFVRTdjVUpCUVUwc1NVRkJTU3hYUVVGWExFTkJRVU1zVDBGQlR5eEZRVUZGTzBGQlF6bENMRzlDUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExFbEJRVWtzUlVGQlJUdDNRa0ZEZGtNc1RVRkJUU3hGUVVGRkxFbEJRVWtzUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGQkxFVkJRVUVzUjBGQlFTeFhRVUZYTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1RVRkJRU3hKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN2QwSkJRM0JHTEUxQlFVMHNSVUZCUlN4TlFVRkJMRmRCUVZjc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeHRRMEZCU1N4SFFVRkhPM2RDUVVONlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRXNSVUZCUVN4SFFVRkJMRmRCUVZjc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeE5RVUZCTEVsQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU5xUml4eFFrRkJRU3hEUVVGRExFTkJRVU03UVVGRFNpeHBRa0ZCUVR0QlFVVkVMR2RDUVVGQkxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNORU5CUVRSRExGTkJRVk1zUTBGQlFTeHRRa0ZCUVN4RFFVRnhRaXhEUVVGRExFTkJRVU03UVVGRE9VWXNZVUZCUXl4RFFVRkRMRU5CUVVNN1FVRkZTQ3haUVVGQkxFMUJRVTBzWTBGQll5eEhRVUZITEVOQlFVRXNSVUZCUVN4SFFVRkJMRk5CUVZNc1EwRkJReXhqUVVGakxFMUJRVUVzU1VGQlFTeEpRVUZCTEVWQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVOQlFVVXNSMEZCUnl4RFFVTnNSQ3hEUVVGRExHMUNRVUZ0UWl4RlFVRkZMR05CUVdNc1MwRkJaME03TzBGQlEyeEZMR2RDUVVGQkxFMUJRVTBzU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUVN4RlFVRkJMRWRCUVVFc2JVSkJRVzFDTEVOQlFVTXNVMEZCVXl4TlFVRkJMRWxCUVVFc1NVRkJRU3hGUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkpMRVZCUVVVc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF5eFRRVUZUTEV0QlFVazdiMEpCUTI1RkxFMUJRVTBzUjBGQlJ5eEhRVUZITEZOQlFWTXNTMEZCVkN4SlFVRkJMRWxCUVVFc1UwRkJVeXgxUWtGQlZDeFRRVUZUTEVOQlFVY3NVMEZCVXl4RFFVRkRMRU5CUVVNN2IwSkJSVzVETEVsQlFVa3NSMEZCUnl4SlFVRkpMRWxCUVVrc1JVRkJSVHQzUWtGRFppeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVTmlMRU5CUVVFc09FTkJRVUVzUlVGQmFVUXNZMEZCWXl4RFFVRnBReXc0UWtGQlFTeEZRVUZCTEZOQlFWTXNRMEZCWjBJc1kwRkJRU3hEUVVGQkxFTkJRekZJTEVOQlFVTTdRVUZEU0N4eFFrRkJRVHRCUVVWRUxHOUNRVUZCTEU5QlFVOHNSMEZCUnl4RFFVRkRPMEZCUTJJc2FVSkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVVklMRTlCUVU4N1FVRkRUQ3h2UWtGQlFTeFRRVUZUTEVWQlFVVXNTVUZCU1R0dlFrRkRaaXhKUVVGSkxFVkJRVVVzYlVKQlFXMUNMRU5CUVVNc1NVRkJTVHRwUWtGREwwSXNRMEZCUXp0QlFVTktMR0ZCUVVNc1EwRkRSaXhEUVVGRE8xbEJSVVlzUTBGQlFTeEZRVUZCTEVkQlFVRXNVMEZCVXl4RFFVRkRMRTlCUVU4c1RVRkJSU3hKUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlFTeFBRVUZQTEVOQlFVTXNRMEZCUXl4WlFVRlpMRVZCUVVVc1QwRkJUeXhMUVVGSk96dEJRVU51UkN4blFrRkJRU3hOUVVGTkxGbEJRVmtzUjBGQlJ5eFpRVUZaTEVOQlFVTXNUVUZCVFN4RFFVRkRPenRCUVVkNlF5eG5Ra0ZCUVN4TlFVRk5MSFZDUVVGMVFpeEhRVUZITEVOQlFVRXNSVUZCUVN4SFFVRkJMRmxCUVZrc1EwRkJReXhqUVVGakxFMUJRVVVzU1VGQlFTeEpRVUZCTEVWQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVOQlFVRXNSMEZCUnl4RFFVRkRMRU5CUVVNc1kwRkJZeXhMUVVGSk8yOUNRVU5zUml4TlFVRk5MRXRCUVVzc1IwRkJSeXhqUVVGakxFdEJRV1FzU1VGQlFTeEpRVUZCTEdOQlFXTXNkVUpCUVdRc1kwRkJZeXhEUVVGSExHTkJRV01zUTBGQlF5eERRVUZETzI5Q1FVVXZReXhKUVVGSkxFdEJRVXNzU1VGQlNTeEpRVUZKTEVWQlFVVTdkMEpCUTJwQ0xFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlEySXNRMEZCUVN4MVEwRkJRU3hGUVVFd1F5eFBRVUZQTEVOQlFYRkRMR3REUVVGQkxFVkJRVUVzWTBGQll5eERRVUZuUWl4alFVRkJMRU5CUVVFc1EwRkRja2dzUTBGQlF6dEJRVU5JTEhGQ1FVRkJPMEZCUlVRc2IwSkJRVUVzVDBGQlR5eExRVUZMTEVOQlFVTTdRVUZEWml4cFFrRkJReXhEUVVGRExFTkJRVU03WjBKQlJVZ3NUVUZCVFN4TlFVRk5MRWRCUVVjc1dVRkJXU3hEUVVGRExFMUJRVTBzU1VGQlNTeEpRVUZKTEVkQlFVY3NWVUZCVlN4RFFVRkRMRmxCUVZrc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eFRRVUZUTEVOQlFVTTdRVUZGZWtZc1owSkJRVUVzU1VGQlNTeGxRVUVyUkN4RFFVRkRPMEZCUTNCRkxHZENRVUZCTEZsQlFWa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhYUVVGWExFdEJRVWs3UVVGRGJrTXNiMEpCUVVFc1NVRkJTU3hsUVVGbExFVkJRVVU3TzBGQlJXNUNMSGRDUVVGQkxFMUJRVTBzVTBGQlV5eEhRVUZITEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNN1FVRkRka01zZDBKQlFVRXNUVUZCVFN4SlFVRkpMRWRCUVVjc1ZVRkJWU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBGQlEyNURMSGRDUVVGQkxFMUJRVTBzVlVGQlZTeEhRVUZITEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNN1FVRkRjRU1zZDBKQlFVRXNUVUZCVFN4TFFVRkxMRWRCUVVjc1ZVRkJWU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZET3p0QlFVZHlReXgzUWtGQlFTeE5RVUZOTEU5QlFVOHNSMEZCZDBNN05FSkJRMjVFTEZOQlFWTXNSVUZCUlN4bFFVRmxMRU5CUVVNc1UwRkJVenMwUWtGRGNFTXNVMEZCVXl4RlFVRkZMR1ZCUVdVc1EwRkJReXhUUVVGVE96UkNRVU53UXl4WlFVRlpMRVZCUVVVc1pVRkJaU3hEUVVGRExGbEJRVms3TkVKQlF6RkRMRk5CUVZNc1JVRkJSU3hsUVVGbExFTkJRVU1zVTBGQlV6dEJRVU53UXl3MFFrRkJRU3hWUVVGVkxFVkJRMUlzWlVGQlpTeERRVUZETEZWQlFWVXNTVUZCU1N4SlFVRkpPMEZCUTJoRExHdERRVUZGTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRExGTkJRVk1zUTBGQlF5eGxRVUZsTEVOQlFVTXNWVUZCVlN4RFFVRkRPMEZCUXpORUxHdERRVUZGTEZOQlFWTTdlVUpCUTJoQ0xFTkJRVU03TzBGQlIwWXNkMEpCUVVFc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGQlJTeDFRa0ZCZFVJc1EwRkJReXhEUVVGRE8wRkJReTlGTEhkQ1FVRkJMRWxCUVVrc1RVRkJUU3hGUVVGRk8wRkJRMVlzTkVKQlFVRXNTMEZCU3l4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRGRrSXNlVUpCUVVFN1FVRkZSQ3gzUWtGQlFTeFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRM3BDTEhGQ1FVRkJPMjlDUVVWRUxHVkJRV1VzUjBGQlJ5eFhRVUZYTEVOQlFVTTdRVUZEYUVNc2FVSkJRVU1zUTBGQlF5eERRVUZETzBGQlEwd3NZVUZCUXl4RFFVRkRMRU5CUVVNN08xbEJSMGdzVDBGQlR5eERRVUZETEZsQlFWa3NSVUZCUlN4RFFVRkRPMEZCUlhaQ0xGbEJRVUVzVDBGQlR5eFBRVUZQTEVOQlFVTTdPMEZCUTJoQ0xFdEJRVUU3UVVGRllTeEpRVUZCTEZOQlFWTXNRMEZCUXl4SlFVRlZMRVZCUVVFN096dEJRVU5vUXl4WlFVRkJMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCZDBJc1EwRkJRenM3UVVGSGJFUXNXVUZCUVN4TlFVRk5MRk5CUVZNc1IwRkJSeXhEUVVGQkxFTkJRVUVzUlVGQlFTeEhRVUZCTEVsQlFVa3NRMEZCUXl4alFVRmpMRTFCUVVVc1NVRkJRU3hKUVVGQkxFVkJRVUVzUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFTkJRVUVzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRemRFTEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVN1FVRkRaQ3huUWtGQlFTeFBRVUZQTEVsQlFVa3NRMEZCUXp0QlFVTmlMR0ZCUVVFN08xbEJSMFFzVFVGQlRTeFRRVUZUTEVkQlFVY3NRMEZCUVN4RlFVRkJMRWRCUVVFc1NVRkJTU3hEUVVGRExGVkJRVlVzVFVGQlFTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNRMEZCUnl4TFFVRkxMRU5CUVRCQ0xFTkJRVU03V1VGRGNFVXNUVUZCVFN4M1FrRkJkMElzUjBGQlJ5eFRRVUZUTEV0QlFVRXNTVUZCUVN4SlFVRlVMRk5CUVZNc1MwRkJWQ3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRlRMRU5CUVVVc2EwSkJRV3RDTEVOQlFVTTdXVUZETDBRc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4RlFVRkZPMEZCUXpkQ0xHZENRVUZCTEU5QlFVOHNTVUZCU1N4RFFVRkRPMEZCUTJJc1lVRkJRVHRaUVVWRUxFMUJRVTBzWjBKQlFXZENMRWRCUVVjc2QwSkJRWGRDTEV0QlFVRXNTVUZCUVN4SlFVRjRRaXgzUWtGQmQwSXNTMEZCZUVJc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNkMEpCUVhkQ0xFTkJRVVVzVlVGQlZTeERRVUZETzFsQlF6bEVMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNSVUZCUlR0QlFVTnlRaXhuUWtGQlFTeFBRVUZQTEVsQlFVa3NRMEZCUXp0QlFVTmlMR0ZCUVVFN1FVRkZSQ3haUVVGQkxFMUJRVTBzVDBGQlR5eEhRVUZITEVsQlFVa3NiMEpCUVc5Q0xFVkJRVVVzUTBGQlF6dFpRVVV6UXl4TlFVRk5MRlZCUVZVc1IwRkJjVUlzVFVGQlRTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR1ZCUVdVc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVVV2UlN4WlFVRkJMRTFCUVUwc1kwRkJZeXhIUVVGSExFTkJRVUVzUlVGQlFTeEhRVUZCTEhkQ1FVRjNRaXhEUVVGRExHTkJRV01zVFVGQlJTeEpRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNRMEZCUVN4SFFVRkhMRU5CUTJwRkxFTkJRVU1zYlVKQlFXMUNMRXRCUVdkRE96dG5Ra0ZEYkVRc1RVRkJUU3hKUVVGSkxFZEJRVWNzVlVGQlZTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFbEJRVXNzUTBGQlF5eERRVUZETzBGQlEyNUVMR2RDUVVGQkxFMUJRVTBzVTBGQlV5eEhRVUZITEVOQlFVTXNUVUZCUVN4dFFrRkJiVUlzUTBGQlF5eFRRVUZUTEUxQlFVa3NTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNSVUZCUlN4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExHTkJRV01zUlVGQlJTeFRRVUZUTEV0QlFVazdPMEZCUTNoR0xHOUNRVUZCTEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8yOUNRVU5vUkN4SlFVRkpMR05CUVdNc1EwRkJReXhOUVVGTkxFVkJRVVU3UVVGRGVrSXNkMEpCUVVFc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGRFVpeE5RVUZCTEdOQlFXTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhOUVVGSkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxFZEJRVWNzUlVGRE9VSXNRMEZCUVN4RlFVRkJMRWRCUVVFc1kwRkJZeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEUxQlFVa3NTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNSMEZCUnl4RlFVTTVRaXhqUVVGakxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMR05CUVdNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZEZWtRc1EwRkJRenRCUVVOSUxIRkNRVUZCTzBGQlJVUXNiMEpCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1NVRkJTU3hGUVVGRk8zZENRVU4wUXl4TlFVRk5PMEZCUTA0c2QwSkJRVUVzVFVGQlRTeEZRVUZGTEVOQlFVRXNSVUZCUVN4SFFVRkJMR05CUVdNc1EwRkJReXhOUVVGTkxHMURRVUZKTEVkQlFVYzdRVUZEY2tNc2NVSkJRVUVzUTBGQlF5eERRVUZETzBGQlEwd3NhVUpCUVVNc1EwRkJReXhEUVVGRE8yZENRVVZJTEU5QlFVOHNSVUZCUlN4VFFVRlRMRVZCUVVVc1EwRkJRenRCUVVOMlFpeGhRVUZETEVOQlEwWXNRMEZCUXpzN1FVRkhSaXhaUVVGQkxHZENRVUZuUWl4TFFVRm9RaXhKUVVGQkxFbEJRVUVzWjBKQlFXZENMRXRCUVdoQ0xFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMR2RDUVVGblFpeERRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRMR1ZCUVdVc1JVRkJSU3hWUVVGVkxFdEJRVWs3UVVGRGVFUXNaMEpCUVVFc1RVRkJUU3hYUVVGWExFZEJRVWNzWlVGQlpTeERRVUZETEV0QlFVc3NRMEZCUXp0blFrRkRNVU1zU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlR0dlFrRkRhRUlzVDBGQlR6dEJRVU5TTEdsQ1FVRkJPMEZCUlVRc1owSkJRVUVzVjBGQlZ5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRk5CUVZNc1MwRkJTVHM3UVVGRGFFTXNiMEpCUVVFc1RVRkJUU3hKUVVGSkxFZEJRVWNzVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPenRCUVVkdVF5eHZRa0ZCUVN4TlFVRk5MRlZCUVZVc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0dlFrRkRka01zU1VGQlNTeGxRVUZsTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUXpsQ0xIZENRVUZCTEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUTFvc1EwRkJRU3hGUVVGQkxFZEJRVUVzWlVGQlpTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRTFCUVVFc1NVRkJRU3hKUVVGQkxFVkJRVUVzUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVrc1IwRkJSeXhGUVVOdVF5eE5RVUZCTEdWQlFXVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhOUVVGQkxFbEJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGSkxFZEJRVWNzUlVGRGJrTXNRMEZCUVN4RlFVRkJMRWRCUVVFc1pVRkJaU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEUxQlFVa3NTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNSMEZCUnl4RFFVTndReXhEUVVGRE8wRkJRMGdzY1VKQlFVRTdRVUZCVFN4NVFrRkJRVHQzUWtGRFRDeFZRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTm9ReXh4UWtGQlFUdHZRa0ZGUkN4TlFVRk5MRTFCUVUwc1IwRkJSeXhsUVVGbExFTkJRVU1zVFVGQlRTeEpRVUZKTEVsQlFVa3NSMEZCUnl4VlFVRlZMRU5CUVVNc1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEZOQlFWTXNRMEZCUXp0QlFVVXZSaXh2UWtGQlFTeE5RVUZOTEU5QlFVOHNSMEZCZDBNN2QwSkJRMjVFTEZOQlFWTXNSVUZCUlN4bFFVRmxMRU5CUVVNc1UwRkJVenQzUWtGRGNFTXNVMEZCVXl4RlFVRkZMR1ZCUVdVc1EwRkJReXhUUVVGVE8zZENRVU53UXl4WlFVRlpMRVZCUVVVc1pVRkJaU3hEUVVGRExGbEJRVms3ZDBKQlF6RkRMRk5CUVZNc1JVRkJSU3hsUVVGbExFTkJRVU1zVlVGQlZUdDNRa0ZEY2tNc1ZVRkJWVHR4UWtGRFdDeERRVUZET3p0QlFVZEdMRzlDUVVGQkxFMUJRVTBzZFVKQlFYVkNMRWRCUVVjc1EwRkJRU3hGUVVGQkxFZEJRVUVzWlVGQlpTeERRVUZETEdOQlFXTXNUVUZCUlN4SlFVRkJMRWxCUVVFc1JVRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1EwRkJRU3hIUVVGSExFTkJRVU1zUTBGQlF5eGpRVUZqTEV0QlFVazdkMEpCUTNKR0xFMUJRVTBzUzBGQlN5eEhRVUZITEdOQlFXTXNTMEZCWkN4SlFVRkJMRWxCUVVFc1kwRkJZeXgxUWtGQlpDeGpRVUZqTEVOQlFVY3NZMEZCWXl4RFFVRkRMRU5CUVVNN2QwSkJSUzlETEVsQlFVa3NTMEZCU3l4SlFVRkpMRWxCUVVrc1JVRkJSVHMwUWtGRGFrSXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkRZaXhEUVVGQkxIVkRRVUZCTEVWQlFUQkRMRlZCUVZVc1EwRkJjVU1zYTBOQlFVRXNSVUZCUVN4alFVRmpMRU5CUVdkQ0xHTkJRVUVzUTBGQlFTeERRVU40U0N4RFFVRkRPMEZCUTBnc2VVSkJRVUU3UVVGRlJDeDNRa0ZCUVN4UFFVRlBMRXRCUVVzc1EwRkJRenRCUVVObUxIRkNRVUZETEVOQlFVTXNRMEZCUXpzN1FVRkhTQ3h2UWtGQlFTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1NVRkJTU3hMUVVGSk96dDNRa0ZEY2tJc1RVRkJUU3hMUVVGTExFZEJRVEJDTEVOQlFVRXNSVUZCUVN4SFFVRkJMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVa3NTVUZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNTVUZCU1N4RFFVRkRPMEZCUlRsRUxIZENRVUZCTEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UFFVRlBMRVZCUVVVc2RVSkJRWFZDTEVOQlFVTXNRMEZCUXp0QlFVTXZSU3gzUWtGQlFTeEpRVUZKTEUxQlFVMHNSVUZCUlR0QlFVTldMRFJDUVVGQkxFdEJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRPMEZCUTNaQ0xIbENRVUZCTzBGQlJVUXNkMEpCUVVFc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTXhRaXh4UWtGQlF5eERRVUZETEVOQlFVTTdRVUZEVEN4cFFrRkJReXhEUVVGRExFTkJRVU03UVVGRFRDeGhRVUZETEVOQlFVTXNRMEZCUXpzN1FVRkhTQ3haUVVGQkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzUTBGQlF6dFpRVU12UWl4UFFVRlBMRU5CUVVNc1dVRkJXU3hGUVVGRkxFTkJRVU03UVVGRmRrSXNXVUZCUVN4UFFVRlBMRTlCUVU4c1EwRkJRenM3UVVGRGFFSXNTMEZCUVR0QlFVVlBMRWxCUVVFc1dVRkJXU3hEUVVOc1FpeEpRVUZ2UWl4RlFVTndRaXhMUVVGeFFpeEZRVU55UWl4UFFVRTJReXhGUVVNM1F5eDFRa0ZCYzBRc1JVRkJRVHRCUVVWMFJDeFJRVUZCTEUxQlFVMHNWVUZCVlN4SFFVRkhMRWxCUVVrc2EwSkJRV3RDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hQUVVGUExFVkJRVVVzZFVKQlFYVkNMRU5CUVVNc1EwRkJRenRSUVVWNlJpeEpRVUZKTEVsQlFVa3NRMEZCUXl4bFFVRmxMRVZCUVVVN1FVRkRlRUlzV1VGQlFTeE5RVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkpMSGRDUVVGM1FpeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMEZCUTNoRUxGbEJRVUVzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03V1VGRGFrTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEZkQlFWY3NRMEZCUXp0QlFVTjJSQ3hUUVVGQk8wRkJSVVFzVVVGQlFTeFBRVUZQTEZWQlFWVXNRMEZCUXp0TFFVTnVRanRKUVVWUExIRkNRVUZ4UWl4RFFVTXpRaXhYUVVFeVFpeEZRVU16UWl4TlFVZERMRVZCUVVFN1FVRkZSQ3hSUVVGQkxFMUJRVTBzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZMRWRCUVVjc1RVRkJUU3hEUVVGRE8xRkJSV3hETEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1owTkJRV2RETEVOQlFVTXNSVUZCUlN4TlFVRk5MRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVVYyUlN4UlFVRkJMRTFCUVUwc1VVRkJVU3hIUVVGSExFbEJRVWtzY1VKQlFYRkNMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRmJFUXNVVUZCUVN4WFFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzFGQlJURkNMRWxCUVVrc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RlFVRkZPMEZCUXpOQ0xGbEJRVUVzVFVGQlRTeE5RVUZOTEVkQlFVY3NTVUZCU1N3eVFrRkJNa0lzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0QlFVTjZSQ3haUVVGQkxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdXVUZEY0VNc1RVRkJUU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zVjBGQlZ5eERRVUZETzBGQlF6RkVMRk5CUVVFN1FVRkZSQ3hSUVVGQkxFOUJRVThzVVVGQlVTeERRVUZETzB0QlEycENPMGxCUlU4c2MwSkJRWE5DTEVOQlF6VkNMRmRCUVRKQ0xFVkJRek5DTEUxQlNVTXNSVUZCUVR0UlFVVkVMRTFCUVUwc1JVRkJSU3hOUVVGTkxFVkJRVVVzVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SFFVRkhMRTFCUVUwc1EwRkJRenRCUVVWNFF5eFJRVUZCTEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc2FVTkJRV2xETEVOQlFVTXNSVUZCUlN4TlFVRk5MRVZCUVVVc1RVRkJUU3hGUVVGRkxFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZGT1VVc1VVRkJRU3hOUVVGTkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEhGQ1FVRnhRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlJXeEVMRkZCUVVFc1YwRkJWeXhEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0UlFVVXhRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSVHRCUVVNelFpeFpRVUZCTEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc01rSkJRVEpDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1FVRkRla1FzV1VGQlFTeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMWxCUTNCRExFMUJRVTBzUTBGQlF5eFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEZkQlFWY3NRMEZCUXp0QlFVTXhSQ3hUUVVGQk8wRkJSVVFzVVVGQlFTeFBRVUZQTEZGQlFWRXNRMEZCUXp0TFFVTnFRanM3UVVGMFYzTkNMSGxDUVVGakxFTkJRVUVzWTBGQlFTeEhRVUZITEdsQ1FVRnBRanM3T3pzaWZRPT1cbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IEdMVEYsIEdMVEZMb2FkZXJQbHVnaW4sIEdMVEZQYXJzZXIgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vbG9hZGVycy9HTFRGTG9hZGVyLmpzJztcbmltcG9ydCB7XG4gIFZSTUV4cHJlc3Npb25Mb2FkZXJQbHVnaW4sXG4gIFZSTUZpcnN0UGVyc29uTG9hZGVyUGx1Z2luLFxuICBWUk1IdW1hbm9pZCxcbiAgVlJNSHVtYW5vaWRMb2FkZXJQbHVnaW4sXG4gIFZSTUxvb2tBdExvYWRlclBsdWdpbixcbiAgVlJNTWV0YSxcbiAgVlJNTWV0YUxvYWRlclBsdWdpbixcbn0gZnJvbSAnQHBpeGl2L3RocmVlLXZybS1jb3JlJztcbmltcG9ydCB7IE1Ub29uTWF0ZXJpYWxMb2FkZXJQbHVnaW4gfSBmcm9tICdAcGl4aXYvdGhyZWUtdnJtLW1hdGVyaWFscy1tdG9vbic7XG5pbXBvcnQgeyBWUk1NYXRlcmlhbHNIRFJFbWlzc2l2ZU11bHRpcGxpZXJMb2FkZXJQbHVnaW4gfSBmcm9tICdAcGl4aXYvdGhyZWUtdnJtLW1hdGVyaWFscy1oZHItZW1pc3NpdmUtbXVsdGlwbGllcic7XG5pbXBvcnQgeyBWUk1NYXRlcmlhbHNWMENvbXBhdFBsdWdpbiB9IGZyb20gJ0BwaXhpdi90aHJlZS12cm0tbWF0ZXJpYWxzLXYwY29tcGF0JztcbmltcG9ydCB7IFZSTU5vZGVDb25zdHJhaW50TG9hZGVyUGx1Z2luIH0gZnJvbSAnQHBpeGl2L3RocmVlLXZybS1ub2RlLWNvbnN0cmFpbnQnO1xuaW1wb3J0IHsgVlJNU3ByaW5nQm9uZUxvYWRlclBsdWdpbiB9IGZyb20gJ0BwaXhpdi90aHJlZS12cm0tc3ByaW5nYm9uZSc7XG5pbXBvcnQgeyBWUk1Mb2FkZXJQbHVnaW5PcHRpb25zIH0gZnJvbSAnLi9WUk1Mb2FkZXJQbHVnaW5PcHRpb25zJztcbmltcG9ydCB7IFZSTSB9IGZyb20gJy4vVlJNJztcblxuZXhwb3J0IGNsYXNzIFZSTUxvYWRlclBsdWdpbiBpbXBsZW1lbnRzIEdMVEZMb2FkZXJQbHVnaW4ge1xuICBwdWJsaWMgcmVhZG9ubHkgcGFyc2VyOiBHTFRGUGFyc2VyO1xuXG4gIHB1YmxpYyByZWFkb25seSBleHByZXNzaW9uUGx1Z2luOiBWUk1FeHByZXNzaW9uTG9hZGVyUGx1Z2luO1xuICBwdWJsaWMgcmVhZG9ubHkgZmlyc3RQZXJzb25QbHVnaW46IFZSTUZpcnN0UGVyc29uTG9hZGVyUGx1Z2luO1xuICBwdWJsaWMgcmVhZG9ubHkgaHVtYW5vaWRQbHVnaW46IFZSTUh1bWFub2lkTG9hZGVyUGx1Z2luO1xuICBwdWJsaWMgcmVhZG9ubHkgbG9va0F0UGx1Z2luOiBWUk1Mb29rQXRMb2FkZXJQbHVnaW47XG4gIHB1YmxpYyByZWFkb25seSBtZXRhUGx1Z2luOiBWUk1NZXRhTG9hZGVyUGx1Z2luO1xuICBwdWJsaWMgcmVhZG9ubHkgbXRvb25NYXRlcmlhbFBsdWdpbjogTVRvb25NYXRlcmlhbExvYWRlclBsdWdpbjtcbiAgcHVibGljIHJlYWRvbmx5IG1hdGVyaWFsc0hEUkVtaXNzaXZlTXVsdGlwbGllclBsdWdpbjogVlJNTWF0ZXJpYWxzSERSRW1pc3NpdmVNdWx0aXBsaWVyTG9hZGVyUGx1Z2luO1xuICBwdWJsaWMgcmVhZG9ubHkgbWF0ZXJpYWxzVjBDb21wYXRQbHVnaW46IFZSTU1hdGVyaWFsc1YwQ29tcGF0UGx1Z2luO1xuICBwdWJsaWMgcmVhZG9ubHkgc3ByaW5nQm9uZVBsdWdpbjogVlJNU3ByaW5nQm9uZUxvYWRlclBsdWdpbjtcbiAgcHVibGljIHJlYWRvbmx5IG5vZGVDb25zdHJhaW50UGx1Z2luOiBWUk1Ob2RlQ29uc3RyYWludExvYWRlclBsdWdpbjtcblxuICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ1ZSTUxvYWRlclBsdWdpbic7XG4gIH1cblxuICBwdWJsaWMgY29uc3RydWN0b3IocGFyc2VyOiBHTFRGUGFyc2VyLCBvcHRpb25zPzogVlJNTG9hZGVyUGx1Z2luT3B0aW9ucykge1xuICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuXG4gICAgY29uc3QgaGVscGVyUm9vdCA9IG9wdGlvbnM/LmhlbHBlclJvb3Q7XG4gICAgY29uc3QgYXV0b1VwZGF0ZUh1bWFuQm9uZXMgPSBvcHRpb25zPy5hdXRvVXBkYXRlSHVtYW5Cb25lcztcblxuICAgIHRoaXMuZXhwcmVzc2lvblBsdWdpbiA9IG9wdGlvbnM/LmV4cHJlc3Npb25QbHVnaW4gPz8gbmV3IFZSTUV4cHJlc3Npb25Mb2FkZXJQbHVnaW4ocGFyc2VyKTtcbiAgICB0aGlzLmZpcnN0UGVyc29uUGx1Z2luID0gb3B0aW9ucz8uZmlyc3RQZXJzb25QbHVnaW4gPz8gbmV3IFZSTUZpcnN0UGVyc29uTG9hZGVyUGx1Z2luKHBhcnNlcik7XG4gICAgdGhpcy5odW1hbm9pZFBsdWdpbiA9XG4gICAgICBvcHRpb25zPy5odW1hbm9pZFBsdWdpbiA/P1xuICAgICAgbmV3IFZSTUh1bWFub2lkTG9hZGVyUGx1Z2luKHBhcnNlciwge1xuICAgICAgICBoZWxwZXJSb290LFxuICAgICAgICBhdXRvVXBkYXRlSHVtYW5Cb25lcyxcbiAgICAgIH0pO1xuICAgIHRoaXMubG9va0F0UGx1Z2luID0gb3B0aW9ucz8ubG9va0F0UGx1Z2luID8/IG5ldyBWUk1Mb29rQXRMb2FkZXJQbHVnaW4ocGFyc2VyLCB7IGhlbHBlclJvb3QgfSk7XG4gICAgdGhpcy5tZXRhUGx1Z2luID0gb3B0aW9ucz8ubWV0YVBsdWdpbiA/PyBuZXcgVlJNTWV0YUxvYWRlclBsdWdpbihwYXJzZXIpO1xuICAgIHRoaXMubXRvb25NYXRlcmlhbFBsdWdpbiA9IG9wdGlvbnM/Lm10b29uTWF0ZXJpYWxQbHVnaW4gPz8gbmV3IE1Ub29uTWF0ZXJpYWxMb2FkZXJQbHVnaW4ocGFyc2VyKTtcbiAgICB0aGlzLm1hdGVyaWFsc0hEUkVtaXNzaXZlTXVsdGlwbGllclBsdWdpbiA9XG4gICAgICBvcHRpb25zPy5tYXRlcmlhbHNIRFJFbWlzc2l2ZU11bHRpcGxpZXJQbHVnaW4gPz8gbmV3IFZSTU1hdGVyaWFsc0hEUkVtaXNzaXZlTXVsdGlwbGllckxvYWRlclBsdWdpbihwYXJzZXIpO1xuICAgIHRoaXMubWF0ZXJpYWxzVjBDb21wYXRQbHVnaW4gPSBvcHRpb25zPy5tYXRlcmlhbHNWMENvbXBhdFBsdWdpbiA/PyBuZXcgVlJNTWF0ZXJpYWxzVjBDb21wYXRQbHVnaW4ocGFyc2VyKTtcblxuICAgIHRoaXMuc3ByaW5nQm9uZVBsdWdpbiA9XG4gICAgICBvcHRpb25zPy5zcHJpbmdCb25lUGx1Z2luID8/XG4gICAgICBuZXcgVlJNU3ByaW5nQm9uZUxvYWRlclBsdWdpbihwYXJzZXIsIHtcbiAgICAgICAgY29sbGlkZXJIZWxwZXJSb290OiBoZWxwZXJSb290LFxuICAgICAgICBqb2ludEhlbHBlclJvb3Q6IGhlbHBlclJvb3QsXG4gICAgICB9KTtcblxuICAgIHRoaXMubm9kZUNvbnN0cmFpbnRQbHVnaW4gPVxuICAgICAgb3B0aW9ucz8ubm9kZUNvbnN0cmFpbnRQbHVnaW4gPz8gbmV3IFZSTU5vZGVDb25zdHJhaW50TG9hZGVyUGx1Z2luKHBhcnNlciwgeyBoZWxwZXJSb290IH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGJlZm9yZVJvb3QoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5tYXRlcmlhbHNWMENvbXBhdFBsdWdpbi5iZWZvcmVSb290KCk7XG4gICAgYXdhaXQgdGhpcy5tdG9vbk1hdGVyaWFsUGx1Z2luLmJlZm9yZVJvb3QoKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsb2FkTWVzaChtZXNoSW5kZXg6IG51bWJlcik6IFByb21pc2U8VEhSRUUuR3JvdXAgfCBUSFJFRS5NZXNoIHwgVEhSRUUuU2tpbm5lZE1lc2g+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5tdG9vbk1hdGVyaWFsUGx1Z2luLmxvYWRNZXNoKG1lc2hJbmRleCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TWF0ZXJpYWxUeXBlKG1hdGVyaWFsSW5kZXg6IG51bWJlcik6IHR5cGVvZiBUSFJFRS5NYXRlcmlhbCB8IG51bGwge1xuICAgIGNvbnN0IG10b29uVHlwZSA9IHRoaXMubXRvb25NYXRlcmlhbFBsdWdpbi5nZXRNYXRlcmlhbFR5cGUobWF0ZXJpYWxJbmRleCk7XG4gICAgaWYgKG10b29uVHlwZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gbXRvb25UeXBlO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGV4dGVuZE1hdGVyaWFsUGFyYW1zKG1hdGVyaWFsSW5kZXg6IG51bWJlciwgbWF0ZXJpYWxQYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pOiBQcm9taXNlPGFueT4ge1xuICAgIGF3YWl0IHRoaXMubWF0ZXJpYWxzSERSRW1pc3NpdmVNdWx0aXBsaWVyUGx1Z2luLmV4dGVuZE1hdGVyaWFsUGFyYW1zKG1hdGVyaWFsSW5kZXgsIG1hdGVyaWFsUGFyYW1zKTtcbiAgICBhd2FpdCB0aGlzLm10b29uTWF0ZXJpYWxQbHVnaW4uZXh0ZW5kTWF0ZXJpYWxQYXJhbXMobWF0ZXJpYWxJbmRleCwgbWF0ZXJpYWxQYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGFmdGVyUm9vdChnbHRmOiBHTFRGKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5tZXRhUGx1Z2luLmFmdGVyUm9vdChnbHRmKTtcbiAgICBhd2FpdCB0aGlzLmh1bWFub2lkUGx1Z2luLmFmdGVyUm9vdChnbHRmKTtcbiAgICBhd2FpdCB0aGlzLmV4cHJlc3Npb25QbHVnaW4uYWZ0ZXJSb290KGdsdGYpO1xuICAgIGF3YWl0IHRoaXMubG9va0F0UGx1Z2luLmFmdGVyUm9vdChnbHRmKTtcbiAgICBhd2FpdCB0aGlzLmZpcnN0UGVyc29uUGx1Z2luLmFmdGVyUm9vdChnbHRmKTtcbiAgICBhd2FpdCB0aGlzLnNwcmluZ0JvbmVQbHVnaW4uYWZ0ZXJSb290KGdsdGYpO1xuICAgIGF3YWl0IHRoaXMubm9kZUNvbnN0cmFpbnRQbHVnaW4uYWZ0ZXJSb290KGdsdGYpO1xuICAgIGF3YWl0IHRoaXMubXRvb25NYXRlcmlhbFBsdWdpbi5hZnRlclJvb3QoZ2x0Zik7XG5cbiAgICBjb25zdCBtZXRhID0gZ2x0Zi51c2VyRGF0YS52cm1NZXRhIGFzIFZSTU1ldGEgfCBudWxsO1xuICAgIGNvbnN0IGh1bWFub2lkID0gZ2x0Zi51c2VyRGF0YS52cm1IdW1hbm9pZCBhcyBWUk1IdW1hbm9pZCB8IG51bGw7XG5cbiAgICAvLyBtZXRhIGFuZCBodW1hbm9pZCBhcmUgcmVxdWlyZWQgdG8gYmUgYSBWUk0uXG4gICAgLy8gRG9uJ3QgY3JlYXRlIFZSTSBpZiB0aGV5IGFyZSBudWxsXG4gICAgaWYgKG1ldGEgJiYgaHVtYW5vaWQpIHtcbiAgICAgIGNvbnN0IHZybSA9IG5ldyBWUk0oe1xuICAgICAgICBzY2VuZTogZ2x0Zi5zY2VuZSxcbiAgICAgICAgZXhwcmVzc2lvbk1hbmFnZXI6IGdsdGYudXNlckRhdGEudnJtRXhwcmVzc2lvbk1hbmFnZXIsXG4gICAgICAgIGZpcnN0UGVyc29uOiBnbHRmLnVzZXJEYXRhLnZybUZpcnN0UGVyc29uLFxuICAgICAgICBodW1hbm9pZCxcbiAgICAgICAgbG9va0F0OiBnbHRmLnVzZXJEYXRhLnZybUxvb2tBdCxcbiAgICAgICAgbWV0YSxcbiAgICAgICAgbWF0ZXJpYWxzOiBnbHRmLnVzZXJEYXRhLnZybU1Ub29uTWF0ZXJpYWxzLFxuICAgICAgICBzcHJpbmdCb25lTWFuYWdlcjogZ2x0Zi51c2VyRGF0YS52cm1TcHJpbmdCb25lTWFuYWdlcixcbiAgICAgICAgbm9kZUNvbnN0cmFpbnRNYW5hZ2VyOiBnbHRmLnVzZXJEYXRhLnZybU5vZGVDb25zdHJhaW50TWFuYWdlcixcbiAgICAgIH0pO1xuXG4gICAgICBnbHRmLnVzZXJEYXRhLnZybSA9IHZybTtcbiAgICB9XG4gIH1cbn1cbiIsIi8vIFNlZTogaHR0cHM6Ly90aHJlZWpzLm9yZy9kb2NzLyNtYW51YWwvZW4vaW50cm9kdWN0aW9uL0hvdy10by1kaXNwb3NlLW9mLW9iamVjdHNcblxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5mdW5jdGlvbiBkaXNwb3NlTWF0ZXJpYWwobWF0ZXJpYWw6IFRIUkVFLk1hdGVyaWFsKTogdm9pZCB7XG4gIE9iamVjdC52YWx1ZXMobWF0ZXJpYWwpLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlPy5pc1RleHR1cmUpIHtcbiAgICAgIGNvbnN0IHRleHR1cmUgPSB2YWx1ZSBhcyBUSFJFRS5UZXh0dXJlO1xuICAgICAgdGV4dHVyZS5kaXNwb3NlKCk7XG4gICAgfVxuICB9KTtcblxuICBpZiAoKG1hdGVyaWFsIGFzIGFueSkuaXNTaGFkZXJNYXRlcmlhbCkge1xuICAgIGNvbnN0IHVuaWZvcm1zOiB7IFt1bmlmb3JtOiBzdHJpbmddOiBUSFJFRS5JVW5pZm9ybTxhbnk+IH0gPSAobWF0ZXJpYWwgYXMgYW55KS51bmlmb3JtcztcbiAgICBpZiAodW5pZm9ybXMpIHtcbiAgICAgIE9iamVjdC52YWx1ZXModW5pZm9ybXMpLmZvckVhY2goKHVuaWZvcm0pID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB1bmlmb3JtLnZhbHVlO1xuICAgICAgICBpZiAodmFsdWU/LmlzVGV4dHVyZSkge1xuICAgICAgICAgIGNvbnN0IHRleHR1cmUgPSB2YWx1ZSBhcyBUSFJFRS5UZXh0dXJlO1xuICAgICAgICAgIHRleHR1cmUuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBtYXRlcmlhbC5kaXNwb3NlKCk7XG59XG5cbmZ1bmN0aW9uIGRpc3Bvc2Uob2JqZWN0M0Q6IFRIUkVFLk9iamVjdDNEKTogdm9pZCB7XG4gIGNvbnN0IGdlb21ldHJ5OiBUSFJFRS5CdWZmZXJHZW9tZXRyeSB8IHVuZGVmaW5lZCA9IChvYmplY3QzRCBhcyBhbnkpLmdlb21ldHJ5O1xuICBpZiAoZ2VvbWV0cnkpIHtcbiAgICBnZW9tZXRyeS5kaXNwb3NlKCk7XG4gIH1cblxuICBjb25zdCBza2VsZXRvbjogVEhSRUUuU2tlbGV0b24gfCB1bmRlZmluZWQgPSAob2JqZWN0M0QgYXMgYW55KS5za2VsZXRvbjtcbiAgaWYgKHNrZWxldG9uKSB7XG4gICAgc2tlbGV0b24uZGlzcG9zZSgpO1xuICB9XG5cbiAgY29uc3QgbWF0ZXJpYWw6IFRIUkVFLk1hdGVyaWFsIHwgVEhSRUUuTWF0ZXJpYWxbXSB8IHVuZGVmaW5lZCA9IChvYmplY3QzRCBhcyBhbnkpLm1hdGVyaWFsO1xuICBpZiAobWF0ZXJpYWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtYXRlcmlhbCkpIHtcbiAgICAgIG1hdGVyaWFsLmZvckVhY2goKG1hdGVyaWFsOiBUSFJFRS5NYXRlcmlhbCkgPT4gZGlzcG9zZU1hdGVyaWFsKG1hdGVyaWFsKSk7XG4gICAgfSBlbHNlIGlmIChtYXRlcmlhbCkge1xuICAgICAgZGlzcG9zZU1hdGVyaWFsKG1hdGVyaWFsKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZXBEaXNwb3NlKG9iamVjdDNEOiBUSFJFRS5PYmplY3QzRCk6IHZvaWQge1xuICBvYmplY3QzRC50cmF2ZXJzZShkaXNwb3NlKTtcbn1cbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuLyoqXG4gKiBUcmF2ZXJzZSBnaXZlbiBvYmplY3QgYW5kIHJlbW92ZSB1bm5lY2Vzc2FyaWx5IGJvdW5kIGpvaW50cyBmcm9tIGV2ZXJ5IGBUSFJFRS5Ta2lubmVkTWVzaGAuXG4gKiBTb21lIGVudmlyb25tZW50cyBsaWtlIG1vYmlsZSBkZXZpY2VzIGhhdmUgYSBsb3dlciBsaW1pdCBvZiBib25lcyBhbmQgbWlnaHQgYmUgdW5hYmxlIHRvIHBlcmZvcm0gbWVzaCBza2lubmluZywgdGhpcyBmdW5jdGlvbiBtaWdodCByZXNvbHZlIHN1Y2ggYW4gaXNzdWUuXG4gKiBBbHNvIHRoaXMgZnVuY3Rpb24gbWlnaHQgZ3JlYXRseSBpbXByb3ZlIHRoZSBwZXJmb3JtYW5jZSBvZiBtZXNoIHNraW5uaW5nLlxuICpcbiAqIEBwYXJhbSByb290IFJvb3Qgb2JqZWN0IHRoYXQgd2lsbCBiZSB0cmF2ZXJzZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVVubmVjZXNzYXJ5Sm9pbnRzKHJvb3Q6IFRIUkVFLk9iamVjdDNEKTogdm9pZCB7XG4gIC8vIHNvbWUgbWVzaGVzIG1pZ2h0IHNoYXJlIGEgc2FtZSBza2luSW5kZXggYXR0cmlidXRlIGFuZCB0aGlzIG1hcCBwcmV2ZW50cyB0byBjb252ZXJ0IHRoZSBhdHRyaWJ1dGUgdHdpY2VcbiAgY29uc3Qgc2tlbGV0b25MaXN0OiBNYXA8VEhSRUUuQnVmZmVyQXR0cmlidXRlLCBUSFJFRS5Ta2VsZXRvbj4gPSBuZXcgTWFwKCk7XG5cbiAgLy8gVHJhdmVyc2UgYW4gZW50aXJlIHRyZWVcbiAgcm9vdC50cmF2ZXJzZSgob2JqKSA9PiB7XG4gICAgaWYgKG9iai50eXBlICE9PSAnU2tpbm5lZE1lc2gnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbWVzaCA9IG9iaiBhcyBUSFJFRS5Ta2lubmVkTWVzaDtcbiAgICBjb25zdCBnZW9tZXRyeSA9IG1lc2guZ2VvbWV0cnk7XG4gICAgY29uc3QgYXR0cmlidXRlID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCdza2luSW5kZXgnKSBhcyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGU7XG5cbiAgICAvLyBsb29rIGZvciBleGlzdGluZyBza2VsZXRvblxuICAgIGxldCBza2VsZXRvbiA9IHNrZWxldG9uTGlzdC5nZXQoYXR0cmlidXRlKTtcblxuICAgIGlmICghc2tlbGV0b24pIHtcbiAgICAgIC8vIGdlbmVyYXRlIHJlZHVjZWQgYm9uZSBsaXN0XG4gICAgICBjb25zdCBib25lczogVEhSRUUuQm9uZVtdID0gW107IC8vIG5ldyBsaXN0IG9mIGJvbmVcbiAgICAgIGNvbnN0IGJvbmVJbnZlcnNlczogVEhSRUUuTWF0cml4NFtdID0gW107IC8vIG5ldyBsaXN0IG9mIGJvbmVJbnZlcnNlXG4gICAgICBjb25zdCBib25lSW5kZXhNYXA6IHsgW2luZGV4OiBudW1iZXJdOiBudW1iZXIgfSA9IHt9OyAvLyBtYXAgb2Ygb2xkIGJvbmUgaW5kZXggdnMuIG5ldyBib25lIGluZGV4XG5cbiAgICAgIC8vIGNyZWF0ZSBhIG5ldyBib25lIG1hcFxuICAgICAgY29uc3QgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXkgYXMgbnVtYmVyW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gYXJyYXlbaV07XG5cbiAgICAgICAgLy8gbmV3IHNraW5JbmRleCBidWZmZXJcbiAgICAgICAgaWYgKGJvbmVJbmRleE1hcFtpbmRleF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGJvbmVJbmRleE1hcFtpbmRleF0gPSBib25lcy5sZW5ndGg7XG4gICAgICAgICAgYm9uZXMucHVzaChtZXNoLnNrZWxldG9uLmJvbmVzW2luZGV4XSk7XG4gICAgICAgICAgYm9uZUludmVyc2VzLnB1c2gobWVzaC5za2VsZXRvbi5ib25lSW52ZXJzZXNbaW5kZXhdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFycmF5W2ldID0gYm9uZUluZGV4TWFwW2luZGV4XTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVwbGFjZSB3aXRoIG5ldyBpbmRpY2VzXG4gICAgICBhdHRyaWJ1dGUuY29weUFycmF5KGFycmF5KTtcbiAgICAgIGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cbiAgICAgIC8vIHJlcGxhY2Ugd2l0aCBuZXcgaW5kaWNlc1xuICAgICAgc2tlbGV0b24gPSBuZXcgVEhSRUUuU2tlbGV0b24oYm9uZXMsIGJvbmVJbnZlcnNlcyk7XG4gICAgICBza2VsZXRvbkxpc3Quc2V0KGF0dHJpYnV0ZSwgc2tlbGV0b24pO1xuICAgIH1cblxuICAgIG1lc2guYmluZChza2VsZXRvbiwgbmV3IFRIUkVFLk1hdHJpeDQoKSk7XG4gICAgLy8gICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eIHRyYW5zZm9ybSBvZiBtZXNoZXMgc2hvdWxkIGJlIGlnbm9yZWRcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCNza2luc1xuICB9KTtcbn1cbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IEJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJ3RocmVlJztcblxuLyoqXG4gKiBUcmF2ZXJzZSBnaXZlbiBvYmplY3QgYW5kIHJlbW92ZSB1bm5lY2Vzc2FyeSB2ZXJ0aWNlcyBmcm9tIGV2ZXJ5IEJ1ZmZlckdlb21ldHJpZXMuXG4gKiBUaGlzIG9ubHkgcHJvY2Vzc2VzIGJ1ZmZlciBnZW9tZXRyaWVzIHdpdGggaW5kZXggYnVmZmVyLlxuICpcbiAqIFRocmVlLmpzIGNyZWF0ZXMgbW9ycGggdGV4dHVyZXMgZm9yIGVhY2ggZ2VvbWV0cmllcyBhbmQgaXQgc29tZXRpbWVzIGNvbnN1bWVzIHVubmVjZXNzYXJ5IGFtb3VudCBvZiBWUkFNIGZvciBjZXJ0YWluIG1vZGVscy5cbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBvcHRpbWl6ZSBnZW9tZXRyaWVzIHRvIHJlZHVjZSB0aGUgc2l6ZSBvZiBtb3JwaCB0ZXh0dXJlLlxuICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2lzc3Vlcy8yMzA5NVxuICpcbiAqIEBwYXJhbSByb290IFJvb3Qgb2JqZWN0IHRoYXQgd2lsbCBiZSB0cmF2ZXJzZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVVubmVjZXNzYXJ5VmVydGljZXMocm9vdDogVEhSRUUuT2JqZWN0M0QpOiB2b2lkIHtcbiAgY29uc3QgZ2VvbWV0cnlNYXAgPSBuZXcgTWFwPFRIUkVFLkJ1ZmZlckdlb21ldHJ5LCBUSFJFRS5CdWZmZXJHZW9tZXRyeT4oKTtcblxuICAvLyBUcmF2ZXJzZSBhbiBlbnRpcmUgdHJlZVxuICByb290LnRyYXZlcnNlKChvYmopID0+IHtcbiAgICBpZiAoIShvYmogYXMgYW55KS5pc01lc2gpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBtZXNoID0gb2JqIGFzIFRIUkVFLk1lc2g7XG4gICAgY29uc3QgZ2VvbWV0cnkgPSBtZXNoLmdlb21ldHJ5O1xuXG4gICAgLy8gaWYgdGhlIGdlb21ldHJ5IGRvZXMgbm90IGhhdmUgYW4gaW5kZXggYnVmZmVyIGl0IGRvZXMgbm90IG5lZWQgdG8gcHJvY2Vzc1xuICAgIGNvbnN0IG9yaWdpYW5sSW5kZXggPSBnZW9tZXRyeS5pbmRleDtcbiAgICBpZiAob3JpZ2lhbmxJbmRleCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gc2tpcCBhbHJlYWR5IHByb2Nlc3NlZCBnZW9tZXRyeVxuICAgIGNvbnN0IG5ld0dlb21ldHJ5QWxyZWFkeUV4aXN0ZWQgPSBnZW9tZXRyeU1hcC5nZXQoZ2VvbWV0cnkpO1xuICAgIGlmIChuZXdHZW9tZXRyeUFscmVhZHlFeGlzdGVkICE9IG51bGwpIHtcbiAgICAgIG1lc2guZ2VvbWV0cnkgPSBuZXdHZW9tZXRyeUFscmVhZHlFeGlzdGVkO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld0dlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG5cbiAgICAvLyBjb3B5IHZhcmlvdXMgcHJvcGVydGllc1xuICAgIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9ibG9iLzFhMjQxZWYxMDA0ODc3MGQ1NmUwNmQ2Y2Q2YTY0Yzc2Y2M3MjBmOTUvc3JjL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMjTDEwMTFcbiAgICBuZXdHZW9tZXRyeS5uYW1lID0gZ2VvbWV0cnkubmFtZTtcblxuICAgIG5ld0dlb21ldHJ5Lm1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmU7XG5cbiAgICBnZW9tZXRyeS5ncm91cHMuZm9yRWFjaCgoZ3JvdXApID0+IHtcbiAgICAgIG5ld0dlb21ldHJ5LmFkZEdyb3VwKGdyb3VwLnN0YXJ0LCBncm91cC5jb3VudCwgZ3JvdXAubWF0ZXJpYWxJbmRleCk7XG4gICAgfSk7XG5cbiAgICBuZXdHZW9tZXRyeS5ib3VuZGluZ0JveCA9IGdlb21ldHJ5LmJvdW5kaW5nQm94Py5jbG9uZSgpID8/IG51bGw7XG4gICAgbmV3R2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPSBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZT8uY2xvbmUoKSA/PyBudWxsO1xuXG4gICAgbmV3R2VvbWV0cnkuc2V0RHJhd1JhbmdlKGdlb21ldHJ5LmRyYXdSYW5nZS5zdGFydCwgZ2VvbWV0cnkuZHJhd1JhbmdlLmNvdW50KTtcblxuICAgIG5ld0dlb21ldHJ5LnVzZXJEYXRhID0gZ2VvbWV0cnkudXNlckRhdGE7XG5cbiAgICAvLyBzZXQgdG8gZ2VvbWV0cnlNYXBcbiAgICBnZW9tZXRyeU1hcC5zZXQoZ2VvbWV0cnksIG5ld0dlb21ldHJ5KTtcblxuICAgIC8qKiBmcm9tIG9yaWdpbmFsIGluZGV4IHRvIG5ldyBpbmRleCAqL1xuICAgIGNvbnN0IG9yaWdpbmFsSW5kZXhOZXdJbmRleE1hcDogbnVtYmVyW10gPSBbXTtcblxuICAgIC8qKiBmcm9tIG5ldyBpbmRleCB0byBvcmlnaW5hbCBpbmRleCAqL1xuICAgIGNvbnN0IG5ld0luZGV4T3JpZ2luYWxJbmRleE1hcDogbnVtYmVyW10gPSBbXTtcblxuICAgIC8vIHJlb3JnYW5pemUgaW5kaWNlc1xuICAgIHtcbiAgICAgIGNvbnN0IG9yaWdpbmFsSW5kZXhBcnJheSA9IG9yaWdpYW5sSW5kZXguYXJyYXk7XG4gICAgICBjb25zdCBuZXdJbmRleEFycmF5ID0gbmV3IChvcmlnaW5hbEluZGV4QXJyYXkuY29uc3RydWN0b3IgYXMgYW55KShvcmlnaW5hbEluZGV4QXJyYXkubGVuZ3RoKTtcblxuICAgICAgbGV0IGluZGV4SGVhZCA9IDA7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JpZ2luYWxJbmRleEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsSW5kZXggPSBvcmlnaW5hbEluZGV4QXJyYXlbaV07XG5cbiAgICAgICAgbGV0IG5ld0luZGV4ID0gb3JpZ2luYWxJbmRleE5ld0luZGV4TWFwW29yaWdpbmFsSW5kZXhdO1xuICAgICAgICBpZiAobmV3SW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgIG9yaWdpbmFsSW5kZXhOZXdJbmRleE1hcFtvcmlnaW5hbEluZGV4XSA9IGluZGV4SGVhZDtcbiAgICAgICAgICBuZXdJbmRleE9yaWdpbmFsSW5kZXhNYXBbaW5kZXhIZWFkXSA9IG9yaWdpbmFsSW5kZXg7XG4gICAgICAgICAgbmV3SW5kZXggPSBpbmRleEhlYWQ7XG4gICAgICAgICAgaW5kZXhIZWFkKys7XG4gICAgICAgIH1cbiAgICAgICAgbmV3SW5kZXhBcnJheVtpXSA9IG5ld0luZGV4O1xuICAgICAgfVxuXG4gICAgICBuZXdHZW9tZXRyeS5zZXRJbmRleChuZXcgQnVmZmVyQXR0cmlidXRlKG5ld0luZGV4QXJyYXksIDEsIGZhbHNlKSk7XG4gICAgfVxuXG4gICAgLy8gcmVvcmdhbml6ZSBhdHRyaWJ1dGVzXG4gICAgT2JqZWN0LmtleXMoZ2VvbWV0cnkuYXR0cmlidXRlcykuZm9yRWFjaCgoYXR0cmlidXRlTmFtZSkgPT4ge1xuICAgICAgY29uc3Qgb3JpZ2luYWxBdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdIGFzIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZTtcblxuICAgICAgaWYgKChvcmlnaW5hbEF0dHJpYnV0ZSBhcyBhbnkpLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmVVbm5lY2Vzc2FyeVZlcnRpY2VzOiBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG9yaWdpbmFsQXR0cmlidXRlQXJyYXkgPSBvcmlnaW5hbEF0dHJpYnV0ZS5hcnJheTtcbiAgICAgIGNvbnN0IHsgaXRlbVNpemUsIG5vcm1hbGl6ZWQgfSA9IG9yaWdpbmFsQXR0cmlidXRlO1xuXG4gICAgICBjb25zdCBuZXdBdHRyaWJ1dGVBcnJheSA9IG5ldyAob3JpZ2luYWxBdHRyaWJ1dGVBcnJheS5jb25zdHJ1Y3RvciBhcyBhbnkpKFxuICAgICAgICBuZXdJbmRleE9yaWdpbmFsSW5kZXhNYXAubGVuZ3RoICogaXRlbVNpemUsXG4gICAgICApO1xuXG4gICAgICBuZXdJbmRleE9yaWdpbmFsSW5kZXhNYXAuZm9yRWFjaCgob3JpZ2luYWxJbmRleCwgaSkgPT4ge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGl0ZW1TaXplOyBqKyspIHtcbiAgICAgICAgICBuZXdBdHRyaWJ1dGVBcnJheVtpICogaXRlbVNpemUgKyBqXSA9IG9yaWdpbmFsQXR0cmlidXRlQXJyYXlbb3JpZ2luYWxJbmRleCAqIGl0ZW1TaXplICsgal07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBuZXdHZW9tZXRyeS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgbmV3IEJ1ZmZlckF0dHJpYnV0ZShuZXdBdHRyaWJ1dGVBcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQpKTtcbiAgICB9KTtcblxuICAgIC8vIHJlb3JnYW5pemUgbW9ycGggYXR0cmlidXRlc1xuICAgIC8qKiBUcnVlIGlmIGFsbCBtb3JwaHMgYXJlIHplcm8uICovXG4gICAgbGV0IGlzTnVsbE1vcnBoID0gdHJ1ZTtcblxuICAgIE9iamVjdC5rZXlzKGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcykuZm9yRWFjaCgoYXR0cmlidXRlTmFtZSkgPT4ge1xuICAgICAgbmV3R2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdID0gW107XG5cbiAgICAgIGNvbnN0IG1vcnBocyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTtcbiAgICAgIGZvciAobGV0IGlNb3JwaCA9IDA7IGlNb3JwaCA8IG1vcnBocy5sZW5ndGg7IGlNb3JwaCsrKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsQXR0cmlidXRlID0gbW9ycGhzW2lNb3JwaF0gYXMgVEhSRUUuQnVmZmVyQXR0cmlidXRlO1xuXG4gICAgICAgIGlmICgob3JpZ2luYWxBdHRyaWJ1dGUgYXMgYW55KS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmVVbm5lY2Vzc2FyeVZlcnRpY2VzOiBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvcmlnaW5hbEF0dHJpYnV0ZUFycmF5ID0gb3JpZ2luYWxBdHRyaWJ1dGUuYXJyYXk7XG4gICAgICAgIGNvbnN0IHsgaXRlbVNpemUsIG5vcm1hbGl6ZWQgfSA9IG9yaWdpbmFsQXR0cmlidXRlO1xuXG4gICAgICAgIGNvbnN0IG5ld0F0dHJpYnV0ZUFycmF5ID0gbmV3IChvcmlnaW5hbEF0dHJpYnV0ZUFycmF5LmNvbnN0cnVjdG9yIGFzIGFueSkoXG4gICAgICAgICAgbmV3SW5kZXhPcmlnaW5hbEluZGV4TWFwLmxlbmd0aCAqIGl0ZW1TaXplLFxuICAgICAgICApO1xuXG4gICAgICAgIG5ld0luZGV4T3JpZ2luYWxJbmRleE1hcC5mb3JFYWNoKChvcmlnaW5hbEluZGV4LCBpKSA9PiB7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpdGVtU2l6ZTsgaisrKSB7XG4gICAgICAgICAgICBuZXdBdHRyaWJ1dGVBcnJheVtpICogaXRlbVNpemUgKyBqXSA9IG9yaWdpbmFsQXR0cmlidXRlQXJyYXlbb3JpZ2luYWxJbmRleCAqIGl0ZW1TaXplICsgal07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpc051bGxNb3JwaCA9IGlzTnVsbE1vcnBoICYmIG5ld0F0dHJpYnV0ZUFycmF5LmV2ZXJ5KCh2OiBudW1iZXIpID0+IHYgPT09IDApO1xuXG4gICAgICAgIG5ld0dlb21ldHJ5Lm1vcnBoQXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXVtpTW9ycGhdID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZShcbiAgICAgICAgICBuZXdBdHRyaWJ1dGVBcnJheSxcbiAgICAgICAgICBpdGVtU2l6ZSxcbiAgICAgICAgICBub3JtYWxpemVkLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gSWYgYWxsIG1vcnBocyBhcmUgemVybywganVzdCBkaXNjYXJkIHRoZSBtb3JwaCBhdHRyaWJ1dGVzIHdlJ3ZlIGp1c3QgbWFkZVxuICAgIGlmIChpc051bGxNb3JwaCkge1xuICAgICAgbmV3R2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzID0ge307XG4gICAgfVxuXG4gICAgbWVzaC5nZW9tZXRyeSA9IG5ld0dlb21ldHJ5O1xuICB9KTtcblxuICBBcnJheS5mcm9tKGdlb21ldHJ5TWFwLmtleXMoKSkuZm9yRWFjaCgob3JpZ2luYWxHZW9tZXRyeSkgPT4ge1xuICAgIG9yaWdpbmFsR2VvbWV0cnkuZGlzcG9zZSgpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7IFZSTSB9IGZyb20gJy4uL1ZSTSc7XG5cbi8qKlxuICogSWYgdGhlIGdpdmVuIFZSTSBpcyBWUk0wLjAsIHJvdGF0ZSB0aGUgYHZybS5zY2VuZWAgYnkgMTgwIGRlZ3JlZXMgYXJvdW5kIHRoZSBZIGF4aXMuXG4gKlxuICogQHBhcmFtIHZybSBUaGUgdGFyZ2V0IFZSTVxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlVlJNMCh2cm06IFZSTSk6IHZvaWQge1xuICBpZiAodnJtLm1ldGE/Lm1ldGFWZXJzaW9uID09PSAnMCcpIHtcbiAgICB2cm0uc2NlbmUucm90YXRpb24ueSA9IE1hdGguUEk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGRlZXBEaXNwb3NlIH0gZnJvbSAnLi9kZWVwRGlzcG9zZSc7XG5pbXBvcnQgeyByZW1vdmVVbm5lY2Vzc2FyeUpvaW50cyB9IGZyb20gJy4vcmVtb3ZlVW5uZWNlc3NhcnlKb2ludHMnO1xuaW1wb3J0IHsgcmVtb3ZlVW5uZWNlc3NhcnlWZXJ0aWNlcyB9IGZyb20gJy4vcmVtb3ZlVW5uZWNlc3NhcnlWZXJ0aWNlcyc7XG5pbXBvcnQgeyByb3RhdGVWUk0wIH0gZnJvbSAnLi9yb3RhdGVWUk0wJztcblxuZXhwb3J0IGNsYXNzIFZSTVV0aWxzIHtcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyB0aGlzIGNsYXNzIGlzIG5vdCBtZWFudCB0byBiZSBpbnN0YW50aWF0ZWRcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZGVlcERpc3Bvc2UgPSBkZWVwRGlzcG9zZTtcbiAgcHVibGljIHN0YXRpYyByZW1vdmVVbm5lY2Vzc2FyeUpvaW50cyA9IHJlbW92ZVVubmVjZXNzYXJ5Sm9pbnRzO1xuICBwdWJsaWMgc3RhdGljIHJlbW92ZVVubmVjZXNzYXJ5VmVydGljZXMgPSByZW1vdmVVbm5lY2Vzc2FyeVZlcnRpY2VzO1xuICBwdWJsaWMgc3RhdGljIHJvdGF0ZVZSTTAgPSByb3RhdGVWUk0wO1xufVxuIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsIl92M0EkNCIsIl92M0IkMiIsInF1YXRJbnZlcnRDb21wYXQiLCJfdjNBJDMiLCJfdjNBJDIiLCJfcXVhdEEkMyIsIlBPU1NJQkxFX1NQRUNfVkVSU0lPTlMkMiIsIl9xdWF0QSQyIiwiX3F1YXRCJDIiLCJfdjNBJDEiLCJfdjNCJDEiLCJfdjNBIiwiX3YzQiIsIl92M0MiLCJfcXVhdEEkMSIsIl9xdWF0QiQxIiwiX3F1YXRDIiwiX3F1YXRBIiwiX3F1YXRCIiwiUE9TU0lCTEVfU1BFQ19WRVJTSU9OUyQxIiwiUE9TU0lCTEVfU1BFQ19WRVJTSU9OUyIsInRyYXZlcnNlQW5jZXN0b3JzRnJvbVJvb3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sYUFBYSxTQUFTLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQUksbUJBQW1CLEdBQUc7QUFDOUIsUUFBUSxJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssT0FBTyxFQUFFO0FBQzVDLFlBQVksT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ2pELFNBQVM7QUFDVCxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxPQUFPLEVBQUU7QUFDakQsWUFBWSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDL0IsU0FBUztBQUNULGFBQWE7QUFDYixZQUFZLE9BQU8sR0FBRyxDQUFDO0FBQ3ZCLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQUksb0JBQW9CLEdBQUc7QUFDL0IsUUFBUSxJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssT0FBTyxFQUFFO0FBQzdDLFlBQVksT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ2pELFNBQVM7QUFDVCxhQUFhLElBQUksSUFBSSxDQUFDLGNBQWMsS0FBSyxPQUFPLEVBQUU7QUFDbEQsWUFBWSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDL0IsU0FBUztBQUNULGFBQWE7QUFDYixZQUFZLE9BQU8sR0FBRyxDQUFDO0FBQ3ZCLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQUksbUJBQW1CLEdBQUc7QUFDOUIsUUFBUSxJQUFJLElBQUksQ0FBQyxhQUFh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LENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQ25HLFFBQVEsU0FBUyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQ3RHLFFBQVEsU0FBUyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFO0FBQ3RILFFBQVEsSUFBSSxDQUFDLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFVBQVUsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlFLEtBQUssQ0FBQyxDQUFDO0FBQ1A7O0FDMUhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLFdBQVMsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUU7QUFDdEQsSUFBSSxTQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLEtBQUssWUFBWSxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLFVBQVUsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxD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QUUsU0FBUyxFQUFFO0FBQ3RELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUN0RyxRQUFRLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRTtBQUN0SCxRQUFRLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RSxLQUFLLENBQUMsQ0FBQztBQUNQLENBQUM7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QUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7QUFDck0sUUFBUSxNQUFNLGFBQWEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQyxVQUFVLE1BQU0sSUFBSSxJQUFJLEVBQUUsS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxJQUFJLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7QUFDM0ssUUFBUSxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLGtCQUFrQixDQUFDLGVBQWUsTUFBTSxJQUFJLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkksUUFBUSxNQUFNLHFCQUFxQixHQUFHLGFBQWEsSUFBSSxhQUFhLENBQUM7QUFDckUsUUFBUSxNQUFNLHVCQUF1QixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ3JGLFFBQVEsTUFBTSxRQUFRLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsa0JBQWtCLENBQUMsVUFBVSxNQUFNLElBQUksSUFBSSxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztBQUNySyxRQUFRLE1BQU0sU0FBUyxHQUFHLGFBQWEs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LENBQUMsQ0FBQztBQUNoSSxRQUFRLElBQUksZ0JBQWdCLElBQUksSUFBSSxFQUFFO0FBQ3RDLFlBQVksT0FBTyxFQUFFLENBQUM7QUFDdEIsU0FBUztBQUNULFFBQVEsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxnQkFBZ0IsS0FBSyxJQUFJLElBQUksZ0JBQWdCLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLEVBQUUsS0FBSyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLGdCQUFnQixLQUFLLElBQUksSUFBSSxnQkFBZ0IsS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUNsUyxRQUFRLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsZ0JBQWdCLEtBQUssSUFBSSxJQUFJLGdCQUFnQixLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxnQkFBZ0IsS0FBSyxJQUFJLElBQUksZ0JBQWdCLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLEVBQUUsS0FBSyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDalMsUUFBUSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FB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RSxVQUFVLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRTtBQUN0RCxJQUFJLFNBQVMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sS0FBSyxZQUFZLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsVUFBVSxPQUFPLEVBQUUsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUNoSCxJQUFJLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxFQUFFLFVBQVUsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUMvRCxRQUFRLFNBQVMsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7QUFDbkcsUUFBUSxTQUFTLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7QUFDdEcsUUFBUSxTQUFTLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUU7QUFDdEgsUUFBUSxJQUFJLENBQUMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsVUFBVSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUUsS0FBSyxD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QVEsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7QUFDeEQsUUFBUSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3RDLFlBQVksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDM0MsWUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNyRSxZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM1RSxZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxRSxZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1RSxTQUFTO0FBQ1QsUUFBUSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3JDLFlBQVksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDM0MsWUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4RSxZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZFLFNBQVM7QUFDVCxRQUFRLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pHLFFBQVEsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BELFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QixRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUIsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDbEYsUUFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUYsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7QUFDekMsS0FBSztBQUNMLElBQUksV0FBVyxHQUFHO0FBQ2xCLFFBQVEsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNyQyxZQUFZLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDcEMsWUFBWSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNoRCxZQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQy9ELFNBQVM7QUFDVCxRQUFRLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDckMsWUFBWSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3BDLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDaEUsWUFBWSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNsRSxTQUFTO0FBQ1QsUUFBUSxJQUFJLENBQUMs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UyxFQUFFLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxTQUFTLE1BQU0sSUFBSSxJQUFJLEVBQUUsS0FBSyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRztBQUNyRixZQUFZLFNBQVMsRUFBRSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsU0FBUyxNQUFNLElBQUksSUFBSSxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUc7QUFDckYsWUFBWSxZQUFZLEVBQUUsQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLFlBQVksTUFBTSxJQUFJLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHO0FBQzNGLFlBQVksVUFBVSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxVQUFVLE1BQU0sSUFBSSxJQUFJLEVBQUUsS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sSUFBSSxJQUFJLEVBQUUsS0FBSyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7QUFDNUssWUFBWSxTQUFTLEVBQUUsQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLFNBQVMsTUFBTSxJQUFJLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHO0FBQ3JGLFNBQVMsQ0FBQztBQUNWLFFBQVEsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7QUFDN0MsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxZQUFZLEdBQUc7QUFDbkI7QUFDQSxRQUFRLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RCxRQUFRLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxD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LFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0FBQ3RELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUN0RyxRQUFRLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRTtBQUN0SCxRQUFRLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RSxLQUFLLENB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
